,id,question,desired_answer,student_answer,score_me,score_other,score_avg,student_amr
0,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.,4,3,3.5,"# ::snt High risk problems are address in the prototype program to make sure that the program is feasible.  A prototype may also be used to show a company that the software can be possibly programmed.
(m / multi-sentence
      :snt1 (a / address-02
            :ARG0 (p / program
                  :mod (p2 / prototype))
            :ARG1 (p3 / problem
                  :mod (r / risk-01
                        :ARG1-of (h / high-02)))
            :purpose (e / ensure-01
                  :ARG0 p
                  :ARG1 (f / feasible
                        :domain (p4 / program))))
      :snt2 (p5 / possible-01
            :ARG1 (u / use-01
                  :ARG1 (p6 / prototype)
                  :ARG2 (s / show-01
                        :ARG0 p6
                        :ARG1 (p7 / possible-01
                              :ARG1 (p8 / program-01
                                    :ARG1 (s2 / software)))
                        :ARG2 (c / company))
                  :mod (a2 / also))))"
1,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.,5,5,5,"# ::snt To simulate portions of the desired final product with a quick and easy program that does a small specific job. It is a way to help see what the problem is and how you may solve it in the final project.
(m / multi-sentence
      :snt1 (s / simulate-01
            :ARG1 (p / portion
                  :part-of (p2 / product
                        :mod (f / final)
                        :ARG1-of (d / desire-01)))
            :instrument (p3 / program
                  :ARG1-of (q / quick-02)
                  :ARG1-of (e / easy-05)
                  :ARG0-of (d2 / do-02
                        :ARG1 (j / job
                              :mod (s2 / small)
                              :ARG1-of (s3 / specific-02)))))
      :snt2 (w / way
            :manner-of (h / help-01
                  :ARG1 (s4 / see-01
                        :ARG1 (a / and
                              :op1 (p4 / problem)
                              :op2 (p5 / possible-01
                                    :ARG1 (s5 / solve-01
                                          :ARG0 (y / you)
                                          :ARG1 p4
                                          :location (p6 / project
                                                :mod f))))))))"
2,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.,5,3,4,"# ::snt A prototype program simulates the behaviors of portions of the desired software product to allow for error checking.
(s / simulate-01
      :ARG0 (p / program
            :mod (p2 / prototype))
      :ARG1 (b / behave-01
            :ARG0 (p3 / portion
                  :part-of (p4 / product
                        :mod (s2 / software)
                        :ARG1-of (d / desire-01))))
      :purpose (a / allow-01
            :ARG0 p
            :ARG1 (c / check-01
                  :ARG1 (e / error))))"
3,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.",5,5,5,"# ::snt Defined in the Specification phase a prototype stimulates the behavior of portions of the desired software product.  Meaning, the role of a prototype is a temporary solution until the program itself is refined to be used extensively in problem solving.
(m / multi-sentence
      :snt1 (s / stimulate-01
            :ARG0 (p / prototype)
            :ARG1 (b / behave-01
                  :ARG0 (p2 / portion
                        :part-of (p3 / product
                              :mod (s2 / software)
                              :ARG1-of (d / desire-01))))
            :ARG1-of (d2 / define-01
                  :time (p4 / phase
                        :mod (s3 / specific-02))))
      :snt2 (m2 / mean-01
            :ARG2 (s4 / solve-01
                  :ARG0 (p5 / prototype)
                  :ARG1 (r / role)
                  :duration (t / temporary)
                  :time (u / until
                        :op1 (r2 / refine-01
                              :ARG1 (p6 / program)
                              :purpose (u2 / use-01
                                    :ARG1 p6
                                    :ARG2 s4
                                    :ARG1 (p7 / problem))
                              :manner (e / extensive))))))"
4,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.,3,3,3,"# ::snt It is used to let the users have a first idea of the completed program and allow the clients to evaluate the program. This can generate much feedback including software specifications and project estimations of the total project.
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (ii / it)
            :ARG2 (a / and
                  :op1 (l / let-01
                        :ARG0 ii
                        :ARG1 (h / have-03
                              :ARG0 (p / person
                                    :ARG0-of (u2 / use-01))
                              :ARG1 (ii2 / idea
                                    :topic (p2 / program
                                          :ARG1-of (c / complete-01))
                                    :ord (o / ordinal-entity
                                          :value 1))))
                  :op2 (a2 / allow-01
                        :ARG0 ii
                        :ARG1 (e / evaluate-01
                              :ARG0 (c2 / client)
                              :ARG1 (p3 / program)))))
      :snt2 (p4 / possible-01
            :ARG1 (g / generate-01
                  :ARG0 (t / this)
                  :ARG1 (f / feedback
                        :quant (m2 / much)
                        :ARG2-of (ii3 / include-01
                              :ARG1 (a3 / and
                                    :op1 (s / specification
                                          :mod (s2 / software))
                                    :op2 (e2 / estimate-01
                                          :ARG1 (p5 / project
                                                :mod (t2 / total)))))))))"
5,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To find problem and errors in a program before it is finalized,2,2,2,"# ::snt To find problem and errors in a program before it is finalized
(f / find-01
      :ARG1 (a / and
            :op1 (p / problem)
            :op2 (e / err-01))
      :location (p2 / program)
      :time (b / before
            :op1 (f2 / finalize-01
                  :ARG1 p2)))"
6,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. ",3,2,2.5,"# ::snt To address major issues in the creation of the program. There is no way to account for all possible bugs in the program, but it is possible to prove the program is tangible. 
(m / multi-sentence
      :snt1 (a / address-02
            :ARG1 (ii / issue-02
                  :ARG1-of (m2 / major-02)
                  :topic (c / create-01
                        :ARG1 (p / program))))
      :snt2 (c2 / contrast-01
            :ARG1 (w / way
                  :polarity -
                  :manner-of (a2 / account-01
                        :ARG1 (b / bug
                              :mod (a3 / all)
                              :ARG1-of (p2 / possible-01)
                              :location (p3 / program))))
            :ARG2 (p4 / possible-01
                  :ARG1 (p5 / prove-01
                        :ARG1 (t / tangible
                              :domain p3)))))"
7,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,you can break the whole program into prototype programs to simulate parts of the final program,5,5,5,"# ::snt you can break the whole program into prototype programs to simulate parts of the final program
(p / possible-01
      :ARG1 (b / break-01
            :ARG0 (y / you)
            :ARG1 (p2 / program
                  :mod (w / whole))
            :ARG2 (p3 / program
                  :mod (p4 / prototype))
            :purpose (s / simulate-01
                  :ARG0 y
                  :ARG1 (p5 / part
                        :part-of (p6 / program
                              :mod (f / final))))))"
8,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,#NAME?,5,2,3.5,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
9,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,Simulating the behavior of only a portion of the desired software product.,5,5,5,"# ::snt Simulating the behavior of only a portion of the desired software product.
(s / simulate-01
      :ARG1 (b / behave-01
            :ARG0 (p / portion
                  :mod (o / only)
                  :part-of (p2 / product
                        :mod (s2 / software)
                        :ARG1-of (d / desire-01)))))"
10,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A program that stimulates the behavior of portions of the desired software product.,5,5,5,"# ::snt A program that stimulates the behavior of portions of the desired software product.
(p / program
      :ARG0-of (s / stimulate-01
            :ARG1 (b / behave-01
                  :ARG0 (p2 / portion
                        :part-of (p3 / product
                              :mod (s2 / software)
                              :ARG1-of (d / desire-01))))))"
11,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A program that simulates the behavior of portions of the desired software product.,5,5,5,"# ::snt A program that simulates the behavior of portions of the desired software product.
(p / program
      :ARG0-of (s / simulate-01
            :ARG1 (b / behave-01
                  :ARG0 (p2 / portion
                        :part-of (p3 / product
                              :mod (s2 / software)
                              :ARG1-of (d / desire-01))))))"
12,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To lay out the basics and give you a starting point in the actual problem solving.,2,2,2,"# ::snt To lay out the basics and give you a starting point in the actual problem solving.
(a / and
      :op1 (l / lay-out-03
            :ARG1 (b / basic))
      :op2 (g / give-01
            :ARG1 (p / point
                  :ARG0-of (s / start-01
                        :ARG1 (s2 / solve-01
                              :ARG1 (p2 / problem)
                              :ARG1-of (a2 / actual-02))))
            :ARG2 (y / you)))"
13,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To simulate problem solving for parts of the problem,4,5,4.5,"# ::snt To simulate problem solving for parts of the problem
(s / simulate-01
      :ARG1 (s2 / solve-01
            :ARG1 (p / problem)
            :ARG2 (p2 / part
                  :part-of (p3 / problem))))"
14,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.,2,2,2,"# ::snt A prototype program provides a basic groundwork from which to further enhance and improve a solution to a problem.
(p / provide-01
      :ARG0 (p2 / program
            :mod (p3 / prototype))
      :ARG1 (g / groundwork
            :mod (b / basic)
            :source-of (a / and
                  :op1 (e / enhance-01
                        :ARG1 (s / solve-01
                              :ARG1 (p4 / problem))
                        :degree (f / further))
                  :op2 (ii / improve-01
                        :ARG1 s))))"
15,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.",4,5,4.5,"# ::snt A prototype program is a part of the Specification phase of Software Problem Solvin.  It's employed to illustrate how the key problem or problems will be solved in a program, and sometimes serves as a base program to expand upon.
(m / multi-sentence
      :snt1 (p / program
            :mod (p2 / prototype)
            :part-of (p3 / phase
                  :mod (s / specific-02)
                  :part-of (p4 / program
                        :name (n / name
                              :op1 ""Software""
                              :op2 ""Problem""
                              :op3 ""Solvin""))))
      :snt2 (a / and
            :op1 (e / employ-01
                  :ARG1 (ii / it)
                  :ARG2 (ii2 / illustrate-01
                        :ARG0 ii
                        :ARG1 (t / thing
                              :manner-of (s2 / solve-01
                                    :ARG1 (o / or
                                          :op1 (p5 / problem
                                                :ARG1-of (k / key-02))
                                          :op2 (p6 / problem))
                                    :location (p7 / program)))))
            :op2 (s3 / serve-01
                  :ARG1 ii
                  :ARG2 (p8 / program
                        :mod (b / base)
                        :ARG1-of (e2 / expand-01))
                  :frequency (s4 / sometimes))))"
16,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,Program that simulates the behavior of portions of the desired software product,5,5,5,"# ::snt Program that simulates the behavior of portions of the desired software product
(p / program
      :ARG0-of (s / simulate-01
            :ARG1 (b / behave-01
                  :ARG0 (p2 / portion
                        :part-of (p3 / product
                              :mod (s2 / software)
                              :ARG1-of (d / desire-01))))))"
17,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,it provides a limited proof of concept to verify with the client before actually programming the whole application.,2,2,2,"# ::snt it provides a limited proof of concept to verify with the client before actually programming the whole application.
(p / provide-01
      :ARG0 (ii / it)
      :ARG1 (p2 / prove-01
            :ARG1 (c / concept)
            :ARG1-of (l / limit-01))
      :purpose (v / verify-01
            :ARG0 ii
            :ARG2 (c2 / client)
            :time (b / before
                  :op1 (p3 / program-01
                        :ARG1 (a / application
                              :mod (w / whole))
                        :ARG1-of (a2 / actual-02)))))"
18,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,It tests the main function of the program while leaving out the finer details.,2,2,2,"# ::snt It tests the main function of the program while leaving out the finer details.
(c / contrast-01
      :ARG1 (t / test-01
            :ARG0 (ii / it)
            :ARG1 (f / function-01
                  :ARG1 (p / program)
                  :mod (m / main)))
      :ARG2 (l / leave-out-03
            :ARG0 ii
            :ARG1 (d / detail
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f2 / fine-03
                              :ARG1 d)
                        :ARG3 (m2 / more)))))"
19,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.,3,2,2.5,"# ::snt To get early feedback from users in early stages of development.  To show users a first idea of what the program will do/look like.  To make sure the program will meet requirements before intense programming begins.
(m / multi-sentence
      :snt1 (g / get-01
            :ARG1 (f / feedback
                  :mod (e / early))
            :ARG2 (p / person
                  :ARG0-of (u / use-01))
            :time (s / stage
                  :mod (e2 / early)
                  :mod (d / develop-02)))
      :snt2 (s2 / show-01
            :ARG1 (ii / idea
                  :mod (f2 / first)
                  :topic (s3 / slash
                        :op1 (d2 / do-02
                              :ARG0 (p2 / program))
                        :op2 (l / look-02
                              :ARG0 p2)))
            :ARG2 p
            :ARG0-of (u2 / use-01))
      :snt3 (e3 / ensure-01
            :ARG1 (m2 / meet-01
                  :ARG0 (p3 / program)
                  :ARG1 (t / thing
                        :ARG1-of (r / require-01)))
            :time (b / before
                  :op1 (b2 / begin-01
                        :ARG1 (p4 / program-01
                              :ARG1-of (ii2 / intense-02))))))"
20,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,5,5,5,"# ::snt it simulates the behavior of portions of the desired software product
(s / simulate-01
      :ARG0 (ii / it)
      :ARG1 (b / behave-01
            :ARG0 (p / portion
                  :part-of (p2 / product
                        :mod (s2 / software)
                        :ARG1-of (d / desire-01)))))"
21,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,It simulates the behavior of portions of the desired software product.,5,5,5,"# ::snt It simulates the behavior of portions of the desired software product.
(s / simulate-01
      :ARG0 (ii / it)
      :ARG1 (b / behave-01
            :ARG0 (p / portion
                  :part-of (p2 / product
                        :mod (s2 / software)
                        :ARG1-of (d / desire-01)))))"
22,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,A prototype program is used in problem solving to collect data for the problem.,1,2,1.5,"# ::snt A prototype program is used in problem solving to collect data for the problem.
(u / use-01
      :ARG1 (p / program
            :mod (p2 / prototype))
      :ARG2 (s / solve-01
            :ARG1 (p3 / problem))
      :purpose (c / collect-01
            :ARG1 (d / data)
            :purpose (p4 / problem)))"
23,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,To ease the understanding of problem under discussion and to ease the understanding of the program itself,2,3,2.5,"# ::snt To ease the understanding of problem under discussion and to ease the understanding of the program itself
(a / and
      :op1 (e / ease-02
            :ARG1 (u / understand-01
                  :ARG1 (p / problem
                        :ARG1-of (d / discuss-01))))
      :op2 (e2 / ease-02
            :ARG1 (u2 / understand-01
                  :ARG1 (p2 / program))))"
24,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,it simulates the behavior of portions of the desired software product,5,5,5,"# ::snt it simulates the behavior of portions of the desired software product
(s / simulate-01
      :ARG0 (ii / it)
      :ARG1 (b / behave-01
            :ARG0 (p / portion
                  :part-of (p2 / product
                        :mod (s2 / software)
                        :ARG1-of (d / desire-01)))))"
25,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,The role of a prototype program is to help spot key problems that may arise during the actual programing.,2,2,2,"# ::snt The role of a prototype program is to help spot key problems that may arise during the actual programing.
(r / role
      :poss (p / program
            :mod (p2 / prototype))
      :domain (h / help-01
            :ARG0 p
            :ARG1 (s / spot-01
                  :ARG1 (p3 / problem
                        :ARG1-of (k / key-02)
                        :ARG1-of (a / arise-02
                              :ARG1-of (p4 / possible-01)
                              :time (p5 / program
                                    :ARG1-of (a2 / actual-02)))))))"
26,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.",4,2,3,"# ::snt the prototype program gives a general idea of what the end product will do,   without the time and effort to write out the entire program.
(g / give-01
      :ARG0 (p / program
            :mod (p2 / prototype))
      :ARG1 (ii / idea
            :ARG1-of (g2 / general-02)
            :topic (t / thing
                  :ARG1-of (d / do-02
                        :ARG0 (p3 / product
                              :mod (e / end)))))
      :manner (a / and
            :polarity -
            :op1 (t2 / time)
            :op2 (e2 / effort-01)
            :purpose (w / write-out-05
                  :ARG1 (p4 / program
                        :mod (e3 / entire)))))"
27,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,to show that a certain part of the program works as it is supposed to,4,2,3,"# ::snt to show that a certain part of the program works as it is supposed to
(h / have-purpose-91
      :ARG2 (s / show-01
            :ARG1 (w / work-09
                  :ARG1 (p / part
                        :part-of (p2 / program)
                        :mod (c / certain))
                  :ARG1-of (s2 / suppose-02))))"
28,1.1,What is the role of a prototype program in problem solving?,To simulate the behaviour of portions of the desired software product.,"Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. ",3,2,2.5,"# ::snt Prototype programming is an approach to programming that enables one to take an organized approach to developing an effective program with minimal errors and a strategic pattern when solving a problem. i.e. book gave an example of a costumer withdrawing money from a bank, the approach that was taking on a pseudo code level during the OOA/Design lvl before proceeding into creating a solution. 
(m / multi-sentence
      :snt1 (a / approach-02
            :ARG1 (p / program-01
                  :mod (p2 / prototype))
            :ARG0-of (e / enable-01
                  :ARG1 (t / take-01
                        :ARG0 (o / one)
                        :ARG1 (a2 / approach-02
                              :ARG1 (d / develop-02
                                    :ARG1 (p3 / program-01
                                          :ARG1-of (e2 / effective-04))
                                    :manner (a3 / and
                                          :op1 (e3 / error
                                                :mod (m2 / minimal))
                                          :op2 (p4 / pattern
                                                :mod (s / strategy)))
                                    :time (s2 / solve-01
                                          :ARG1 (p5 / problem)))
                              :ARG1-of (o2 / organize-01)))))
      :snt2 (g / give-01
            :ARG0 (b / book)
            :ARG1 (e4 / exemplify-01
                  :ARG1 (w / withdraw-01
                        :ARG0 (p6 / person
                              :ARG0-of (c / costume-01))
                        :ARG1 (m3 / money)
                        :ARG2 (b2 / bank))
                  :ARG1-of (m4 / mean-01
                        :ARG2 a2
                        :ARG1 (t2 / take-01
                              :ARG1 (l / level
                                    :mod (c2 / code
                                          :mod (p7 / pseudo)))
                              :time (b3 / before
                                    :op1 (p8 / proceed-01
                                          :ARG1 p6
                                          :ARG2 (c3 / create-01
                                                :ARG1 s2))))))))"
29,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.,5,2,3.5,"# ::snt Refining and possibly the design if the testing phase reveals problems in the design. Production can be affected if the program is unworkable in its current form which will lead to a later production time than originally estimated. Also affects coding because after testing you may need to rewrite the code for the program to remove errors.
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / refine-01)
            :op2 (p / possible-01
                  :ARG1 (d / design-01))
            :condition (r2 / reveal-01
                  :ARG0 (p2 / phase
                        :mod (t / test-01))
                  :ARG1 (p3 / problem
                        :topic (d2 / design-01))))
      :snt2 (p4 / possible-01
            :ARG1 (a2 / affect-01
                  :ARG1 (p5 / produce-01)
                  :condition (p6 / possible-01
                        :polarity -
                        :ARG1 (w / work-01
                              :ARG1 (p7 / program)
                              :manner (f / form
                                    :time (c / current)
                                    :poss p7)
                              :ARG0-of (l / lead-03
                                    :ARG2 (t2 / time
                                          :mod (p8 / produce-01)
                                          :time (a3 / after
                                                :op1 (e / estimate-01
                                                      :mod (o / original)))))))))
      :snt2 (a4 / affect-01
            :ARG0 p4
            :ARG1 (c2 / code-01))
      :mod (a5 / also)
      :ARG1-of (c3 / cause-01
            :ARG0 p6
            :ARG1 (n / need-01
                  :ARG0 (y / you)
                  :ARG1 (r3 / rewrite-01
                        :ARG0 y
                        :ARG1 (c4 / code-01
                              :purpose (p9 / program))
                        :purpose (r4 / remove-01
                              :ARG0 y
                              :ARG1 (e2 / error)))
                  :time a3
                  :op1 (t3 / test-01))))"
30,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),The implementation phase and the maintenance phase are effected,3,5,4,"# ::snt The implementation phase and the maintenance phase are effected
(a / affect-01
      :ARG1 (a2 / and
            :op1 (p / phase
                  :mod (ii / implement-01))
            :op2 (p2 / phase
                  :mod (m / maintain-01))))"
31,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Verification, coding, refining the solution and maintenance are all influenced by the testing stage.",4,5,4.5,"# ::snt Verification, coding, refining the solution and maintenance are all influenced by the testing stage.
(ii / influence-01
      :ARG0 (s / stage
            :mod (t / test-01))
      :ARG1 (a / and
            :op1 (v / verify-01)
            :op2 (c / code-01)
            :op3 (r / refine-01
                  :ARG1 (s2 / solution))
            :op4 (m / maintain-01)
            :mod (a2 / all)))"
32,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.",2,4,3,"# ::snt In RUP the stages in the software life cycle are influenced by the testing stage is:  Elaboration phase- refined progject vision, iterative devilopment of core system, development of system requirements, more accurate time and cost estimates.  Construction phase- iterative development of remaining system.  Transition phase-testing and deployment of the system.
(ii / influence-01
      :ARG0 (s / stage
            :mod (t / test-01))
      :ARG1 (s2 / stage
            :part-of (c / cycle
                  :mod (l / life)
                  :mod (s3 / software)))
      :ARG2 (a / and
            :op1 (e / envision-01
                  :ARG1 (p / project)
                  :ARG1-of (r / refine-01)
                  :mod (p2 / phase
                        :mod (e2 / elaborate-01)))
            :op2 (d / develop-02
                  :ARG1 (r2 / requirement
                        :mod (s4 / system)))
            :op3 (d2 / develop-02
                  :ARG1 (e3 / estimate-01
                        :ARG1 (a2 / and
                              :op1 (t2 / time)
                              :op2 (c2 / cost-01))
                        :ARG1-of (h / have-degree-91
                              :ARG2 (a3 / accurate)
                              :ARG3 (m / more))))
            :op4 (d3 / develop-02
                  :ARG1 (s5 / system
                        :ARG1-of (r3 / remain-01))
                  :mod (p3 / phase
                        :mod (c3 / construct-01))
                  :mod (ii2 / iterative))
            :op5 (a4 / and
                  :op1 (t3 / test-01
                        :mod (t4 / transition-01))
                  :op2 (d4 / deploy-01
                        :ARG1 s5)))
      :location (p4 / product
            :name (n / name
                  :op1 ""RUP"")))"
33,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining the solution, Production and Maintenance are all influenced by the Testing stage. ",3,3,3,"# ::snt Refining the solution, Production and Maintenance are all influenced by the Testing stage. 
(ii / influence-01
      :ARG0 (s / stage
            :mod (t / test-01))
      :ARG1 (a / and
            :op1 (r / refine-01
                  :ARG1 (s2 / solution))
            :op2 (p / produce-01)
            :op3 (m / maintain-01)
            :mod (a2 / all)))"
34,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, and Transition are all affected by testing",2,2,2,"# ::snt Elaboration, Construction, and Transition are all affected by testing
(a / affect-01
      :ARG0 (t / test-01)
      :ARG1 (a2 / and
            :op1 (e / elaborate-01)
            :op2 (c / construct-01)
            :op3 (t2 / transition-01)
            :mod (a3 / all)))"
35,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, Production, Maintenance",3,4,3.5,"# ::snt Refining, Production, Maintenance
(a / and
      :op1 (r / refine-01)
      :op2 (p / produce-01)
      :op3 (m / maintain-01))"
36,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining the solution,3,5,4,"# ::snt Refining the solution
(r / refine-01
      :ARG1 (t / thing
            :ARG2-of (s / solve-01)))"
37,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),#NAME?,3,1,2,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
38,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining and Coding,5,5,5,"# ::snt Refining and Coding
(a / and
      :op1 (r / refine-01)
      :op2 (c / code-01))"
39,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The second half of the Elaboration phase, Construction phase, and the Transition phase. ",2,3,2.5,"# ::snt The second half of the Elaboration phase, Construction phase, and the Transition phase. 
(h / half
      :ord (o / ordinal-entity
            :value 2)
      :part-of (a / and
            :op1 (p / phase
                  :mod (e / elaborate-01))
            :op2 (p2 / phase
                  :mod (c / construct-01))
            :op3 (p3 / phase
                  :mod (t / transition-01))))"
40,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The refining step, the production step, and the maintenance stage.  ",3,4,3.5,"# ::snt The refining step, the production step, and the maintenance stage.  
(a / and
      :op1 (s / step
            :mod (r / refine-01))
      :op2 (s2 / step
            :mod (p / produce-01))
      :op3 (s3 / stage
            :mod (m / maintain-01)))"
41,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, Construction, Transition",2,2,2,"# ::snt Elaboration, Construction, Transition
(a / and
      :op1 (e / elaborate-01)
      :op2 (c / construct-01)
      :op3 (t / transition-01))"
42,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Refining.,3,3,3,"# ::snt Refining.
(r / refine-01)"
43,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.",2,1,1.5,"# ::snt The testing stage has a direct influence on the final version of a program, being as it is the debugging and finalization of a software revision.
(ii / influence-01
      :ARG0 (s / stage
            :mod (t / test-01))
      :ARG1 (v / version
            :mod (f / final)
            :poss (p / program))
      :ARG1-of (d / direct-02)
      :ARG1-of (c / cause-01
            :ARG0 (a / and
                  :op1 (d2 / debug-01
                        :ARG1 (r / revise-01
                              :ARG1 (s2 / software)))
                  :op2 (f2 / finalize-01
                        :ARG1 r))))"
44,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.",5,5,5,"# ::snt Directly: Refining, coding.  Because Refining is right before the Testing Phase and Coding is right after the Testing Phase.  Indirectly: Production, Maintenance.  Because Refining occurs before these last two stages in the Software Life Cycle.
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / refine-01)
            :op2 (c / code-01)
            :ARG1-of (d / direct-02))
      :snt2 (c2 / cause-01
            :ARG0 (a2 / and
                  :op1 (r2 / refine-01
                        :time (b / before
                              :op1 (p / phase
                                    :mod (t / test-01)))
                        :mod (r3 / right))
                  :op2 (c3 / code-01
                        :time (a3 / after
                              :op1 p)
                        :mod (r4 / right))))
      :snt3 (c4 / cause-01
            :ARG0 (a4 / and
                  :op1 (p2 / produce-01)
                  :op2 (m2 / maintain-01))
            :ARG1 (d2 / direct-02
                  :polarity -))
      :snt4 (c5 / cause-01
            :ARG0 r2
            :time (b2 / before
                  :op1 (s / stage
                        :quant 2
                        :mod (l / last)
                        :mod (t2 / this)
                        :part-of (c6 / cycle
                              :mod (l2 / life)
                              :mod (s2 / software))))))"
45,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Testing, refining, production, and maintenance.",3,4,3.5,"# ::snt Testing, refining, production, and maintenance.
(a / and
      :op1 (t / test-01)
      :op2 (r / refine-01)
      :op3 (p / produce-01)
      :op4 (m / maintain-01))"
46,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. ",2,1,1.5,"# ::snt Depending on how the work is done, Testing is spread throughout the  process as to prevent errors from showing up later on due to lack of foresight. 
(s / spread-03
      :ARG1 (t / test-01)
      :ARG2 (p / process-02)
      :purpose (p2 / prevent-01
            :ARG0 t
            :ARG1 (s2 / show-up-02
                  :ARG1 (e / error)
                  :time (a / after
                        :op1 (n / now))
                  :ARG1-of (c / cause-01
                        :ARG0 (l / lack-01
                              :ARG1 (f / foresee-01)))))
      :ARG1-of (d / depend-01
            :ARG2 (t2 / thing
                  :manner-of (d2 / do-02
                        :ARG1 (w / work-01)))))"
47,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Elaboration, construction, and transition.",2,3,2.5,"# ::snt Elaboration, construction, and transition.
(a / and
      :op1 (e / elaborate-01)
      :op2 (c / construct-01)
      :op3 (t / transition-01))"
48,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.",2,1,1.5,"# ::snt All stages are influenced except setting the program requirements.  If a test fails, it can change the whole design, implementation, etc of a program as well as the final outcome.
(m / multi-sentence
      :snt1 (ii / influence-01
            :ARG1 (s / stage
                  :mod (a / all)
                  :ARG2-of (e / except-01
                        :ARG1 (s2 / set-02
                              :ARG1 (r / require-01
                                    :ARG1 (p / program))))))
      :snt2 (p2 / possible-01
            :ARG1 (c / change-01
                  :ARG0 (f / fail-01
                        :ARG1 (t / test-01))
                  :ARG1 (a2 / and
                        :op1 (d / design-01
                              :ARG1 (p3 / program)
                              :mod (w / whole))
                        :op2 (ii2 / implement-01
                              :ARG1 p3)
                        :op3 (e2 / et-cetera)
                        :op4 (o / outcome
                              :mod (f2 / final))))
            :condition f))"
49,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining, production, and maintenance",3,3,3,"# ::snt Refining, production, and maintenance
(a / and
      :op1 (r / refine-01)
      :op2 (p / produce-01)
      :op3 (m / maintain-01))"
50,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),coding and refining,5,5,5,"# ::snt coding and refining
(a / and
      :op1 (c / code-01)
      :op2 (r / refine-01))"
51,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"refining, production, maintenance.",3,4,3.5,"# ::snt refining, production, maintenance.
(a / and
      :op1 (r / refine-01)
      :op2 (p / produce-01)
      :op3 (m / maintain-01))"
52,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Removing logical errors, testing for valid data, random data and actual data.",2,0,1,"# ::snt Removing logical errors, testing for valid data, random data and actual data.
(a / and
      :op1 (r / remove-01
            :ARG1 (e / error
                  :mod (l / logic)))
      :op2 (t / test-01
            :ARG1 (a2 / and
                  :op1 (d / data
                        :ARG1-of (v / valid-02))
                  :op2 (d2 / data
                        :ARG1-of (r2 / random-02))
                  :op3 (d3 / data
                        :ARG1-of (a3 / actual-02)))))"
53,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance,1,4,2.5,"# ::snt 1- specification 2- design 3- risk analysis 4- verification 5- coding 6- testing 7- refining 8- production 9- maintenance
(a / and
      :op1 (t / thing
            :ARG1-of (s / specify-01))
      :op2 (t2 / thing
            :ARG1-of (d / design-01))
      :op3 (a2 / analyze-01
            :ARG1 (r / risk-01))
      :op4 (v / verify-01)
      :op5 (c / code-01)
      :op6 (t3 / test-01)
      :op7 (r2 / refine-01)
      :op8 (p / produce-01)
      :op9 (m / maintain-01))"
54,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"Refining stage, Production stage, and Maintenance stage.  ",3,4,3.5,"# ::snt Refining stage, Production stage, and Maintenance stage.  
(a / and
      :op1 (s / stage
            :purpose (r / refine-01))
      :op2 (s2 / stage
            :purpose (p / produce-01))
      :op3 (s3 / stage
            :purpose (m / maintain-01)))"
55,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.,2,2,2,"# ::snt Testing could affect all parts of the life cycle; it could make you go back   to specification if it does not test well.
(a / and
      :op1 (p / possible-01
            :ARG1 (a2 / affect-01
                  :ARG0 (t / test-01)
                  :ARG1 (p2 / part
                        :part-of (c / cycle-02
                              :ARG1 (l / life))
                        :mod (a3 / all))))
      :op2 (p3 / possible-01
            :ARG1 (m / make-02
                  :ARG0 (t2 / test-01)
                  :ARG1 (g / go-back-19
                        :ARG1 (y / you)
                        :ARG2 (s / specification))
                  :condition (t3 / test-01
                        :polarity -
                        :ARG0 t2
                        :ARG1-of (w / well-09)))))"
56,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),coding,3,3,3,"# ::snt coding
(c / code-01)"
57,1.2,What stages in the software life cycle are influenced by the testing stage?,The testing stage can influence both the coding stage (phase 5) and the solution refinement stage (phase 7),"The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output ",1,2,1.5,"# ::snt The Individual components and steps such as  analysis, design, and implementing code  as well as the entire system are tested for execution of the requirements identified during the analysis stage. i.e. Main output 
(t / test-01
      :ARG1 (a / and
            :op1 (c / component
                  :ARG1-of (ii / individual-02))
            :op2 (s / step
                  :example (a2 / and
                        :op1 (a3 / analyze-01)
                        :op2 (d / design-01)
                        :op3 (ii2 / implement-01
                              :ARG1 (c2 / code))))
            :op3 (s2 / system
                  :mod (e / entire)))
      :ARG2 (e2 / execute-01
            :ARG1 (t2 / thing
                  :ARG1-of (r / require-01)
                  :ARG1-of (ii3 / identify-01
                        :time (s3 / stage
                              :mod (a4 / analyze-01)))))
      :ARG1-of (m / mean-01
            :ARG2 (o / output
                  :mod (m2 / main))))"
58,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.",4,5,4.5,"# ::snt Modularability, the ability to reuse parts of the program later in another program sometimes with completely different goals for the program. Also it makes it easier to debug code by dividing up the code into classes that each do a specific job and when the program fails at one job you only have one class to debug. Good for security purposes because it allows you to let someone use a program which sorts lists without having to give them access to the source code. ALso allows you to use inheritance and polymorphism.
(m / multi-sentence
      :snt1 (m2 / modularity
            :ARG1-of (m3 / mean-01
                  :ARG2 (p / possible-01
                        :ARG1 (r / reuse-01
                              :ARG1 (p2 / part
                                    :part-of (p3 / program))
                              :time (a / after)
                              :location (p4 / program
                                    :mod (a2 / another)
                                    :ARG0-of (h / have-03
                                          :ARG1 (g / goal
                                                :ARG1-of (d / differ-02
                                                      :ARG1-of (c / complete-02)))))))))
      :snt2 (a3 / and
            :op1 (m4 / make-02
                  :ARG0 (ii / it)
                  :ARG1 (e / easy-05
                        :ARG1 (d2 / debug-01
                              :ARG1 (c2 / code))
                        :ARG2-of (h2 / have-degree-91
                              :ARG1 d2
                              :ARG3 (m5 / more)
                              :ARG4 (a4 / and
                                    :op1 (d3 / divide-up-05
                                          :ARG1 (c3 / class
                                                :ARG0-of (d4 / do-02
                                                      :ARG1 (j / job
                                                            :ARG1-of (s / specific-02)))
                                                :mod (e2 / each)))
                                    :op2 h
                                    :ARG0 (y / you)
                                    :ARG1 (c4 / class
                                          :quant 1
                                          :ARG1-of (d5 / debug-01))
                                    :mod (o / only))
                              :time (f / fail-01
                                    :ARG1 (p5 / program
                                          :mod (o2 / one))))))
            :mod (a5 / also))
      :snt3 (c5 / cause-01
            :ARG0 (a6 / allow-01
                  :ARG0 ii)
            :ARG1 (l / let-01
                  :ARG0 y
                  :ARG1 (u / use-01
                        :ARG0 (s2 / someone)
                        :ARG1 (p6 / program
                              :ARG0-of (s3 / sort-01
                                    :ARG1 (l2 / list)))
                        :manner (o3 / obligate-01
                              :polarity -)))))"
59,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.",5,5,5,"# ::snt This type of programming is more flexible, making it easier to add and modify the program.  It is also a type of a fail safe program, you check each individual module.  This eliminates redundant code and makes the program easier to read for other programmers.  When debugging the program it is easier to track down the source of a problem within a module rather than a 2 million line program.
(m / multi-sentence
      :snt1 (h / have-degree-91
            :ARG1 (p / program-01
                  :mod (t / type
                        :mod (t2 / this)))
            :ARG2 (f / flexible)
            :ARG3 (m2 / more)
            :ARG0-of (m3 / make-02
                  :ARG1 (a / and
                        :op1 (a2 / add-02
                              :ARG1 (p2 / program))
                        :op2 (m4 / modify-01
                              :ARG1 p2))
                  :ARG2-of (h2 / have-degree-91
                        :ARG1 a
                        :ARG3 (m5 / more))))
      :snt2 (c / check-01
            :ARG0 (y / you)
            :ARG1 (m6 / module
                  :mod (ii / individual)
                  :mod (e / each))
            :mod (a3 / also))
      :snt3 (a4 / and
            :op1 (e2 / eliminate-01
                  :ARG0 (t3 / this)
                  :ARG1 (c2 / code
                        :ARG1-of (r / redundant-02)))
            :op2 (m7 / make-02
                  :ARG0 (t4 / this)
                  :ARG1 (e3 / easy-05
                        :ARG1 (r2 / read-01
                              :ARG0 (p3 / person
                                    :ARG0-of (p4 / program-01)
                                    :mod (o / other)))
                        :ARG2 r2
                        :ARG0 p3
                        :ARG1 p4)
                  :ARG2-of (h3 / have-degree-91
                        :ARG1 r2
                        :ARG3 (m8 / more))))
      :snt3 (h4 / have-degree-91
            :ARG1 (t5 / track-down-02
                  :ARG1 (s / source-02
                        :ARG1 (p5 / problem)
                        :location (m9 / module)))
            :ARG2 (e4 / easy-05)
            :ARG3 (m10 / more)
            :ARG4 (d / debug-01)))"
60,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.,3,4,3.5,"# ::snt The main advantages to object-oriented programming are that existing classes can be reused and program maintenance and verification are easier.
(a / advantage-01
      :ARG1 (p / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :ARG2 (a2 / and
            :op1 (p2 / possible-01
                  :ARG1 (r / reuse-01
                        :ARG1 (c / class
                              :ARG1-of (e / exist-01))))
            :op2 (h / have-degree-91
                  :ARG1 (a3 / and
                        :op1 (m / maintain-01
                              :ARG1 (p3 / program))
                        :op2 (v / verify-01
                              :ARG1 p3)))
            :ARG2 (e2 / easy-05
                  :ARG1 a3)
            :ARG3 (m2 / more))
      :mod (m3 / main))"
61,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.,2,3,2.5,"# ::snt The advantages is that OOP allows us to build classes of objects.  Three principles that make up OOP are:  Encapsulation- Objects combine data and operations.  Inheritance- Classes can inherit properties from other classes.  Polymorphism- Objects can determine appropriate operations at execution time.
(m / multi-sentence
      :snt1 (a / advantage-01
            :ARG2 (a2 / allow-01
                  :ARG0 (o / operate-01
                        :mod (o2 / original))
                  :ARG1 (b / build-01
                        :ARG0 (w / we)
                        :ARG1 (c / class
                              :consist-of (o3 / object)))))
      :snt2 (p / principle
            :quant 3
            :ARG0-of (m2 / make-up-07
                  :ARG1 (o4 / operate-01))
            :domain (a3 / and
                  :op1 (e / encapsulate-01)
                  :op2 (c2 / combine-01
                        :ARG0 (o5 / object)
                        :ARG1 (a4 / and
                              :op1 (d / data)
                              :op2 (o6 / operate-01)))))
      :snt2 (p2 / possible-01
            :ARG1 (ii / inherit-01
                  :ARG0 (c3 / class
                        :mod (o7 / other))
                  :ARG1 (p3 / property)))
      :snt3 (p4 / possible-01
            :ARG1 (d2 / determine-01
                  :ARG0 (o8 / object)
                  :ARG1 (o9 / operate-01
                        :ARG1-of (a5 / appropriate-02))
                  :time (e2 / execute-01))
            :mod (p5 / polymorphism)))"
62,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.,3,4,3.5,"# ::snt Some advantages are existing classes can be reused and program maintenance and verification are easier to accomplish.
(a / advantage-01
      :ARG2 (a2 / and
            :op1 (p / possible-01
                  :ARG1 (r / reuse-01
                        :ARG1 (c / class
                              :ARG1-of (e / exist-01))))
            :op2 (h / have-degree-91
                  :ARG1 (a3 / accomplish-01
                        :ARG1 (a4 / and
                              :op1 (m / maintain-01
                                    :ARG1 (p2 / program))
                              :op2 (v / verify-01
                                    :ARG1 p2)))
                  :ARG2 (e2 / easy-05
                        :ARG1 a3)
                  :ARG3 (m2 / more)))
      :mod (s / some))"
63,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.,1,1,1,"# ::snt Object oriented programming allows programmers to use an object with classes that can be changed and manipulated while not affecting the entire object at once. The classes all hold attrubutes that affect the object.
(m / multi-sentence
      :snt1 (a / allow-01
            :ARG0 (p / program-01
                  :ARG1-of (o / orient-01
                        :ARG2 (o2 / object)))
            :ARG1 (u / use-01
                  :ARG0 (p2 / person
                        :ARG0-of p))
            :ARG1 (o3 / object)
            :ARG2 (c / class
                  :ARG1-of (c2 / change-01
                        :ARG1-of (p3 / possible-01))
                  :ARG1-of (m2 / manipulate-01
                        :ARG1-of p3)))
      :concession (a2 / affect-01
            :polarity -
            :ARG0 (c3 / class
                  :ARG1 (o4 / object
                        :mod (e / entire))
                  :mod (a3 / at-once)))
      :snt2 (h / hold-01
            :ARG0 (c4 / class
                  :mod (a4 / all))
            :ARG1 (a5 / attribute
                  :ARG0-of (a6 / affect-01
                        :ARG1 o4))))"
64,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.",4,4,4,"# ::snt Reusable components, Extensibility, Maintainability, it reduces large problems into smaller more manageable problems.
(a / and
      :op1 (c / component
            :ARG1-of (r / reuse-01
                  :ARG1-of (p / possible-01)))
      :op2 (e / extend-01)
      :op3 (m / maintain-01
            :ARG1-of (p2 / possible-01))
      :op4 (r2 / reduce-01
            :ARG0 (ii / it)
            :ARG1 (p3 / problem
                  :mod (l / large))
            :ARG2 (p4 / problem
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m2 / more)
                        :ARG4 (m3 / manage-01
                              :ARG1-of (p5 / possible-01))))))"
65,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time,2,3,2.5,"# ::snt Encapsulation-objects combine data and operations Inheritance- classes can inherit properties from other classes Polymorphism- Objects can determine appropriate operations at execution time
(m / multi-sentence
      :snt1 (c / combine-01
            :ARG0 (o / object
                  :ARG0-of (e / encapsulate-01))
            :ARG1 (a / and
                  :op1 (d / data)
                  :op2 (o2 / operate-01)))
      :snt2 (p / possible-01
            :ARG1 (ii / inherit-01
                  :ARG0 (c2 / class)
                  :ARG1 (p2 / property)
                  :ARG2 (c3 / class
                        :mod (o3 / other))))
      :snt3 (p3 / possible-01
            :ARG1 (d2 / determine-01
                  :ARG0 (o4 / object)
                  :ARG1 (o5 / operate-01
                        :ARG1-of (a2 / appropriate-02))
                  :time (e2 / execute-01
                        :ARG1 o4))))"
66,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,#NAME?,3,3,3,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
67,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Re-usability  and ease of maintenance,3,5,4,"# ::snt Re-usability  and ease of maintenance
(a / and
      :op1 (r / reusable-02)
      :op2 (e / easy-05
            :ARG1 (m / maintain-01)))"
68,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. ",5,5,5,"# ::snt One of the main advantages is you can hide inner details a technique known by encapsulation. Objects combine the data and operations but you cannot see how it works.   Another advantage is you can reuse classes that have been defined earlier in the program, a method known as inheritance.   Finally another advantage is objects can determine appropriate operations at execution time a technique known as polymorphism. 
(m / multi-sentence
      :snt1 (ii / include-91
            :ARG1 (p / possible-01
                  :ARG1 (h / hide-01
                        :ARG0 (y / you)
                        :ARG1 (d / detail
                              :mod (ii2 / inner))
                        :ARG1-of (k / know-02
                              :ARG2 (e / encapsulate-01))))
            :ARG2 (a / advantage
                  :mod (m2 / main)))
      :snt2 (c / contrast-01
            :ARG1 (c2 / combine-01
                  :ARG0 (o / object)
                  :ARG1 (a2 / and
                        :op1 (d2 / data)
                        :op2 (o2 / operate-01)))
            :ARG2 (p2 / possible-01
                  :polarity -
                  :ARG1 (s / see-01
                        :ARG0 y
                        :ARG1 (t / thing
                              :manner-of (w / work-09
                                    :ARG1 o2)))))
      :snt2 (a3 / advantage-01
            :mod (a4 / another)
            :domain (p3 / possible-01
                  :ARG1 (r / reuse-01
                        :ARG0 (y2 / you)
                        :ARG1 (c3 / class
                              :ARG1-of (d3 / define-01
                                    :time (b / before
                                          :op1 (p4 / program))))
                        :ARG1-of (k2 / know-02
                              :ARG2 (ii3 / inherit-01)))))
      :snt3 (a5 / advantage
            :mod (a6 / another)
            :domain p3
            :ARG1 (d4 / determine-01
                  :ARG0 (o3 / object)
                  :ARG1 (o4 / operate-01
                        :ARG1-of (a7 / appropriate-02))
                  :time (e2 / execute-01)
                  :ARG1-of (k3 / know-02
                        :ARG2 (p5 / polymorphism))))
      :mod (f / final))"
69,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be reused, and program maintenance and verification are easier.",3,4,3.5,"# ::snt Existing classes can be reused, and program maintenance and verification are easier.
(a / and
      :op1 (p / possible-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / class
                        :ARG1-of (e / exist-01))))
      :op2 (h / have-degree-91
            :ARG1 (a2 / and
                  :op1 (m / maintain-01
                        :ARG1 (p2 / program))
                  :op2 (v / verify-01
                        :ARG1 p2))
            :ARG2 (e2 / easy-05
                  :ARG1 a2)
            :ARG3 (m2 / more)))"
70,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Using different modules allows for easier debugging,2,2,2,"# ::snt Using different modules allows for easier debugging
(a / allow-01
      :ARG0 (u / use-01
            :ARG1 (m / module
                  :ARG1-of (d / differ-02)))
      :ARG1 (d2 / debug-01
            :ARG1-of (h / have-degree-91
                  :ARG2 (e / easy-05
                        :ARG1 d2)
                  :ARG3 (m2 / more))))"
71,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Data encapsulation concept,the use of functions or methods to manipulate data.",3,4,3.5,"# ::snt Data encapsulation concept,the use of functions or methods to manipulate data.
(a / and
      :op1 (c / concept
            :topic (e / encapsulate-01
                  :ARG1 (d / data)))
      :op2 (u / use-01
            :ARG1 (o / or
                  :op1 (f / function)
                  :op2 (m / method))
            :ARG2 (m2 / manipulate-01
                  :ARG1 (d2 / data))))"
72,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.",5,4,4.5,"# ::snt Modular, reusable code, allowing faster deployment of solutions, and a more general view of a solution.
(c / code
      :mod (m / modular)
      :ARG1-of (r / reuse-01
            :ARG1-of (p / possible-01))
      :ARG0-of (a / allow-01
            :ARG1 (a2 / and
                  :op1 (d / deploy-01
                        :ARG1 (s / solution)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (f / fast-02
                                    :ARG1 d)
                              :ARG3 (m2 / more)))
                  :op2 (v / view-02
                        :ARG1 s
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (g / general-02
                                    :ARG1 v)
                              :ARG3 (m3 / more))))))"
73,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.",5,5,5,"# ::snt Coding and Debugging programs are usually easier, as either the compiler will specify the object that is working incorrectly, or the function an object was assigned to will be easier to identify.  The code itself also looks more organized and is easier to read and will help to avoid redundant coding.  Post-programming maintenance is also easier.  Also, modules can be reused several times in other programs without too much hassle.   Abstraction is the art of breaking down one big problem into smaller, simpler problems and solving them.  Many of the smaller problems are shared between unique complex problems, and creating modules to these solve these smaller repeated problems can save time when you encounter them again.
(m / multi-sentence
      :snt1 (h / have-degree-91
            :ARG1 (a / and
                  :op1 (p / program
                        :ARG0-of (c / code-01))
                  :op2 (p2 / program
                        :ARG0-of (d / debate-01)))
            :ARG2 (e / easy-05)
            :ARG3 (m2 / more)
            :mod (u / usual)
            :ARG1-of (c2 / cause-01
                  :ARG0 (o / or
                        :op1 (s / specify-01
                              :ARG0 (p3 / person
                                    :ARG0-of (c3 / compile-01))
                              :ARG1 (o2 / object
                                    :ARG0-of (w / work-01
                                          :ARG1-of (c4 / correct-02
                                                :polarity -))))
                        :op2 (ii / identify-01
                              :ARG1 (f / function
                                    :ARG1-of (a2 / assign-01
                                          :ARG2 o2))
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (e2 / easy-05
                                          :ARG1 ii)
                                    :ARG3 (m3 / more))))))
      :snt2 (a3 / and
            :op1 (l / look-02
                  :ARG0 (c5 / code)
                  :ARG1 (o3 / organize-01
                        :ARG1 c5
                        :ARG2-of (h3 / have-degree-91
                              :ARG1 c5
                              :ARG3 (m4 / more))))
            :op2 (r / read-01
                  :ARG1 c5
                  :ARG1-of (h4 / have-degree-91
                        :ARG2 (e3 / easy-05
                              :ARG1 r)
                        :ARG3 (m5 / more))
                  :ARG1-of h4)
            :op3 (h5 / help-01
                  :ARG0 c5
                  :ARG1 (a4 / avoid-01
                        :ARG1 (c6 / code
                              :mod (r2 / redundant)))))
      :snt3 (e4 / easy-05))"
74,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.",4,5,4.5,"# ::snt Variables can remain private. The code is easily modified and reusable, as well as easily implemented. Not to mention easier to read and follow along as an observer.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (r / remain-01
                  :ARG1 (v / variable)
                  :ARG3 (p2 / private)))
      :snt2 (a / and
            :op1 (a2 / and
                  :op1 (m2 / modify-01
                        :ARG1 (c / code)
                        :ARG1-of (e / easy-05))
                  :op2 (r2 / reuse-01
                        :ARG1 c)
                  :op3 (ii / implement-01
                        :ARG1 c
                        :ARG1-of (e2 / easy-05))))
      :snt3 (h / have-degree-91
            :ARG1 (a3 / and
                  :op1 (r3 / read-01
                        :ARG1 c)
                  :op2 (f / follow-02
                        :ARG1 c
                        :manner (o / observe-01)))
            :ARG2 (e3 / easy-05
                  :ARG1 a3)
            :ARG3 (m3 / more)))"
75,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.,3,4,3.5,"# ::snt Data Abstraction and control... it is possible to isolate elements from other elements a lot easier and prevent tampering of data.
(a / and
      :op1 (r / remove-01
            :ARG1 (d / data))
      :op2 (c / control-01
            :ARG1 (d2 / data))
      :op2 (p / possible-01
            :ARG1 (a2 / and
                  :op1 (ii / isolate-01
                        :ARG1 (e / element)
                        :ARG2 (e2 / element
                              :mod (o / other))
                        :ARG1-of (h / have-degree-91
                              :ARG2 (e3 / easy-05
                                    :ARG1 ii)
                              :ARG3 (m / more
                                    :quant (l / lot))))
                  :op2 (p2 / prevent-01
                        :ARG1 (t / tamper-01
                              :ARG1 (d3 / data))))))"
76,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.,5,3,4,"# ::snt Encapsulation - Objects use operations without knowing how the operation works. Inheritance - cuts redundancy by reusing earlier classes. Polymorphism - objects select the correct operation to use in the situation.
(m / multi-sentence
      :snt1 (e / encapsulate-01
            :ARG1 (u / use-01
                  :ARG0 (o / object)
                  :ARG1 (o2 / operate-01)
                  :manner (k / know-01
                        :polarity -
                        :ARG0 o
                        :ARG1 (t / thing
                              :manner-of (w / work-09
                                    :ARG1 o2)))))
      :snt2 (c / cut-02
            :ARG0 (ii / inherit-01)
            :ARG1 (r / redundancy)
            :manner (r2 / reuse-01
                  :ARG0 ii
                  :ARG1 (c2 / class
                        :time (b / before
                              :op1 (n / now)))))
      :snt3 (p / polymorphism
            :domain (s / select-01
                  :ARG0 (o3 / object)
                  :ARG1 (o4 / operate-01
                        :ARG1-of (c3 / correct-02))
                  :purpose (u2 / use-01
                        :ARG0 o3
                        :ARG1 o4
                        :location (s2 / situation)))))"
77,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.",5,4,4.5,"# ::snt They make it easier to reuse and adapt previously written code and they separate complex programs into smaller, easier to understand classes.
(a / and
      :op1 (m / make-02
            :ARG0 (t / they)
            :ARG1 (e / easy-05
                  :ARG1 (a2 / and
                        :op1 (r / reuse-01
                              :ARG1 (c / code
                                    :ARG1-of (w / write-01
                                          :time (p / previous))))
                        :op2 (a3 / adapt-01
                              :ARG1 c))
                  :ARG2-of (h / have-degree-91
                        :ARG1 a2
                        :ARG3 (m2 / more))))
      :op2 (s / separate-01
            :ARG0 t
            :ARG1 (p2 / program
                  :mod (c2 / complex))
            :ARG2 (c3 / class
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s2 / small)
                        :ARG3 (m3 / more))
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (u / understand-01
                              :ARG1 c3)
                        :ARG3 (m4 / more)))))"
78,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be reused, Program maintenance and verification are easier ",3,4,3.5,"# ::snt Existing classes can be reused, Program maintenance and verification are easier 
(a / and
      :op1 (p / possible-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / class
                        :ARG1-of (e / exist-01))))
      :op2 (h / have-degree-91
            :ARG1 (a2 / and
                  :op1 (m / maintain-01
                        :ARG1 (p2 / program))
                  :op2 (v / verify-01
                        :ARG1 p2))
            :ARG2 (e2 / easy-05
                  :ARG1 a2)
            :ARG3 (m2 / more)))"
79,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be feused, Program maintenance and verification are easier",3,4,3.5,"# ::snt Existing classes can be feused, Program maintenance and verification are easier
(a / and
      :op1 (p / possible-01
            :ARG1 (f / feud-01
                  :ARG1 (c / class
                        :ARG1-of (e / exist-01))))
      :op2 (h / have-degree-91
            :ARG1 (a2 / and
                  :op1 (m / maintain-01
                        :ARG1 (p2 / program))
                  :op2 (v / verify-01
                        :ARG1 p2))
            :ARG2 (e2 / easy-05
                  :ARG1 a2)
            :ARG3 (m2 / more)))"
80,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.",5,5,5,"# ::snt the main advantages to object-oriented programming  is data abstraction, easier maintenance, and re-usability.
(a / advantage-01
      :ARG1 (p / program-01
            :ARG1-of (o / orient-01
                  :ARG2 (o2 / object)))
      :ARG2 (a2 / and
            :op1 (a3 / abstract-01
                  :ARG1 (d / data))
            :op2 (m / maintain-01
                  :ARG1-of (h / have-degree-91
                        :ARG2 (e / easy-05
                              :ARG1 m)
                        :ARG3 (m2 / more)))
            :op3 (p2 / possible-01
                  :ARG1 (r / reuse-01)))
      :mod (m3 / main))"
81,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Existing classes can be reused Program maintenance and verifications are easy,3,5,4,"# ::snt Existing classes can be reused Program maintenance and verifications are easy
(p / possible-01
      :ARG1 (r / reuse-01
            :ARG1 (c / class
                  :ARG1-of (e / exist-01))))"
82,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,1- Existing classes can be reused 2- Program maintenance and verification are easier,3,4,3.5,"# ::snt 1- Existing classes can be reused 2- Program maintenance and verification are easier
(m / multi-sentence
      :snt1 (p / possible-01
            :li 1
            :ARG1 (r / reuse-01
                  :ARG1 (c / class
                        :ARG1-of (e / exist-01))))
      :snt2 (h / have-degree-91
            :li 2
            :ARG1 (a / and
                  :op1 (m2 / maintain-01
                        :ARG1 (p2 / program))
                  :op2 (v / verify-01
                        :ARG1 p2))
            :ARG2 (e2 / easy-05
                  :ARG1 a)
            :ARG3 (m3 / more)))"
83,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,Information can be hidden. It is easier to debug. Programming is easier and more manageable.,3,4,3.5,"# ::snt Information can be hidden. It is easier to debug. Programming is easier and more manageable.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (h / hide-01
                  :ARG1 (ii / information)))
      :snt2 (e / easy-05
            :ARG1 (d / debug-01)
            :ARG2-of (h2 / have-degree-91
                  :ARG1 d
                  :ARG3 (m2 / more)))
      :snt3 (a / and
            :op1 (e2 / easy-05
                  :ARG1 (p2 / program-01))
            :op2 (p3 / possible-01
                  :ARG1 (m3 / manage-01
                        :ARG1 p2)
                  :ARG2-of (h3 / have-degree-91
                        :ARG1 p2
                        :ARG3 (m4 / more)))))"
84,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Existing classes can be reused, program maintenance and verification are   easier.",3,4,3.5,"# ::snt Existing classes can be reused, program maintenance and verification are   easier.
(a / and
      :op1 (p / possible-01
            :ARG1 (r / reuse-01
                  :ARG1 (c / class
                        :ARG1-of (e / exist-01))))
      :op2 (h / have-degree-91
            :ARG1 (a2 / and
                  :op1 (m / maintain-01
                        :ARG1 (p2 / program))
                  :op2 (v / verify-01
                        :ARG1 p2))
            :ARG2 (e2 / easy-05
                  :ARG1 a2)
            :ARG3 (m2 / more)))"
85,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,existing classes can be reused program maintenance and verification are easier,3,4,3.5,"# ::snt existing classes can be reused program maintenance and verification are easier
(p / possible-01
      :ARG1 (r / reuse-01
            :ARG1 (c / class
                  :ARG1-of (e / exist-01)))
      :ARG1-of (h / have-degree-91
            :ARG2 (e2 / easy-05
                  :ARG1 (a / and
                        :op1 (m / maintain-01
                              :ARG1 (p2 / program))
                        :op2 (v / verify-01
                              :ARG1 p2)))
            :ARG3 (m2 / more)))"
86,1.3,What are the main advantages associated with object-oriented programming?,Abstraction and reusability.,"Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. ",3,4,3.5,"# ::snt Well for one encapsulation the values of the variables inside an object are private, unless methods are written to pass info outside of the object. As well as Inheritance where each subclass inherits all variables and methods of its super class.  Example in the book included obj clock and how obj alarm would still use clock from the first class. 
(m / multi-sentence
      :snt1 (p / private-02
            :ARG1 (v / value
                  :poss (v2 / variable
                        :location (ii / inside
                              :op1 (o / object))))
            :condition (w / write-01
                  :polarity -
                  :ARG1 (m2 / method)
                  :purpose (p2 / pass-03
                        :ARG0 m2
                        :ARG1 (ii2 / information)
                        :ARG2 (o2 / outside
                              :op1 (o3 / object)))))
      :snt2 (ii3 / inherit-01
            :ARG0 (s / subclass
                  :mod (e / each))
            :ARG1 (a / and
                  :op1 (v3 / variable
                        :mod (a2 / all))
                  :op2 (m3 / method
                        :mod (c / class
                              :mod (s2 / super)
                              :poss s))))
      :snt3 (ii4 / include-01
            :ARG1 (a3 / and
                  :op1 (c2 / clock
                        :mod (o4 / obj))
                  :op2 (t / thing
                        :manner-of (u / use-01
                              :ARG0 (a4 / alarm
                                    :mod (o5 / obj))
                              :ARG1 (c3 / clock
                                    :source (c4 / class
                                          :ord (o6 / ordinal-entity
                                                :value 1)))
                              :mod (s3 / still))))
            :location (b / book)))"
87,1.4,Where do C++ programs begin to execute?,At the main function.,At function ‘int main ()’,5,5,5,"# ::snt At function ‘int main ()’
(b / be-located-at-91
      :ARG1 (f / function-01)
      :ARG2 (m / main
            :mod (ii / int)))"
88,1.4,Where do C++ programs begin to execute?,At the main function.,the Function main().,5,5,5,"# ::snt the Function main().
(f / function
      :name (n / name
            :op1 ""main()""))"
89,1.4,Where do C++ programs begin to execute?,At the main function.,c++ programs begin to execute in the main method.,5,5,5,"# ::snt c++ programs begin to execute in the main method.
(b / begin-01
      :ARG1 (e / execute-01
            :ARG1 (p / program
                  :mod (l / language
                        :name (n / name
                              :op1 ""C++"")))
            :manner (m / method
                  :mod (m2 / main))))"
90,1.4,Where do C++ programs begin to execute?,At the main function.,A C++ program will begin to execute at the main() function.,5,5,5,"# ::snt A C++ program will begin to execute at the main() function.
(b / begin-01
      :ARG0 (p / program
            :mod (l / language
                  :name (n / name
                        :op1 ""C++"")))
      :ARG1 (e / execute-01
            :ARG0 p
            :ARG1 (f / function
                  :name n
                  :op1 ""main()"")))"
91,1.4,Where do C++ programs begin to execute?,At the main function.,They begin in the main() function.,5,5,5,"# ::snt They begin in the main() function.
(b / begin-01
      :ARG0 (t / they)
      :location (f / function
            :name (n / name
                  :op1 ""main()"")))"
92,1.4,Where do C++ programs begin to execute?,At the main function.,Int main(),5,5,5,"# ::snt Int main()
(s / string-entity
      :value ""Int""
      :value ""main()"")"
93,1.4,Where do C++ programs begin to execute?,At the main function.,main method,5,5,5,"# ::snt main method
(m / method
      :mod (m2 / main))"
94,1.4,Where do C++ programs begin to execute?,At the main function.,in the testing phase,0,0,0,"# ::snt in the testing phase
(p / phase
      :time-of (t / test-01))"
95,1.4,Where do C++ programs begin to execute?,At the main function.,#NAME?,5,5,5,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
96,1.4,Where do C++ programs begin to execute?,At the main function.,main,5,5,5,"# ::snt main
(m / main)"
97,1.4,Where do C++ programs begin to execute?,At the main function.,They begin to execute at the funcion main().,5,5,5,"# ::snt They begin to execute at the funcion main().
(b / begin-01
      :ARG0 (t / they)
      :ARG1 (e / execute-01
            :ARG0 t
            :location (f / function
                  :mod (m / main))))"
98,1.4,Where do C++ programs begin to execute?,At the main function.,The main method.,5,5,5,"# ::snt The main method.
(m / method
      :mod (m2 / main))"
99,1.4,Where do C++ programs begin to execute?,At the main function.,At the root,0,5,2.5,"# ::snt At the root
(r / root-02)"
100,1.4,Where do C++ programs begin to execute?,At the main function.,In the main() function.,5,5,5,"# ::snt In the main() function.
(b / be-located-at-91
      :ARG2 (f / function
            :name (n / name
                  :op1 ""main()"")))"
101,1.4,Where do C++ programs begin to execute?,At the main function.,C++ programs begin execution at main.,5,5,5,"# ::snt C++ programs begin execution at main.
(b / begin-01
      :ARG1 (e / execute-01
            :ARG1 (p / program
                  :mod (l / language
                        :name (n / name
                              :op1 ""C++""))))
      :location (m / main))"
102,1.4,Where do C++ programs begin to execute?,At the main function.,In the Main function..?,5,5,5,"# ::snt In the Main function..?
(b / be-located-at-91
      :ARG2 (f / function-01
            :mod (m / main))
      :polarity (a / amr-unknown))"
103,1.4,Where do C++ programs begin to execute?,At the main function.,"At the ""main()"" function",5,5,5,"# ::snt At the ""main()"" function
(f / function
      :name (n / name
            :op1 ""main()""))"
104,1.4,Where do C++ programs begin to execute?,At the main function.,The main function.,5,5,5,"# ::snt The main function.
(f / function-01
      :mod (m / main))"
105,1.4,Where do C++ programs begin to execute?,At the main function.,The function main,5,5,5,"# ::snt The function main
(m / main
      :domain (f / function-01))"
106,1.4,Where do C++ programs begin to execute?,At the main function.,"After loading the required include statements and libraries, the main method begins the execution.",5,5,5,"# ::snt After loading the required include statements and libraries, the main method begins the execution.
(b / begin-01
      :ARG0 (m / method
            :mod (m2 / main))
      :ARG1 (e / execute-01
            :ARG1 m)
      :time (a / after
            :op1 (l / load-01
                  :ARG1 (a2 / and
                        :op1 (s / statement
                              :mod (ii / include-01))
                        :op2 (l2 / library)
                        :ARG1-of (r / require-01)))))"
107,1.4,Where do C++ programs begin to execute?,At the main function.,main function,5,5,5,"# ::snt main function
(f / function-01
      :mod (m / main))"
108,1.4,Where do C++ programs begin to execute?,At the main function.,main,5,5,5,"# ::snt main
(m / main)"
109,1.4,Where do C++ programs begin to execute?,At the main function.,C++ programs begin execution at the main function.,5,5,5,"# ::snt C++ programs begin execution at the main function.
(b / begin-01
      :ARG0 (p / program
            :mod (l / language
                  :name (n / name
                        :op1 ""C++"")))
      :ARG1 (e / execute-01
            :ARG1 p
            :location (f / function
                  :mod (m / main))))"
110,1.4,Where do C++ programs begin to execute?,At the main function.,At main,5,5,5,"# ::snt At main
(m / main)"
111,1.4,Where do C++ programs begin to execute?,At the main function.,they beging to excute at main,5,5,5,"# ::snt they beging to excute at main
(b / beg-01
      :ARG0 (t / they)
      :ARG1 (e / excute-01
            :ARG0 t
            :mod (m / main)))"
112,1.4,Where do C++ programs begin to execute?,At the main function.,at the main function  int main() {},5,5,5,"# ::snt at the main function  int main() {}
(b / be-located-at-91
      :ARG2 (f / function
            :name (n / name
                  :op1 ""int""
                  :op2 ""main()"")
            :mod (m / main)))"
113,1.4,Where do C++ programs begin to execute?,At the main function.,C++ programs begin execution at the main function.,5,5,5,"# ::snt C++ programs begin execution at the main function.
(b / begin-01
      :ARG0 (p / program
            :mod (l / language
                  :name (n / name
                        :op1 ""C++"")))
      :ARG1 (e / execute-01
            :ARG1 p
            :location (f / function
                  :mod (m / main))))"
114,1.4,Where do C++ programs begin to execute?,At the main function.,"in the ""main"" function",5,5,5,"# ::snt in the ""main"" function
(f / function-01
      :mod (m / main))"
115,1.4,Where do C++ programs begin to execute?,At the main function.,Within the main function,5,5,5,"# ::snt Within the main function
(w / within
      :op1 (f / function-01
            :mod (m / main)))"
116,1.5,What is a variable?,A location in memory that can store a value.,Variable can be a integer or a string in a program.,1,3,2,"# ::snt Variable can be a integer or a string in a program.
(p / possible-01
      :ARG1 (o / or
            :op1 (ii / integer)
            :op2 (s / string)
            :location (p2 / program)
            :domain (v / variable)))"
117,1.5,What is a variable?,A location in memory that can store a value.,"In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. ",4,5,4.5,"# ::snt In programming, a structure that holds data and is uniquely named by the programmer. It holds the data assigned to it until a new value is assigned or the program is finished. 
(m / multi-sentence
      :snt1 (s / structure
            :ARG0-of (h / hold-01
                  :ARG1 (d / data))
            :ARG1-of (n / name-01
                  :ARG0 (p / person
                        :ARG0-of (p2 / program-01))
                  :ARG1-of (u / unique-01)))
      :snt2 (h2 / hold-01
            :ARG0 (ii / it)
            :ARG1 (d2 / data
                  :ARG1-of (a / assign-01
                        :ARG2 ii))
            :time (u2 / until
                  :op1 (o / or
                        :op1 (a2 / assign-01
                              :ARG1 (v / value
                                    :ARG1-of (n2 / new-01)))
                        :op2 (f / finish-01
                              :ARG1 (p3 / program)))))
      :time (p4 / program))"
118,1.5,What is a variable?,A location in memory that can store a value.,A variable is a location in memory where a value can be stored.,5,5,5,"# ::snt A variable is a location in memory where a value can be stored.
(l / location
      :location (m / memory)
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value)))
      :domain (v2 / variable))"
119,1.5,What is a variable?,A location in memory that can store a value.," Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.",5,5,5,"# ::snt  Variable is a location in the computer's memory, in which a value can be stored and later can retrieve that value.
(v / variable
      :domain (l / location
            :location (m / memory
                  :poss (c / computer))
            :location-of (a / and
                  :op1 (p / possible-01
                        :ARG1 (s / store-01
                              :ARG1 (v2 / value)))
                  :op2 (p2 / possible-01
                        :ARG1 (r / retrieve-01
                              :ARG1 (v3 / value
                                    :mod (t / that))
                              :time (a2 / after
                                    :op1 s))))))"
120,1.5,What is a variable?,A location in memory that can store a value.,"A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.",5,5,5,"# ::snt A variable is a location in the computer's memory where a value can be stored for use by a program. Each variable has a name, a value, a type and a size.
(m / multi-sentence
      :snt1 (v / variable
            :domain (l / location
                  :location (m2 / memory
                        :poss (c / computer))
                  :location-of (p / possible-01
                        :ARG1 (s / store-01
                              :ARG1 (v2 / value)
                              :purpose (u / use-01
                                    :ARG0 (p2 / program)
                                    :ARG1 v2)))))
      :snt2 (h / have-03
            :ARG0 (v3 / variable
                  :mod (e / each))
            :ARG1 (a / and
                  :op1 (n / name)
                  :op2 (v4 / value)
                  :op3 (t / type)
                  :op4 (s2 / size))))"
121,1.5,What is a variable?,A location in memory that can store a value.,A named object that can hold a numerical or letter value,2,5,3.5,"# ::snt A named object that can hold a numerical or letter value
(o / object
      :ARG1-of (n / name-01)
      :ARG0-of (h / hold-01
            :ARG1 (o2 / or
                  :op1 (v / value
                        :mod (n2 / numerical))
                  :op2 (v2 / value
                        :mod (l / letter)))
            :ARG1-of (p / possible-01)))"
122,1.5,What is a variable?,A location in memory that can store a value.,"It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.",3,5,4,"# ::snt It's a sybol or name for a value/number. Example: 'a_used_number' can stand for any given number, and the programmer can refer to that number by using the variable name.
(m / multi-sentence
      :snt1 (o / or
            :op1 (s / symbol)
            :op2 (n / name)
            :domain (ii / it)
            :purpose (s2 / slash
                  :op1 (v / value)
                  :op2 (n2 / number)))
      :snt2 (a / and
            :op1 (p / possible-01
                  :ARG1 (s3 / stand-08
                        :ARG1 (s4 / string-entity
                              :value ""a_used_number"")
                        :ARG2 (n3 / number
                              :mod (a2 / any)
                              :ARG1-of (g / give-01))))
            :op2 (p2 / possible-01
                  :ARG1 (r / refer-01
                        :ARG0 (p3 / person
                              :ARG0-of (p4 / program-01))
                        :ARG1 n3
                        :manner (u / use-01
                              :ARG0 p3
                              :ARG1 (n4 / name
                                    :mod (v2 / variable)))))))"
123,1.5,What is a variable?,A location in memory that can store a value.,A variable is a location in the computers memory where a value can be stored for use by a program,5,5,5,"# ::snt A variable is a location in the computers memory where a value can be stored for use by a program
(l / location
      :location (m / memory
            :poss (c / computer))
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value)
                  :purpose (u / use-01
                        :ARG0 (p2 / program)
                        :ARG1 v)))
      :domain (v2 / variable))"
124,1.5,What is a variable?,A location in memory that can store a value.,#NAME?,3,5,4,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
125,1.5,What is a variable?,A location in memory that can store a value.,a block of memory that holds a specific type of data,5,5,5,"# ::snt a block of memory that holds a specific type of data
(b / block
      :consist-of (m / memory)
      :ARG0-of (h / hold-01
            :ARG1 (t / type
                  :mod (d / data)
                  :ARG1-of (s / specific-02))))"
126,1.5,What is a variable?,A location in memory that can store a value.,It is a location in the computer's memory where it can be stored for use by a program.,5,5,5,"# ::snt It is a location in the computer's memory where it can be stored for use by a program.
(b / be-located-at-91
      :ARG1 (ii / it)
      :ARG2 (m / memory
            :poss (c / computer))
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 ii
                  :purpose (u / use-01
                        :ARG0 (p2 / program)
                        :ARG1 ii))))"
127,1.5,What is a variable?,A location in memory that can store a value.,A location in memory where value can be stored.,5,5,5,"# ::snt A location in memory where value can be stored.
(l / location
      :location (m / memory)
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value))))"
128,1.5,What is a variable?,A location in memory that can store a value.,a value/word that can assume any of a set of values,3,3,3,"# ::snt a value/word that can assume any of a set of values
(s / slash
      :op1 (v / value)
      :op2 (w / word)
      :ARG0-of (a / assume-02
            :ARG1 (a2 / any
                  :ARG1-of (ii / include-91
                        :ARG2 (s2 / set
                              :consist-of (v2 / value))))
            :ARG1-of (p / possible-01)))"
129,1.5,What is a variable?,A location in memory that can store a value.,A pointer to a location in memory.,3,5,4,"# ::snt A pointer to a location in memory.
(p / pointer
      :destination (l / location
            :location (m / memory)))"
130,1.5,What is a variable?,A location in memory that can store a value.,"A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.",5,5,5,"# ::snt A variable is the memory address for a specific type of stored data, or from a mathematical perspective, a symbol representing a fixed definition with changing values.
(o / or
      :op1 (a / address
            :mod (m / memory)
            :purpose (t / type
                  :mod (d / data
                        :ARG1-of (s / store-01))
                  :ARG1-of (s2 / specific-02)))
      :op2 (s3 / symbol
            :ARG0-of (r / represent-01
                  :ARG1 (d2 / define-01
                        :ARG1-of (f / fix-03)
                        :ARG0-of (h / have-03
                              :ARG1 (v / value
                                    :ARG1-of (c / change-01)))))
            :source (p / perspective
                  :mod (m2 / mathematics)))
      :domain (v2 / variable))"
131,1.5,What is a variable?,A location in memory that can store a value.,A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.,5,5,5,"# ::snt A variable is a value that is subject to change in a computer's memory that can be used by programs.  Programs can change the value of the variable and recall it later or act on it directly.
(m / multi-sentence
      :snt1 (v / variable
            :domain (v2 / value
                  :ARG1-of (s / subject-01
                        :ARG2 (c / change-01
                              :ARG1 v2
                              :location (m2 / memory
                                    :poss (c2 / computer))))
                  :ARG1-of (u / use-01
                        :ARG0 (p / program)
                        :ARG1-of (p2 / possible-01))))
      :snt2 (p3 / possible-01
            :ARG1 (o / or
                  :op1 (c3 / change-01
                        :ARG0 (p4 / program)
                        :ARG1 (v3 / value
                              :poss (v4 / variable))
                        :op2 (r / recall-02
                              :ARG0 p4
                              :ARG1 v3
                              :time (a / after
                                    :op1 c3))
                        :op3 (a2 / act-02
                              :ARG0 p4
                              :ARG1 v3
                              :ARG1-of (d / direct-02))))))"
132,1.5,What is a variable?,A location in memory that can store a value.,a symbol that stands in for a value that may or may not change depending on the program.,3,5,4,"# ::snt a symbol that stands in for a value that may or may not change depending on the program.
(s / stand-in-08
      :ARG1 (s2 / symbol)
      :ARG2 (v / value
            :ARG1-of (c / change-01
                  :ARG1-of (p / possible-01)
                  :ARG1-of (d / depend-01
                        :ARG2 (p2 / program)))
            :ARG1-of (p3 / possible-01
                  :polarity -)))"
133,1.5,What is a variable?,A location in memory that can store a value.,"a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. ",4,5,4.5,"# ::snt a placeholder to hold information used in the program... for example: int can hold: 1, 2, 3, 4, 68, 72, 256, etc. float can hold: 1.54, 55.55, 1.24, 5.657, 8.8123, et. char can hold: A, B, C, D, E, F, !, 4, 5, 6, P, etc. 
(e / exemplify-01
      :ARG0 (p / possible-01
            :ARG1 (h / hold-01
                  :ARG0 (p2 / placeholder)
                  :ARG1 (ii / information
                        :ARG1-of (u / use-01
                              :ARG0 (p3 / program)))))
      :example (p4 / possible-01
            :ARG1 (h2 / hold-01
                  :ARG0 (t / thing
                        :name (n / name
                              :op1 ""int""))
                  :ARG1 (a / and
                        :op1 (n2 / number
                              :value ""1,""
                              :op2 72
                              :op3 256
                              :op4 256)
                        :op5 (e2 / et-cetera)))
            :op2 (p5 / possible-01
                  :ARG1 (h3 / hold-01
                        :ARG0 (f / float)
                        :ARG1 (a2 / and
                              :op1 (n3 / number
                                    :quant ""1.54,"")
                              :op2 (n4 / number
                                    :quant 1.24)
                              :op3 (n5 / number
                                    :quant 5.657)
                              :op4 (n6 / number
                                    :quant 8.8123))))
            :op3 (c / char
                  :ARG1-of h2
                  :ARG0 c
                  :ARG1 (a3 / and
                        :op1 (s / string-entity
                              :value ""A"")
                        :op2 (s2 / string-entity
                              :value ""C"")
                        :op3 (s3 / string-entity
                              :value ""D"")
                        :op4 (s4 / string-entity
                              :value ""F"")
                        :op5 (s5 / string-entity
                              :value ""4"")
                        :op6 (s6 / string-entity
                              :value ""P"")
                        :op7 (s7 / string-entity
                              :value ""P"")
                        :op8 s6))))"
134,1.5,What is a variable?,A location in memory that can store a value.,a stored value used by the program,4,5,4.5,"# ::snt a stored value used by the program
(v / value
      :ARG1-of (s / store-01)
      :ARG1-of (u / use-01
            :ARG0 (p / program)))"
135,1.5,What is a variable?,A location in memory that can store a value.,"A way to store different values into the program, such as numbers, words, letters, etc.",4,5,4.5,"# ::snt A way to store different values into the program, such as numbers, words, letters, etc.
(w / way
      :manner-of (s / store-01
            :ARG1 (v / value
                  :ARG1-of (d / differ-02)
                  :example (a / and
                        :op1 (n / number)
                        :op2 (w2 / word)
                        :op3 (l / letter)
                        :op4 (e / et-cetera)))
            :ARG2 (p / program)))"
136,1.5,What is a variable?,A location in memory that can store a value.,An object with a location in memory where value can be stored,2,5,3.5,"# ::snt An object with a location in memory where value can be stored
(o / object
      :ARG0-of (h / have-03
            :ARG1 (l / location
                  :location (m / memory)
                  :location-of (p / possible-01
                        :ARG1 (s / store-01
                              :ARG1 (v / value))))))"
137,1.5,What is a variable?,A location in memory that can store a value.,location in memory where a value can be stored,5,5,5,"# ::snt location in memory where a value can be stored
(l / location
      :location (m / memory)
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value))))"
138,1.5,What is a variable?,A location in memory that can store a value.,a variable is an object where data is stored.,2,5,3.5,"# ::snt a variable is an object where data is stored.
(o / object
      :domain (v / variable)
      :location-of (s / store-01
            :ARG1 (d / data)))"
139,1.5,What is a variable?,A location in memory that can store a value.,Location in memory where a value can be stored.,5,5,5,"# ::snt Location in memory where a value can be stored.
(l / location
      :location (m / memory)
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value))))"
140,1.5,What is a variable?,A location in memory that can store a value.,it is a location in memory where value can be stored,5,5,5,"# ::snt it is a location in memory where value can be stored
(l / location
      :location (m / memory)
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value)))
      :domain (ii / it))"
141,1.5,What is a variable?,A location in memory that can store a value.,A variable is the location in a computer's memory where a value can be stored for use by a program.,5,5,5,"# ::snt A variable is the location in a computer's memory where a value can be stored for use by a program.
(v / variable
      :domain (l / location
            :location (m / memory
                  :poss (c / computer))
            :location-of (p / possible-01
                  :ARG1 (s / store-01
                        :ARG1 (v2 / value)
                        :purpose (u / use-01
                              :ARG0 (p2 / program)
                              :ARG1 v2)))))"
142,1.5,What is a variable?,A location in memory that can store a value.,A variable is a location in a computers memory where a value can be stored   for use by a program.,5,5,5,"# ::snt A variable is a location in a computers memory where a value can be stored   for use by a program.
(l / location
      :location (m / memory
            :poss (c / computer))
      :location-of (p / possible-01
            :ARG1 (s / store-01
                  :ARG1 (v / value)
                  :purpose (u / use-01
                        :ARG0 (p2 / program)
                        :ARG1 v)))
      :domain (v2 / variable))"
143,1.5,What is a variable?,A location in memory that can store a value.,a location in memory where data can be stored and retrieved,5,5,5,"# ::snt a location in memory where data can be stored and retrieved
(l / location
      :location (m / memory)
      :location-of (p / possible-01
            :ARG1 (a / and
                  :op1 (s / store-01
                        :ARG1 (d / data))
                  :op2 (r / retrieve-01
                        :ARG1 d))))"
144,1.5,What is a variable?,A location in memory that can store a value.,"Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. ",5,5,5,"# ::snt Is a method or identifier I would say,  we use to bind a data object to memory location; which is then stored in a location that can be accessed when and manipulated later when the variable name is called. 
(s / say-01
      :ARG0 (ii / i)
      :ARG1 (u / use-01
            :ARG0 (w / we)
            :ARG1 (o / or
                  :op1 (m / method)
                  :op2 (ii2 / identifier))
            :ARG2 (b / bind-01
                  :ARG0 w
                  :ARG1 (o2 / object
                        :mod (d / data))
                  :ARG2 (l / location
                        :mod (m2 / memory)
                        :ARG1-of (s2 / store-01
                              :location (l2 / location
                                    :ARG1-of (a / access-01
                                          :ARG1-of (p / possible-01)
                                          :time (c / call-02
                                                :ARG1 (n / name-01
                                                      :ARG1 (v / variable))))))
                        :time (t / then)))))"
145,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.",1,3,2,"# ::snt They can be declared right before they are used, but it is a good practice to declare them at the beginning of the program and label what they are food.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (d / declare-02
                  :ARG1 (t / they)
                  :time (b / before
                        :op1 (u / use-01
                              :ARG1 t)
                        :mod (r / right))))
      :ARG2 (p2 / practice-01
            :ARG1 (a / and
                  :op1 (d2 / declare-02
                        :ARG1 t
                        :time (b2 / begin-01
                              :ARG1 (p3 / program)))
                  :op2 (l / label-01
                        :ARG1 (f / food
                              :domain t)))
            :ARG1-of (g / good-02)))"
146,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),In the Function main() before using the variable.,1,5,3,"# ::snt In the Function main() before using the variable.
(b / be-located-at-91
      :ARG2 (f / function
            :name (n / name
                  :op1 ""main()""))
      :time (b2 / before
            :op1 (u / use-01
                  :ARG1 (v / variable))))"
147,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.",5,5,5,"# ::snt Local variables are declared inside the method or function they will be used in at the beginning of the method. Global variables are declared outside of any function or method, generally before functions are defined.
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :location (o / or
                  :op1 (m2 / method)
                  :op2 (f / function)
                  :location-of (u / use-01
                        :ARG1 v)
                  :time (b / begin-01
                        :ARG1 (m3 / method))))
      :snt2 (d2 / declare-02
            :ARG1 (v2 / variable
                  :mod (g / globe))
            :location (o2 / outside
                  :op1 (o3 / or
                        :op1 (f2 / function)
                        :op2 (m4 / method)
                        :mod (a / any)))
            :time (b2 / before
                  :op1 (d3 / define-01
                        :ARG1 (f3 / function))
                  :ARG1-of (g2 / general-02))))"
148,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared where ever it is defined either inside a block locally or outside a block globally.,4,5,4.5,"# ::snt Variables are declared where ever it is defined either inside a block locally or outside a block globally.
(d / declare-02
      :ARG1 (v / variable)
      :location (o / or
            :op1 (d2 / define-01
                  :ARG1 v
                  :location (ii / inside
                        :op1 (b / block
                              :ARG1-of (l / local-02))))
            :op2 (d3 / define-01
                  :ARG1 v
                  :location (o2 / outside
                        :op1 (b2 / block
                              :mod (g / globe))))))"
149,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are declared before they are actually used. They can be declared before main() to use globally,3,5,4,"# ::snt Variables are declared before they are actually used. They can be declared before main() to use globally
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (v / variable)
            :time (b / before
                  :op1 (u / use-01
                        :ARG1 v
                        :ARG1-of (a / actual-02))))
      :snt2 (p / possible-01
            :ARG1 (d2 / declare-02
                  :ARG1 (v2 / variable)
                  :time (b2 / before
                        :op1 (u2 / use-01
                              :ARG1 v2
                              :mod (g / globe))))))"
150,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"For good programing practice they should be declared before main(), but should at least be declared before they are used.",2,3,2.5,"# ::snt For good programing practice they should be declared before main(), but should at least be declared before they are used.
(c / contrast-01
      :ARG1 (r / recommend-01
            :ARG1 (d / declare-02
                  :ARG1 (t / they)
                  :time (b / before
                        :op1 (f / function
                              :name (n / name
                                    :op1 ""main()""))))
            :purpose (p / practice-01
                  :ARG1 (p2 / program-01)
                  :ARG1-of (g / good-02)))
      :ARG2 (r2 / recommend-01
            :ARG1 (d2 / declare-02
                  :ARG1 t
                  :time (b2 / before
                        :op1 (u / use-01
                              :ARG1 t))
                  :mod (a / at-least))))"
151,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).",5,5,5,"# ::snt They can be declared globally just before the main method (but also outside of it)... or variables can be subject to only the method they're scoped within, but would still be declared at the beginning of that method (but inside of it).
(o / or
      :op1 (p / possible-01
            :ARG1 (d / declare-02
                  :ARG1 (t / they)
                  :mod (g / globe)
                  :time (b / before
                        :op1 (m / method
                              :mod (m2 / main))
                        :mod (j / just))
                  :concession (o2 / outside
                        :op1 m
                        :mod (a / also))))
      :op2 (p2 / possible-01
            :ARG1 (s / subject-01
                  :ARG1 (v / variable)
                  :ARG2 (m3 / method
                        :mod (o3 / only)
                        :location-of (s2 / scope-01
                              :ARG1 v))
                  :concession (d2 / declare-02
                        :ARG1 v
                        :time (b2 / begin-01
                              :ARG1 (m4 / method
                                    :mod (t2 / that)))
                        :mod (s3 / still)
                        :concession (d3 / declare-02
                              :ARG1 v
                              :time (ii / inside
                                    :op1 m4))))))"
152,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),local variables are declared inside the method while global variables are declared in the body.,5,5,5,"# ::snt local variables are declared inside the method while global variables are declared in the body.
(c / contrast-01
      :ARG1 (d / declare-02
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :location (ii / inside
                  :op1 (m / method)))
      :ARG2 (d2 / declare-02
            :ARG1 (v2 / variable
                  :mod (g / globe))
            :location (b / body)))"
153,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),#NAME?,1,3,2,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
154,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Globally for an entire program, and locally for individual functions (including FOR statements)",4,5,4.5,"# ::snt Globally for an entire program, and locally for individual functions (including FOR statements)
(a / and
      :op1 (g / global
            :beneficiary (p / program
                  :mod (e / entire)))
      :op2 (l / local-02
            :ARG1 (f / function-01
                  :mod (ii / individual)
                  :ARG2-of (ii2 / include-01
                        :ARG1 (s / state-01)))))"
155,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.,2,4,3,"# ::snt They are usually declared at the beginning before they can be used in the program. They always contain a name and a data type.
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (t / they)
            :mod (u / usual)
            :time (b / before
                  :op1 (p / possible-01
                        :ARG1 (u2 / use-01
                              :ARG1 t
                              :ARG2 (p2 / program)))))
      :snt2 (c / contain-01
            :ARG0 (t2 / they)
            :ARG1 (a / and
                  :op1 (n / name)
                  :op2 (t3 / type
                        :mod (d2 / data)))
            :time (a2 / always)))"
156,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Inside the method.,2,3,2.5,"# ::snt Inside the method.
(ii / inside
      :op1 (m / method))"
157,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),at the top,1,2,1.5,"# ::snt at the top
(t / top)"
158,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.,5,5,5,"# ::snt Global variables are declared in the body of the code. Local variables are declared in the function they are to be used (unless the function is being passed a variable). Variables should always be declared before use.
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (v / variable
                  :mod (g / globe))
            :location (b / body
                  :part-of (c / code)))
      :snt2 (d2 / declare-02
            :ARG1 (v2 / variable
                  :ARG1-of (l / local-02))
            :location (f / function
                  :ARG1-of (u / use-01))
            :condition (p / pass-03
                  :polarity -
                  :ARG1 v2
                  :ARG2 f))
      :snt3 (r / recommend-01
            :ARG1 (d3 / declare-02
                  :ARG1 (v3 / variable)
                  :time (a / always)
                  :time (b2 / before
                        :op1 (u2 / use-01
                              :ARG1 v3)))))"
159,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Variables are usually declared at the beginning of a module of C++ code.,2,3,2.5,"# ::snt Variables are usually declared at the beginning of a module of C++ code.
(d / declare-02
      :ARG1 (v / variable)
      :mod (u / usual)
      :time (b / begin-01
            :ARG1 (m / module
                  :consist-of (c / code
                        :mod (l / language
                              :name (n / name
                                    :op1 ""C++""))))))"
160,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.",3,4,3.5,"# ::snt In the main function, usually at the top of code.  They can be declared almost anywhere, but must be declared before the code can use or act upon them.
(m / multi-sentence
      :snt1 (b / be-located-at-91
            :ARG1 (f / function-01
                  :mod (m2 / main))
            :ARG2 (t / top
                  :part-of (c / code))
            :mod (u / usual))
      :snt2 (c2 / contrast-01
            :ARG1 (p / possible-01
                  :ARG1 (d / declare-02
                        :ARG1 (t2 / they)
                        :location (a / anywhere
                              :mod (a2 / almost))))
            :ARG2 (o / obligate-01
                  :ARG1 (d2 / declare-02
                        :ARG1 t2
                        :time (b2 / before
                              :op1 (p2 / possible-01
                                    :ARG1 (o2 / or
                                          :op1 (u2 / use-01
                                                :ARG0 (c3 / code)
                                                :ARG1 t2)
                                          :op2 (a3 / act-02
                                                :ARG0 c3
                                                :ARG1 t2))))))))"
161,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),in the very beginning of the program. Before the main() starts.,1,3,2,"# ::snt in the very beginning of the program. Before the main() starts.
(m / multi-sentence
      :snt1 (b / begin-01
            :ARG1 (p / program)
            :mod (v / very))
      :snt2 (b2 / before
            :op1 (s / start-01
                  :ARG1 (t / thing
                        :name (n / name
                              :op1 ""main()"")))))"
162,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.",2,3,2.5,"# ::snt In the declaration of Functions, for statements, and while statements. in the body of If, For, while, do while, statements, in namespaces, headers, etc  ( almost anywhere. ) anywhere in the program, as long as it is on it's own line.
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / declare-02
                  :ARG1 (f / function-01))
            :op2 (d2 / declare-02
                  :ARG1 (s / statement
                        :mod (f2 / for)))
            :op3 (s2 / state-01
                  :mod (w / while)))
      :snt2 (a2 / and
            :op1 (b / body
                  :consist-of (a3 / and
                        :op1 (h / have-condition-91)
                        :op2 f2)
                  :op3 (d3 / do-02
                        :time (w2 / while))))
      :op2 (s3 / state-01
            :consist-of d3
            :time (w3 / while))
      :op3 (n / namespace)
      :op4 (h2 / header)
      :op5 (e / et-cetera)
      :location (a4 / anywhere
            :mod (a5 / almost)
            :location (p / program))
      :condition (a6 / as-long-as
            :op1 (b2 / be-located-at-91
                  :ARG1 (ii / it)
                  :ARG2 (l / line
                        :poss ii))))"
163,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),After declaration of the variable's data type.,1,1,1,"# ::snt After declaration of the variable's data type.
(a / after
      :op1 (d / declare-02
            :ARG1 (t / type
                  :mod (d2 / data)
                  :poss (v / variable))))"
164,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere in the code, can be at the top, or in the middle of the code, or anywhere.",3,3,3,"# ::snt anywhere in the code, can be at the top, or in the middle of the code, or anywhere.
(p / possible-01
      :ARG1 (o / or
            :op1 (b / be-located-at-91
                  :ARG2 (t / top))
            :op2 (b2 / be-located-at-91
                  :ARG2 (m / middle
                        :part-of (c / code)))
            :op3 (a / anywhere))
      :location c)"
165,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Before they are used.,2,2,2,"# ::snt Before they are used.
(b / be-temporally-at-91
      :ARG2 (b2 / before
            :op1 (u / use-01
                  :ARG1 (t / they))))"
166,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),Anywhere in the same scope before they are used,3,4,3.5,"# ::snt Anywhere in the same scope before they are used
(b / be-located-at-91
      :ARG2 (a / anywhere
            :location (s / scope
                  :ARG1-of (s2 / same-01)))
      :time (b2 / before
            :op1 (u / use-01
                  :ARG1 (t / they))))"
167,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),variables can be declared in classes and methods.,1,4,2.5,"# ::snt variables can be declared in classes and methods.
(p / possible-01
      :ARG1 (d / declare-02
            :ARG1 (v / variable)
            :location (a / and
                  :op1 (c / class)
                  :op2 (m / method))))"
168,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),inside the function scope and outside of the function scope in case of global variables,5,5,5,"# ::snt inside the function scope and outside of the function scope in case of global variables
(a / and
      :op1 (ii / inside
            :op1 (s / scope
                  :mod (f / function-01)))
      :op2 (o / outside
            :op1 (s2 / scope
                  :mod f))
      :condition (v / variable
            :mod (g / globe)))"
169,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),global variables are declared in the main function local variables are declared in any other function,3,5,4,"# ::snt global variables are declared in the main function local variables are declared in any other function
(d / declare-02
      :ARG1 (v / variable
            :mod (g / globe))
      :ARG2 (f / function-01
            :mod (m / main))
      :ARG1-of (d2 / declare-02
            :ARG2 (f2 / function-01
                  :mod (o / other)
                  :mod (a / any))))"
170,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.",4,4,4,"# ::snt Variables are usually declared at the very beginning of a C++ program, but can be declared any in the program as long as they appear before they are called upon.
(c / contrast-01
      :ARG1 (d / declare-02
            :ARG1 (v / variable)
            :time (b / begin-01
                  :ARG1 (p / program
                        :mod (l / language
                              :name (n / name
                                    :op1 ""C++"")))
                  :mod (v2 / very))
            :mod (u / usual))
      :ARG2 (p2 / possible-01
            :ARG1 (d2 / declare-02
                  :ARG1 (v3 / variable
                        :mod (a / any)
                        :location (p3 / program))
                  :condition (a2 / as-long-as
                        :op1 (a3 / appear-01
                              :ARG1 v3
                              :time (b2 / before
                                    :op1 (c2 / call-up-02
                                          :ARG1 v3)))))))"
171,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"Variables are declared in the main function, before any operation is   attempted with the variables.",1,3,2,"# ::snt Variables are declared in the main function, before any operation is   attempted with the variables.
(d / declare-02
      :ARG1 (v / variable)
      :location (f / function-01
            :mod (m / main))
      :time (b / before
            :op1 (a / attempt-01
                  :ARG1 (o / operate-01
                        :ARG1 (v2 / variable)
                        :mod (a2 / any)))))"
172,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),"anywhere, but where you declare them depends on where you want them to be accessible (their scope)",4,5,4.5,"# ::snt anywhere, but where you declare them depends on where you want them to be accessible (their scope)
(c / contrast-01
      :ARG2 (d / depend-01
            :ARG0 (t / thing
                  :location-of (d2 / declare-02
                        :ARG0 (y / you)
                        :ARG1 (t2 / they)))
            :ARG1 (t3 / thing
                  :location-of (w / want-01
                        :ARG0 y
                        :ARG1 (a / access-01
                              :ARG1 t2
                              :ARG1-of (m / mean-01
                                    :ARG2 (s / scope
                                          :poss t2)))))))"
173,1.6,Where are variables declared in a C++ program?,Variables can be declared anywhere in a program. They can be declared inside a function (local variables) or outside the functions (global variables),It depends if it’s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn’t need to be declared outside the variable seeing how it is used for the function or block its being called for.,4,5,4.5,"# ::snt It depends if it’s a global then they have to be declared out side the source code to be used in every scope however a local variable is one declared in a local function etc. which obviously doesn’t need to be declared outside the variable seeing how it is used for the function or block its being called for.
(c / contrast-01
      :ARG1 (d / depend-01
            :ARG0 (ii / it)
            :ARG1 (o / obligate-01
                  :ARG2 (d2 / declare-02
                        :ARG1 (t / they)
                        :location (o2 / outside
                              :op1 (c2 / code
                                    :mod (s / source)))
                        :purpose (u / use-01
                              :ARG1 c2
                              :ARG2 (s2 / scope
                                    :mod (e / every))))))
      :ARG2 (d3 / declare-01
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :location (a / and
                  :op1 (f / function
                        :ARG1-of (l2 / local-02))
                  :op2 (e2 / et-cetera)
                  :ARG1-of (d4 / declare-02
                        :polarity -
                        :location o2
                        :op1 (v2 / variable))
                  :ARG1-of (c3 / cause-01
                        :ARG0 (u2 / use-01
                              :ARG1 v2
                              :ARG2 (o3 / or
                                    :op1 (f2 / function)
                                    :op2 (b / block)
                                    :ARG1-of (c4 / call-02
                                          :ARG0 v2))))
                  :ARG1-of (o4 / obvious-01))))"
174,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"""The “do” statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. 	The “do while” statement executes the lines of code and then it evaluates the condition. """,4,5,4.5,"# ::snt ""The “do” statement first evaluates the condition and then executes the lines of code in the statement 0 or more times. 	The “do while” statement executes the lines of code and then it evaluates the condition. ""
(m / multi-sentence
      :snt1 (a / and
            :op1 (e / evaluate-01
                  :ARG0 (s / state-01
                        :ARG1 (d / do-02))
                  :ARG1 (c / condition)
                  :ord (o / ordinal-entity
                        :value 1))
            :op2 (e2 / execute-01
                  :ARG0 s
                  :ARG1 (l / line
                        :consist-of (c2 / code))
                  :time (t / then)
                  :frequency (o2 / or
                        :op1 0
                        :op2 (t2 / time
                              :quant (m2 / more)))))
      :snt2 (a2 / and
            :op1 (e3 / execute-01
                  :ARG0 (s2 / state-01
                        :ARG1 (d2 / do-02
                              :time (w / while)))
                  :ARG1 l)
            :op2 (e4 / evaluate-01
                  :ARG0 s2
                  :ARG1 (c3 / condition)
                  :time (t3 / then))))"
175,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.,5,5,5,"# ::snt do...while statements evaluate whether or not to loop after running the block contained within it at least once. So the main differance is that while statements have a possibility of never being used. Do ... while statements on the other hand are always run at least once before evaluating whether to run again.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (d / do-02)
            :ARG2 (e / evaluate-01
                  :ARG0 (s / state-01)
                  :ARG1 (t / truth-value
                        :polarity-of (l / loop-02
                              :ARG1 s))
                  :time (a / after
                        :op1 (r / run-01
                              :ARG1 (b / block
                                    :ARG1-of (c2 / contain-01
                                          :ARG0 s))
                              :quant (a2 / at-least
                                    :op1 1)))))
      :snt2 (d2 / differ-02
            :ARG1 (p / possible-01
                  :polarity -
                  :ARG1 (u / use-01
                        :ARG1 (s2 / state-01)
                        :time (e2 / ever)))
            :mod (m2 / main))
      :snt3 (c3 / contrast-01
            :ARG1 (r2 / run-01
                  :ARG1 (s3 / state-01)
                  :time (a3 / always)
                  :time (b2 / before
                        :op1 (e3 / evaluate-01
                              :ARG1 (t2 / truth-value
                                    :polarity-of (r3 / run-01
                                          :ARG1 s3
                                          :mod (a4 / again))))))))"
176,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.",5,5,5,"# ::snt The main difference between a while and a do...while loop is that the do...while loop always cycles through the loop at least once, but the while loop does not always do so.
(d / differ-02
      :ARG1 (l / loop
            :name (n / name
                  :op1 ""do""
                  :op2 ""while""
                  :op3 ""loop""))
      :ARG2 (c / cycle-01
            :ARG0 l
            :ARG1 (l2 / loop)
            :time (a / always)
            :frequency (a2 / at-least
                  :op1 1)
            :concession-of (c2 / cycle-01
                  :polarity -
                  :ARG0 l2
                  :ARG1 l2
                  :time (a3 / always)))
      :mod (m / main))"
177,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.,5,5,5,"# ::snt While loop used to execute a block of code as long as some condition is true.  A do...while loop used to execute a block of code as long as some condition is satisfied.  The difference between while and do...while is while loop tests its condition before the execution of its contents and the do...while loop tests its condition after the execution of its contents at least once.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (e / execute-01
                  :ARG0 (l / loop)
                  :ARG1 (b / block
                        :consist-of (c2 / code))
                  :condition (a / as-long-as
                        :op1 (t / true-01
                              :ARG1 (c3 / condition
                                    :mod (s / some))))))
      :snt2 (c4 / contrast-01
            :ARG1 (l2 / loop)
            :ARG2 (e2 / execute-01
                  :ARG0 l2
                  :ARG1 (b2 / block
                        :consist-of (c5 / code))
                  :condition (s2 / satisfy-01
                        :ARG1 (c6 / condition
                              :mod (s3 / some)))))
      :snt3 (d / differ-02
            :ARG1 (t2 / test-01
                  :ARG0 (l3 / loop)
                  :ARG1 (c7 / condition
                        :poss l3)
                  :time (b3 / before
                        :op1 e2
                        :ARG1 (t3 / thing
                              :ARG1-of (c8 / contain-01
                                    :ARG0 l3)))))
      :ARG2 (t4 / test-01
            :ARG0 l3
            :ARG1 c7
            :time (a2 / after
                  :op1 (e3 / execute-01
                        :ARG1 (t5 / thing
                              :ARG1-of (c9 / contain-01
                                    :ARG0 l3))))
            :frequency (a3 / at-least
                  :op1 1)))"
178,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.",5,5,5,"# ::snt The termination condition of a do...while statement is usually at the end of the loop so it will run at least once. As for the while statement, if the condition is false to begin with, then the loop will never run.
(m / multi-sentence
      :snt1 (b / be-located-at-91
            :ARG1 (c / condition-01
                  :ARG1 (t / terminate-01
                        :ARG1 (s / state-01
                              :ARG1 (d / do-02
                                    :time (w / while)))))
            :ARG2 (e / end-01
                  :ARG1 (l / loop))
            :mod (u / usual)
            :ARG0-of (c2 / cause-01
                  :ARG1 (r / run-01
                        :ARG1 l
                        :frequency (a / at-least
                              :op1 1))))
      :snt2 (r2 / run-01
            :polarity -
            :ARG1 (l2 / loop)
            :time (e2 / ever)
            :condition (f / false
                  :domain (c3 / condition)
                  :ARG2-of (b2 / begin-01))))"
179,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.,5,5,5,"# ::snt A while loop will check the statement to make sure it is true before executing. A do while loop will execute before checking the statement to see if it should run again.
(m / multi-sentence
      :snt1 (c / check-01
            :ARG0 (l / loop
                  :mod (w / while))
            :ARG1 (s / statement)
            :purpose (e / ensure-01
                  :ARG0 l
                  :ARG1 (t / true-01
                        :ARG1 (s2 / statement)))
            :time (b / before
                  :op1 (e2 / execute-01
                        :ARG0 l)))
      :snt2 (e3 / execute-01
            :ARG0 (l2 / loop
                  :mod (d / do-while))
            :time (b2 / before
                  :op1 (c2 / check-01
                        :ARG0 l2
                        :ARG1 (s3 / statement))
                  :purpose (s4 / see-01
                        :ARG0 l2
                        :ARG1 (t2 / truth-value
                              :polarity-of (r / recommend-01
                                    :ARG1 (r2 / run-01
                                          :ARG1 s3
                                          :mod (a / again))))))))"
180,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.",5,5,5,"# ::snt A while statement will test the condition of the while loop FIRST - there is a chance the loop will never run. A do...while loop will ALWAYS run once, and then the while test will determine if it will run again.
(m / multi-sentence
      :snt1 (t / test-01
            :ARG0 (s / state-01
                  :ARG1 (w / while))
            :ARG1 (c / condition-01
                  :ARG1 (l / loop
                        :mod (w2 / while)))
            :ord (o / ordinal-entity
                  :value 1
                  :ord-of t)
            :value 1)
      :snt2 (c2 / chance-02
            :ARG1 (r / run-01
                  :polarity -
                  :ARG1 (l2 / loop
                        :mod (w3 / while))
                  :time (e / ever)))
      :snt3 (a / and
            :op1 (r2 / run-01
                  :ARG1 l2
                  :time (a2 / always))
            :op2 (d / determine-01
                  :ARG0 (t2 / test-01
                        :ARG1 (w4 / while))
                  :ARG1 (t3 / truth-value
                        :polarity-of (r3 / run-01
                              :ARG1 l2
                              :mod (a3 / again)))
                  :time (t4 / then))))"
181,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,a do while loop always executes once. A while loop's conditional statement has to be true for it to run.,5,5,5,"# ::snt a do while loop always executes once. A while loop's conditional statement has to be true for it to run.
(m / multi-sentence
      :snt1 (e / execute-01
            :frequency 1
            :ARG0 (l / loop
                  :mod (d / do-02
                        :time (w / while)))
            :time (a / always))
      :snt2 (o / obligate-01
            :ARG2 (t / true-01
                  :ARG1 (s / state-01
                        :ARG1 (l2 / loop
                              :mod (w2 / while))
                        :mod (c / condition)))
            :purpose (r / run-01
                  :ARG1 l2)))"
182,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,#NAME?,5,5,5,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
183,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.",5,5,5,"# ::snt while statements will evaluate the statement BEFORE executing a cycle of the loop, including the first cycle, meaning that a while loop will not always execute. A do...while will run evaluate the statement AFTER running through a cycle of the loop, ensuring that the loop always executes at least one time.
(m / multi-sentence
      :snt1 (e / evaluate-01
            :ARG0 (s / statement
                  :mod (w / while))
            :ARG1 (s2 / statement)
            :time (b / before
                  :op1 (e2 / execute-01
                        :ARG1 (c / cycle
                              :part-of (l / loop)
                              :ARG2-of (ii / include-01
                                    :ARG1 (c2 / cycle
                                          :ord (o / ordinal-entity
                                                :value 1)))))))
      :snt2 (e3 / evaluate-02
            :ARG0 (s3 / statement
                  :mod (w2 / while))
            :ARG1 (s4 / statement)
            :time (a / after
                  :op1 (r / run-01
                        :ARG1 (c3 / cycle
                              :mod (l2 / loop))))
            :ARG0-of (e4 / ensure-01
                  :ARG1 (e5 / execute-01
                        :ARG0 l2
                        :frequency (a2 / at-least
                              :op1 1)
                        :time (a3 / always)))))"
184,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.,5,5,5,"# ::snt The main difference between a do and a do...while statement is in a do...while statement is the statements in a do block are always executed atleast once.   The while statement will only execute if its condition is true.
(m / multi-sentence
      :snt1 (d / differ-02
            :ARG1 (d2 / do-02)
            :ARG2 (d3 / do-02)
            :mod (m2 / main))
      :snt2 (e / execute-01
            :ARG1 (s / state-01
                  :mod (w / while))
            :time (a / always)
            :frequency (a2 / at-least
                  :op1 1)
            :location (b / block
                  :mod (d4 / do-02)))
      :snt3 (e2 / execute-01
            :ARG1 (s2 / state-01
                  :mod (w2 / while))
            :condition (t / true-01
                  :ARG1 (c / condition
                        :poss (s3 / statement-01))
                  :mod (o / only))))"
185,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,The loop of a do...while statement always executes once.,4,5,4.5,"# ::snt The loop of a do...while statement always executes once.
(e / execute-02
      :ARG0 (l / loop
            :part-of (s / state-01
                  :ARG1 (d / do-02
                        :time (w / while))))
      :frequency 1
      :time (a / always))"
186,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.",5,5,5,"# ::snt a while statement will only process if the statement is met, while a do...while will always process once, then only continue if the statement is met.
(c / contrast-01
      :ARG1 (p / process-01
            :ARG1 (s / state-01
                  :mod (w / while))
            :condition (m / meet-01
                  :ARG1 s)
            :mod (o / only))
      :ARG2 (p2 / process-01
            :ARG1 (d / do-02
                  :mod (w2 / while))
            :time (a / always)
            :condition (m2 / meet-01
                  :ARG1 s))
      :ARG2 (c2 / continue-01
            :ARG1 p2
            :condition (m3 / meet-01
                  :ARG1 (s2 / state-01)
                  :mod (o2 / only))))"
187,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"Do ...while runs the embedded code at least once, the do command does not necessarily",4,4,4,"# ::snt Do ...while runs the embedded code at least once, the do command does not necessarily
(m / multi-sentence
      :snt1 (d / do-02)
      :snt2 (n / need-01
            :polarity -
            :ARG1 (c / command-02
                  :ARG1 (d2 / do-02))
            :time (r / run-01
                  :ARG1 (c2 / code
                        :ARG1-of (e / embed-01))
                  :frequency (a / at-least
                        :op1 1))))"
188,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"While tests for true first before running, do...while runs once first before checking.",5,5,5,"# ::snt While tests for true first before running, do...while runs once first before checking.
(c / contrast-01
      :ARG1 (t / test-01
            :ARG1 (t2 / true-01)
            :time (b / before
                  :op1 (r / run-02))
            :ord (o / ordinal-entity
                  :value 1))
      :ARG2 (r2 / run-02
            :time (b2 / before
                  :op1 (c2 / check-01))
            :ord (o2 / ordinal-entity
                  :value 1)))"
189,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.,5,5,5,"# ::snt A do...while statement's body always executes at least once.  Where as a while statement will not execute at all unless the condition for the while is true.
(m / multi-sentence
      :snt1 (e / execute-01
            :ARG0 (b / body
                  :poss (s / state-01
                        :mod (w / while)))
            :time (a / always)
            :frequency (a2 / at-least
                  :op1 1))
      :snt2 (c / contrast-01
            :ARG2 (e2 / execute-01
                  :polarity -
                  :ARG0 (s2 / state-01
                        :mod (w2 / while))
                  :degree (a3 / at-all)
                  :condition (t / true-01
                        :polarity -
                        :ARG1 (c2 / condition
                              :mod (w3 / while))))))"
190,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.,5,5,5,"# ::snt The statements within the block of the do while loop will always be executed at least once regardless of the conditions. Whereas the while loops may never be executed if the conditions are not met.
(m / multi-sentence
      :snt1 (e / execute-01
            :ARG1 (s / state-01
                  :location (b / block
                        :part-of (l / loop
                              :name (n / name
                                    :op1 ""do""
                                    :op2 ""while""))))
            :time (a / always)
            :frequency (a2 / at-least
                  :op1 1)
            :ARG1-of (r / regardless-91
                  :ARG2 (c / condition)))
      :snt2 (c2 / contrast-01
            :ARG2 (p / possible-01
                  :polarity -
                  :ARG1 (e2 / execute-01
                        :ARG1 l
                        :mod (w / while))
                  :time (e3 / ever))
            :condition (m2 / meet-01
                  :polarity -
                  :ARG1 c)))"
191,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a do... while loop will always run through once, while an while loop performs a test before running through the loop.",5,5,5,"# ::snt a do... while loop will always run through once, while an while loop performs a test before running through the loop.
(a / and
      :op1 (r / run-02
            :frequency 1
            :ARG0 (l / loop
                  :name (n / name
                        :op1 ""do""
                        :op2 ""while""))
            :time (a2 / always))
      :op2 (t / test-01
            :ARG0 (l2 / loop
                  :name n
                  :op1 ""while""))
      :time (b / before
            :op1 (r2 / run-02
                  :ARG0 l2
                  :ARG1 l2)))"
192,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.,5,5,5,"# ::snt A while statement tests the condition before it can start. A do...while statement loops through once before the condition is tested.
(m / multi-sentence
      :snt1 (t / test-01
            :ARG0 (s / statement
                  :mod (w / while))
            :ARG1 (c / condition)
            :time (b / before
                  :op1 (p / possible-01
                        :ARG1 (s2 / start-01
                              :ARG1 c))))
      :snt2 (l / loop-02
            :ARG1 (s3 / statement
                  :mod (w2 / while))
            :time (b2 / before
                  :op1 (t2 / test-01
                        :ARG1 (c2 / condition)))
            :mod (d / do-02)))"
193,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.",3,4,3.5,"# ::snt A while loop terminates at the beginning of the loop, a do/while terminates at the end of the loop.
(a / and
      :op1 (t / terminate-01
            :ARG1 (l / loop
                  :mod (w / while))
            :time (b / begin-01
                  :ARG1 (l2 / loop)))
      :op2 (t2 / terminate-01
            :ARG1 (l3 / loop
                  :mod (d / do-02)
                  :mod (w2 / while))
            :time (e / end-01
                  :ARG1 l2)))"
194,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,the loop body always executes at least once,3,4,3.5,"# ::snt the loop body always executes at least once
(e / execute-01
      :ARG0 (b / body
            :part-of (l / loop))
      :time (a / always)
      :frequency (a2 / at-least
            :op1 1))"
195,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.",5,5,5,"# ::snt While loop evaluates its expression at the top of its loop and decides if it needs to execute, and the do-while always executes at least once and then evaluates its expression at the bottom of its loop.
(c / contrast-01
      :ARG1 (a / and
            :op1 (e / evaluate-01
                  :ARG0 (l / loop)
                  :ARG1 (e2 / express-01
                        :ARG0 l)
                  :location (t / top
                        :part-of (l2 / loop
                              :poss l)))
            :op2 (d / decide-01
                  :ARG0 l
                  :ARG1 (t2 / truth-value
                        :polarity-of (n / need-01
                              :ARG0 l
                              :ARG1 (e3 / execute-01
                                    :ARG0 l)))))
      :ARG2 (a2 / and
            :op1 (e4 / execute-01
                  :ARG0 (d2 / do-while)
                  :time (a3 / always)
                  :frequency (a4 / at-least
                        :op1 1))
            :op2 (e5 / evaluate-01
                  :ARG0 d2
                  :ARG1 (e6 / express-01
                        :ARG0 l)
                  :location (b / bottom
                        :part-of l)
                  :time (t3 / then))))"
196,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A do...while statement will always execute the ""do"" piece of code at least once before checking the condition. A while statement will always check the condition first.",5,5,5,"# ::snt A do...while statement will always execute the ""do"" piece of code at least once before checking the condition. A while statement will always check the condition first.
(m / multi-sentence
      :snt1 (e / execute-01
            :ARG0 (s / state-01
                  :ARG1 (d / do-02
                        :time (w / while)))
            :ARG1 (p / piece
                  :part-of (c / code)
                  :ARG1-of (d2 / do-02))
            :time (a / always)
            :time (b / before
                  :op1 (c2 / check-01
                        :ARG0 s
                        :ARG1 (c3 / condition))
                  :quant (a2 / at-least
                        :op1 1)))
      :snt2 (c4 / check-01
            :ARG0 (s2 / statement
                  :mod (w2 / while))
            :ARG1 c3
            :ord (o / ordinal-entity
                  :value 1)
            :time (a3 / always)))"
197,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.",5,5,5,"# ::snt A do-while passes atleast 1 time before checking the condition, however, a while would fail to enter the loop if the condition fails in its first place.
(h / have-concession-91
      :ARG1 (f / fail-01
            :ARG1 (w / while)
            :ARG2 (e / enter-01
                  :ARG0 w
                  :ARG1 (l / loop))
            :condition f
            :ARG1 (w2 / while)
            :mod (ii / in-first-place))
      :ARG2 (p / pass-03
            :ARG1 (w3 / while
                  :mod (d / do-02))
            :frequency (a / at-least
                  :op1 1)
            :time (b / before
                  :op1 (c / check-01
                        :ARG1 (c2 / condition)))))"
198,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.",5,5,5,"# ::snt a while loop checks if the condition is true or not first, if it was true, it excutes the statement. a do.. while loop executes the statement before it checks the condition. if the condition was true it would excute the statement again. so a do...while loop would excute the statement atleast once.
(m / multi-sentence
      :snt1 (a / and
            :op1 (c / check-01
                  :ARG0 (l / loop
                        :mod (w / while))
                  :ARG1 (t / truth-value
                        :polarity-of (c2 / condition))
                  :ord (o / ordinal-entity
                        :value 1))
            :op2 (e / excute-01
                  :ARG0 l
                  :ARG1 (s / state-01)
                  :condition (t2 / true-01
                        :ARG1 (c3 / condition))
                  :time (b / before
                        :op1 (c4 / check-01
                              :ARG0 l
                              :ARG1 c3))))
      :snt2 (e2 / execute-01
            :ARG0 (l2 / loop
                  :ARG1 (s2 / state-01)
                  :time b
                  :op1 (c5 / check-01
                        :ARG1 c3)
                  :ARG0-of c5)
            :ARG0 l2)
      :snt3 (e3 / excute-01
            :ARG0 l2
            :ARG1 (s3 / state-01)
            :mod (a2 / again)
            :condition (t3 / true-01
                  :ARG1 (c6 / condition-01))
            :snt4 (ii / infer-01
                  :ARG1 (e4 / excute-01
                        :ARG0 (l3 / loop
                              :mod (w2 / while))
                        :ARG1 (s4 / state-01)
                        :frequency (a3 / at-least
                              :op1 1)))))"
199,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,NO ANSWER,0,0,0,"# ::snt NO ANSWER
(a / answer-01
      :polarity -)"
200,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.",5,5,5,"# ::snt A do...while loop will always execute atleast once, a while loop may never   execute depending on teh conditions.
(a / and
      :op1 (e / execute-01
            :ARG0 (l / loop
                  :mod (d / do-02
                        :time (w / while)))
            :time (a2 / always)
            :frequency (a3 / at-least
                  :op1 1))
      :op2 (p / possible-01
            :ARG1 (e2 / execute-01
                  :polarity -
                  :ARG0 (l2 / loop
                        :mod (w2 / while))
                  :time (e3 / ever)
                  :ARG0-of (d2 / depend-01
                        :ARG1 (c / condition)))))"
201,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)",5,5,5,"# ::snt a while loop is pre-check (it checks the condition statement before it executes the code within the while block)  a do while loop is post-check (it checks the condition AFTER the block executes, it runs at least once no matter what the condition statement is)
(a / and
      :op1 (c / check-01
            :ARG0 (l / loop
                  :mod (w / while))
            :time (b / before)
            :ARG1-of (m / mean-01
                  :ARG2 (c2 / check-01
                        :ARG0 l
                        :ARG1 (s / state-01
                              :ARG1 (c3 / condition-01))
                        :time (b2 / before
                              :op1 (e / execute-01
                                    :ARG0 l
                                    :ARG1 (c4 / code
                                          :location (b3 / block
                                                :mod (w2 / while))))))))
      :op2 (c5 / check-01
            :ARG0 (l2 / loop
                  :mod (d / do-02
                        :ARG1 (w3 / while)))
            :time (a2 / after
                  :op1 (e2 / execute-01
                        :ARG1 (b4 / block))))
      :op3 (r / run-01
            :ARG1 l2
            :frequency (a3 / at-least
                  :op1 1)
            :ARG1-of (r2 / regardless-91
                  :ARG2 (t / thing
                        :ARG2-of (s2 / state-01
                              :ARG1 (c6 / condition-01))))))"
202,1.7,What is the main difference between a while and a do...while statement?,The block inside a do...while statement will execute at least once.,"))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. ",5,5,5,"# ::snt ))     What is the main difference between a while and a do...while statement? The do while construct consists of a block of code and a condition. First, the code within the block is executed, and then the condition is evaluated, this is done until it is proven false. The difference between the While loop is it tests the condition before the code within the block is executed. 
(m / multi-sentence
      :snt1 (d / differ-02
            :ARG1 (w / while)
            :ARG2 (s / state-01
                  :ARG1 (d2 / do-02
                        :time (w2 / while)))
            :mod (m2 / main))
      :snt2 (c / consist-01
            :ARG1 (c2 / construct-01
                  :ARG1 (d3 / do-02
                        :time (w3 / while)))
            :ARG2 (a / and
                  :op1 (e / execute-01
                        :ARG1 (c3 / code
                              :location (b / block)))
                  :op2 (e2 / evaluate-01
                        :ARG1 (c4 / condition)
                        :time (t / then))
                  :time (u / until
                        :op1 (p / prove-01
                              :ARG1 (f / false
                                    :domain (c5 / condition)))))
            :snt2 (d4 / differ-02
                  :ARG1 (l / loop
                        :mod w2))
            :ARG2 (t2 / test-01
                  :ARG0 l
                  :ARG1 (c6 / condition)
                  :time (b2 / before
                        :op1 (e3 / execute-01
                              :ARG1 (c7 / code
                                    :location (b3 / block)))))))"
203,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.",1,3,2,"# ::snt For us it is usually a set, get, and displayMessge or other messages that tell you what properties a class has but does not reveal its implementations. You could have anything you want in your own class definition.
(m / multi-sentence
      :snt1 (o / or
            :op1 (s / set-02)
            :op2 (g / get-01)
            :op3 (d / display-01)
            :op4 (m2 / message
                  :mod (o2 / other))
            :ARG0-of (t / tell-01
                  :ARG1 (p / property
                        :ARG1-of (h / have-03
                              :ARG0 (c / class)))
                  :ARG2 (y / you)
                  :concession-of (r / reveal-01
                        :polarity -
                        :ARG0 m2
                        :ARG1 (ii / implement-01
                              :ARG1 (c2 / class))))
            :mod (u / usual)
            :beneficiary (w / we))
      :snt2 (p2 / possible-01
            :ARG1 (h2 / have-03
                  :ARG0 (y2 / you)
                  :ARG1 (a / anything
                        :ARG1-of (w2 / want-01
                              :ARG0 y2))
                  :location (d2 / define-01
                        :ARG0 y2
                        :ARG1 (c3 / class)))))"
204,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.,4,4,4,"# ::snt The attributes of said class. Also whether or not it is a subclass. Also whether it is public private or protected.
(m / multi-sentence
      :snt1 (a / attribute
            :poss (c / class
                  :ARG1-of (s / say-01)))
      :snt2 (a2 / and
            :op1 (t / truth-value
                  :polarity-of (s2 / subclass
                        :domain (ii / it)))
            :op2 (t2 / truth-value
                  :polarity-of (o / or
                        :op1 (p / public-02
                              :ARG1 (ii2 / it)
                              :ARG1-of (p2 / private-02))
                        :op2 (p3 / protect-01
                              :ARG1 ii2)))
            :mod (a3 / also)))"
205,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Information telling the compiler what data members and member functions belong to the class.,5,5,5,"# ::snt Information telling the compiler what data members and member functions belong to the class.
(t / tell-01
      :ARG0 (ii / information)
      :ARG1 (a / and
            :op1 (b / belong-01
                  :ARG0 (m / member
                        :mod (d / data))
                  :ARG1 (c / class))
            :op2 (b2 / belong-01
                  :ARG0 (f / function
                        :mod (m2 / member))
                  :ARG1 c))
      :ARG2 (p / person
            :ARG0-of (c2 / compile-01)))"
206,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). ",5,5,5,"# ::snt Since class is user defined, the body of the declaration can contain members, that can be either data or function declarations, and optionally access specifiers.  Example for specifiers would be public, private, and protected.  There is the keyword Class and the Class body is enclosed with brackets ({}). 
(m / multi-sentence
      :snt1 (c / cause-01
            :ARG0 (d / define-01
                  :ARG0 (p / person
                        :ARG0-of (u / use-01))
                  :ARG1 (c2 / class))
            :ARG1 (p2 / possible-01
                  :ARG1 (c3 / contain-01
                        :ARG0 (b / body
                              :part-of (d2 / declare-02))
                        :ARG1 (a / and
                              :op1 (p3 / person
                                    :ARG0-of (h / have-org-role-91
                                          :ARG2 (m2 / member)))
                              :op2 (p4 / person
                                    :ARG0-of (d3 / declare-02
                                          :ARG1 (o / or
                                                :op1 (d4 / data)
                                                :op2 (f / function))
                                          :ARG1-of (p5 / possible-01))
                                    :op3 (p6 / person
                                          :ARG0-of (s / specify-01
                                                :ARG1 (a2 / access-01))
                                          :ARG0-of (o2 / optional-02)))))))
      :snt2 (a3 / and
            :op1 (p7 / public-02)
            :op2 (p8 / private-02)
            :op3 (p9 / protect-01
                  :ARG1 (t / thing
                        :ARG2-of (e / exemplify-01)))
            :snt3 (a4 / and
                  :op1 (k / keyword
                        :name (n / name
                              :op1 ""Class"")))
            :op2 (e2 / enclosed-02
                  :ARG1 (b2 / body
                        :mod (c4 / class))
                  :ARG2 (b3 / bracket
                        :mod (s2 / string-entity
                              :value """")))))"
207,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,An object and data.,1,3,2,"# ::snt An object and data.
(a / and
      :op1 (o / object)
      :op2 (d / data))"
208,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"It's specific class name, includes only information defined by that class... implementation details... etc.",2,4,3,"# ::snt It's specific class name, includes only information defined by that class... implementation details... etc.
(a / and
      :op1 (n / name
            :mod (c / class)
            :ARG1-of (s / specific-02))
      :op2 (ii / include-01
            :ARG1 (ii2 / information
                  :mod (o / only)
                  :ARG1-of (d / define-01
                        :ARG0 (c2 / class
                              :mod (t / that)))))
      :op3 (d2 / detail
            :topic (ii3 / implement-01))
      :op4 (e / et-cetera))"
209,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,data members and member functions.,5,5,5,"# ::snt data members and member functions.
(a / and
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / member
                        :mod (d / data))))
      :op2 (f / function-01
            :ARG0 (p2 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (m2 / member)))))"
210,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,A class definition usually contains the function and its data members,5,5,5,"# ::snt A class definition usually contains the function and its data members
(c / contain-01
      :ARG0 (d / define-01
            :ARG1 (c2 / class))
      :ARG1 (a / and
            :op1 (f / function-01)
            :op2 (m / member
                  :mod (d2 / data)
                  :poss f))
      :mod (u / usual))"
211,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Data members and member functions,5,5,5,"# ::snt Data members and member functions
(a / and
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (d / data)
                  :ARG2 (m / member)))
      :op2 (f / function-01
            :ARG0 (p2 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 (m2 / member)))))"
212,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,member functions,3,4,3.5,"# ::snt member functions
(f / function-01
      :ARG0 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / member))))"
213,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Member functions and data members belonging to the class.,5,5,5,"# ::snt Member functions and data members belonging to the class.
(a / and
      :op1 (f / function-01
            :ARG0 (m / member))
      :op2 (b / belong-01
            :ARG0 (m2 / member
                  :mod (d / data))
            :ARG1 (c / class)))"
214,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,a public and private area that includes the functions and variables that are used in the class,5,4,4.5,"# ::snt a public and private area that includes the functions and variables that are used in the class
(ii / include-01
      :ARG1 (a / and
            :op1 (a2 / area
                  :ARG1-of (p / public-02))
            :op2 (a3 / area
                  :ARG1-of (p2 / private-02)))
      :ARG2 (a4 / and
            :op1 (f / function-01)
            :op2 (v / variable)
            :ARG1-of (u / use-01
                  :ARG2 (c / class))))"
215,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"the keyword class followed by they class name, on the inside you declare public and private declarations of your class",3,4,3.5,"# ::snt the keyword class followed by they class name, on the inside you declare public and private declarations of your class
(m / multi-sentence
      :snt1 (c / class
            :mod (k / keyword)
            :ARG1-of (f / follow-01
                  :ARG2 (n / name
                        :mod (c2 / class))))
      :snt2 (d / declare-02
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (d2 / declare-02
                        :ARG1 (c3 / class
                              :poss y)
                        :ARG1-of (p / public-02))
                  :op2 (d3 / declare-02
                        :ARG1-of (p2 / private-02)))
            :location (ii / inside)))"
216,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,A class definition typically includes function definitions.,3,3,3,"# ::snt A class definition typically includes function definitions.
(ii / include-01
      :ARG1 (d / define-01
            :ARG1 (c / class))
      :ARG2 (d2 / define-01
            :ARG1 (f / function-01))
      :ARG1-of (t / typical-02))"
217,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.",5,5,5,"# ::snt It begins with Class, followed by the class name, then usually a constructor, data members and member functions that delineates the class is included in any class's definition.
(a / and
      :op1 (b / begin-01
            :ARG1 (ii / it)
            :ARG2 (c / class)
            :ARG1-of (f / follow-01
                  :ARG2 (n / name
                        :mod c)))
      :op2 (ii2 / include-01
            :ARG1 (a2 / and
                  :op1 (p / person
                        :ARG0-of (c2 / construct-01))
                  :op2 (m / member
                        :mod (d / data))
                  :op3 (f2 / function
                        :mod (m2 / member))
                  :ARG0-of (d2 / delineate-01
                        :ARG1 (c3 / class)))
            :ARG2 (d3 / define-01
                  :ARG1 (c4 / class
                        :mod (a3 / any)))
            :mod (u / usual)
            :time (t / then)))"
218,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,the data and methods,5,4,4.5,"# ::snt the data and methods
(a / and
      :op1 (d / data)
      :op2 (m / method))"
219,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.",5,4,4.5,"# ::snt A constructor, functions, and variables that are accessible to by that class, and possibly other classes depending on how they are done.
(a / and
      :op1 (a2 / and
            :op1 (c / constructor)
            :op2 (f / function)
            :op3 (v / variable)
            :ARG1-of (a3 / accessible-02
                  :ARG0 (c2 / class
                        :mod (t / that))))
      :op2 (p / possible-01
            :ARG1 (c3 / class
                  :mod (o / other))
            :ARG0-of (d / depend-01
                  :ARG1 (t2 / thing
                        :manner-of (d2 / do-02
                              :ARG1 a2)))))"
220,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Member functions and data members.,5,5,5,"# ::snt Member functions and data members.
(a / and
      :op1 (f / function-01
            :ARG0 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (m / member))))
      :op2 (p2 / person
            :ARG0-of (h2 / have-org-role-91
                  :ARG2 (m2 / member
                        :mod (d / data)))))"
221,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"public section and private section, and there must be a semicolon to set the end",1,4,2.5,"# ::snt public section and private section, and there must be a semicolon to set the end
(a / and
      :op1 (a2 / and
            :op1 (s / section
                  :ARG1-of (p / public-02))
            :op2 (s2 / section
                  :ARG1-of (p2 / private-03)))
      :op2 (o / obligate-01
            :ARG2 (s3 / semicolon)
            :purpose (s4 / set-02
                  :ARG1 (e / end-01))))"
222,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,member funtions and data members,5,5,5,"# ::snt member funtions and data members
(a / and
      :op1 (f / funtion
            :mod (m / member))
      :op2 (m2 / member
            :mod (d / data)))"
223,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Data members and Member functions,5,5,5,"# ::snt Data members and Member functions
(a / and
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (d / data)
                  :ARG2 (m / member)))
      :op2 (f / function-01
            :ARG0 (p2 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 d
                        :ARG2 m))))"
224,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,data members and member functions,5,5,5,"# ::snt data members and member functions
(a / and
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / member
                        :mod (d / data))))
      :op2 (f / function-01
            :ARG0 (p2 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (m2 / member)))))"
225,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"the class name and its public data types such as constructors, methods, functions.",2,5,3.5,"# ::snt the class name and its public data types such as constructors, methods, functions.
(a / and
      :op1 (n / name
            :mod (c / class))
      :op2 (t / type
            :mod (d / data)
            :poss c
            :ARG1-of (p / public-02)
            :example (a2 / and
                  :op1 (p2 / person
                        :ARG0-of (c2 / construct-01))
                  :op2 (m / method)
                  :op3 (f / function-01))))"
226,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"a constructor and several data members, and at least one public data member or method",4,5,4.5,"# ::snt a constructor and several data members, and at least one public data member or method
(a / and
      :op1 (a2 / and
            :op1 (p / person
                  :ARG0-of (c / construct-01))
            :op2 (m / member
                  :quant (s / several)
                  :mod (d / data))
            :op3 (o / or
                  :op1 (m2 / member
                        :mod (d2 / data)
                        :ARG1-of (p2 / public-02))
                  :op2 (m3 / method)
                  :quant (a3 / at-least
                        :op1 1))))"
227,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"class name, two curly prenthesis, public and private",1,3,2,"# ::snt class name, two curly prenthesis, public and private
(a / and
      :op1 (n / name
            :mod (c / class))
      :op2 (p / prenthesis
            :quant 2
            :ARG1-of (c2 / curly-03)
            :ARG1-of (p2 / public-02)
            :ARG1-of (p3 / private-02)))"
228,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,data members and member functions,5,5,5,"# ::snt data members and member functions
(a / and
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG2 (m / member
                        :mod (d / data))))
      :op2 (f / function-01
            :ARG0 (p2 / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (m2 / member)))))"
229,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,Data and functions,5,4,4.5,"# ::snt Data and functions
(a / and
      :op1 (d / data)
      :op2 (f / function-01))"
230,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,functions and data members that belong to the class,5,5,5,"# ::snt functions and data members that belong to the class
(a / and
      :op1 (f / function-01)
      :op2 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (d / data)
                  :ARG2 (m / member)))
      :ARG0-of (b / belong-01
            :ARG1 (c / class)))"
231,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"class variables, function definitions for the class",5,5,5,"# ::snt class variables, function definitions for the class
(a / and
      :op1 (v / variable
            :mod (c / class))
      :op2 (d / define-01
            :ARG1 (f / function-01
                  :ARG1 (c2 / class))))"
232,2.1,What is typically included in a class definition?,Data members (attributes) and member functions.,"A class is an expanded concept of a data structure, it holds both the data and the functions being executed ",5,4,4.5,"# ::snt A class is an expanded concept of a data structure, it holds both the data and the functions being executed 
(a / and
      :op1 (c / concept
            :ARG1-of (e / expand-01)
            :topic (s / structure-01
                  :ARG1 (d / data))
            :domain (c2 / class))
      :op2 (h / hold-01
            :ARG0 c2
            :ARG1 (a2 / and
                  :op1 (d2 / data)
                  :op2 (f / function-01
                        :ARG1-of (e2 / execute-01)))))"
233,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are the data components of a particular class.  A member function are the functioning components of the class.,1,5,3,"# ::snt Data members are the data components of a particular class.  A member function are the functioning components of the class.
(m / multi-sentence
      :snt1 (c / component
            :domain (m2 / member
                  :mod (d / data))
            :poss (c2 / class
                  :mod (p / particular)))
      :snt2 (c3 / component
            :domain (f / function-01
                  :ARG0 (m3 / member))
            :poss (c4 / class)
            :ARG0-of f))"
234,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.,1,4,2.5,"# ::snt A field variable is a variable that is declared as a member of a class. A local variable is avariable that isdeclared local to a method.
(m / multi-sentence
      :snt1 (v / variable
            :domain (v2 / variable
                  :mod (f / field))
            :ARG1-of (d / declare-02
                  :ARG2 (m2 / member
                        :part-of (c / class))))
      :snt2 (v3 / variable
            :ARG1-of (l / local-02)
            :ARG1-of (d2 / declare-02
                  :ARG2 (l2 / local-02
                        :ARG1 v3
                        :ARG2 (m3 / method)))))"
235,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.",4,5,4.5,"# ::snt Data members are declared inside the class, but outside of any member functions. Unlike with local variables, each object of the class keeps its own copy of the data members stored in memory.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (d / declare-02
                  :ARG1 (m2 / member
                        :mod (d2 / data))
                  :location (ii / inside
                        :op1 (c2 / class)))
            :ARG2 (o / outside
                  :op1 (f / function-01
                        :ARG0 (m3 / member
                              :mod (a / any)))))
      :snt2 (k / keep-01
            :ARG0 (o2 / object
                  :mod (e / each)
                  :part-of (c3 / class))
            :ARG1 (c4 / copy-01
                  :ARG0 o2
                  :ARG1 (m4 / member
                        :mod (d3 / data)
                        :ARG1-of (s / store-01
                              :location (m5 / memory))))
            :ARG1-of (r / resemble-01
                  :polarity -
                  :ARG2 (v / variable
                        :ARG1-of (l / local-02)))))"
236,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.,4,5,4.5,"# ::snt Data member are variables that represent an attribute in a class definition.  Local variables declared in a function body cannot be used outside of that function body.  When a function terminates the values of its local variables are lost.
(m / multi-sentence
      :snt1 (v / variable
            :ARG0-of (r / represent-01
                  :ARG1 (a / attribute)
                  :ARG2 (d / define-01
                        :ARG1 (c / class)))
            :domain (m2 / member
                  :mod (d2 / data)))
      :snt2 (p / possible-01
            :polarity -
            :ARG1 (u / use-01
                  :ARG1 (v2 / variable
                        :ARG1-of (l / local-02)
                        :ARG1-of (d3 / declare-02
                              :location (b / body
                                    :mod (f / function))))
                  :location (o / outside
                        :op1 b)))
      :snt3 (l2 / lose-02
            :ARG1 (v3 / value
                  :poss v2)
            :time (t / terminate-01
                  :ARG1 (f2 / function))))"
237,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.,5,5,5,"# ::snt A local variable cannot be accessed outside the function in which it is declared. Data members normally are private. Variables of functions declared private are accessible only to member functions of the class in which they are declared.
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (a / access-01
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :location (o / outside
                        :op1 (f / function
                              :ARG2-of (d / declare-02
                                    :ARG1 v)))))
      :snt2 (p2 / private-02
            :ARG1 (p3 / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (f2 / function
                              :ARG1-of (d2 / declare-02))
                        :ARG2 (m2 / member)))
            :ARG1-of (n / normal-02))
      :snt3 (a2 / access-01
            :ARG0 (f3 / function
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 (c / class)
                        :ARG2 (m3 / member)))
            :ARG1 (v2 / variable
                  :ARG1-of (p4 / private-02))
            :mod (o2 / only)))"
238,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.",4,5,4.5,"# ::snt A data member is part of a C++ class or structure that stores data of a certain type... A local variable inside a member function is only available inside that function, and can be used to derive a desired outcome.
(m / multi-sentence
      :snt1 (h / have-part-91
            :ARG1 (o / or
                  :op1 (c / class)
                  :op2 (s / structure)
                  :mod (l / language
                        :name (n / name
                              :op1 ""C++""))
                  :ARG0-of (s2 / store-01
                        :ARG1 (d / data
                              :mod (t / type
                                    :mod (c2 / certain)))))
            :ARG2 (m2 / member
                  :mod (d2 / data)))
      :snt2 (a / and
            :op1 (a2 / available-02
                  :ARG1 (v / variable
                        :ARG1-of (l2 / local-02)
                        :location (f / function
                              :mod (m3 / member)))
                  :mod (o2 / only)
                  :location (ii / inside
                        :op1 f))
            :op2 (p / possible-01
                  :ARG1 (u / use-01
                        :ARG1 v
                        :ARG2 (d3 / derive-01
                              :ARG1 (o3 / outcome
                                    :ARG1-of (d4 / desire-01)))))))"
239,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A local variable can only be accessed within the scope of its declaration.,3,4,3.5,"# ::snt A local variable can only be accessed within the scope of its declaration.
(p / possible-01
      :ARG1 (a / access-01
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :mod (o / only)
            :location (s / scope
                  :poss (d / declare-02
                        :ARG1 v))))"
240,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.,4,5,4.5,"# ::snt Data members are the atributes of the function and can be used outside the function. Local variable can not be used outside the function and the value is lost after the function terminates.
(m / multi-sentence
      :snt1 (a / attribute
            :poss (f / function-01)
            :domain (m2 / member
                  :mod (d / data)))
      :snt2 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :location (o / outside
                        :op1 (f2 / function-01))))
      :snt3 (a2 / and
            :op1 (p2 / possible-01
                  :polarity -
                  :ARG1 (u2 / use-01
                        :ARG1 v
                        :location o))
            :op2 (l2 / lose-02
                  :ARG1 (v2 / value)
                  :time (a3 / after
                        :op1 (t / terminate-01
                              :ARG1 (f3 / function-01))))))"
241,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.",3,5,4,"# ::snt data members are permanent attributes of the class, local variables inside a member function are lost when the scope of the member function ends.
(m / multi-sentence
      :snt1 (a / attribute
            :mod (p / permanent)
            :poss (c / class)
            :domain (m2 / member
                  :mod (d / data)))
      :snt2 (l / lose-02
            :ARG1 (v / variable
                  :ARG1-of (l2 / local-02)
                  :location (f / function-01
                        :ARG1 (m3 / member)))
            :time (e / end-01
                  :ARG1 (s / scope
                        :poss f))))"
242,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body,3,5,4,"# ::snt data members are declared in a class definition but outside the bodies of a class's member-function definitions. Local variables are declared in a function definition's body
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (d / declare-02
                  :ARG1 (p / person
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (d2 / data)
                              :ARG2 (m2 / member)))
                  :location (d3 / define-01
                        :ARG1 (c2 / class)))
            :ARG2 (d4 / declare-02
                  :ARG1 p
                  :location (o / outside
                        :op1 (b / body
                              :poss (d5 / define-01
                                    :ARG1 (a / and
                                          :op1 (m3 / member)
                                          :op2 (f / function))
                                    :poss c2)))))
      :snt2 (d6 / declare-02
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :location b
            :poss (d7 / define-01
                  :ARG1 f)))"
243,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is globally accessible, while a local variable is only accessible inside the member function.",4,5,4.5,"# ::snt A data member is globally accessible, while a local variable is only accessible inside the member function.
(c / contrast-01
      :ARG1 (a / accessible-02
            :ARG1 (m / member
                  :mod (d / data))
            :mod (g / globe))
      :ARG2 (a2 / accessible-02
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :mod (o / only)
            :location (ii / inside
                  :op1 (f / function-01
                        :ARG1 (m2 / member)))))"
244,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.,5,5,5,"# ::snt A variable inside a member function can only be accessed inside that member and a data member can be accessed throughought the program.
(a / and
      :op1 (p / possible-01
            :ARG1 (a2 / access-01
                  :ARG1 (v / variable
                        :location (f / function
                              :mod (m / member)))
                  :mod (o / only)
                  :location (m2 / member
                        :mod (t / that))))
      :op2 (p2 / possible-01
            :ARG1 (a3 / access-01
                  :ARG1 (m3 / member
                        :mod (d / data))
                  :path (t2 / through
                        :op1 (p3 / program)))))"
245,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Local variables are used only within the scope of its declaration,5,4,4.5,"# ::snt Local variables are used only within the scope of its declaration
(u / use-01
      :ARG1 (v / variable
            :ARG1-of (l / local-02))
      :mod (o / only)
      :location (s / scope
            :poss (d / declare-02
                  :ARG1 v)))"
246,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.",0,4,2,"# ::snt A data member is a more general term describing all objects instantiated within a member function.  ""Local"" in local variables refers more to the scope of a variable, which may be located in anything from a control structure to a class.  Local variables whose scope are in a member function are the same as data members of member functions.
(m / multi-sentence
      :snt1 (t / term
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / general-02
                        :ARG1 t)
                  :ARG3 (m2 / more))
            :ARG0-of (d / describe-01
                  :ARG1 (o / object
                        :mod (a / all)
                        :ARG1-of (ii / instantiate-01
                              :ARG2 (f / function-01
                                    :ARG1 (m3 / member))))))
      :snt2 (r / refer-01
            :ARG0 (l / local
                  :location (v / variable))
            :ARG2 (s / scope
                  :poss v
                  :ARG1-of (l2 / locate-01
                        :ARG2 (a2 / anything
                              :ARG2-of (r2 / range-01
                                    :ARG1 (s2 / structure
                                          :mod (c / control-01))
                                    :ARG3 (c2 / class)))
                        :ARG1-of (p / possible-01)))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 g
                  :ARG1 (t2 / term)
                  :ARG3 (m4 / more)))
      :snt2 (s3 / same-01
            :ARG1 (v2 / variable
                  :ARG1-of (l3 / local-02)
                  :ARG1-of (s4 / scope-01
                        :location (f2 / function-01
                              :ARG1 (m5 / member))))
            :ARG2 (m6 / member
                  :mod (d2 / data)
                  :location f2)))"
247,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.,2,5,3.5,"# ::snt A data member exists permanently in that program's memory as long as it's run.  A local variable inside a member function is temporal and only used to operate in the function and exists as long as the function is run.
(m / multi-sentence
      :snt1 (e / exist-01
            :ARG1 (m2 / member
                  :mod (d / data))
            :location (m3 / memory
                  :poss (p / program
                        :mod (t / that)))
            :duration (p2 / permanent))
      :snt2 (a / and
            :op1 (t2 / temporal
                  :domain (v / variable
                        :ARG1-of (l / local-02)
                        :location (ii / inside
                              :op1 (f / function-01
                                    :ARG1 (m4 / member)))))
            :op2 (u / use-01
                  :ARG1 v
                  :ARG2 (o / operate-01
                        :ARG0 v
                        :location f
                        :mod (o2 / only)))
            :op3 (e2 / exist-01
                  :ARG1 v
                  :duration (a2 / as-long-as
                        :op1 (r / run-01
                              :ARG1 f)))))"
248,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"local variables can only be used within the function, where as data members can be set to public access and can be used throughout",5,5,5,"# ::snt local variables can only be used within the function, where as data members can be set to public access and can be used throughout
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :location (f / function-01)
                  :mod (o / only)))
      :ARG2 (p2 / possible-01
            :ARG1 (a / and
                  :op1 (s / set-03
                        :ARG1 (m / member
                              :part-of (d / data))
                        :ARG2 (a2 / access-01
                              :ARG0 (p3 / public)))
                  :op2 (p4 / possible-01
                        :ARG1 (u2 / use-01
                              :ARG1 v
                              :location (t / throughout))))))"
249,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The local variable is lost once it exits the block of code, while the data member is not.",4,5,4.5,"# ::snt The local variable is lost once it exits the block of code, while the data member is not.
(c / contrast-01
      :ARG1 (l / lose-02
            :ARG1 (v / variable
                  :ARG1-of (l2 / local-02))
            :time (e / exit-01
                  :ARG0 v
                  :ARG1 (b / block
                        :consist-of (c2 / code))))
      :ARG2 (l3 / lose-02
            :polarity -
            :ARG1 (m / member
                  :mod (d / data))))"
250,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.,4,5,4.5,"# ::snt Every member function can access and modify a data member. A local variable can only be used from the line of declaration to the next closing } before it is lost from memory.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / and
                  :op1 (a2 / access-01
                        :ARG0 (f / function
                              :mod (m2 / member
                                    :mod (e / every)))
                        :ARG1 (m3 / member
                              :mod (d / data)))
                  :op2 (m4 / modify-01
                        :ARG0 f
                        :ARG1 m3)))
      :snt2 (p2 / possible-01
            :ARG1 (u / use-01
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :time (f2 / from
                        :op1 (l2 / line
                              :mod (d2 / declare-02))
                        :op2 (c / close-01
                              :mod (n / next)))
                  :mod (o / only)
                  :time (b / before
                        :op1 (l3 / lose-02
                              :ARG1 v
                              :ARG2 (m5 / memory))))))"
251,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes",5,5,5,"# ::snt data member is accessible to all functions in the class, where local variable is only available to the member function and value is lost when function closes
(a / and
      :op1 (a2 / access-01
            :ARG0 (f / function
                  :mod (a3 / all)
                  :part-of (c / class))
            :ARG1 (m / member
                  :mod (d / data)))
      :op2 (a4 / and
            :op1 (a5 / available-02
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :ARG2 f
                  :mod (o / only))
            :op2 (l2 / lose-02
                  :ARG1 (v2 / value)
                  :time (c2 / close-01
                        :ARG1 (f2 / function)))))"
252,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.,4,5,4.5,"# ::snt Data members are variables that are declared inside the class definition but outside of the bodies of the class member functions. Local variables can only be used within the function declaration.
(m / multi-sentence
      :snt1 (v / variable
            :domain (m2 / member
                  :mod (d / data))
            :ARG1-of (d2 / declare-02
                  :location (ii / inside
                        :op1 (d3 / define-01
                              :ARG1 (c / class))))
            :ARG1-of (c2 / contrast-01
                  :ARG2 (d4 / declare-02
                        :ARG1 v
                        :location (o / outside
                              :op1 (b / body
                                    :poss (f / function-01
                                          :ARG1 (m3 / member
                                                :mod c)))))))
      :snt2 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (v2 / variable
                        :ARG1-of (l / local-02))
                  :mod (o2 / only)
                  :location (d5 / declare-02
                        :ARG1 f))))"
253,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"The data member can be accessed outside of the class, whereas the local variable cannot.",3,5,4,"# ::snt The data member can be accessed outside of the class, whereas the local variable cannot.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (a / access-01
                  :ARG1 (m / member
                        :mod (d / data))
                  :location (o / outside
                        :op1 (c2 / class))))
      :ARG2 (p2 / possible-01
            :polarity -
            :ARG1 a
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))))"
254,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. ",5,5,5,"# ::snt Local variables cannot be used outside of that function body. When a function terminates the values of its local variables are lost. Where as data members are variables in a class definition, and they exist throughout the life of the object. 
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (u / use-01
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :location (o / outside
                        :op1 (b / body
                              :mod (f / function-01)
                              :mod (t / that)))))
      :snt2 (l2 / lose-02
            :ARG1 (v2 / value
                  :poss (v3 / variable
                        :ARG1-of (l3 / local-02)
                        :poss (f2 / function-01)))
            :time (t2 / terminate-01
                  :ARG1 (f3 / function-01))
            :snt3 (a / and
                  :op1 (v4 / variable
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (c / class)
                              :ARG2 (m2 / member)))
                  :op2 (e / exist-01
                        :ARG1 v4
                        :duration (l4 / life
                              :poss (o2 / object))))))"
255,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,a local variable in a member function has to be static. a data member can change its value freely.,0,4,2,"# ::snt a local variable in a member function has to be static. a data member can change its value freely.
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG2 (s / static
                  :domain (v / variable
                        :ARG1-of (l / local-02)
                        :part-of (f / function-01
                              :ARG0 (m2 / member)))))
      :snt2 (p / possible-01
            :ARG1 (c / change-01
                  :ARG0 (m3 / member
                        :mod (d / data))
                  :ARG1 (v2 / value
                        :poss v)
                  :ARG1-of (f2 / free-04))))"
256,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class",5,5,5,"# ::snt a local variable is only useable within the function it is defined, whereas a data member is available to any method within its class
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02))
                  :mod (o / only)
                  :location (f / function
                        :ARG1-of (d / define-01
                              :ARG0 v))))
      :ARG2 (a / available-02
            :ARG1 (m / method
                  :mod (a2 / any)
                  :location (c2 / class
                        :poss v))
            :ARG2 (m2 / member
                  :mod (d2 / data))))"
257,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.,5,5,5,"# ::snt Variable declared in a function defination's body cannot be used outside of that function.  Data members accessible only to member function of that class.
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (u / use-01
                  :ARG1 (v / variable
                        :ARG1-of (d / declare-02
                              :location (b / body
                                    :poss (d2 / define-01
                                          :ARG1 (f / function)))))
                  :location (o / outside
                        :op1 (f2 / function
                              :mod (t / that)))))
      :snt2 (a / access-01
            :ARG0 (f3 / function
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / class
                              :mod (t2 / that))
                        :ARG2 (m2 / member)))
            :ARG1 (d3 / data)
            :mod (o2 / only)))"
258,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"data members   local variables are declared in a function definition’s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   ",5,4,4.5,"# ::snt data members   local variables are declared in a function definition’s body. they Cannot be used outside of that function body. When a function terminates, the values of its local variables are lost.   
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (v / variable
                  :ARG1-of (l / local-02)
                  :poss (m2 / member
                        :mod (d2 / data)))
            :location (b / body
                  :poss (t / thing
                        :ARG2-of (d3 / define-01
                              :ARG1 (f / function-01)))))
      :snt2 (p / possible-01
            :polarity -
            :ARG1 (u / use-01
                  :ARG1 v
                  :location (o / outside
                        :op1 (b2 / body
                              :mod (f2 / function-01)))))
      :snt3 (l2 / lose-02
            :ARG1 (t2 / thing
                  :ARG2-of (v2 / value-01
                        :ARG1 (v3 / variable
                              :ARG1-of (l3 / local-02)
                              :poss (f3 / function-01))))
            :time (t3 / terminate-01
                  :ARG1 f3)))"
259,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variable is only available in the function.,4,5,4.5,"# ::snt local variable is only available in the function.
(a / available-02
      :ARG2 (v / variable
            :ARG1-of (l / local-02))
      :location (f / function)
      :mod (o / only))"
260,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,local variables are accessed inside member functions only while data members   can be accessed throughout the class,4,5,4.5,"# ::snt local variables are accessed inside member functions only while data members   can be accessed throughout the class
(c / contrast-01
      :ARG1 (a / access-01
            :ARG1 (v / variable
                  :ARG1-of (l / local-02))
            :location (f / function-01
                  :ARG0 (m / member))
            :mod (o / only))
      :ARG2 (p / possible-01
            :ARG1 (a2 / access-01
                  :ARG1 (m2 / member
                        :mod (d / data))
                  :location (t / throughout
                        :op1 (c2 / class)))))"
261,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.",5,5,5,"# ::snt A data member is accessible anywhere in the class, while i local variable in a member function is only accessible in that particular function, and is freed after the function exits.
(c / contrast-01
      :ARG1 (a / accessible-02
            :ARG1 (m / member
                  :mod (d / data))
            :location (a2 / anywhere
                  :location (c2 / class)))
      :ARG2 (a3 / and
            :op1 (a4 / accessible-02
                  :ARG1 (v / variable
                        :ARG1-of (l / local-02)
                        :part-of (f / function-01
                              :ARG1 (m2 / member)))
                  :location (f2 / function-01
                        :mod (p / particular)
                        :mod (t / that))
                  :mod (o / only))
            :op2 (f3 / free-01
                  :ARG1 v
                  :time (a5 / after
                        :op1 (e / exit-01
                              :ARG0 f2)))))"
262,2.2,What is the difference between a data member and a local variable inside a member function?,Data members can be accessed from any member functions inside the class defintion. Local variables can only be accessed inside the member function that defines them.,"a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. ",3,5,4,"# ::snt a Data member is encapsulated within a class or object,  it is static and can be shared by all instances of that class.  however local variable's are only used from the function or block in which it is declared and not the whole class. other wise they would be called global variables. 
(m / multi-sentence
      :snt1 (a / and
            :op1 (e / encapsulate-01
                  :ARG1 (m2 / member
                        :mod (d / data))
                  :location (o / or
                        :op1 (c / class)
                        :op2 (o2 / object)))
            :op2 (s / static
                  :domain m2)
            :op3 (p / possible-01
                  :ARG1 (s2 / share-01
                        :ARG0 (ii / instance
                              :mod (a2 / all)
                              :poss (c2 / class
                                    :mod (t / that)))
                        :ARG1 m2)))
      :snt2 (c3 / contrast-01
            :ARG1 (a3 / and
                  :op1 (u / use-01
                        :ARG1 (v / variable
                              :ARG1-of (l / local-02))
                        :source (o3 / or
                              :op1 (f / function)
                              :op2 (b / block)
                              :location-of (d2 / declare-02
                                    :ARG1 m2))
                        :mod (o4 / only))
                  :op2 (u2 / use-01
                        :polarity -
                        :ARG1 v
                        :ARG2 c2
                        :mod (w / whole))))
      :snt2 (c4 / call-01
            :ARG1 v
            :ARG2 (v2 / variable
                  :mod (g / globe))
            :mod (o5 / other)))"
263,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.,2,3,2.5,"# ::snt A constructor initializes an object or objects of a class.  A function of a class performs a task such as display a line of text or do some kind of mathematical operations.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (o / or
                  :op1 (o2 / object)
                  :op2 (o3 / object
                        :poss (c2 / class))))
      :snt2 (p2 / perform-02
            :ARG0 (f / function
                  :poss (c3 / class))
            :ARG1 (t / task
                  :example (o4 / or
                        :op1 (d / display-01
                              :ARG0 f
                              :ARG1 (l / line
                                    :consist-of (t2 / text)))
                        :op2 (d2 / do-02
                              :ARG0 f
                              :ARG1 (o5 / operate-01
                                    :mod (m2 / mathematics)
                                    :mod (k / kind
                                          :mod (s / some))))))))"
264,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.",2,4,3,"# ::snt all constructors are functions but not all functions are constructors. Also functions can have nearly infinite purposes, while constructors always create an instance of whichever class you are using. You can change how a constructor does something but not what it does. With functions you can change not only the how but also the what.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (f / function
                  :domain (c2 / constructor
                        :mod (a / all)))
            :ARG2 (c3 / constructor
                  :polarity -
                  :domain (f2 / function
                        :mod (a2 / all))))
      :snt2 (c4 / contrast-01
            :ARG1 (p / possible-01
                  :ARG1 (h / have-03
                        :ARG0 (f3 / function)
                        :ARG1 (p2 / purpose
                              :mod (ii / infinite
                                    :degree (n / near))))
                  :mod (a3 / also))
            :ARG2 (c5 / create-01
                  :ARG0 (c6 / constructor)
                  :ARG1 (ii2 / instance
                        :poss (c7 / class
                              :ARG1-of (u / use-01
                                    :ARG0 (y / you))))
                  :time (a4 / always)))
      :snt2 c4
      :ARG1 (p3 / possible-01
            :ARG1 (c8 / change-01
                  :ARG0 (y2 / you)
                  :ARG1 (t / thing
                        :manner-of (d / do-02
                              :ARG0 c3))
                  :ARG1 (s / something)))
      :ARG2 (p4 / possible-01
            :polarity -
            :ARG1 (t2 / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 c3)))
      :snt3 (p5 / possible-01
            :ARG1 (a5 / and
                  :op1 (t3 / thing
                        :mod (a6 / also))
                  :op2 (t4 / thing
                        :mod (a7 / also)))
            :prep-with (f4 / function)))"
265,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Unlike regular functions, constructors are only used to initialize an object’s data when it is created. Constructors must also be given the same name as the class and cannot return any values. ",5,5,5,"# ::snt Unlike regular functions, constructors are only used to initialize an object’s data when it is created. Constructors must also be given the same name as the class and cannot return any values. 
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (c / constructor)
            :ARG2 (ii / initialize-01
                  :ARG0 c
                  :ARG1 (d / data
                        :poss (o / object))
                  :time (c2 / create-01
                        :ARG1 o))
            :mod (o2 / only)
            :ARG1-of (r / resemble-01
                  :polarity -
                  :ARG2 (f / function-01
                        :ARG1-of (r2 / regular-03))))
      :snt2 (a / and
            :op1 (o3 / obligate-01
                  :ARG2 (g / give-01
                        :ARG1 (n / name
                              :ARG1-of (s / same-01
                                    :ARG2 (c3 / class)))
                        :ARG2 c
                        :mod (a2 / also)))
            :op2 (p / possible-01
                  :polarity -
                  :ARG1 (r3 / return-02
                        :ARG0 c
                        :ARG1 (v / value
                              :mod (a3 / any))))))"
266,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.",4,5,4.5,"# ::snt A constructor typically used to intialize data members and allocate resources, for instance memory, files, etc.  Also a constructor cannot return values.  Functions are operations that maybe globally defined.
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (c / constructor)
            :ARG2 (a / and
                  :op1 (ii / initialize-01
                        :ARG0 c
                        :ARG1 (m2 / member
                              :mod (d / data)))
                  :op2 (a2 / allocate-01
                        :ARG0 c
                        :ARG1 (r / resource
                              :example (a3 / and
                                    :op1 (m3 / memory)
                                    :op2 (f / file)
                                    :op3 (e / et-cetera)))))
            :ARG1-of (t / typical-02))
      :snt2 (p / possible-01
            :polarity -
            :ARG1 (r2 / return-02
                  :ARG0 (c2 / constructor)
                  :ARG1 (v / value))
            :mod (a4 / also))
      :snt3 (o / operate-01
            :ARG1 (f2 / function)
            :ARG1-of (d2 / define-01
                  :mod (g / globe)
                  :ARG1-of p)))"
267,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.",3,5,4,"# ::snt Constructors cannot return values, so they cannot specify a return type. Normally, constructors are declared public.
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (r / return-02
                  :ARG0 (p2 / person
                        :ARG0-of (c / construct-01))
                  :ARG1 (v / value))
            :ARG0-of (c2 / cause-01
                  :ARG1 (p3 / possible-01
                        :polarity -
                        :ARG1 (s / specify-01
                              :ARG0 p2
                              :ARG1 (t / type
                                    :mod (r2 / return-02))))))
      :snt2 (d / declare-02
            :ARG1 (p4 / public
                  :domain p2
                  :ARG0-of (c3 / construct-01)))
      :ARG1-of (n / normal-02))"
268,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.,2,4,3,"# ::snt A constructor is a method that starts new instances of a class. (Example: Employee employee1(parameters) starts a new instance of object of type Employee). A function is simply a module w/in a program that completes its single desired task.
(m / multi-sentence
      :snt1 (m2 / method
            :domain (p / person
                  :ARG0-of (c / construct-01))
            :ARG0-of (s / start-01
                  :ARG1 (ii / instance
                        :ARG1-of (n / new-01)
                        :part-of (c2 / class)))
            :example (s2 / start-01
                  :ARG0 (p2 / parameter
                        :value 1
                        :mod (p3 / person
                              :name (n2 / name
                                    :op1 ""Employee"")))
                  :ARG1 (ii2 / instance
                        :ARG1-of (n3 / new-01)
                        :part-of (o / object
                              :ARG1-of (t / type-01
                                    :ARG2 (p4 / person
                                          :name n2
                                          :op1 ""Employee""))))))
      :snt2 (m3 / module
            :domain (f / function)
            :ARG1-of (s3 / simple-02)
            :location (p5 / program
                  :ARG0-of (c3 / complete-01
                        :ARG1 (t2 / task
                              :ARG1-of (d / desire-01
                                    :ARG0 f)
                              :ARG1-of (s4 / single-02))))))"
269,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is called whenever a new object of that class is made.,4,3,3.5,"# ::snt A constructor is called whenever a new object of that class is made.
(c / call-01
      :ARG1 (p / person
            :ARG0-of (c2 / construct-01))
      :time (m / make-01
            :ARG1 (o / object
                  :ARG1-of (n / new-01)
                  :part-of (c3 / class
                        :mod (t / that)))))"
270,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.,3,5,4,"# ::snt A constructor does not return any date and has no return type.  Functions can return date or not return data can have a return type.
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / return-02
                  :polarity -
                  :ARG0 (c / constructor)
                  :ARG1 (d / date
                        :mod (a2 / any)))
            :op2 (h / have-03
                  :polarity -
                  :ARG0 c
                  :ARG1 (t / type
                        :mod (r2 / return-02))))
      :snt2 (p / possible-01
            :ARG1 (o / or
                  :op1 (r3 / return-02
                        :ARG0 (f / function)
                        :ARG1 (d2 / date))
                  :op2 (r4 / return-02
                        :polarity -
                        :ARG0 f
                        :ARG1 (d3 / data)))
            :ARG2 (t2 / type
                  :mod r4)))"
271,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. ",4,4,4,"# ::snt A constructor is automatically called whenever an instance of a class is created, a function must be explicitly called by the user. 
(a / and
      :op1 (c / call-01
            :ARG1 (t / thing
                  :ARG0-of (c2 / construct-01))
            :manner (a2 / automatic)
            :time (c3 / create-01
                  :ARG1 (ii / instance
                        :part-of (c4 / class))))
      :op2 (o / obligate-01
            :ARG2 (c5 / call-01
                  :ARG0 (p / person
                        :ARG0-of (u / use-01))
                  :ARG1 (f / function)
                  :manner (e / explicit))))"
272,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructors cannot return values, so they cannot specify a return type like functions can.",3,5,4,"# ::snt constructors cannot return values, so they cannot specify a return type like functions can.
(c / cause-01
      :ARG0 (p / possible-01
            :polarity -
            :ARG1 (r / return-02
                  :ARG0 (p2 / person
                        :ARG0-of (c2 / construct-01))
                  :ARG1 (v / value)))
      :ARG1 (p3 / possible-01
            :polarity -
            :ARG1 (s / specify-01
                  :ARG0 p2
                  :ARG1 (t / type
                        :mod (r2 / return-02))
                  :ARG1-of (r3 / resemble-01
                        :ARG2 (p4 / possible-01
                              :ARG1 (r4 / return-02
                                    :ARG1 (f / function)))))))"
273,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created.,4,3,3.5,"# ::snt A constructor is a function used to initialize an object's data when it is created.
(f / function
      :domain (p / person
            :ARG0-of (c / construct-01))
      :ARG1-of (u / use-01
            :ARG2 (ii / initialize-01
                  :ARG0 p
                  :ARG1 (d / data
                        :poss (o / object))
                  :time (c2 / create-01
                        :ARG1 o))))"
274,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.,2,3,2.5,"# ::snt a constructor initialises everything so that nothing is left empty or with random varioubles and a function modifies those variables with data.
(a / and
      :op1 (ii / initialize-01
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (e / everything)
            :purpose (l / leave-14
                  :ARG1 (o / or
                        :op1 (e2 / empty
                              :domain (n / nothing))
                        :op2 (v / variable
                              :ARG1-of (r / random-02)))))
      :op2 (m / modify-01
            :ARG0 (f / function)
            :ARG1 (v2 / variable
                  :mod (t / that))
            :instrument (d / data)))"
275,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initialized values at the execution of its instantiation. It provides default values.,4,3,3.5,"# ::snt A constructor initialized values at the execution of its instantiation. It provides default values.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (v / value)
            :time (e / execute-01
                  :ARG1 (ii2 / instantiate-01
                        :ARG0 p)))
      :snt2 (p2 / provide-01
            :ARG0 (ii3 / it)
            :ARG1 (v2 / value
                  :mod (d / default))))"
276,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.",4,4,4,"# ::snt A constructor sets up the default values of variables when an object is instantiated, whereas a function allows interaction with that object.
(c / contrast-01
      :ARG1 (s / set-up-03
            :ARG0 (p / person
                  :ARG0-of (c2 / construct-01))
            :ARG1 (v / value
                  :mod (d / default)
                  :poss (v2 / variable))
            :time (ii / instantiate-01
                  :ARG1 (o / object)))
      :ARG2 (a / allow-01
            :ARG0 (f / function)
            :ARG1 (ii2 / interact-01
                  :ARG1 (o2 / object
                        :mod (t / that)))))"
277,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.",3,3,3,"# ::snt A constructor is used to create an object that can be employed in the main function of a program.  This may or may not execute code along with it.  A function is a set of code that executes when called, but does not create a new object.
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (c / constructor)
            :ARG2 (c2 / create-01
                  :ARG0 c
                  :ARG1 (o / object
                        :ARG1-of (e / employ-01
                              :ARG2 (f / function-01
                                    :ARG1 (p / program)
                                    :mod (m2 / main))
                              :ARG1-of (p2 / possible-01)))))
      :snt2 (o2 / or
            :op1 (p3 / possible-01
                  :ARG1 (e2 / execute-01
                        :ARG0 (t / this)
                        :ARG1 (c3 / code)
                        :accompanier (ii / it)))
            :op2 (p4 / possible-01
                  :polarity -
                  :ARG1 (e3 / execute-01
                        :ARG0 t
                        :ARG1 (c4 / code))))
      :snt3 (c5 / contrast-01
            :ARG1 (s / set
                  :consist-of (c6 / code
                        :ARG1-of (e4 / execute-01
                              :time (c7 / call-01
                                    :ARG1 c6)))
                  :ARG2 (c8 / create-01
                        :polarity -
                        :ARG0 s
                        :ARG1 (o3 / object
                              :ARG1-of (n / new-01))))))"
278,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.,3,5,4,"# ::snt a constructor initializes data members but the functions actually perform tasks. Constructors cant return values either.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (ii / initialize-01
                  :ARG0 (p / person
                        :ARG0-of (c2 / construct-01))
                  :ARG1 (p2 / person
                        :ARG0-of (h / have-org-role-91
                              :ARG1 (d / data)
                              :ARG2 (m2 / member))))
            :ARG2 (p3 / perform-02
                  :ARG0 (f / function)
                  :ARG1 (t / task)
                  :ARG1-of (a / actual-02)))
      :snt2 (p4 / possible-01
            :polarity -
            :ARG1 (r / return-02
                  :ARG0 (c3 / constructor)
                  :ARG1 (v / value)
                  :mod (e / either))))"
279,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor does not need a type, and it is used to initialize the variables.",3,4,3.5,"# ::snt a constructor does not need a type, and it is used to initialize the variables.
(a / and
      :op1 (n / need-01
            :polarity -
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (t / type))
      :op2 (u / use-01
            :ARG1 t
            :ARG2 (ii / initialize-01
                  :ARG0 p
                  :ARG1 (v / variable))))"
280,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",Constructors don't have a return type.,3,5,4,"# ::snt Constructors don't have a return type.
(h / have-03
      :polarity -
      :ARG0 (p / person
            :ARG0-of (c / construct-01))
      :ARG1 (t / type
            :mod (r / return-02)))"
281,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructor creates the class object into memory where functions perform actions against that object,2,4,3,"# ::snt constructor creates the class object into memory where functions perform actions against that object
(c / create-01
      :ARG0 (p / person
            :ARG0-of (c2 / construct-01))
      :ARG1 (o / object
            :mod (c3 / class))
      :location (m / memory
            :location-of (p2 / perform-02
                  :ARG0 (f / function)
                  :ARG1 (a / act-02
                        :ARG0 f
                        :ARG1 (o2 / object
                              :mod c3)))))"
282,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors cannot return values,3,5,4,"# ::snt constructors cannot return values
(p / possible-01
      :polarity -
      :ARG1 (r / return-02
            :ARG0 (p2 / person
                  :ARG0-of (c / construct-01))
            :ARG1 (v / value)))"
283,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes values and a function usual performs some sort of operation.,2,3,2.5,"# ::snt A constructor initializes values and a function usual performs some sort of operation.
(a / and
      :op1 (ii / initialize-01
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (v / value))
      :op2 (p2 / perform-02
            :ARG0 (f / function
                  :mod (u / usual))
            :ARG1 (o / operate-01
                  :mod (s / sort
                        :mod (s2 / some)))))"
284,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.,5,5,5,"# ::snt A constructor is a function used to initialize an object's data when it is created. It's call is made implicitly when the object is created and must be defined with the same name as the class. Constructor also cannot return a value like a function can.
(m / multi-sentence
      :snt1 (f / function
            :domain (c / constructor)
            :ARG1-of (u / use-01
                  :ARG2 (ii / initialize-01
                        :ARG0 f
                        :ARG1 (d / data
                              :poss (o / object))
                        :time (c2 / create-01
                              :ARG1 o))))
      :snt2 (a / and
            :op1 (c3 / call-02
                  :ARG1 (ii2 / it)
                  :manner (ii3 / implicit)
                  :time (c4 / create-01
                        :ARG1 (o2 / object)))
            :op2 (o3 / obligate-01
                  :ARG1 (d2 / define-01
                        :ARG1 ii2
                        :ARG2 (n / name
                              :ARG1-of (s / same-01
                                    :ARG2 (c5 / class))))))
      :snt2 (p / possible-01
            :polarity -
            :ARG1 (r / return-02
                  :ARG0 (c6 / constructor)
                  :ARG1 (v / value)
                  :ARG1-of (r2 / resemble-01
                        :ARG2 (p2 / possible-01
                              :ARG1 (r3 / return-02
                                    :ARG0 (f2 / function))
                              :ARG1 v))
                  :mod (a2 / also))))"
285,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.,4,4,4,"# ::snt A constructor is used to create an instance of a class and has the same name as that class. A function cannot have the same name as a class and computes data.
(m / multi-sentence
      :snt1 (a / and
            :op1 (u / use-01
                  :ARG1 (c / constructor)
                  :ARG2 (c2 / create-01
                        :ARG0 c
                        :ARG1 (ii / instance
                              :poss (c3 / class))))
            :op2 (h / have-03
                  :ARG0 c
                  :ARG1 (n / name
                        :ARG1-of (s / same-01
                              :ARG2 (c4 / class
                                    :mod (t / that))))))
      :snt2 (a2 / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (h2 / have-03
                        :ARG0 (f / function)
                        :ARG1 (n2 / name
                              :ARG1-of (s2 / same-01
                                    :ARG2 c4))))
            :op2 (c5 / compute-01
                  :ARG0 f
                  :ARG1 (d / data))))"
286,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor is a function that initializes a class instance, a function performs whatever task it is written for",2,4,3,"# ::snt a constructor is a function that initializes a class instance, a function performs whatever task it is written for
(a / and
      :op1 (f / function
            :domain (p / person
                  :ARG0-of (c / construct-01))
            :ARG0-of (ii / initialize-01
                  :ARG1 (ii2 / instance
                        :mod (c2 / class))))
      :op2 (p2 / perform-02
            :ARG0 f
            :ARG1 (t / task
                  :mod (w / whatever)
                  :ARG1-of (w2 / write-01
                        :ARG0 f))))"
287,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","A constructor cannot return values, not even void, but function get a return value.",3,5,4,"# ::snt A constructor cannot return values, not even void, but function get a return value.
(c / contrast-01
      :ARG1 (a / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (r / return-02
                        :ARG0 (p2 / person
                              :ARG0-of (c2 / construct-01))
                        :ARG1 (v / value)))
            :op2 (p3 / possible-01
                  :polarity -
                  :ARG1 (r2 / return-02
                        :ARG0 p2
                        :ARG1 (v2 / value))))
      :ARG2 (g / get-01
            :ARG0 (f / function)
            :ARG1 v2))"
288,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.",5,5,5,"# ::snt a constructor cannot return values, its not even void. it is used to initialize an object's data when it is created. whereas, a function is created to do a specific task, and it can return values.
(m / multi-sentence
      :snt1 (a / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (r / return-02
                        :ARG0 (t / thing
                              :ARG0-of (c / construct-01))
                        :ARG1 (v / value)))
            :op2 (v2 / void
                  :polarity -
                  :domain t
                  :mod (e / even)))
      :snt2 (u / use-01
            :ARG1 (ii / it)
            :ARG2 (ii2 / initialize-01
                  :ARG0 ii
                  :ARG1 (d / data
                        :poss (o / object))
                  :time (c2 / create-01
                        :ARG1 ii)))
      :snt3 (c3 / contrast-01
            :ARG2 (a2 / and
                  :op1 (c4 / create-01
                        :ARG1 (f / function)
                        :purpose (d2 / do-02
                              :ARG0 f
                              :ARG1 (t2 / task
                                    :ARG1-of (s / specific-02))))
                  :op2 (p2 / possible-01
                        :ARG1 (r2 / return-01
                              :ARG0 f
                              :ARG1 (v3 / value))))))"
289,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",A constructor initializes an object. A function is part of an object.,1,4,2.5,"# ::snt A constructor initializes an object. A function is part of an object.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (o / object))
      :snt2 (p2 / part
            :part-of (o2 / object)
            :domain (f / function-01)))"
290,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.",constructors initialize the data that is then used in the calculations of a   function,2,3,2.5,"# ::snt constructors initialize the data that is then used in the calculations of a   function
(ii / initialize-01
      :ARG0 (p / person
            :ARG0-of (c / construct-01))
      :ARG1 (d / data
            :ARG1-of (u / use-01
                  :ARG2 (c2 / calculate-01
                        :ARG1 (f / function))
                  :time (t / then))))"
291,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","a constructor is called when the class is created, a function can be called any time.",4,3,3.5,"# ::snt a constructor is called when the class is created, a function can be called any time.
(a / and
      :op1 (c / call-01
            :ARG1 (p / person
                  :ARG0-of (c2 / construct-01))
            :time (c3 / create-01
                  :ARG1 (c4 / class)))
      :op2 (p2 / possible-01
            :ARG1 (c5 / call-01
                  :ARG1 (f / function)
                  :time (t / time
                        :mod (a2 / any)))))"
292,2.3,What is the difference between a constructor and a function?,"A constructor is called whenever an object is created, whereas a function needs to be called explicitely. Constructors do not have return type, but functions have to indicate a return type.","constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. ",4,4,4,"# ::snt constructor is a special block of statements called when an object is created, either when it is declared statically or constructed on the stack. However a function is a portion of code within a larger program, which performs a specific task and independent to the rest of the code. 
(m / multi-sentence
      :snt1 (b / block
            :consist-of (s / state-01)
            :ARG1-of (s2 / special-02)
            :ARG1-of (c / call-01
                  :time (c2 / create-01
                        :ARG1 (o / object)
                        :time (o2 / or
                              :op1 (d / declare-02
                                    :ARG1 o
                                    :manner (s3 / statical))
                              :op2 (c3 / construct-01
                                    :ARG1 o
                                    :location (s4 / stack))))))
      :snt2 (c4 / contrast-01
            :ARG2 (f / function
                  :domain (p / portion
                        :part-of (c5 / code
                              :location (p2 / program
                                    :ARG1-of (h / have-degree-91
                                          :ARG2 (l / large)
                                          :ARG3 (m2 / more)))
                              :ARG0-of (p3 / perform-02
                                    :ARG1 (t / task
                                          :ARG1-of (s5 / specific-02)))
                              :ARG0-of (d2 / depend-01
                                    :polarity -
                                    :ARG1 (r / rest
                                          :part-of c5)))))))"
293,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",The compiler creates a default constructor when we do not define one in our class file,5,5,5,"# ::snt The compiler creates a default constructor when we do not define one in our class file
(c / create-01
      :ARG0 (p / person
            :ARG0-of (c2 / compile-01))
      :ARG1 (c3 / constructor
            :mod (d / default))
      :time (d2 / define-01
            :polarity -
            :ARG0 (w / we)
            :ARG1 c3
            :location (f / file
                  :mod (c4 / class)
                  :poss w)))"
294,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",during compilation,2,5,3.5,"# ::snt during compilation
(c / compile-01)"
295,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When the class does not explicitly include a constructor.,5,5,5,"# ::snt When the class does not explicitly include a constructor.
(h / have-condition-91
      :ARG2 (ii / include-01
            :polarity -
            :ARG0 (c / class)
            :ARG1 (p / person
                  :ARG0-of (c2 / construct-01))
            :ARG1-of (e / explicit-02)))"
296,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When no parameters are set is when a default constructor is used.,3,3,3,"# ::snt When no parameters are set is when a default constructor is used.
(u / use-01
      :ARG1 (c / constructor
            :mod (d / default))
      :time (s / set-02
            :polarity -
            :ARG1 (p / parameter)))"
297,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When a class does not explicitly include a constructor.,5,5,5,"# ::snt When a class does not explicitly include a constructor.
(h / have-condition-91
      :ARG2 (ii / include-01
            :polarity -
            :ARG1 (p / person
                  :ARG0-of (c / construct-01))
            :ARG2 (c2 / class)
            :ARG1-of (e / explicit-02)))"
298,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When there are no arguments passed.,1,2,1.5,"# ::snt When there are no arguments passed.
(h / have-condition-91
      :ARG2 (p / pass-01
            :polarity -
            :ARG1 (a / argue-01)))"
299,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when there is not one already for a specific class,5,5,5,"# ::snt when there is not one already for a specific class
(h / have-condition-91
      :ARG2 (o / one
            :polarity -
            :purpose (c / class
                  :ARG1-of (s / specific-02))
            :time (a / already)))"
300,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When it the programs compiles,2,5,3.5,"# ::snt When it the programs compiles
(b / be-temporally-at-91
      :ARG2 (c / compile-01
            :ARG1 (p / program)))"
301,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when a constructor is not provided by the programmer of the class,5,5,5,"# ::snt when a constructor is not provided by the programmer of the class
(h / have-condition-91
      :ARG2 (p / provide-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG0-of (p3 / program-01
                        :ARG1 (c / class)))
            :ARG1 p2
            :ARG0-of (c2 / construct-01)))"
302,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",In any class that does not explicitly include a constructor.,5,5,5,"# ::snt In any class that does not explicitly include a constructor.
(ii / include-01
      :polarity -
      :ARG1 (p / person
            :ARG0-of (c / construct-01))
      :ARG2 (c2 / class
            :mod (a / any))
      :ARG1-of (e / explicit-02))"
303,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",Before the main function of the code.,0,2,1,"# ::snt Before the main function of the code.
(b / be-temporally-at-91
      :ARG2 (b2 / before
            :op1 (f / function-01
                  :ARG0 (c / code)
                  :mod (m / main))))"
304,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",whenevery you dont specifiy your own,5,5,5,"# ::snt whenevery you dont specifiy your own
(s / specify-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (t / thing
            :poss y)
      :time (w / whenever))"
305,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When non are provided,5,5,5,"# ::snt When non are provided
(h / have-condition-91
      :ARG2 (p / provide-01
            :ARG1 (t / thing
                  :polarity -)))"
306,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ will create a default constructor when no other constructor is present.,5,5,5,"# ::snt C++ will create a default constructor when no other constructor is present.
(c / create-01
      :ARG0 (l / language
            :name (n / name
                  :op1 ""C++""))
      :ARG1 (c2 / constructor
            :mod (d / default))
      :time (p / present-02
            :polarity -
            :ARG1 (c3 / constructor
                  :mod (o / other))))"
307,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor was specified in the constructor's class, but the class is instantiated in a program.",5,5,5,"# ::snt When no constructor was specified in the constructor's class, but the class is instantiated in a program.
(h / have-condition-91
      :ARG2 (c / contrast-01
            :ARG1 (s / specify-01
                  :polarity -
                  :ARG1 (p / person
                        :ARG0-of (c2 / construct-01))
                  :location (c3 / class
                        :poss p))
            :ARG2 (ii / instantiate-01
                  :ARG1 c3
                  :location (p2 / program))))"
308,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","When no constructor exists when one is needed, a parameterless default constructor is declared.",5,5,5,"# ::snt When no constructor exists when one is needed, a parameterless default constructor is declared.
(d / declare-02
      :ARG1 (c / constructor
            :ARG1-of (d2 / default-01)
            :ARG1-of (h / have-polarity-91
                  :ARG2 -
                  :ARG2 (p / parameter)))
      :time (e / exist-01
            :polarity -
            :ARG1 (c2 / constructor)
            :time (n / need-01
                  :ARG1 c2)))"
309,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","The Compiler creates this automatically for you, unless you specifically create one.",5,5,5,"# ::snt The Compiler creates this automatically for you, unless you specifically create one.
(c / create-01
      :ARG0 (p / product
            :ARG0-of (c2 / compile-01))
      :ARG1 (t / this)
      :ARG1-of (a / automatic-02)
      :beneficiary (y / you)
      :condition (c3 / create-01
            :polarity -
            :ARG0 y
            :ARG1 t
            :ARG1-of (s / specific-02)))"
310,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",In any class that doesn't explicitly include a constructor.,5,5,5,"# ::snt In any class that doesn't explicitly include a constructor.
(ii / include-01
      :polarity -
      :ARG1 (p / person
            :ARG0-of (c / construct-01))
      :ARG2 (c2 / class
            :mod (a / any))
      :ARG1-of (e / explicit-02))"
311,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when no user-defined constructor exists,5,5,5,"# ::snt when no user-defined constructor exists
(h / have-condition-91
      :ARG2 (e / exist-01
            :polarity -
            :ARG1 (p / person
                  :ARG0-of (c / construct-01)
                  :ARG1-of (d / define-01)
                  :ARG0-of d)))"
312,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","If a class does not explicitly include a constructor, the compiler creates one.",5,5,5,"# ::snt If a class does not explicitly include a constructor, the compiler creates one.
(c / create-01
      :ARG0 (p / person
            :ARG0-of (c2 / compile-01))
      :ARG1 (c3 / constructor)
      :condition (ii / include-01
            :polarity -
            :ARG0 (c4 / class)
            :ARG1 c3
            :ARG1-of (e / explicit-02)))"
313,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you do not provide your own constructor.,5,5,5,"# ::snt When you do not provide your own constructor.
(h / have-condition-91
      :ARG2 (p / provide-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (p2 / person
                  :ARG0-of (c / construct-01)
                  :poss y)))"
314,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When a class does not explicitly include a constructor.,5,5,5,"# ::snt When a class does not explicitly include a constructor.
(h / have-condition-91
      :ARG2 (ii / include-01
            :polarity -
            :ARG1 (p / person
                  :ARG0-of (c / construct-01))
            :ARG2 (c2 / class)
            :ARG1-of (e / explicit-02)))"
315,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",C++ creates a default constructor during compilation if one is not provided.,5,5,5,"# ::snt C++ creates a default constructor during compilation if one is not provided.
(c / create-01
      :ARG0 (l / language
            :name (n / name
                  :op1 ""C++""))
      :ARG1 (c2 / constructor
            :mod (d / default))
      :time (c3 / compile-01)
      :condition (p / provide-01
            :polarity -
            :ARG1 c2))"
316,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when a class does not explicitly include a constructor,5,5,5,"# ::snt when a class does not explicitly include a constructor
(h / have-condition-91
      :ARG2 (ii / include-01
            :polarity -
            :ARG1 (p / person
                  :ARG0-of (c / construct-01))
            :ARG2 (c2 / class)
            :ARG1-of (e / explicit-02)))"
317,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",The compiler will provide one when class does not explictly include a consructor.,5,5,5,"# ::snt The compiler will provide one when class does not explictly include a consructor.
(p / provide-01
      :ARG0 (p2 / person
            :ARG0-of (c / compile-01))
      :ARG1 (o / one)
      :time (ii / include-01
            :polarity -
            :ARG0 (c2 / class)
            :ARG1 (c3 / consructor)
            :ARG1-of (c4 / clear-06)))"
318,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when the programmer does not explicitly include a constructor,5,5,5,"# ::snt when the programmer does not explicitly include a constructor
(h / have-condition-91
      :ARG2 (ii / include-01
            :polarity -
            :ARG0 (p / person
                  :ARG0-of (p2 / program-01))
            :ARG1 (p3 / person
                  :ARG0-of (c / construct-01))
            :ARG1-of (e / explicit-02)))"
319,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When one is not explicitly stated.,5,5,5,"# ::snt When one is not explicitly stated.
(h / have-condition-91
      :ARG2 (s / state-01
            :polarity -
            :ARG1 (o / one)
            :ARG1-of (e / explicit-02)))"
320,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",when one is not explicitly included by a class,5,5,5,"# ::snt when one is not explicitly included by a class
(h / have-condition-91
      :ARG2 (ii / include-01
            :polarity -
            :ARG0 (c / class)
            :ARG1 (o / one)
            :ARG1-of (e / explicit-02)))"
321,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.",When you dont specify any constructors.,5,5,5,"# ::snt When you dont specify any constructors.
(h / have-condition-91
      :ARG2 (s / specify-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (c / construct-01)
                  :mod (a / any))))"
322,2.4,When does C++ create a default constructor?,"If no constructor is provided, the compiler provides one by default. If a constructor is defined for a class, the compiler does not create a default constructor.","at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user",5,5,5,"# ::snt at the very beginning when you run a complier, matter a fact in C++ it generates its own default constructor for the class provided if no other constructors have been provided by user
(g / generate-01
      :ARG0 (c / compiler)
      :ARG1 (c2 / constructor
            :mod (d / default)
            :poss c)
      :ARG3 (c3 / class
            :ARG1-of (p / provide-01))
      :time (b / begin-01
            :mod (v / very))
      :time (r / run-01
            :ARG0 (y / you)
            :ARG1 c)
      :condition (p2 / provide-01
            :polarity -
            :ARG0 (p3 / person
                  :ARG0-of (u / use-01))
            :ARG1 (c4 / constructor
                  :mod (o / other)))
      :mod (m / matter-a-fact)
      :mod (l / language
            :name (n / name
                  :op1 ""C++"")))"
323,2.5,How many constructors can be created for a class?,Unlimited number.,Just one per class.,0,0,0,"# ::snt Just one per class.
(r / rate-entity-91
      :ARG1 (o / one
            :mod (j / just))
      :ARG2 (c / class))"
324,2.5,How many constructors can be created for a class?,Unlimited number.,As many as you want so long as they have different parameters.,5,5,5,"# ::snt As many as you want so long as they have different parameters.
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (t / thing
            :ARG1-of (w / want-01
                  :ARG0 (y / you)))
      :condition (a / as-long-as
            :op1 (h2 / have-03
                  :ARG0 (t2 / they)
                  :ARG1 (p / parameter
                        :ARG1-of (d / differ-02)))))"
325,2.5,How many constructors can be created for a class?,Unlimited number.,"There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.",5,5,5,"# ::snt There is no limit to the number of constructors in a class because like functions, constructors can be overloaded.
(l / limit-01
      :polarity -
      :ARG1 (n / number
            :quant-of (c / constructor)
            :location (c2 / class))
      :ARG1-of (c3 / cause-01
            :ARG0 (p / possible-01
                  :ARG1 (o / overload-01
                        :ARG1 (c4 / constructor)
                        :ARG1-of (r / resemble-01
                              :ARG2 (f / function-01))))))"
326,2.5,How many constructors can be created for a class?,Unlimited number.,It depends what type of class is being defined.  Typically you would have a constructor call for each object.,1,2,1.5,"# ::snt It depends what type of class is being defined.  Typically you would have a constructor call for each object.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG0 (ii / it)
            :ARG1 (c / class
                  :mod (t / type)
                  :ARG1-of (d2 / define-01)))
      :snt2 (h / have-03
            :ARG0 (y / you)
            :ARG1 (c2 / call-02
                  :ARG0 (p / person
                        :ARG0-of (c3 / construct-01))
                  :ARG1 (o / object
                        :mod (e / each)))
            :ARG1-of (t2 / typical-02)))"
327,2.5,How many constructors can be created for a class?,Unlimited number.,"In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.",5,5,5,"# ::snt In C++, the constructor can be overloaded in that there can be more than one constructor for a class, each having different parameters.
(p / possible-01
      :ARG1 (o / overload-01
            :ARG1 (c / constructor)
            :ARG1-of (c2 / cause-01
                  :ARG0 (p2 / possible-01
                        :ARG1 (c3 / constructor
                              :quant (m / more-than
                                    :op1 1)
                              :beneficiary (c4 / class)
                              :ARG0-of (h / have-03
                                    :ARG1 (p3 / parameter
                                          :ARG1-of (d / differ-02))
                                    :mod (e / each))))))
      :location (l / language
            :name (n / name
                  :op1 ""C++"")))"
328,2.5,How many constructors can be created for a class?,Unlimited number.,1,0,0,0,"# ::snt 1
(h / have-li-91
      :ARG2 1)"
329,2.5,How many constructors can be created for a class?,Unlimited number.,any number you want,5,5,5,"# ::snt any number you want
(n / number
      :mod (a / any)
      :ARG1-of (w / want-01
            :ARG0 (y / you)))"
330,2.5,How many constructors can be created for a class?,Unlimited number.,One,0,0,0,"# ::snt One
(t / thing
      :quant 1)"
331,2.5,How many constructors can be created for a class?,Unlimited number.,"by default just one, but they may be overloaded to create as many constructors as necessary",5,5,5,"# ::snt by default just one, but they may be overloaded to create as many constructors as necessary
(c / contrast-01
      :ARG1 (d / default-02
            :ARG1 (o / one
                  :mod (j / just)))
      :ARG2 (p / possible-01
            :ARG1 (o2 / overload-01
                  :ARG1 (t / they)
                  :purpose (c2 / create-01
                        :ARG1 (p2 / person
                              :ARG0-of (c3 / construct-01)
                              :ARG1-of (h / have-quant-91
                                    :ARG2 (m / many)
                                    :ARG3 (e / equal)
                                    :ARG4 (n / need-01
                                          :ARG1 p2)))))))"
332,2.5,How many constructors can be created for a class?,Unlimited number.,as many as you want,5,5,5,"# ::snt as many as you want
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (w / want-01
            :ARG0 (y / you)))"
333,2.5,How many constructors can be created for a class?,Unlimited number.,"As many as you want, with different parameters.",5,5,5,"# ::snt As many as you want, with different parameters.
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (t / thing
            :ARG1-of (w / want-01
                  :ARG0 (y / you)))
      :manner (p / parameter
            :ARG1-of (d / differ-02)))"
334,2.5,How many constructors can be created for a class?,Unlimited number.,infinite,5,5,5,"# ::snt infinite
(ii / infinite)"
335,2.5,How many constructors can be created for a class?,Unlimited number.,as many as you need,5,5,5,"# ::snt as many as you need
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (n / need-01
            :ARG0 (y / you)))"
336,2.5,How many constructors can be created for a class?,Unlimited number.,"As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.",5,5,5,"# ::snt As many as are needed, depending on how many variables one wishes to directly modify or leave as default when instantiating an object.
(d / depend-01
      :ARG1 (n / number
            :ARG1-of (e / equal-01
                  :ARG2 (n2 / number
                        :ARG1-of (n3 / need-01))))
      :ARG2 (n4 / number
            :quant-of (v / variable
                  :ARG1-of (m / modify-01
                        :ARG0 (o / one)
                        :ARG1-of (w / wish-01
                              :ARG0 o)
                        :ARG1-of (d2 / direct-02))
                  :ARG1-of (l / leave-13
                        :ARG0 o
                        :ARG2 (d3 / default-01
                              :ARG1 v)
                        :time (ii / instantiate-01
                              :ARG0 o
                              :ARG1 (o2 / object))))))"
337,2.5,How many constructors can be created for a class?,Unlimited number.,"A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.",5,5,5,"# ::snt A very large amount of constructors can be created for any given class through overloading.  When two constructors with a different type or number of parameters are created, they are said to be overloaded, and C++ can recognize which constructor to use based on the type of the variables that are passed/returned.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (c / create-01
                  :ARG1 (c2 / constructor
                        :quant (a / amount
                              :mod (l / large
                                    :degree (v / very))))
                  :purpose (c3 / class
                        :ARG1-of (g / give-01)
                        :mod (a2 / any)))
            :manner (o / overload-01))
      :snt2 (a3 / and
            :op1 (s / say-01
                  :ARG1 (o2 / overload-01
                        :ARG1 (c4 / constructor
                              :quant 2
                              :ARG0-of (h / have-03
                                    :ARG1 (o3 / or
                                          :op1 (t / type
                                                :ARG1-of (d / differ-02))
                                          :op2 (n / number
                                                :quant-of (p2 / parameter)))))))
            :op2 (p3 / possible-01
                  :ARG1 (r / recognize-02
                        :ARG0 (l2 / language
                              :name (n2 / name
                                    :op1 ""C++""))
                        :ARG1 (t2 / thing
                              :ARG2-of (c5 / construct-01)
                              :ARG1-of (u / use-01))
                        :ARG1-of (b / base-02
                              :ARG2 (s2 / slash
                                    :op1 (t3 / type
                                          :poss (v2 / variable
                                                :ARG1-of (p4 / pass-01))
                                          :op2 (v3 / variable
                                                :ARG1-of (r2 / return-01)))))))))"
338,2.5,How many constructors can be created for a class?,Unlimited number.,It depends on the number of objects. Each object should have a constructor.,1,4,2.5,"# ::snt It depends on the number of objects. Each object should have a constructor.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG0 (ii / it)
            :ARG1 (n / number
                  :quant-of (o / object)))
      :snt2 (r / recommend-01
            :ARG1 (h / have-03
                  :ARG0 (o2 / object
                        :mod (e / each))
                  :ARG1 (p / person
                        :ARG0-of (c / construct-01)))))"
339,2.5,How many constructors can be created for a class?,Unlimited number.,"Theoretically unlimited, as long as they are defined by the programmer.",5,5,5,"# ::snt Theoretically unlimited, as long as they are defined by the programmer.
(p / possible-01
      :polarity -
      :ARG1 (l / limit-01
            :mod (t / theory))
      :condition (a / as-long-as
            :op1 (d / define-01
                  :ARG0 (p2 / person
                        :ARG0-of (p3 / program-01))
                  :ARG1 (t2 / they))))"
340,2.5,How many constructors can be created for a class?,Unlimited number.,As many as needed.,5,5,5,"# ::snt As many as needed.
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (t / thing
            :ARG1-of (n / need-01)))"
341,2.5,How many constructors can be created for a class?,Unlimited number.,as many as wanted/needed,5,5,5,"# ::snt as many as wanted/needed
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (s / slash
            :op1 (w / want-01)
            :op2 (n / need-01)))"
342,2.5,How many constructors can be created for a class?,Unlimited number.,several,4,5,4.5,"# ::snt several
(s / several)"
343,2.5,How many constructors can be created for a class?,Unlimited number.,One,0,0,0,"# ::snt One
(t / thing
      :quant 1)"
344,2.5,How many constructors can be created for a class?,Unlimited number.,one,0,0,0,"# ::snt one
(o / one)"
345,2.5,How many constructors can be created for a class?,Unlimited number.,There can be infinite constructors as long as the signature is different.,5,5,5,"# ::snt There can be infinite constructors as long as the signature is different.
(p / possible-01
      :ARG1 (p2 / person
            :ARG0-of (c / construct-01)
            :quant (ii / infinite))
      :condition (a / as-long-as
            :op1 (d / differ-02
                  :ARG1 (s / signature))))"
346,2.5,How many constructors can be created for a class?,Unlimited number.,that depends on the number of data members in the class,0,3,1.5,"# ::snt that depends on the number of data members in the class
(d / depend-01
      :ARG0 (t / that)
      :ARG1 (n / number
            :quant-of (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG1 (c / class)
                        :ARG2 (m / member
                              :mod (d2 / data))))))"
347,2.5,How many constructors can be created for a class?,Unlimited number.,one,0,0,0,"# ::snt one
(o / one)"
348,2.5,How many constructors can be created for a class?,Unlimited number.,you can overload constructors as you need,5,5,5,"# ::snt you can overload constructors as you need
(p / possible-01
      :ARG1 (o / overload-01
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG0-of (c / construct-01))
            :ARG1-of (n / need-01
                  :ARG0 y)))"
349,2.5,How many constructors can be created for a class?,Unlimited number.,As many as the programmer wants to create.,5,5,5,"# ::snt As many as the programmer wants to create.
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (t / thing
            :ARG1-of (c / create-01
                  :ARG0 (p / person
                        :ARG0-of (p2 / program-01))
                  :ARG1-of (w / want-01
                        :ARG0 p))))"
350,2.5,How many constructors can be created for a class?,Unlimited number.,one,0,0,0,"# ::snt one
(o / one)"
351,2.5,How many constructors can be created for a class?,Unlimited number.,"as many as you want, as long as they each have a unique argument list",5,5,5,"# ::snt as many as you want, as long as they each have a unique argument list
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (w / want-01
            :ARG0 (y / you))
      :condition (a / as-long-as
            :op1 (h2 / have-03
                  :ARG0 (t / they
                        :mod (e2 / each))
                  :ARG1 (l / list
                        :topic (a2 / argue-01)
                        :ARG1-of (u / unique-01)))))"
352,2.5,How many constructors can be created for a class?,Unlimited number.,as many as the user decides to use.,5,5,5,"# ::snt as many as the user decides to use.
(h / have-quant-91
      :ARG2 (m / many)
      :ARG3 (e / equal)
      :ARG4 (d / decide-01
            :ARG0 (p / person
                  :ARG0-of (u / use-01))
            :ARG1 (u2 / use-01
                  :ARG0 p)))"
353,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.,5,3,4,"# ::snt A function definition does not require any additional information that needs to be passed inside its parenthesis  to execute. While a definition prototype requires more than one parameters to be passed in order to complete its  task.
(m / multi-sentence
      :snt1 (r / require-01
            :polarity -
            :ARG0 (d / define-01
                  :ARG1 (f / function-01))
            :ARG1 (ii / information
                  :mod (a / additional)
                  :ARG1-of (p / pass-01
                        :ARG2 (ii2 / inside
                              :op1 (p2 / parenthesis
                                    :poss d))
                        :purpose (e / execute-01
                              :ARG1 d))))
      :snt2 (c / contrast-01
            :ARG2 (r2 / require-01
                  :ARG0 (p3 / prototype
                        :mod (d2 / define-01))
                  :ARG1 (p4 / pass-01
                        :ARG1 (p5 / parameter
                              :quant (m2 / more-than
                                    :op1 1))
                        :purpose (c2 / complete-01
                              :ARG0 p3
                              :ARG1 (t / task
                                    :poss p3))))))"
354,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.",1,4,2.5,"# ::snt The FUNCTION PROTOTYPE is where the programmer declares that he/she is using a function other than main( ). This is like declaring a variable, the programmer knows that he/she will be using in the future, but has yet to say where they are going to use it, or how. This is answers the question who, it gives the function a name and character. The function prototype, by common practice is placed at the beginning of the program after the #includes and before main( ). The FUNCTION DEFINITION is the guts of the function. This is where the programmer decides what the function is going to do and tells it how to do it. It takes whatever information it is given and performs the operations. It works sort of like the brain, the brain takes in input and based upon that input performs in some way producing an output. The function defintion is placed outside of main( ) and any other functions. A function is its own entity and should be thought of as such.
(m / multi-sentence
      :snt1 (r / resemble-01
            :ARG1 (t / this)
            :ARG2 (d / declare-02
                  :ARG0 (p / person
                        :ARG0-of (p2 / program-01))
                  :ARG1 (u / use-01
                        :ARG0 p
                        :ARG1 (f / function
                              :ARG1-of (e / except-01
                                    :ARG2 (f2 / function
                                          :name (n / name
                                                :op1 ""main"")))))))
      :snt2 (c / contrast-01
            :ARG1 (k / know-01
                  :ARG0 (p3 / person
                        :ARG0-of (p4 / program-01))
                  :ARG1 (u2 / use-01
                        :ARG0 p3
                        :ARG1 (v / variable)
                        :time (f3 / future)))
            :ARG2 (h / have-03
                  :ARG0 p3
                  :ARG1 (y / yet)
                  :ARG2 (s / say-01
                        :ARG0 p3
                        :ARG1 (o / or
                              :op1 (l / location
                                    :ARG2-of (u3 / use-01
                                          :ARG0 p3
                                          :ARG1 v))
                              :op2 (t2 / thing
                                    :manner-of (u4 / use-01
                                          :ARG0 p3))))))
      :snt3 (a / and
            :op1 (a2 / answer-01
                  :ARG0 (t3 / this)
                  :ARG1 (q / question-01
                        :ARG1 (p5 / person)))
            :op2 (g / give-01
                  :ARG0 t3
                  :ARG1 (a3 / and
                        :op1 (n2 / name-01
                              :ARG1 (f4 / function))
                        :op2 (c2 / character))))
      :snt4 (p6 / prototype
            :mod (f5 / function)
            :manner (p7 / practice-01
                  :mod (c3 / common))))"
355,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.",5,5,5,"# ::snt A function prototype tells the compiler the function name, return type and the number and type of parameters without revealing the implementations contained in the function definition.
(t / tell-01
      :ARG0 (p / prototype
            :mod (f / function))
      :ARG1 (a / and
            :op1 (t2 / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f2 / function)))
            :op2 (t3 / thing
                  :ARG2-of (t4 / type-01
                        :ARG1 (r / return-02
                              :ARG1 f2)))
            :op3 (n2 / number
                  :poss (p2 / parameter))
            :op4 (t5 / thing
                  :ARG1-of (t6 / type-01)))
      :ARG2 (p3 / person
            :ARG0-of (c / compile-01))
      :manner (r2 / reveal-01
            :polarity -
            :ARG0 p
            :ARG1 (ii / implement-01
                  :ARG1-of (c2 / contain-01
                        :ARG0 (t7 / thing
                              :ARG2-of (d / define-01
                                    :ARG1 f2))))))"
356,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.,3,3,3,"# ::snt Function prototype is a declaration.  Function definitions (w/multiple parameters) often require more than one piece of information. to perform their tasks.
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (p / prototype
                  :mod (f / function)))
      :snt2 (r / require-01
            :ARG0 (d2 / define-01
                  :ARG1 (f2 / function)
                  :ARG0-of (h / have-03
                        :ARG1 (p2 / parameter
                              :quant (m2 / multiple))))
            :ARG1 (p3 / piece
                  :quant (m3 / more-than
                        :op1 1)
                  :consist-of (ii / information))
            :frequency (o / often)
            :purpose (p4 / perform-02
                  :ARG0 (t / they)
                  :ARG1 (t2 / task
                        :poss t))))"
357,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.",5,5,5,"# ::snt A function prototype is a declaration of a function that tells the compiler the function's name, its return type and the types of its parameters.
(p / prototype-01
      :ARG1 (f / function)
      :ARG0-of (t / tell-01
            :ARG1 (a / and
                  :op1 (t2 / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f2 / function)))
                  :op2 (t3 / thing
                        :ARG2-of (t4 / type-01
                              :ARG1 (r / return-02
                                    :ARG1 f2)))
                  :op3 (t5 / thing
                        :ARG2-of (t6 / type-01
                              :ARG1 (p2 / parameter
                                    :poss f2))))
            :ARG2 (p3 / person
                  :ARG0-of (c / compile-01))))"
358,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.,5,4,4.5,"# ::snt A prototype shows only return types and necessary parameters. The definition includes names for those parameters and defines what the object is actually capable of doing.
(m / multi-sentence
      :snt1 (s / show-01
            :ARG0 (p / prototype)
            :ARG1 (a / and
                  :op1 (t / type
                        :mod (r / return-01)
                        :mod (o / only))
                  :op2 (p2 / parameter
                        :ARG1-of (n / need-01))))
      :snt2 (a2 / and
            :op1 (ii / include-01
                  :ARG0 (d / define-01)
                  :ARG1 (n2 / name-01
                        :ARG1 (p3 / parameter
                              :mod (t2 / that))))
            :op2 (d2 / define-01
                  :ARG1 (t3 / thing
                        :ARG1-of (d3 / do-02
                              :ARG0 (o2 / object)
                              :ARG1-of (c / capable-01
                                    :ARG0 o2
                                    :ARG1-of (a3 / actual-02))
                              :ARG2-of c)))))"
359,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",prototype only tells the user what data types go into a function and what type is returned.,5,4,4.5,"# ::snt prototype only tells the user what data types go into a function and what type is returned.
(t / tell-01
      :ARG0 (p / prototype)
      :ARG1 (a / and
            :op1 (t2 / type
                  :mod (d / data)
                  :ARG1-of (g / go-01
                        :ARG4 (f / function-01)))
            :op2 (t3 / type
                  :ARG1-of (r / return-02)))
      :ARG2 (p2 / person
            :ARG0-of (u / use-01))
      :mod (o / only))"
360,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.,4,5,4.5,"# ::snt Function prototype is located in the .h file and only contains the access function name and paramater type.  Function definition contains the code for the function to perform its activity.
(m / multi-sentence
      :snt1 (a / and
            :op1 (l / locate-01
                  :ARG1 (p / prototype
                        :mod (f / function))
                  :ARG2 (f2 / file
                        :name (n / name
                              :op1 "".h"")))
            :op2 (c / contain-01
                  :ARG0 p
                  :ARG1 (a2 / and
                        :op1 n
                        :mod (f3 / function
                              :ARG0-of (a3 / access-01)))
                  :op2 (t / type
                        :mod (p2 / paramater)))
            :mod (o / only))
      :snt2 (c2 / contain-01
            :ARG0 (d / define-01
                  :ARG1 (f4 / function))
            :ARG1 (c3 / code
                  :purpose (p3 / perform-02
                        :ARG0 f4
                        :ARG1 (a4 / activity-06
                              :ARG0 f4)))))"
361,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...",4,4,4,"# ::snt a function prototype is used to reference the compiler to a function that will be defined later on, a function definition is the actual function itself, complete with return type, parameters, etc...
(a / and
      :op1 (u / use-01
            :ARG1 (p / prototype
                  :mod (f / function))
            :ARG2 (r / reference-01
                  :ARG0 p
                  :ARG1 (p2 / person
                        :ARG0-of (c / compile-01))
                  :ARG2 (f2 / function
                        :ARG1-of (d / define-01
                              :time (a2 / after)))))
      :op2 (d2 / define-01
            :ARG1 (f3 / function
                  :ARG1-of (a3 / actual-02)
                  :ARG1-of (c2 / complete-02
                        :ARG2 (a4 / and
                              :op1 (t / type
                                    :mod (r2 / return-01))
                              :op2 (p3 / parameter)
                              :op3 (e / et-cetera))))))"
362,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype describes a class's public interface without revealing the class's member function implementations,5,4,4.5,"# ::snt A function prototype describes a class's public interface without revealing the class's member function implementations
(d / describe-01
      :ARG0 (p / prototype
            :mod (f / function))
      :ARG1 (ii / interface
            :ARG1-of (p2 / public-02)
            :poss (c / class))
      :manner (r / reveal-01
            :polarity -
            :ARG0 p
            :ARG1 (ii2 / implement-01
                  :ARG1 (f2 / function
                        :mod (m / member)
                        :poss c))))"
363,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.",1,3,2,"# ::snt Function definitions are just that, the definition. The prototype is what the compiler uses to check that calls to function are correct.
(m / multi-sentence
      :snt1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (f / function-01))
            :mod (j / just)
            :domain (t2 / thing
                  :ARG2-of (d2 / define-01)))
      :snt2 (p / prototype
            :ARG1-of (u / use-01
                  :ARG0 (p2 / person
                        :ARG0-of (c / compile-01))
                  :purpose (c2 / check-01
                        :ARG0 p2
                        :ARG1 (c3 / correct-02
                              :ARG1 (c4 / call-03
                                    :ARG1 (f2 / function-01)))))))"
364,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype does not include any actual code where the function has all the code that is executed in the program.,3,3,3,"# ::snt a prototype does not include any actual code where the function has all the code that is executed in the program.
(ii / include-01
      :polarity -
      :ARG0 (p / prototype)
      :ARG1 (c / code
            :mod (a / any)
            :ARG1-of (a2 / actual-02)
            :location (h / have-03
                  :ARG0 (f / function)
                  :ARG1 (c2 / code
                        :mod (a3 / all)
                        :ARG1-of (e / execute-01
                              :location (p2 / program))))))"
365,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",a prototype declares what will be used in the program and the definition,3,3,3,"# ::snt a prototype declares what will be used in the program and the definition
(d / declare-02
      :ARG0 (p / prototype)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG1-of (u / use-01
                        :ARG2 (p2 / program)))
            :op2 (t2 / thing
                  :ARG2-of (d2 / define-01))))"
366,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.",5,5,5,"# ::snt A function prototype lays out the name, return type, and the number and types of parameters the function expects to receive in a certain order.  The details for function prototypes are in the function definition.
(m / multi-sentence
      :snt1 (l / lay-out-03
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01))
                  :op2 (t2 / thing
                        :ARG2-of (t3 / type-01
                              :ARG1 (r / return-01)))
                  :op3 (a2 / and
                        :op1 (n2 / number
                              :quant-of (p2 / parameter
                                    :ARG1-of (r2 / receive-01
                                          :ARG0 (f2 / function)
                                          :ARG1-of (e / expect-01
                                                :ARG0 f2)
                                          :manner (o / order
                                                :mod (c / certain))))
                              :op2 (t4 / type
                                    :quant-of p2)))))
      :snt2 (d / detail
            :topic (p3 / prototype
                  :mod (f3 / function))
            :location (d2 / define-01
                  :ARG1 (f4 / function))))"
367,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.",5,5,5,"# ::snt A function definition is the code that defines the function placed in the {} brackets that determines that function's operation.  A function prototype shows the function's public interface without exposing implementation.  It shows name, return type and type of paramaters.
(m / multi-sentence
      :snt1 (d / define-01
            :ARG1 (f / function)
            :ARG2 (c / code
                  :ARG0-of (d2 / define-01
                        :ARG1 (f2 / function
                              :ARG1-of (p / place-01
                                    :ARG2 (b / bracket
                                          :mod (s / string-entity
                                                :value """"))
                                    :ARG0-of (d3 / determine-01
                                          :ARG1 (o / operate-01
                                                :ARG1 f2)))))))
      :snt2 (s2 / show-01
            :ARG0 (p2 / prototype
                  :mod (f3 / function))
            :ARG1 (ii / interface
                  :ARG1-of (p3 / public-02)
                  :poss f3)
            :manner (e / expose-01
                  :polarity -
                  :ARG0 p2
                  :ARG1 (ii2 / implement-01)))
      :snt3 (s3 / show-01
            :ARG0 (ii3 / it)
            :ARG1 (a / and
                  :op1 (n / name)
                  :op2 (t / type
                        :mod (r / return-01))
                  :op3 (t2 / type
                        :mod (p4 / paramater)))))"
368,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.",3,4,3.5,"# ::snt A function prototype is just a declaration of the function existing, and cant be used as an actual function. A function has to be created with a definition within to tell the compiler what the function does.
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / declare-02
                  :ARG0 (p / prototype
                        :mod (f / function))
                  :ARG1 (e / exist-01
                        :ARG1 (f2 / function))
                  :mod (j / just))
            :op2 (p2 / possible-01
                  :polarity -
                  :ARG1 (u / use-01
                        :ARG1 p
                        :ARG2 (f3 / function
                              :ARG1-of (a2 / actual-02)))))
      :snt2 (o / obligate-01
            :ARG2 (c / create-01
                  :ARG1 (f4 / function)
                  :accompanier (d2 / define-01
                        :location (w / within
                              :op1 p))
                  :purpose (t / tell-01
                        :ARG0 p
                        :ARG1 (t2 / thing
                              :ARG1-of (d3 / do-02
                                    :ARG0 f4))
                        :ARG2 (p3 / person
                              :ARG0-of (c2 / compile-01))))))"
369,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.,5,4,4.5,"# ::snt the Prototype creates a framework to call the function definition. While a function definition is where the function is actually programmed out and created into a final product.
(m / multi-sentence
      :snt1 (c / create-01
            :ARG0 (p / prototype)
            :ARG1 (f / framework
                  :ARG1-of (c2 / call-01
                        :ARG2 (d / define-01
                              :ARG1 (f2 / function)))))
      :snt2 (c3 / contrast-01
            :ARG1 (d2 / define-01
                  :ARG1 (f3 / function)
                  :location-of (a / and
                        :op1 (p2 / program-01
                              :ARG1 (f4 / function)
                              :ARG1-of (a2 / actual-02))
                        :op2 (c4 / create-01
                              :ARG1 f4
                              :ARG2 (p3 / product
                                    :mod (f5 / final)))))))"
370,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.,5,4,4.5,"# ::snt A function prototype describes the class's public interface without providing how the function works. A function definition contains the inner workings of the function.
(m / multi-sentence
      :snt1 (d / describe-01
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (ii / interface
                  :ARG1-of (p2 / public-02)
                  :poss (c / class))
            :manner (p3 / provide-01
                  :polarity -
                  :ARG0 p
                  :ARG1 (t / thing
                        :manner-of (w / work-09
                              :ARG1 (f2 / function)))))
      :snt2 (c2 / contain-01
            :ARG0 (d2 / define-01
                  :ARG1 (f3 / function))
            :ARG1 (t2 / thing
                  :manner-of (w2 / work-09
                        :ARG1 f3
                        :mod (ii2 / inner)))))"
371,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","prototype states all functions in that class before compilation, where the definition actually holds the source for the functions",3,4,3.5,"# ::snt prototype states all functions in that class before compilation, where the definition actually holds the source for the functions
(s / state-01
      :ARG0 (p / prototype)
      :ARG1 (f / function
            :mod (a / all)
            :location (c / class
                  :mod (t / that)))
      :time (b / before
            :op1 (c2 / compile-01))
      :location-of (h / hold-01
            :ARG0 (d / define-01)
            :ARG1 (t2 / thing
                  :ARG0-of (s2 / source-02
                        :ARG1 (f2 / function)))
            :ARG1-of (a2 / actual-02)))"
372,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.",5,5,5,"# ::snt Function prototypes tell the compiler the function names, its return type, and the types of its parameters where as, function definitions actually implement the member functions.
(c / contrast-01
      :ARG1 (t / tell-01
            :ARG0 (p / prototype-01
                  :ARG1 (f / function))
            :ARG1 (a / and
                  :op1 (t2 / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f2 / function)))
                  :op2 (t3 / thing
                        :ARG2-of (t4 / type-01
                              :ARG1 (r / return-01
                                    :ARG1 f2)))
                  :op3 (t5 / thing
                        :ARG2-of (t6 / type-01
                              :ARG1 (p2 / parameter
                                    :poss f2))))
            :ARG2 (p3 / person
                  :ARG0-of (c2 / compile-01)))
      :ARG2 (ii / implement-01
            :ARG0 (d / define-01
                  :ARG1 (f3 / function))
            :ARG1 (f4 / function
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (m / member)))
            :ARG1-of (a2 / actual-02)))"
373,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",A function prototype just specifies parameters.  A function definition includes parameters and a code body.,4,4,4,"# ::snt A function prototype just specifies parameters.  A function definition includes parameters and a code body.
(m / multi-sentence
      :snt1 (s / specify-01
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (p2 / parameter)
            :mod (j / just))
      :snt2 (ii / include-01
            :ARG0 (d / define-01
                  :ARG1 (f2 / function))
            :ARG1 (a / and
                  :op1 (p3 / parameter)
                  :op2 (b / body
                        :mod (c / code)))))"
374,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",Function prototypes describe the class's public interface,5,4,4.5,"# ::snt Function prototypes describe the class's public interface
(d / describe-01
      :ARG0 (p / prototype
            :mod (f / function-01))
      :ARG1 (ii / interface-01
            :ARG1 (c / class)
            :ARG1-of (p2 / public-02)))"
375,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function ",4,5,4.5,"# ::snt A prototype only declares name, return type, and input type. A definition also defines the scope, variables, process, and return function 
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG0 (p / prototype)
            :ARG1 (a / and
                  :op1 (n / name)
                  :op2 (t / type
                        :mod (r / return-01))
                  :op3 (t2 / type
                        :mod (ii / input)))
            :mod (o / only))
      :snt2 (d2 / define-01
            :ARG0 (d3 / define-01)
            :ARG1 (a2 / and
                  :op1 (s / scope)
                  :op2 (v / variable)
                  :op3 (p2 / process-01)
                  :op4 (f / function-01
                        :mod (r2 / return-01)))
            :mod (a3 / also)))"
376,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code",4,4,4,"# ::snt a function prototype simply declares the functions parameters, the function definition includes any necessary variables and the function's actual code
(a / and
      :op1 (d / declare-02
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (p2 / parameter
                  :poss (f2 / function))
            :ARG1-of (s / simple-02))
      :op2 (ii / include-01
            :ARG0 (d2 / define-01
                  :ARG1 (f3 / function))
            :ARG1 (a2 / and
                  :op1 (v / variable
                        :mod (a3 / any)
                        :ARG1-of (n / need-01))
                  :op2 (c / code
                        :poss f3
                        :ARG1-of (a4 / actual-02)))))"
377,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A functgion prototype is a declaration of a function , while function definition specifies what a function does",3,4,3.5,"# ::snt A functgion prototype is a declaration of a function , while function definition specifies what a function does
(c / contrast-01
      :ARG1 (s / state-01
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (f2 / function))
      :ARG2 (s2 / specify-01
            :ARG0 (d / define-01
                  :ARG1 (f3 / function))
            :ARG1 (t / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 f3))))"
378,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. ",5,5,5,"# ::snt in a function prototype you include the return type, the name of the function, and its parameters if any are needed.  in a function definition you write the code of what the function will do. 
(m / multi-sentence
      :snt1 (ii / include-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (t / type
                        :mod (r / return-01))
                  :op2 (t2 / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f / function)))
                  :op3 (p / parameter
                        :poss f)
                  :condition (n2 / need-01
                        :ARG1 p))
            :location (p2 / prototype
                  :mod (f2 / function)))
      :snt2 (w / write-01
            :ARG0 (y2 / you)
            :ARG1 (c / code
                  :topic t2
                  :ARG1-of (d / do-02
                        :ARG0 (f3 / function))))
      :location (d2 / define-01
            :ARG1 (f4 / function)))"
379,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.",5,4,4.5,"# ::snt A function definition contains all the code for a function to work. A function prototype just shows the output, input and function name.
(m / multi-sentence
      :snt1 (c / contain-01
            :ARG0 (d / define-01
                  :ARG1 (f / function))
            :ARG1 (c2 / code
                  :mod (a / all)
                  :purpose (w / work-09
                        :ARG1 (f2 / function))))
      :snt2 (s / show-01
            :ARG0 (p / prototype
                  :mod (f3 / function))
            :ARG1 (a2 / and
                  :op1 (o / output)
                  :op2 (ii / input)
                  :op3 (n / name
                        :poss f3))
            :mod (j / just)))"
380,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done",5,4,4.5,"# ::snt function prototype describe the class's public interface without revealing   the class's member function implementations,  function definitions show what   implementations are being done
(m / multi-sentence
      :snt1 (d / describe-01
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (ii / interface
                  :ARG1-of (p2 / public-02)
                  :poss (c / class))
            :manner (r / reveal-01
                  :polarity -
                  :ARG0 p
                  :ARG1 (ii2 / implement-01
                        :ARG1 (f2 / function
                              :ARG0-of (h / have-org-role-91
                                    :ARG1 (c2 / class)
                                    :ARG2 (m2 / member))))))
      :snt2 (s / show-01
            :ARG0 (d2 / define-01
                  :ARG1 (f3 / function))
            :ARG1 (ii3 / implement-01
                  :ARG1 (t / thing))))"
381,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.","A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.",5,5,5,"# ::snt A function prototype only names the function, its return type, and it's argument list, while a definition defines the above as well as what the function actually does.
(c / contrast-01
      :ARG1 (n / name-01
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (a / and
                  :op1 (f2 / function)
                  :op2 (t / type
                        :mod (r / return-01)
                        :poss f2)
                  :op3 (l / list-01
                        :ARG1 (a2 / argument)
                        :poss f2))
            :mod (o / only))
      :ARG2 (d / define-01
            :ARG0 p
            :ARG1 (a3 / and
                  :op1 (a4 / above)
                  :op2 (t2 / thing
                        :ARG1-of (d2 / do-02
                              :ARG0 (f3 / function)
                              :ARG1-of (a5 / actual-02))))))"
382,2.6,What is the difference between a function prototype and a function definition?,"A function prototype includes the function signature, i.e., the name of the function, the return type, and the parameters' type. The function definition includes the actual body of the function.",function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.,5,4,4.5,"# ::snt function prototype describes a classes interface without reviling whatever is inside as for the function definition can't do that.
(c / contrast-01
      :ARG1 (d / describe-01
            :ARG0 (p / prototype
                  :mod (f / function))
            :ARG1 (ii / interface
                  :mod (c2 / class))
            :manner (r / revile-01
                  :polarity -
                  :ARG0 p
                  :ARG1 (w / whatever
                        :location (ii2 / inside))))
      :ARG2 (p2 / possible-01
            :polarity -
            :ARG1 (d2 / do-02
                  :ARG0 (d3 / define-01
                        :ARG1 (f2 / function))
                  :ARG1 (t / that))))"
383,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",the role of a header file list all the functions a class can do while hiding the inner workings of its functions,5,4,4.5,"# ::snt the role of a header file list all the functions a class can do while hiding the inner workings of its functions
(l / list-01
      :ARG0 (r / role
            :poss (f / file
                  :mod (h / header)))
      :ARG1 (f2 / function
            :mod (a / all)
            :ARG1-of (d / do-02
                  :ARG0 (c / class)
                  :ARG1-of (p / possible-01)
                  :time (h2 / hide-01
                        :ARG0 c
                        :ARG1 (w / work-09
                              :ARG1 (f3 / function
                                    :poss c)
                              :mod (ii / inner))))))"
384,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",The main role of header file is it is used to share information among various files.,3,3,3,"# ::snt The main role of header file is it is used to share information among various files.
(r / role
      :mod (m / main)
      :poss (f / file
            :mod (h / header))
      :domain (u / use-01
            :ARG1 f
            :ARG2 (s / share-01
                  :ARG0 f
                  :ARG1 (ii / information)
                  :ARG2 (f2 / file
                        :mod (v / various)))))"
385,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.,4,3,3.5,"# ::snt Header files separate files in which classes are defined and allow the compiler to recognize classes when used elsewhere.
(a / and
      :op1 (s / separate-01
            :ARG0 (f / file
                  :ARG0-of (h / head-01))
            :ARG1 (f2 / file
                  :location-of (d / define-01
                        :ARG1 (c / class))))
      :op2 (a2 / allow-01
            :ARG0 f
            :ARG1 (r / recognize-02
                  :ARG0 (p / person
                        :ARG0-of (c2 / compile-01))
                  :ARG1 (c3 / class)
                  :time (u / use-01
                        :ARG1 c3
                        :location (e / elsewhere)))))"
386,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",No,0,0,0,"# ::snt No
(n / no)"
387,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","A header file consists of ""reusable"" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain ""source-code.""",4,3,3.5,"# ::snt A header file consists of ""reusable"" source code such as a class in a file that by convention has a .h filename extension. This differs from .cpp files that contain ""source-code.""
(m / multi-sentence
      :snt1 (c / consist-01
            :ARG1 (f / file
                  :mod (h / header))
            :ARG2 (c2 / code
                  :mod (s / source)
                  :ARG1-of (r / reuse-01
                        :ARG1-of (p / possible-01))
                  :example (c3 / class
                        :location (f2 / file
                              :ARG0-of (h2 / have-03
                                    :ARG1 (e / extension
                                          :mod (f3 / filename
                                                :mod (s2 / string-entity
                                                      :value "".h"")))
                                    :mod (c4 / convention))))))
      :snt2 (d / differ-02
            :ARG1 (t / this)
            :ARG2 (f4 / file
                  :name (n / name
                        :op1 "".cpp"")
                  :ARG0-of (c5 / contain-01
                        :ARG1 (c6 / code
                              :mod (s3 / source))))))"
388,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.",5,4,4.5,"# ::snt To provide information about the contents of a library. It includes the definition of classes, declarations of functions, data types, and constants.
(m / multi-sentence
      :snt1 (p / provide-01
            :ARG1 (ii / information
                  :topic (t / thing
                        :ARG2-of (c / contain-01
                              :ARG1 (l / library)))))
      :snt2 (ii2 / include-01
            :ARG1 (a / and
                  :op1 (d / define-01
                        :ARG1 (c2 / class))
                  :op2 (d2 / declare-02
                        :ARG1 (f / function-01))
                  :op3 (t2 / type
                        :mod (d3 / data))
                  :op4 (c3 / constant))))"
389,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.,5,4,4.5,"# ::snt the header file shows the user what types go into and come out of a function but does not allow a user to manipulate the actual code for the function.
(c / contrast-01
      :ARG1 (s / show-01
            :ARG0 (f / file
                  :mod (h / header))
            :ARG1 (a / and
                  :op1 (t / type
                        :ARG1-of (g / go-01
                              :ARG4 (f2 / function)))
                  :op2 (t2 / type
                        :ARG1-of (c2 / come-out-09
                              :ARG2 (f3 / function))))
            :ARG2 (p / person
                  :ARG0-of (u / use-01)))
      :ARG2 (a2 / allow-01
            :polarity -
            :ARG0 f
            :ARG1 (m / manipulate-01
                  :ARG0 p
                  :ARG1 (c3 / code
                        :ARG1-of (a3 / actual-02)
                        :purpose f3))))"
390,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Header files declares the class member functions.,3,4,3.5,"# ::snt Header files declares the class member functions.
(d / declare-02
      :ARG0 (f / file
            :mod (h / header))
      :ARG1 (f2 / function-01
            :ARG0 (p / person
                  :ARG0-of (h2 / have-org-role-91
                        :ARG1 (c / class)
                        :ARG2 (m / member)))))"
391,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",A header file allows for the separation of declaration and implementation into separate files.,5,3,4,"# ::snt A header file allows for the separation of declaration and implementation into separate files.
(a / allow-01
      :ARG0 (f / file
            :mod (h / header))
      :ARG1 (s / separate-01
            :ARG1 (a2 / and
                  :op1 (d / declare-02)
                  :op2 (ii / implement-01))
            :ARG2 (f2 / file
                  :ARG1-of (s2 / separate-01))))"
392,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",the header file has access to the C++ Standard Library and makes certain classes like class string work.,0,3,1.5,"# ::snt the header file has access to the C++ Standard Library and makes certain classes like class string work.
(a / and
      :op1 (a2 / access-01
            :ARG0 (f / file
                  :mod (h / header))
            :ARG1 (l / library
                  :name (n / name
                        :op1 ""C++""
                        :op2 ""Standard""
                        :op3 ""Library"")))
      :op2 (m / make-02
            :ARG0 f
            :ARG1 (w / work-09
                  :ARG1 (c / class
                        :mod (c2 / certain)
                        :example (s / string
                              :mod (c3 / class))))))"
393,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",“Instruct” the compiler on how to interface with library and user-written components.,2,3,2.5,"# ::snt “Instruct” the compiler on how to interface with library and user-written components.
(ii / instruct-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (c / compile-01))
      :ARG2 (t / thing
            :manner-of (ii2 / interface-01
                  :ARG0 p
                  :ARG1 (c2 / component
                        :ARG1-of (w / write-01
                              :ARG0 (p2 / person
                                    :ARG0-of (u / use-01)))
                        :mod (l / library)))))"
394,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",create a comon area to contain reusable functions.,3,3,3,"# ::snt create a comon area to contain reusable functions.
(c / create-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / area
            :mod (c2 / compound)
            :ARG0-of (c3 / contain-01
                  :ARG1 (f / function-01
                        :ARG1-of (r / reuse-01
                              :ARG1-of (p / possible-01))))))"
395,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",to declare the functions being used in the classes,3,3,3,"# ::snt to declare the functions being used in the classes
(d / declare-02
      :ARG1 (f / function
            :ARG1-of (u / use-01
                  :ARG2 (c / class))))"
396,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","#include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().",0,3,1.5,"# ::snt #include ""hat.h""  allows the use of the hat container, so called from the act of pulling names from a hat.  The header file for hat includes functions for storage and retrieval of it's contents, mainly put(), peek(), and pull().
(m / multi-sentence
      :snt1 (a / allow-01
            :ARG0 (ii / include-01
                  :ARG1 (s / string-entity
                        :value ""#include""
                        :value ""hat.h""))
            :ARG1 (u / use-01
                  :ARG1 (c / container
                        :mod (h / hat)
                        :ARG1-of (c2 / call-01
                              :ARG2 (a2 / act-02
                                    :ARG1 (p / pull-01
                                          :ARG1 (n / name)
                                          :ARG2 (h2 / hat)))))))
      :snt2 (ii2 / include-01
            :ARG0 (f / file
                  :mod (h3 / header)
                  :poss (h4 / hat))
            :ARG1 (f2 / function
                  :purpose (a3 / and
                        :op1 (s2 / store-01
                              :ARG1 (t / thing
                                    :ARG2-of (c3 / contain-01
                                          :ARG1 h4)))
                        :op2 (r / retrieve-01
                              :ARG1 t))
                  :example (a4 / and
                        :op1 (p2 / put))
                  :op2 (p3 / peek))
            :op3 (p4 / pull))
      :mod (m2 / main))"
397,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.,5,3,4,"# ::snt To hold reusable content or modules separate from the actual  source-code file that can be easily referenced and employed for different programs.
(h / hold-04
      :ARG1 (o / or
            :op1 (c / content
                  :ARG1-of (r / reuse-01
                        :ARG1-of (p / possible-01)))
            :op2 (m / module
                  :ARG1-of (p2 / possible-01))
            :ARG1-of (s / separate-01
                  :ARG2 (f / file
                        :mod (c2 / code
                              :mod (s2 / source)
                              :ARG1-of (a / actual-02))
                        :ARG1-of (r2 / reference-01
                              :ARG1-of (p3 / possible-01)
                              :ARG1-of (e / easy-05))
                        :ARG1-of (e2 / employ-01
                              :ARG2 (p4 / program
                                    :ARG1-of (d / differ-02)))))))"
398,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",a header file is a file used to store a list of prototye functions and data members.,5,5,5,"# ::snt a header file is a file used to store a list of prototye functions and data members.
(f / file
      :mod (h / header)
      :ARG1-of (u / use-01
            :ARG2 (s / store-01
                  :ARG1 (l / list
                        :consist-of (a / and
                              :op1 (f2 / function
                                    :mod (p / prototye))
                              :op2 (p2 / person
                                    :ARG0-of (h2 / have-org-role-91
                                          :ARG1 (d / data)
                                          :ARG2 (m / member))))))))"
399,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.",3,4,3.5,"# ::snt A header file is a cross communication method between source files, to help limit the size of each individual program. Without header files a program will be 1 large lump of code and thus fairly hard to debug and traverse.
(m / multi-sentence
      :snt1 (m2 / method
            :instrument-of (c / communicate-01
                  :ARG0 (f / file
                        :mod (s / source))
                  :manner (c2 / cross-02))
            :purpose (h / help-01
                  :ARG1 (l / limit-01
                        :ARG0 m2
                        :ARG1 (s2 / size
                              :poss (p / program
                                    :mod (ii / individual)
                                    :mod (e / each)))))
            :ARG0-of h)
      :snt2 (a / and
            :op1 (l2 / lump
                  :quant 1
                  :mod (l3 / large)
                  :consist-of (c3 / code)
                  :domain (p2 / program))
            :op2 (h2 / hard-02
                  :ARG1 (a2 / and
                        :op1 (d / debug-01
                              :ARG1 p2)
                        :op2 (t / traverse-01
                              :ARG1 p2))
                  :ARG1-of (f2 / fair-04))
            :condition (h3 / have-03
                  :polarity -
                  :ARG1 (f3 / file
                        :mod (h4 / header)))))"
400,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",It contains reusable source code for use by other classes.,3,3,3,"# ::snt It contains reusable source code for use by other classes.
(c / contain-01
      :ARG0 (ii / it)
      :ARG1 (c2 / code
            :mod (s / source)
            :ARG1-of (r / reuse-01
                  :ARG1-of (p / possible-01))
            :purpose (u / use-01
                  :ARG0 (c3 / class
                        :mod (o / other))
                  :ARG1 c2)))"
401,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.",4,3,3.5,"# ::snt to separate the source code from the main function, allows the methods/classes to be included in the program without direct coding. allows re usability.
(m / multi-sentence
      :snt1 (a / allow-01
            :ARG1 (s / separate-01
                  :ARG1 (c / code
                        :mod (s2 / source))
                  :ARG2 (f / function-01
                        :mod (m2 / main))))
      :snt2 (a2 / allow-01
            :ARG1 (ii / include-01
                  :ARG1 (s3 / slash
                        :op1 (m3 / method)
                        :op2 (c2 / class))
                  :ARG2 (p / program)
                  :manner (c3 / code-01
                        :polarity -
                        :ARG1-of (d / direct-02))))
      :snt3 (a3 / allow-01
            :ARG1 (u / usability)))"
402,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Header files have reusable source code in a file that a programer can use.,3,2,2.5,"# ::snt Header files have reusable source code in a file that a programer can use.
(h / have-03
      :ARG0 (f / file
            :mod (h2 / head))
      :ARG1 (c / code
            :mod (s / source)
            :ARG1-of (r / reuse-01
                  :ARG1-of (p / possible-01)))
      :location (f2 / file))"
403,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To hide the definition and details of a class.  Also to help readability of the main C++ file.,4,3,3.5,"# ::snt To hide the definition and details of a class.  Also to help readability of the main C++ file.
(m / multi-sentence
      :snt1 (h / hide-01
            :ARG1 (a / and
                  :op1 (d / define-01
                        :ARG1 (c / class))
                  :op2 (d2 / detail-01
                        :ARG1 c)))
      :snt2 (h2 / help-01
            :ARG1 (r / readability
                  :poss (f / file
                        :mod (m2 / main)
                        :mod (l / language
                              :name (n / name
                                    :op1 ""C++""))))
            :mod (a2 / also)))"
404,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To allow the compiler to recognize the classes when used elsewhere.,3,4,3.5,"# ::snt To allow the compiler to recognize the classes when used elsewhere.
(a / allow-01
      :ARG1 (r / recognize-02
            :ARG0 (p / person
                  :ARG0-of (c / compile-01))
            :ARG1 (c2 / class)
            :time (u / use-01
                  :ARG1 c2
                  :location (e / elsewhere))))"
405,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.","A header file declares a class, its data, and functions available through that class.",5,3,4,"# ::snt A header file declares a class, its data, and functions available through that class.
(d / declare-02
      :ARG0 (f / file
            :mod (h / header))
      :ARG1 (a / and
            :op1 (c / class)
            :op2 (d2 / data
                  :poss c)
            :op3 (f2 / function
                  :poss c)
            :ARG1-of (a2 / available-02
                  :ARG2 (c2 / class
                        :mod (t / that)))))"
406,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",header files contain code which can be used in multiple files,3,3,3,"# ::snt header files contain code which can be used in multiple files
(c / contain-01
      :ARG0 (f / file
            :mod (h / header))
      :ARG1 (c2 / code
            :ARG1-of (u / use-01
                  :ARG2 (f2 / file
                        :quant (m / multiple))
                  :ARG1-of (p / possible-01))))"
407,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Allow compiler to recognize the classes when used elsewhere,3,3,3,"# ::snt Allow compiler to recognize the classes when used elsewhere
(a / allow-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / recognize-02
            :ARG0 (c / compiler)
            :ARG1 (c2 / class)
            :time (u / use-01
                  :ARG1 c2
                  :location (e / elsewhere))))"
408,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",Allow compiler to recognize the classes when used elsewhere,3,4,3.5,"# ::snt Allow compiler to recognize the classes when used elsewhere
(a / allow-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (r / recognize-02
            :ARG0 (c / compiler)
            :ARG1 (c2 / class)
            :time (u / use-01
                  :ARG1 c2
                  :location (e / elsewhere))))"
409,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",To promote function reusuablitly,3,3,3,"# ::snt To promote function reusuablitly
(p / promote-02
      :ARG1 (f / function-01
            :ARG1-of (p2 / possible-01)))"
410,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",class definitions are placed here,3,3,3,"# ::snt class definitions are placed here
(p / place-01
      :ARG1 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (c / class)))
      :ARG2 (h / here))"
411,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",A header file usually contains class and/or function prototypes.,4,5,4.5,"# ::snt A header file usually contains class and/or function prototypes.
(c / contain-01
      :ARG0 (f / file
            :mod (h / header))
      :ARG1 (p / prototype
            :mod (o / or
                  :op1 (c2 / class)
                  :op2 (f2 / function-01)))
      :mod (u / usual))"
412,2.7,What is the role of a header-file?,"To store a class interface, including data members and member function prototypes.",contains all the standard C++ library's i.e. string,0,2,1,"# ::snt contains all the standard C++ library's i.e. string
(c / contain-01
      :ARG1 (l / library
            :mod (a / all)
            :ARG1-of (s / standard-02)
            :mod (l2 / language
                  :name (n / name
                        :op1 ""C++""))
            :example (s2 / string)))"
413,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.",4,5,4.5,"# ::snt It includes the name of the program, the type of parameters it can take. It should also include a brief description of what the function does.
(m / multi-sentence
      :snt1 (ii / include-01
            :ARG0 (ii2 / it)
            :ARG1 (a / and
                  :op1 (n / name
                        :poss (p / program))
                  :op2 (t / type
                        :mod (p2 / parameter
                              :ARG1-of (t2 / take-01
                                    :ARG0 (ii3 / it)
                                    :ARG1-of (p3 / possible-01))))))
      :snt2 (r / recommend-01
            :ARG1 (ii4 / include-01
                  :ARG0 (ii5 / it)
                  :ARG1 (d / describe-01
                        :ARG1 (t3 / thing
                              :ARG1-of (d2 / do-02
                                    :ARG0 (f / function)))
                        :mod (b / brief))
                  :mod (a2 / also))))"
414,3.1,What does a function signature include?,The name of the function and the types of the parameters.,it includes the specific information about the function such as input and output variable types and how many of each.,1,5,3,"# ::snt it includes the specific information about the function such as input and output variable types and how many of each.
(ii / include-01
      :ARG0 (ii2 / it)
      :ARG1 (ii3 / information
            :ARG1-of (s / specific-02)
            :topic (f / function-01)
            :example (a / and
                  :op1 (t / type
                        :mod (v / variable
                              :mod (ii4 / input)))
                  :op2 (t2 / type
                        :mod (v2 / variable
                              :mod (o / output)))
                  :op3 (n / number
                        :quant-of (e / each)))))"
415,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The function signature includes the name of the function and the types of its arguments.,5,5,5,"# ::snt The function signature includes the name of the function and the types of its arguments.
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / function)))
            :op2 (t2 / thing
                  :ARG2-of (t3 / type-01
                        :ARG1 (t4 / thing
                              :ARG2-of (a2 / argue-01
                                    :ARG0 f)))))
      :ARG2 (t5 / thing
            :ARG2-of (s / sign-01
                  :ARG1 f)))"
416,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.",4,5,4.5,"# ::snt A function signature consists of the function prototype.  This tells you the general information about a function, its name, parameters, what scope it is in, and other miscellaneous information.
(m / multi-sentence
      :snt1 (c / consist-01
            :ARG1 (s / signature
                  :mod (f / function))
            :ARG2 (p / prototype
                  :mod (f2 / function)))
      :snt2 (t / tell-01
            :ARG0 (t2 / this)
            :ARG1 (ii / information
                  :ARG1-of (g / general-02)
                  :topic (a / and
                        :op1 (f3 / function)
                        :op2 (n / name
                              :poss f3)
                        :op3 (p2 / parameter
                              :poss f3)
                        :op4 (s2 / scope
                              :location-of (ii2 / it)))
                  :op5 (ii3 / information
                        :mod (m2 / miscellaneous)
                        :mod (o / other)))
            :ARG2 (y / you)))"
417,3.1,What does a function signature include?,The name of the function and the types of the parameters.,It includes the name of the function and the types of its arguments.,5,5,5,"# ::snt It includes the name of the function and the types of its arguments.
(ii / include-01
      :ARG0 (ii2 / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / function-01)))
            :op2 (t2 / thing
                  :ARG2-of (t3 / type-01
                        :ARG1 (t4 / thing
                              :ARG2-of (a2 / argue-01
                                    :ARG0 f))))))"
418,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"Name, paramaters, scope, and other general function information",4,5,4.5,"# ::snt Name, paramaters, scope, and other general function information
(a / and
      :op1 (n / name)
      :op2 (p / paramater)
      :op3 (s / scope)
      :op4 (ii / information
            :topic (f / function-01
                  :ARG1-of (g / general-02))
            :mod (o / other)))"
419,3.1,What does a function signature include?,The name of the function and the types of the parameters.,It includes a function name and parameter list. Does not include return type. Function signatures must be different.,5,5,5,"# ::snt It includes a function name and parameter list. Does not include return type. Function signatures must be different.
(m / multi-sentence
      :snt1 (ii / include-01
            :ARG0 (ii2 / it)
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f / function)))
                  :op2 (t2 / thing
                        :ARG2-of (l / list-01
                              :ARG1 (p / parameter)))))
      :snt2 (ii3 / include-01
            :polarity -
            :ARG0 ii2
            :ARG1 (t3 / type
                  :mod (r / return-01)))
      :snt3 (o / obligate-01
            :ARG2 (d / differ-02
                  :ARG1 (s / signature
                        :mod (f2 / function)))))"
420,3.1,What does a function signature include?,The name of the function and the types of the parameters.,input parameters and return type,1,5,3,"# ::snt input parameters and return type
(a / and
      :op1 (p / parameter
            :mod (ii / input))
      :op2 (t / type
            :mod (r / return-02)))"
421,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The portion of the function prototyp tha has the function name and the arguments but NOT the return type.,5,5,5,"# ::snt The portion of the function prototyp tha has the function name and the arguments but NOT the return type.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (p / portion
                  :part-of (p2 / prototyp-01
                        :ARG1 (f / function-01)))
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f2 / function-01)))
                  :op2 (t2 / thing
                        :ARG2-of (a2 / argue-01))))
      :ARG2 (h2 / have-03
            :polarity -
            :ARG0 p
            :ARG1 (t3 / type
                  :mod (r / return-01))))"
422,3.1,What does a function signature include?,The name of the function and the types of the parameters.,Name of the function and the types of it's arguments,5,5,5,"# ::snt Name of the function and the types of it's arguments
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (t2 / thing
            :ARG2-of (t3 / type-01
                  :ARG1 (t4 / thing
                        :ARG2-of (a2 / argue-01
                              :ARG0 f)))))"
423,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The name of the function and the types of its arguments.,5,5,5,"# ::snt The name of the function and the types of its arguments.
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (t2 / thing
            :ARG2-of (t3 / type-01
                  :ARG1 (t4 / thing
                        :ARG2-of (a2 / argue-01
                              :ARG0 f)))))"
424,3.1,What does a function signature include?,The name of the function and the types of the parameters.,Includes the name of the function and the types of its arguments.,5,5,5,"# ::snt Includes the name of the function and the types of its arguments.
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / function-01)))
            :op2 (t2 / thing
                  :ARG2-of (t3 / type-01
                        :ARG1 (t4 / thing
                              :ARG2-of (a2 / argue-01
                                    :ARG0 f))))))"
425,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"identification of a function and the data types of its parameters, it has the name, and the data type variables ",5,5,5,"# ::snt identification of a function and the data types of its parameters, it has the name, and the data type variables 
(a / and
      :op1 (ii / identify-01
            :ARG1 (a2 / and
                  :op1 (f / function-01)
                  :op2 (t / type
                        :mod (d / data)
                        :poss (p / parameter
                              :poss f))))
      :op2 (h / have-03
            :ARG0 f
            :ARG1 (a3 / and
                  :op1 (n / name)
                  :op2 (v / variable
                        :mod (t2 / type
                              :mod (d2 / data))))))"
426,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"a return type, and input parameters",1,5,3,"# ::snt a return type, and input parameters
(a / and
      :op1 (t / type
            :mod (r / return-01))
      :op2 (p / parameter
            :mod (ii / input)))"
427,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The function signature includes the method name and the input types.,5,5,5,"# ::snt The function signature includes the method name and the input types.
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (m / method)))
            :op2 (t2 / type
                  :mod (ii2 / input)))
      :ARG2 (s / signature
            :mod (f / function-01)))"
428,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"A function signature includes the name of the function and types of arguments, but not the return type.  ",5,5,5,"# ::snt A function signature includes the name of the function and types of arguments, but not the return type.  
(c / contrast-01
      :ARG1 (ii / include-01
            :ARG0 (s / signature
                  :mod (f / function))
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f2 / function)))
                  :op2 (t2 / thing
                        :ARG2-of (a2 / argue-01)
                        :mod (t3 / type))))
      :ARG2 (ii2 / include-01
            :polarity -
            :ARG0 s
            :ARG1 (t4 / thing
                  :ARG2-of (t5 / type-01
                        :ARG1 (r / return-01)))))"
429,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The signature can include a result type and thrown errors.,1,3,2,"# ::snt The signature can include a result type and thrown errors.
(p / possible-01
      :ARG1 (ii / include-01
            :ARG1 (a / and
                  :op1 (t / type
                        :mod (r / result))
                  :op2 (e / err-01
                        :ARG1-of (t2 / throw-01)))
            :ARG2 (s / signature)))"
430,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"function name, and input paramaters",5,5,5,"# ::snt function name, and input paramaters
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (p / paramater
            :ARG0-of (ii / input-01)))"
431,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.",5,5,5,"# ::snt The name of the function and the types of its arguments. This includes the number, type, and order the parameters appear in.
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / function-01)))
            :op2 (t2 / thing
                  :ARG2-of (t3 / type-01
                        :ARG1 (t4 / thing
                              :ARG2-of (a2 / argue-01
                                    :ARG0 f)))))
      :snt2 (ii / include-01
            :ARG1 (a3 / and
                  :op1 (n2 / number)
                  :op2 (t5 / type-01)
                  :op3 (o / order)
                  :location-of (a4 / appear-02
                        :ARG1 (p / parameter)))
            :ARG2 (t6 / this)))"
432,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the name of the function and the types of its arguments,5,5,5,"# ::snt the name of the function and the types of its arguments
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (t2 / thing
            :ARG2-of (t3 / type-03
                  :ARG1 (t4 / thing
                        :ARG2-of (a2 / argue-01
                              :ARG0 f)))))"
433,3.1,What does a function signature include?,The name of the function and the types of the parameters.,A function signature includes the name of the function and the types of its arguments,5,5,5,"# ::snt A function signature includes the name of the function and the types of its arguments
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / function)))
            :op2 (t2 / thing
                  :ARG2-of (t3 / type-01
                        :ARG1 (t4 / thing
                              :ARG2-of (a2 / argue-01
                                    :ARG0 f)))))
      :ARG2 (t5 / thing
            :ARG2-of (s / sign-01
                  :ARG1 f)))"
434,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"A function signature includes a function's return type, parameters and semi-colon.",1,5,3,"# ::snt A function signature includes a function's return type, parameters and semi-colon.
(ii / include-01
      :ARG1 (a / and
            :op1 (t / type
                  :mod (r / return-02)
                  :poss (f / function))
            :op2 (p / parameter)
            :op3 (s / semi-colon))
      :ARG2 (s2 / signature
            :mod f))"
435,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the name of the function and the types of its arguments,5,5,5,"# ::snt the name of the function and the types of its arguments
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (t2 / thing
            :ARG2-of (t3 / type-03
                  :ARG1 (t4 / thing
                        :ARG2-of (a2 / argue-01
                              :ARG0 f)))))"
436,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the function's name and parameters,5,5,5,"# ::snt the function's name and parameters
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (p / parameter
            :poss f))"
437,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The name of the function and the types of its arguments.,5,5,5,"# ::snt The name of the function and the types of its arguments.
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (t2 / thing
            :ARG2-of (t3 / type-01
                  :ARG1 (t4 / thing
                        :ARG2-of (a2 / argue-01
                              :ARG0 f)))))"
438,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The portion of a function prototype that includes the name of the function and the types of its arguments,5,5,5,"# ::snt The portion of a function prototype that includes the name of the function and the types of its arguments
(p / portion
      :part-of (p2 / prototype-01
            :ARG1 (f / function-01))
      :ARG2-of (ii / include-01
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 f))
                  :op2 (t2 / thing
                        :ARG2-of (a2 / argue-01
                              :ARG0 f)
                        :mod (t3 / type)))))"
439,3.1,What does a function signature include?,The name of the function and the types of the parameters.,the name of the function and its parameters,5,5,5,"# ::snt the name of the function and its parameters
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (p / parameter
            :poss f))"
440,3.1,What does a function signature include?,The name of the function and the types of the parameters.,The function name and parameters,5,5,5,"# ::snt The function name and parameters
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function)))
      :op2 (p / parameter))"
441,3.1,What does a function signature include?,The name of the function and the types of the parameters.,name of function and types of arguments,5,5,5,"# ::snt name of function and types of arguments
(a / and
      :op1 (n / name-01
            :ARG1 (f / function-01))
      :op2 (t / type
            :mod (a2 / argue-01)))"
442,3.1,What does a function signature include?,The name of the function and the types of the parameters.,a function's return type and parameter list,1,5,3,"# ::snt a function's return type and parameter list
(a / and
      :op1 (t / type
            :ARG1-of (r / return-02
                  :ARG0 (f / function)))
      :op2 (l / list-01
            :ARG1 (p / parameter)))"
443,3.1,What does a function signature include?,The name of the function and the types of the parameters.,"it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. ",5,5,5,"# ::snt it includes the name of the function, and the types of its arguments. it does not specify the function return type. Function in the same scope must have unqiue signatures. 
(m / multi-sentence
      :snt1 (ii / include-01
            :ARG0 (ii2 / it)
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f / function)))
                  :op2 (t2 / thing
                        :ARG2-of (t3 / type-01
                              :ARG1 (t4 / thing
                                    :ARG1-of (a2 / argue-01
                                          :ARG0 f))))))
      :snt2 (s / specify-01
            :polarity -
            :ARG0 (ii3 / it)
            :ARG1 (t5 / type-01
                  :ARG1 (f2 / function
                        :ARG0-of (r / return-01))))
      :snt3 (o / obligate-01
            :ARG1 (f3 / function
                  :location (s2 / scope
                        :ARG1-of (s3 / same-01)))
            :ARG2 (h / have-03
                  :ARG0 f3
                  :ARG1 (s4 / signature
                        :ARG1-of (q / qualified-02
                              :polarity -)))))"
444,3.2,What is the scope of global variables?,File scope.,Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.,5,5,5,"# ::snt Any functions that follows their deceleration that  are in the source code file are allowed to have access the variables.  Also global scope variables retrain their value throughout the execution of the program.
(m / multi-sentence
      :snt1 (a / allow-01
            :ARG1 (a2 / access-01
                  :ARG0 (f / function
                        :mod (a3 / any)
                        :ARG0-of (f2 / follow-01
                              :ARG1 (d / decelerate-01
                                    :ARG0 f))
                        :location (f3 / file
                              :mod (c / code
                                    :mod (s / source))))
                  :ARG1 (v / variable)))
      :snt2 (r / retrain-01
            :ARG0 (v2 / variable
                  :mod (s2 / scope
                        :mod (g / globe)))
            :ARG1 (v3 / value
                  :poss v2)
            :duration (e / execute-01
                  :ARG1 (p / program))
            :mod (a4 / also)))"
445,3.2,What is the scope of global variables?,File scope.,they can be accessed by any C++ file anywhere.,0,5,2.5,"# ::snt they can be accessed by any C++ file anywhere.
(p / possible-01
      :ARG1 (a / access-01
            :ARG0 (f / file
                  :mod (a2 / any)
                  :mod (l / language
                        :name (n / name
                              :op1 ""C++""))
                  :location (a3 / anywhere))
            :ARG1 (t / they)))"
446,3.2,What is the scope of global variables?,File scope.,Global variables have file scope.,5,5,5,"# ::snt Global variables have file scope.
(s / scope
      :mod (f / file)
      :domain (v / variable
            :mod (g / globe)))"
447,3.2,What is the scope of global variables?,File scope.,The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.,0,5,2.5,"# ::snt The scope of global variables are created by placing variable declarations outside any class or function definition.  Global variables retain their values throughout the execution of the program and they can be referenced by any function that follows their declarations or definitions in the source file.
(m / multi-sentence
      :snt1 (c / create-01
            :ARG1 (s / scope
                  :poss (v / variable
                        :mod (g / globe)))
            :manner (p / place-01
                  :ARG1 (d / declare-02
                        :ARG1 v)
                  :ARG2 (o / outside
                        :op1 (d2 / define-01
                              :ARG1 (o2 / or
                                    :op1 (c2 / class)
                                    :op2 (f / function)
                                    :mod (a / any))))))
      :snt2 (a2 / and
            :op1 (r / retain-01
                  :ARG0 (v2 / variable
                        :mod (g2 / globe))
                  :ARG1 (v3 / value
                        :poss v2)
                  :duration (e / execute-01
                        :ARG1 (p2 / program)))
            :op2 (p3 / possible-01
                  :ARG1 (r2 / reference-01
                        :ARG0 f
                        :mod (a3 / any)
                        :ARG0-of (f2 / follow-01
                              :ARG1 (o3 / or
                                    :op1 (d3 / declare-01
                                          :ARG0 v2)
                                    :op2 (d4 / define-01
                                          :ARG0 v2))
                              :location (f3 / file
                                    :mod (s2 / source))))
                  :ARG1 v2)))"
448,3.2,What is the scope of global variables?,File scope.,A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.,5,5,5,"# ::snt A global variable is an identifier that retains it's value throughout the execution of the program. It has file scope.
(m / multi-sentence
      :snt1 (ii / identifier
            :domain (v / variable
                  :mod (g / globe))
            :ARG0-of (r / retain-01
                  :ARG1 (v2 / value
                        :poss v)
                  :duration (e / execute-01
                        :ARG1 (p / program))))
      :snt2 (h / have-03
            :ARG0 (ii2 / it)
            :ARG1 (s / scope
                  :mod (f / file))))"
449,3.2,What is the scope of global variables?,File scope.,Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included,3,5,4,"# ::snt Global Variables can be used in any function as long as the appropriate .h file that holds the variable is included
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (v / variable
                  :mod (g / globe))
            :ARG2 (f / function-01
                  :mod (a / any)))
      :condition (a2 / as-long-as
            :op1 (ii / include-01
                  :ARG1 (f2 / file
                        :name (n / name
                              :op1 "".h"")
                        :ARG0-of (h / hold-01
                              :ARG1 v)
                        :ARG1-of (a3 / appropriate-02)))))"
450,3.2,What is the scope of global variables?,File scope.,They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.,5,5,5,"# ::snt They can be accessed by any part of the program. It can be referenced by any function that follows the declarations or definitions in the source file.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / access-01
                  :ARG0 (p2 / part
                        :mod (a2 / any)
                        :part-of (p3 / program))
                  :ARG1 (t / they)))
      :snt2 (p4 / possible-01
            :ARG1 (r / reference-04
                  :ARG0 (f / function
                        :mod (a3 / any)
                        :ARG0-of (f2 / follow-02
                              :ARG1 (o / or
                                    :op1 (d / declare-02)
                                    :op2 (d2 / define-01)
                                    :location (f3 / file
                                          :mod (s / source)))))
                  :ARG1 (ii / it))))"
451,3.2,What is the scope of global variables?,File scope.,can be accesed by any classes that have and object of that variables class in it,1,5,3,"# ::snt can be accesed by any classes that have and object of that variables class in it
(p / possible-01
      :ARG1 (a / access-01
            :ARG0 (c / class
                  :mod (a2 / any)
                  :ARG0-of (h / have-03
                        :ARG1 (o / object
                              :poss (c2 / class
                                    :mod (v / variable)
                                    :mod (t / that)))))
            :ARG1 c))"
452,3.2,What is the scope of global variables?,File scope.,Global variables have file-scope.  The variable is know to all functions throught the file,5,5,5,"# ::snt Global variables have file-scope.  The variable is know to all functions throught the file
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (v / variable
                  :mod (g / globe))
            :ARG1 (s / scope
                  :mod (f / file)))
      :snt2 (k / know-01
            :ARG1 (f2 / function-01
                  :ARG0 (v2 / variable)
                  :mod (a / all)
                  :path (t / through
                        :op1 (f3 / file)))))"
453,3.2,What is the scope of global variables?,File scope.,The entire program,4,5,4.5,"# ::snt The entire program
(p / program
      :mod (e / entire))"
454,3.2,What is the scope of global variables?,File scope.,They have file scope when placed outside a function.,5,5,5,"# ::snt They have file scope when placed outside a function.
(h / have-03
      :ARG0 (t / they)
      :ARG1 (s / scope
            :mod (f / file))
      :time (p / place-01
            :ARG1 t
            :ARG2 (o / outside
                  :op1 (f2 / function-01))))"
455,3.2,What is the scope of global variables?,File scope.,File scope.,5,5,5,"# ::snt File scope.
(s / scope
      :mod (f / file))"
456,3.2,What is the scope of global variables?,File scope.,They can be used throughout the program,4,5,4.5,"# ::snt They can be used throughout the program
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (t / they)
            :duration (t2 / throughout
                  :op1 (p2 / program))))"
457,3.2,What is the scope of global variables?,File scope.,Global variable can b accessed by any class wit an object in the variables class,1,5,3,"# ::snt Global variable can b accessed by any class wit an object in the variables class
(p / possible-01
      :ARG1 (a / access-01
            :ARG0 (c / class
                  :mod (a2 / any))
            :ARG1 (v / variable
                  :mod (g / globe))
            :instrument (o / object
                  :location (c2 / class
                        :mod (v2 / variable)))))"
458,3.2,What is the scope of global variables?,File scope.,The scope of global variables is at the file level.,5,5,5,"# ::snt The scope of global variables is at the file level.
(s / scope
      :poss (v / variable
            :mod (g / globe))
      :location (l / level
            :mod (f / file)))"
459,3.2,What is the scope of global variables?,File scope.,Global variables all have file scope.,5,5,5,"# ::snt Global variables all have file scope.
(s / scope
      :mod (f / file)
      :domain (v / variable
            :mod (g / globe)
            :mod (a / all)))"
460,3.2,What is the scope of global variables?,File scope.,it is accessible by all functions within a program,4,5,4.5,"# ::snt it is accessible by all functions within a program
(p / possible-01
      :ARG1 (a / access-01
            :ARG0 (f / function
                  :mod (a2 / all)
                  :location (p2 / program))
            :ARG1 (ii / it)))"
461,3.2,What is the scope of global variables?,File scope.,"variables accessible anywhere in the program, as long as they are public.",4,5,4.5,"# ::snt variables accessible anywhere in the program, as long as they are public.
(a / accessible-02
      :ARG1 (v / variable)
      :location (a2 / anywhere
            :location (p / program))
      :condition (a3 / as-long-as
            :op1 (p2 / public-02
                  :ARG1 v)))"
462,3.2,What is the scope of global variables?,File scope.,They can be referenced by any function following their declaration or definition inside the source file.,5,5,5,"# ::snt They can be referenced by any function following their declaration or definition inside the source file.
(p / possible-01
      :ARG1 (r / reference-02
            :ARG0 (f / function
                  :mod (a / any)
                  :ARG0-of (f2 / follow-01
                        :ARG1 (o / or
                              :op1 (d / declare-02
                                    :ARG0 (t / they))
                              :op2 (d2 / define-01
                                    :ARG0 t)
                              :location (ii / inside
                                    :op1 (f3 / file
                                          :mod (s / source))))))
            :ARG1 t))"
463,3.2,What is the scope of global variables?,File scope.,"globally, anywhere in the program.",4,5,4.5,"# ::snt globally, anywhere in the program.
(a / and
      :op1 (g / globe)
      :op2 (a2 / anywhere
            :location (p / program)))"
464,3.2,What is the scope of global variables?,File scope.,Global variables have a file scope,5,5,5,"# ::snt Global variables have a file scope
(s / scope
      :mod (f / file)
      :domain (v / variable
            :mod (g / globe)))"
465,3.2,What is the scope of global variables?,File scope.,The entire program.,4,5,4.5,"# ::snt The entire program.
(p / program
      :mod (e / entire))"
466,3.2,What is the scope of global variables?,File scope.,throughout the execution of the program,4,5,4.5,"# ::snt throughout the execution of the program
(e / execute-01
      :ARG1 (p / program)
      :duration (t / throughout))"
467,3.2,What is the scope of global variables?,File scope.,"If a variable is declared global, any function or class can use that variable.",4,5,4.5,"# ::snt If a variable is declared global, any function or class can use that variable.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (o / or
                  :op1 (f / function)
                  :op2 (c / class)
                  :mod (a / any))
            :ARG1 (v / variable
                  :mod (t / that)))
      :condition (d / declare-02
            :ARG1 v
            :ARG2 (g / global)))"
468,3.2,What is the scope of global variables?,File scope.,The entire program or file.,5,5,5,"# ::snt The entire program or file.
(o / or
      :op1 (p / program)
      :op2 (f / file)
      :mod (e / entire))"
469,3.2,What is the scope of global variables?,File scope.,throught the programm,4,5,4.5,"# ::snt throught the programm
(r / run-01
      :ARG1 (p / program))"
470,3.2,What is the scope of global variables?,File scope.,the whole code,4,5,4.5,"# ::snt the whole code
(c / code
      :mod (w / whole))"
471,3.2,What is the scope of global variables?,File scope.,File scope,5,5,5,"# ::snt File scope
(s / scope
      :mod (f / file))"
472,3.2,What is the scope of global variables?,File scope.,can be referenced by any function that follows their declarations or definitions in the source file,5,5,5,"# ::snt can be referenced by any function that follows their declarations or definitions in the source file
(p / possible-01
      :ARG1 (r / reference-04
            :ARG0 (f / function
                  :mod (a / any)
                  :ARG0-of (f2 / follow-02
                        :ARG1 (o / or
                              :op1 (d / declare-02
                                    :ARG0 f)
                              :op2 (d2 / define-01
                                    :ARG0 f)
                              :location (f3 / file
                                    :mod (s / source)))))))"
473,3.2,What is the scope of global variables?,File scope.,global variables have program scope (accessible anywhere in program),4,5,4.5,"# ::snt global variables have program scope (accessible anywhere in program)
(h / have-03
      :ARG0 (v / variable
            :mod (g / globe))
      :ARG1 (s / scope
            :mod (p / program)
            :ARG1-of (m / mean-01
                  :ARG2 (a / access-01
                        :ARG1 v
                        :location (a2 / anywhere
                              :location (p2 / program))))))"
474,3.2,What is the scope of global variables?,File scope.,variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.,4,5,4.5,"# ::snt variables that exist throught the entire script. their values can be changed anytime in the code and fucntions.
(m / multi-sentence
      :snt1 (v / variable
            :ARG1-of (e / exist-01
                  :duration (e2 / entire
                        :op1 (s / script))))
      :snt2 (p / possible-01
            :ARG1 (c / change-01
                  :ARG1 (v2 / value
                        :poss v)
                  :time (a / anytime)
                  :location (a2 / and
                        :op1 (c2 / code)
                        :op2 (f / function)))))"
475,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.,4,5,4.5,"# ::snt It expands the function's definition in that place.  Once the functions is called you can use it as many times as you need.  The compiler just expands on the function.
(m / multi-sentence
      :snt1 (e / expand-01
            :ARG0 (ii / it)
            :ARG1 (t / thing
                  :ARG2-of (d / define-01
                        :ARG1 (f / function)))
            :location (p / place
                  :mod (t2 / that)))
      :snt2 (p2 / possible-01
            :ARG1 (u / use-01
                  :ARG0 (y / you)
                  :ARG1 (ii2 / it)
                  :time (c / call-02
                        :ARG1 (f2 / function))
                  :ARG1-of (h / have-quant-91
                        :ARG3 (e2 / equal)
                        :ARG4 (n / need-01
                              :ARG0 y))))
      :snt3 (e3 / expand-01
            :ARG0 (c2 / compiler)
            :ARG1 (f3 / function)
            :mod (j / just)))"
476,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.   ",4,5,4.5,"# ::snt When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller.   
(m / multi-sentence
      :snt1 (ii / insert-01
            :ARG1 (c / code
                  :poss (f / function))
            :ARG2 (s / stream
                  :mod (c2 / code)
                  :poss (p / person
                        :ARG0-of (c3 / call-02)))
            :time (e / expand-01
                  :ARG0 (c4 / compiler)
                  :ARG1 f
                  :manner (ii2 / inline))
            :ARG1-of (r / resemble-01
                  :ARG2 (e2 / event
                        :mod (m2 / macro
                              :name (n / name
                                    :op1 ""#define"")))
                  :mod (c5 / concept)))
      :snt2 (p2 / possible-01
            :ARG1 (ii3 / improve-01
                  :ARG0 (t / this)
                  :ARG1 (p3 / perform-02)
                  :ARG1-of (c6 / cause-01
                        :ARG0 (p4 / possible-01
                              :ARG1 (ii4 / integrate-01
                                    :ARG0 (p5 / person
                                          :ARG0-of (o / optimize-01))
                                    :ARG1 c2
                                    :ARG1-of (c7 / call-01))
                              :manner (p6 / procedural)
                              :ARG1-of (m3 / mean-01
                                    :ARG2 (o2 / optimize-01
                                          :ARG0 p5
                                          :ARG1 c2
                                          :ARG2 (p7 / person
                                                :ARG0-of (c8 / call-01)))))))))"
477,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.,5,5,5,"# ::snt The inline keyword advises the compiler to copy the function's code in place to avoid function calls; however the compiler can and typically does ignore the inline qualifier for all but the smallest functions.
(c / contrast-01
      :ARG1 (a / advise-01
            :ARG0 (k / keyword
                  :mod (ii / inline))
            :ARG1 (p / person
                  :ARG0-of (c2 / compile-01))
            :ARG2 (c3 / copy-01
                  :ARG0 p
                  :ARG1 (c4 / code
                        :poss (f / function))
                  :manner (ii2 / in-place)
                  :purpose (a2 / avoid-01
                        :ARG0 p
                        :ARG1 (c5 / call-02
                              :ARG1 (f2 / function)))))
      :ARG2 (a3 / and
            :op1 (p2 / possible-01
                  :ARG1 (ii3 / ignore-01
                        :ARG0 (c6 / compiler)
                        :ARG1 (q / qualifier
                              :mod (ii4 / inline))
                        :ARG2 (f3 / function
                              :mod (a4 / all)
                              :ARG2-of (e / except-01
                                    :ARG1 (f4 / function
                                          :ARG1-of (h / have-degree-91
                                                :ARG2 (s / small)
                                                :ARG3 (m / most))))))
                  :ARG1-of (t / typical-02))))"
478,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2,4,3,"# ::snt The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.
(a / and
      :op1 (p / possible-01
            :ARG1 (ii / ignore-01
                  :ARG0 (p2 / person
                        :ARG0-of (c / compile-01))
                  :ARG1 (t / thing
                        :ARG0-of (q / qualify-02)
                        :mod (ii2 / inline))))
      :op2 (d / do-02
            :ARG0 p2
            :ARG1 ii
            :ARG2 (f / function-01
                  :mod (a2 / all)
                  :ARG2-of (e / except-01
                        :ARG1 (h / have-degree-91
                              :ARG1 f
                              :ARG3 (m / most))))
            :ARG1-of (t2 / typical-02)))"
479,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"Placing the qualifier inline before a function's return type in the function definition ""advises"" the compiler to generate a copy of the function's code in place to avoid a function call.",5,5,5,"# ::snt Placing the qualifier inline before a function's return type in the function definition ""advises"" the compiler to generate a copy of the function's code in place to avoid a function call.
(a / advise-01
      :ARG0 (p / place-01
            :ARG1 (q / qualifier)
            :ARG2 (ii / inline)
            :time (b / before
                  :op1 (t / type
                        :mod (r / return-01)
                        :poss (f / function)))
            :location (d / define-01
                  :ARG1 (f2 / function)))
      :ARG1 (p2 / person
            :ARG0-of (c / compile-01))
      :ARG2 (g / generate-01
            :ARG0 p2
            :ARG1 (c2 / copy-01
                  :ARG1 (c3 / code
                        :poss (f3 / function)))
            :purpose (a2 / avoid-01
                  :ARG0 p2
                  :ARG1 (c4 / call-02
                        :ARG1 f3))))"
480,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.,0,4,2,"# ::snt You declare your inline function in the header or before your int main(). You then can call that function at anytime in your main program quickly and easily.
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG0 (y / you)
            :ARG1 (f / function
                  :mod (ii / inline)
                  :poss y)
            :location (o / or
                  :op1 (h / header)
                  :op2 (b / before
                        :op1 (f2 / function
                              :name (n / name
                                    :op1 ""int""
                                    :op2 ""main()"")
                              :poss y))))
      :snt2 (p / possible-01
            :ARG1 (c / call-01
                  :ARG0 (y2 / you)
                  :ARG1 (f3 / function
                        :mod (t / that))
                  :time (a / anytime)
                  :location (p2 / program
                        :mod (m2 / main)
                        :poss y2)
                  :ARG1-of (q / quick-02)
                  :ARG1-of (e / easy-05))
            :time (t2 / then)))"
481,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"It expands a small function out... making your code longer, but also makes it run faster.",4,4,4,"# ::snt It expands a small function out... making your code longer, but also makes it run faster.
(m / multi-sentence
      :snt1 (e / expand-01
            :ARG0 (ii / it)
            :ARG1 (f / function
                  :mod (s / small))
            :direction (o / out))
      :snt2 (c / contrast-01
            :ARG1 (m2 / make-02
                  :ARG0 ii
                  :ARG1 (h / have-degree-91
                        :ARG1 (c2 / code
                              :poss (y / you))
                        :ARG2 (l / long-03
                              :ARG1 c2)
                        :ARG3 (m3 / more)))
            :ARG2 (m4 / make-02
                  :ARG0 ii
                  :ARG1 (r / run-01
                        :ARG1 c2
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (f2 / fast-02
                                    :ARG1 r)
                              :ARG3 (m5 / more)))
                  :mod (a / also))))"
482,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,the function is not treated as a separate unit like other functions,4,3,3.5,"# ::snt the function is not treated as a separate unit like other functions
(t / treat-01
      :polarity -
      :ARG1 (f / function-01)
      :ARG2 (u / unit
            :ARG1-of (s / separate-02))
      :ARG1-of (r / resemble-01
            :ARG2 (f2 / function-01
                  :mod (o / other))))"
483,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"When the program compiles,it will copy the function inplace, avoiding a function call.",5,5,5,"# ::snt When the program compiles,it will copy the function inplace, avoiding a function call.
(a / and
      :op1 (c / copy-01
            :ARG0 (p / program)
            :ARG1 (f / function)
            :manner (ii / inplace))
      :op2 (a2 / avoid-01
            :ARG0 p
            :ARG1 (c2 / call-02
                  :ARG1 (f2 / function)))
      :time (c3 / compile-01
            :ARG1 p))"
484,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.",5,5,5,"# ::snt It replaces all instances of that function call with the inline code itself, resulting in longer but faster programs.
(r / replace-01
      :ARG0 (ii / it)
      :ARG1 (ii2 / instance
            :mod (a / all)
            :poss (c / call-02
                  :ARG1 (f / function)
                  :mod (t / that)))
      :ARG2 (c2 / code
            :mod (ii3 / inline))
      :ARG0-of (r2 / result-01
            :ARG2 (p / program
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 p)
                        :ARG3 (m / more))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (f2 / fast-02
                              :ARG1 p)
                        :ARG3 (m2 / more)))))"
485,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2,4,3,"# ::snt The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.
(a / and
      :op1 (p / possible-01
            :ARG1 (ii / ignore-01
                  :ARG0 (p2 / person
                        :ARG0-of (c / compile-01))
                  :ARG1 (t / thing
                        :ARG0-of (q / qualify-02)
                        :mod (ii2 / inline))))
      :op2 (d / do-02
            :ARG0 p2
            :ARG1 ii
            :ARG2 (f / function-01
                  :mod (a2 / all)
                  :ARG2-of (e / except-01
                        :ARG1 (h / have-degree-91
                              :ARG1 f
                              :ARG3 (m / most))))
            :ARG1-of (t2 / typical-02)))"
486,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,Ignores the inline qualifier and typically does so for all but the smallest functions.,2,4,3,"# ::snt Ignores the inline qualifier and typically does so for all but the smallest functions.
(a / and
      :op1 (ii / ignore-01
            :ARG1 (t / thing
                  :ARG0-of (q / qualify-01)
                  :mod (ii2 / inline)))
      :op2 (d / do-02
            :ARG1 ii
            :ARG2 (f / function-01
                  :mod (a2 / all)
                  :ARG2-of (e / except-01
                        :ARG1 (h / have-degree-91
                              :ARG1 f
                              :ARG3 (m / most))))
            :ARG1-of (t2 / typical-02)))"
487,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.,5,4,4.5,"# ::snt If the function is small enough it will expand it but it will run faster as it will avoid making so many calls to the function.
(c / contrast-01
      :ARG1 (e / expand-01
            :ARG0 (ii / it)
            :ARG1 (f / function)
            :condition (s / small
                  :ARG2-of (h / have-degree-91
                        :ARG1 f
                        :ARG3 (e2 / enough))))
      :ARG2 (r / run-01
            :ARG0 ii
            :ARG1-of (c2 / cause-01
                  :ARG0 (a / avoid-01
                        :ARG0 ii
                        :ARG1 (c3 / call-02
                              :ARG0 ii
                              :ARG1 f
                              :ARG1-of (h2 / have-quant-91
                                    :ARG2 (m / many)
                                    :ARG3 (s2 / so)))))
            :ARG2-of h
            :ARG1 r
            :ARG3 (m2 / more)))"
488,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,it treats them as the same function,2,2,2,"# ::snt it treats them as the same function
(t / treat-01
      :ARG0 (ii / it)
      :ARG1 (t2 / they)
      :ARG2 (f / function-01
            :ARG0 t2
            :ARG1-of (s / same-01)))"
489,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"Inline functions are copied in place, instead of being referenced.",5,5,5,"# ::snt Inline functions are copied in place, instead of being referenced.
(c / copy-01
      :ARG1 (f / function
            :mod (ii / inline))
      :manner (ii2 / in-place)
      :ARG1-of (ii3 / instead-of-91
            :ARG2 (r / reference-01
                  :ARG1 f)))"
490,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.",5,5,5,"# ::snt For inline functions, the compiler creates a copy of the function's code in place so it doesn't have to make a function call and add to the function call stack.
(c / create-01
      :ARG0 (p / person
            :ARG0-of (c2 / compile-01))
      :ARG1 (c3 / copy-01
            :ARG1 (c4 / code
                  :poss (f / function)))
      :manner (ii / in-place)
      :purpose (o / obligate-01
            :polarity -
            :ARG1 p
            :ARG2 (a / and
                  :op1 (c5 / call-02
                        :ARG0 p
                        :ARG1 (f2 / function))
                  :op2 (a2 / add-02
                        :ARG0 p
                        :ARG2 (s / stack
                              :mod (c6 / call-02
                                    :ARG1 f2)))))
      :topic (f3 / function
            :mod (ii2 / inline)))"
491,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the function's coding which eliminates calling the function,5,5,5,"# ::snt it generates a copy of the function's coding which eliminates calling the function
(g / generate-01
      :ARG0 (ii / it)
      :ARG1 (c / copy-01
            :ARG1 (c2 / code-01
                  :ARG1 (f / function))
            :ARG0-of (e / eliminate-01
                  :ARG1 (c3 / call-02
                        :ARG1 f))))"
492,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
493,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,It generates a copy of the function's code by by inserting it in the program.,4,5,4.5,"# ::snt It generates a copy of the function's code by by inserting it in the program.
(g / generate-01
      :ARG0 (ii / it)
      :ARG1 (c / copy-01
            :ARG1 (c2 / code
                  :poss (f / function)))
      :manner (ii2 / insert-01
            :ARG0 ii
            :ARG1 c2
            :ARG2 (p / program)))"
494,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.",5,5,5,"# ::snt tells the compiler to make a copy of function's code in place to avoid a function call.  it typically ignores it, except for the smallest functions.
(m / multi-sentence
      :snt1 (t / tell-01
            :ARG0 (c / compiler)
            :ARG1 (m2 / make-01
                  :ARG0 c
                  :ARG1 (c2 / copy-01
                        :ARG0 c
                        :ARG1 (c3 / code
                              :poss (f / function))
                        :manner (ii / in-place))
                  :purpose (a / avoid-01
                        :ARG0 c
                        :ARG1 (c4 / call-02
                              :ARG1 (f2 / function)))))
      :snt2 (ii2 / ignore-01
            :ARG0 (ii3 / it)
            :ARG1-of (t2 / typical-02)
            :ARG2-of (e / except-01
                  :ARG1 (f3 / function
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m3 / most))))))"
495,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.,2,2,2,"# ::snt The compiler can ignore the inline qualifier and typically does so for all but the smallest functions.
(a / and
      :op1 (p / possible-01
            :ARG1 (ii / ignore-01
                  :ARG0 (p2 / person
                        :ARG0-of (c / compile-01))
                  :ARG1 (t / thing
                        :ARG0-of (q / qualify-02)
                        :mod (ii2 / inline))))
      :op2 (d / do-02
            :ARG0 p2
            :ARG1 ii
            :ARG2 (f / function-01
                  :mod (a2 / all)
                  :ARG2-of (e / except-01
                        :ARG1 (h / have-degree-91
                              :ARG1 f
                              :ARG3 (m / most))))
            :ARG1-of (t2 / typical-02)))"
496,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"Multiple copies of the function code are inserted into the program, making it bigger.",4,5,4.5,"# ::snt Multiple copies of the function code are inserted into the program, making it bigger.
(ii / insert-01
      :ARG1 (c / copy-01
            :ARG1 (c2 / code
                  :mod (f / function))
            :quant (m / multiple))
      :ARG2 (p / program)
      :ARG0-of (m2 / make-02
            :ARG1 (h / have-degree-91
                  :ARG1 p
                  :ARG2 (b / big)
                  :ARG3 (m3 / more))))"
497,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,compiler ignores inline qualifier,2,3,2.5,"# ::snt compiler ignores inline qualifier
(ii / ignore-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (t / thing
            :ARG2-of (q / qualify-02)
            :mod (ii2 / inline)))"
498,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"It generates a copy of the function, if it is needed again.",2,5,3.5,"# ::snt It generates a copy of the function, if it is needed again.
(g / generate-01
      :ARG0 (ii / it)
      :ARG1 (c / copy-01
            :ARG1 (f / function))
      :condition (n / need-01
            :ARG1 c
            :mod (a / again)))"
499,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.",5,5,5,"# ::snt The complier includes copies of inline functions instead of making function calls, but usually only with very small functions.
(c / contrast-01
      :ARG1 (ii / include-01
            :ARG0 (p / person
                  :ARG0-of (c2 / compile-01))
            :ARG1 (c3 / copy-01
                  :ARG1 (f / function
                        :mod (ii2 / inline)))
            :ARG1-of (ii3 / instead-of-91
                  :ARG2 (c4 / call-02
                        :ARG0 p
                        :ARG1 (f2 / function))))
      :ARG2 (ii4 / include-01
            :ARG0 p
            :ARG1 (f3 / function
                  :mod (s / small
                        :degree (v / very)))
            :mod (u / usual)
            :mod (o / only)))"
500,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call,5,5,5,"# ::snt Compiler generate a copy of the function's code in place (when appropriate) to avoid a function call
(g / generate-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (c2 / copy-01
            :ARG1 (c3 / code
                  :poss (f / function))
            :mod (ii / in-place))
      :purpose (a / avoid-01
            :ARG0 p
            :ARG1 (c4 / call-02
                  :ARG1 (f2 / function)))
      :time (a2 / appropriate-02))"
501,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body",5,5,5,"# ::snt instead of calling the function every time it is invoked, the compiler will replace the function call with a copy of the function body
(r / replace-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (c2 / call-02
            :ARG0 p
            :ARG1 (f / function))
      :ARG2 (c3 / copy-01
            :ARG0 p
            :ARG1 (b / body
                  :mod (f2 / function)))
      :ARG1-of (ii / instead-of-91
            :ARG2 (c4 / call-02
                  :ARG0 p
                  :ARG1 f
                  :frequency (r2 / rate-entity-91
                        :ARG4 (ii2 / invoke-01
                              :ARG1 f)))))"
502,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,Expands the function into the program,4,4,4,"# ::snt Expands the function into the program
(e / expand-01
      :ARG1 (f / function-01)
      :ARG4 (p / program))"
503,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,it generates a copy of the functions code in place to avoid a function call,5,5,5,"# ::snt it generates a copy of the functions code in place to avoid a function call
(g / generate-01
      :ARG0 (ii / it)
      :ARG1 (c / copy-01
            :ARG1 (c2 / code
                  :mod (f / function))
            :location (ii2 / in-place))
      :purpose (a / avoid-01
            :ARG0 ii
            :ARG1 (c3 / call-02
                  :ARG1 (f2 / function))))"
504,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,the function call will be replaced by the code that was defined in the inline function,5,5,5,"# ::snt the function call will be replaced by the code that was defined in the inline function
(r / replace-01
      :ARG1 (c / call-02
            :ARG1 (f / function))
      :ARG2 (c2 / code
            :ARG1-of (d / define-01
                  :location (f2 / function
                        :mod (ii / inline)))))"
505,3.3,How does the compiler handle inline functions?,It makes a copy of the function code in every place where a function call is made.,"When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller. ",4,5,4.5,"# ::snt When the compiler inline-expands a function call, the function's code gets inserted into the caller's code stream (conceptually similar to what happens with a #define macro). This can, depending on a zillion other things, improve performance, because the optimizer can procedurally integrate the called code — optimize the called code into the caller. 
(m / multi-sentence
      :snt1 (ii / insert-01
            :ARG1 (c / code
                  :poss (f / function))
            :ARG2 (s / stream
                  :mod (c2 / code)
                  :poss (p / person
                        :ARG0-of (c3 / call-02)))
            :time (e / expand-01
                  :ARG0 (c4 / compiler)
                  :ARG1 f
                  :manner (ii2 / inline))
            :ARG1-of (r / resemble-01
                  :ARG2 (e2 / event
                        :mod (m2 / macro
                              :name (n / name
                                    :op1 ""#define"")))
                  :mod (c5 / concept)))
      :snt2 (p2 / possible-01
            :ARG1 (ii3 / improve-01
                  :ARG0 (t / this)
                  :ARG1 (p3 / perform-02)
                  :ARG1-of (c6 / cause-01
                        :ARG0 (p4 / possible-01
                              :ARG1 (ii4 / integrate-01
                                    :ARG0 (p5 / person
                                          :ARG0-of (o / optimize-01))
                                    :ARG1 c2
                                    :ARG1-of (c7 / call-01))
                              :manner (p6 / procedural)
                              :ARG1-of (m3 / mean-01
                                    :ARG2 (o2 / optimize-01
                                          :ARG0 p5
                                          :ARG1 c2
                                          :ARG2 (p7 / person
                                                :ARG0-of (c8 / call-01)))))))))"
506,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.,5,5,5,"# ::snt Overall the program has better performance (means it is faster) because it does not have to copy large amounts of data.
(c / cause-01
      :ARG0 (o / obligate-01
            :polarity -
            :ARG1 (p / program)
            :ARG2 (c2 / copy-01
                  :ARG0 p
                  :ARG1 (d / data
                        :quant (a / amount
                              :mod (l / large)))))
      :ARG1 (h / have-03
            :ARG0 p
            :ARG1 (p2 / perform-02
                  :ARG0 p
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 p2)
                        :ARG3 (m / more))))
      :mod (o2 / overall))"
507,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,because you can't change the original and passing by reference limits memory needed for the program.,5,4,4.5,"# ::snt because you can't change the original and passing by reference limits memory needed for the program.
(c / cause-01
      :ARG0 (a / and
            :op1 (p / possible-01
                  :polarity -
                  :ARG1 (c2 / change-01
                        :ARG0 (y / you)
                        :ARG1 (o / original)))
            :op2 (p2 / pass-by-17
                  :ARG1 (r / reference))
            :ARG0-of (l / limit-01
                  :ARG1 (m / memory
                        :ARG1-of (n / need-01
                              :ARG0 (p3 / program))))))"
508,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.,5,5,5,"# ::snt Passing by reference can eliminate the pass-by-value overhead of copying large amounts of data.
(p / possible-01
      :ARG1 (e / eliminate-01
            :ARG0 (p2 / pass-01
                  :manner (r / reference))
            :ARG1 (o / overhead
                  :mod (p3 / pass-01
                        :manner (v / value))
                  :ARG1-of (c / cause-01
                        :ARG0 (c2 / copy-01
                              :ARG1 (d / data
                                    :quant (a / amount
                                          :mod (l / large))))))))"
509,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.",5,5,5,"# ::snt It is often more efficient to pass references, rather than large objects, to functions. This allows the compiler to pass the address of the object while maintaining the syntax that would have been used to access the object.
(m / multi-sentence
      :snt1 (h / have-degree-91
            :ARG1 (p / pass-01
                  :ARG1 (r / reference)
                  :ARG2 (f / function-01))
            :ARG2 (e / efficient-01
                  :ARG1 p)
            :ARG3 (m2 / more)
            :ARG4 (p2 / pass-01
                  :ARG1 (o / object
                        :mod (l / large))
                  :ARG2 f)
            :frequency (o2 / often))
      :snt2 (a / allow-01
            :ARG0 (t / this)
            :ARG1 (p3 / pass-03
                  :ARG0 (c / compiler)
                  :ARG1 (a2 / address
                        :poss (o3 / object))
                  :time (m3 / maintain-01
                        :ARG0 c
                        :ARG1 (s / syntax
                              :ARG1-of (u / use-01
                                    :ARG2 (a3 / access-01
                                          :ARG0 c
                                          :ARG1 o3)))))))"
510,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.",5,5,5,"# ::snt Pass by reference is good for performance reasons, because it can eliminate the pass by value overhead of copying large amounts of data.
(g / good-02
      :ARG1 (p / pass-by-refer-00)
      :ARG1-of (c / cause-01
            :ARG0 (r / reason
                  :mod (p2 / perform-02)))
      :ARG1-of c
      :ARG0 (p3 / possible-01
            :ARG1 (e / eliminate-01
                  :ARG0 (p4 / pass-by-00
                        :ARG1 (o / overhead
                              :mod (v / value
                                    :ARG1-of (p5 / pass-by-00))
                              :ARG1-of c
                              :ARG0 (c2 / copy-01
                                    :ARG1 (d / data
                                          :quant (a / amount
                                                :mod (l / large)))))))))"
511,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,You do not alter the original value of the variable that was passed.,3,3,3,"# ::snt You do not alter the original value of the variable that was passed.
(a / alter-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (v / value
            :mod (o / original)
            :poss (v2 / variable
                  :ARG1-of (p / pass-03))))"
512,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Don't have to make copies of stuff.,4,5,4.5,"# ::snt Don't have to make copies of stuff.
(o / obligate-01
      :polarity -
      :ARG2 (m / make-01
            :ARG1 (c / copy-01
                  :ARG1 (s / stuff))))"
513,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,you do not use unessesary memory space to copy variables between functions,5,5,5,"# ::snt you do not use unessesary memory space to copy variables between functions
(u / use-01
      :polarity -
      :ARG0 (y / you)
      :ARG1 (s / space
            :mod (m / memory)
            :mod (e / essential
                  :polarity -))
      :ARG2 (c / copy-01
            :ARG0 y
            :ARG1 (v / variable)
            :location (b / between
                  :op1 (f / function-01))))"
514,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,It elimitates the need to copy large amonts of data,5,5,5,"# ::snt It elimitates the need to copy large amonts of data
(e / elimit-01
      :ARG0 (ii / it)
      :ARG1 (n / need-01
            :ARG1 (c / copy-01
                  :ARG1 (d / data
                        :quant (m / multiple
                              :op1 (m2 / mass-quantity
                                    :quant 1
                                    :unit (a / acre))
                              :mod (l / large))))))"
515,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,The function can change the data stored in a variable passed by reference directly.,3,4,3.5,"# ::snt The function can change the data stored in a variable passed by reference directly.
(p / possible-01
      :ARG1 (c / change-01
            :ARG0 (f / function)
            :ARG1 (d / data
                  :ARG1-of (s / store-01
                        :ARG2 (v / variable
                              :ARG1-of (p2 / pass-03
                                    :ARG0 (r / reference)))))
            :ARG1-of (d2 / direct-02)))"
516,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data.,3,4,3.5,"# ::snt Gives called function the ability to access and modify the caller’s argument data.
(g / give-01
      :ARG1 (c / capable-01
            :ARG1 (f / function
                  :ARG1-of (c2 / call-02))
            :ARG2 (a / and
                  :op1 (a2 / access-01
                        :ARG0 f
                        :ARG1 (d / data
                              :mod (a3 / argue-01)
                              :poss (p / person
                                    :ARG0-of (c3 / call-02))))
                  :op2 (m / modify-01
                        :ARG0 f
                        :ARG1 d)))
      :ARG2 f)"
517,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Gives called function the ability to access and modify the caller’s argument data directly.,3,4,3.5,"# ::snt Gives called function the ability to access and modify the caller’s argument data directly.
(g / give-01
      :ARG1 (c / capable-01
            :ARG1 (f / function
                  :ARG1-of (c2 / call-02))
            :ARG2 (a / and
                  :op1 (a2 / access-01
                        :ARG0 f
                        :ARG1 (d / data
                              :mod (a3 / argue-01)
                              :poss (p / person
                                    :ARG0-of (c3 / call-02))))
                  :op2 (m / modify-01
                        :ARG0 f
                        :ARG1 d)
                  :ARG1-of (d2 / direct-02))))"
518,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.,3,3,3,"# ::snt It is more efficient and it changes the variable not online inside the function but outside so that the new value can be used elsewhere.
(a / and
      :op1 (h / have-degree-91
            :ARG1 (ii / it)
            :ARG2 (e / efficient-01
                  :ARG0 ii)
            :ARG3 (m / more))
      :op2 (c / change-01
            :ARG0 ii
            :ARG1 (v / variable)
            :ARG2 (o / online
                  :polarity -
                  :location (ii2 / inside
                        :op1 (f / function-01)))
            :purpose (p / possible-01
                  :ARG1 (u / use-01
                        :ARG1 (v2 / value
                              :ARG1-of (n / new-01))
                        :location (e2 / elsewhere)))))"
519,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,you don't make another copy and waste memory,5,5,5,"# ::snt you don't make another copy and waste memory
(a / and
      :op1 (c / copy-01
            :polarity -
            :ARG0 (y / you)
            :mod (a2 / another))
      :op2 (w / waste-01
            :polarity -
            :ARG0 y
            :ARG1 (m / memory)))"
520,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Passing by reference eliminates the copying of large amounts of data, typical with pass by value.",5,5,5,"# ::snt Passing by reference eliminates the copying of large amounts of data, typical with pass by value.
(e / eliminate-01
      :ARG0 (p / pass-by-refer-00)
      :ARG1 (c / copy-01
            :ARG1 (d / data
                  :quant (a / amount
                        :mod (l / large))
                  :ARG1-of (t / typical-02
                        :ARG2 (v / value
                              :ARG1-of (p2 / pass-by-00))))))"
521,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.",5,5,5,"# ::snt If a function's arguments are large in size, computing time and memory space is not wasted copying down the argument and passing it to the function.  Also pass by reference gives the function called the permission to read edit the argument directly.
(m / multi-sentence
      :snt1 (w / waste-01
            :polarity -
            :ARG1 (a / and
                  :op1 (c / copy-01
                        :ARG1 (a2 / argument)
                        :direction (d / down))
                  :op2 (p / pass-01
                        :ARG1 a2
                        :ARG2 (f / function)))
            :condition (s / size
                  :mod (l / large)
                  :poss (a3 / argument
                        :poss (f2 / function))))
      :snt2 (g / give-01
            :ARG0 (p2 / pass-01
                  :manner (r / reference))
            :ARG1 (p3 / permit-01
                  :ARG1 (r2 / read-01
                        :ARG0 f2
                        :ARG1 (e / edit-01
                              :ARG0 f2
                              :ARG1 (a4 / argument))
                        :ARG1-of (d2 / direct-02)))
            :ARG2 (f3 / function
                  :ARG1-of (c2 / call-01))
            :mod (a5 / also)))"
522,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Gives access to the caller data directly, also it allows for modifying the data.",3,4,3.5,"# ::snt Gives access to the caller data directly, also it allows for modifying the data.
(a / and
      :op1 (g / give-01
            :ARG1 (a2 / access-01
                  :ARG1 (d / data
                        :poss (p / person
                              :ARG0-of (c / call-02))))
            :ARG1-of (d2 / direct-02))
      :op2 (a3 / allow-01
            :ARG0 g
            :ARG1 (m / modify-01
                  :ARG1 (d3 / data))
            :mod (a4 / also)))"
523,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"less overhead overall, and you modify the variable directly.",4,3,3.5,"# ::snt less overhead overall, and you modify the variable directly.
(a / and
      :op1 (o / overhead
            :quant (l / less)
            :mod (o2 / overall))
      :op2 (m / modify-01
            :ARG0 (y / you)
            :ARG1 (v / variable)
            :ARG1-of (d / direct-02)))"
524,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,The original variable being referenced can be modified directly by the called function.,3,3,3,"# ::snt The original variable being referenced can be modified directly by the called function.
(p / possible-01
      :ARG1 (m / modify-01
            :ARG0 (f / function
                  :ARG1-of (c / call-01))
            :ARG1 (v / variable
                  :mod (o / original)
                  :ARG1-of (r / reference-01))
            :ARG1-of (d / direct-02)))"
525,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,gives function ability to access and modify the caller's argument data directly,3,4,3.5,"# ::snt gives function ability to access and modify the caller's argument data directly
(g / give-01
      :ARG1 (c / capable-01
            :ARG1 (f / function)
            :ARG2 (a / and
                  :op1 (a2 / access-01
                        :ARG0 f
                        :ARG1 (d / data
                              :mod (a3 / argue-01
                                    :ARG0 (p / person
                                          :ARG0-of (c2 / call-02)))))
                  :op2 (m / modify-01
                        :ARG0 f
                        :ARG1 d))
            :ARG1-of (d2 / direct-02)))"
526,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Gives the called function the ability to access and modify the caller's argument data directly.,3,3,3,"# ::snt Gives the called function the ability to access and modify the caller's argument data directly.
(g / give-01
      :ARG1 (c / capable-01
            :ARG1 (f / function
                  :ARG1-of (c2 / call-02))
            :ARG2 (a / and
                  :op1 (a2 / access-01
                        :ARG0 f
                        :ARG1 (d / data
                              :mod (a3 / argue-01)
                              :poss (p / person
                                    :ARG0-of (c3 / call-02))))
                  :op2 (m / modify-01
                        :ARG0 f
                        :ARG1 d)
                  :ARG1-of (d2 / direct-02))))"
527,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Less overhead than passed by value, especially when using large numbers.",4,3,3.5,"# ::snt Less overhead than passed by value, especially when using large numbers.
(o / overhead
      :ARG1-of (h / have-quant-91
            :ARG3 (l / less)
            :ARG4 (v / value
                  :ARG1-of (p / pass-by-17)))
      :time (u / use-01
            :ARG1 (n / number
                  :mod (l2 / large))
            :mod (e / especially)))"
528,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed ",5,5,5,"# ::snt large data items can be passed without copying the entire data point, reducing execution time and the amout of memory space needed 
(p / possible-01
      :ARG1 (p2 / pass-05
            :ARG1 (ii / item
                  :mod (d / data)
                  :mod (l / large))
            :manner (c / copy-01
                  :polarity -
                  :ARG1 (p3 / point
                        :mod (d2 / data)
                        :mod (e / entire)))
            :ARG0-of (r / reduce-01
                  :ARG1 (a / and
                        :op1 (t / time
                              :time-of (e2 / execute-01))
                        :op2 (s / space
                              :mod (m / memory)
                              :ARG1-of (n / need-01))))))"
529,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.,4,4,4,"# ::snt The data can be modified directly instead of making a copy of the data. Improves execution time with large amounts of data.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (m2 / modify-01
                  :ARG1 (d / data)
                  :ARG1-of (d2 / direct-02)
                  :ARG1-of (ii / instead-of-91
                        :ARG2 (m3 / make-01
                              :ARG1 (c / copy-01
                                    :ARG1 (d3 / data))))))
      :snt2 (ii2 / improve-01
            :ARG1 (t / time
                  :duration-of (e / execute-01))
            :instrument (d4 / data
                  :quant (a / amount
                        :mod (l / large)))))"
530,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,Functions can directly modify arguments that are passed by reference.,3,4,3.5,"# ::snt Functions can directly modify arguments that are passed by reference.
(p / possible-01
      :ARG1 (m / modify-01
            :ARG0 (f / function)
            :ARG1 (t / thing
                  :ARG2-of (a / argue-01)
                  :ARG1-of (p2 / pass-03
                        :ARG0 (r / reference)))
            :ARG1-of (d / direct-02)))"
531,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata,5,5,5,"# ::snt It gives access and modify the caller's argument data directly. It eliminate the pass by value overhead of copying large amounts ofdata
(m / multi-sentence
      :snt1 (a / and
            :op1 (g / give-01
                  :ARG0 (ii / it)
                  :ARG1 (a2 / access-01
                        :ARG0 ii
                        :ARG1 (d / data
                              :ARG1-of (a3 / argue-01
                                    :ARG0 (p / person
                                          :ARG0-of (c / call-02))))))
            :op2 (m2 / modify-01
                  :ARG0 ii
                  :ARG1 d
                  :ARG1-of (d2 / direct-02)))
      :snt2 (e / eliminate-01
            :ARG0 (ii2 / it)
            :ARG1 (o / overhead
                  :mod (p2 / pass-by-23
                        :ARG1 (v / value))
                  :poss (c2 / copy-01
                        :ARG1 (d3 / data
                              :quant (a4 / amount
                                    :mod (l / large)))))))"
532,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"it takes less memory, thus it would make the program faster",4,4,4,"# ::snt it takes less memory, thus it would make the program faster
(c / cause-01
      :ARG0 (t / take-10
            :ARG0 (ii / it)
            :ARG1 (m / memory
                  :quant (l / less)))
      :ARG1 (m2 / make-02
            :ARG0 ii
            :ARG1 (h / have-degree-91
                  :ARG1 (p / program)
                  :ARG2 (f / fast-02
                        :ARG1 p)
                  :ARG3 (m3 / more))))"
533,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,You are able to modify the variable that is referenced directly.,3,4,3.5,"# ::snt You are able to modify the variable that is referenced directly.
(p / possible-01
      :ARG1 (m / modify-01
            :ARG0 (y / you)
            :ARG1 (v / variable
                  :ARG1-of (r / reference-01
                        :ARG1-of (d / direct-02)))))"
534,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value",3,4,3.5,"# ::snt if you pass by reference, you can modify the value as opposed to passing by value where you cannot change the value
(h / have-condition-91
      :ARG1 (p / possible-01
            :ARG1 (m / modify-01
                  :ARG0 (y / you)
                  :ARG1 (v / value))
            :ARG1-of (ii / instead-of-91
                  :ARG2 (p2 / possible-01
                        :polarity -
                        :ARG1 (c / change-01
                              :ARG0 y
                              :ARG1 (v2 / value)))))
      :ARG2 (p3 / pass-by-17
            :ARG0 y
            :ARG1 (v3 / value)))"
535,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.",5,5,5,"# ::snt only the memory address is sent to the function, so no copy of the object sent needs to be made. It makes the function run faster, and saves memory.
(m / multi-sentence
      :snt1 (s / send-01
            :ARG1 (a / address
                  :mod (m2 / memory)
                  :mod (o / only))
            :ARG2 (f / function)
            :ARG0-of (c / cause-01
                  :ARG1 (n / need-01
                        :polarity -
                        :ARG1 (c2 / copy-01
                              :ARG1 (o2 / object
                                    :ARG1-of (s2 / send-01))))))
      :snt2 (a2 / and
            :op1 (m3 / make-02
                  :ARG0 (ii / it)
                  :ARG1 (r / run-01
                        :ARG1 f)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f2 / fast-02
                              :ARG1 r)
                        :ARG3 (m4 / more))))
      :op2 (s3 / save-01
            :ARG0 ii
            :ARG1 (m5 / memory)))"
536,3.4,What is the main advantage associated with function arguments that are passed by reference?,It avoids making copies of large data structures when calling functions.,"Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram",3,3,3,"# ::snt Actual arguments are associated with dummy arguments when a function or subroutine is referenced. In a procedure reference, the actual argument list identifies the correspondence between the actual arguments provided in the list and the dummy arguments of the subprogram
(m / multi-sentence
      :snt1 (a / associate-01
            :ARG1 (a2 / argue-01
                  :ARG1-of (a3 / actual-02))
            :ARG2 (a4 / argue-01
                  :mod (d / dummy))
            :time (r / reference-01
                  :ARG1 (o / or
                        :op1 (f / function)
                        :op2 (s / subroutine))))
      :snt2 (ii / identify-01
            :ARG0 (l / list-01
                  :ARG1 (a5 / argue-01
                        :ARG1-of (a6 / actual-02)
                        :ARG1-of (p / provide-01
                              :ARG0 (l2 / list-01)))
                  :ARG1 (c / correspond-01
                        :ARG1 a5
                        :ARG2 (a7 / argument
                              :mod d)
                        :poss (s2 / subprogram))))
      :location (r2 / reference-01
            :ARG1 (p2 / procedure)))"
537,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.",5,5,5,"# ::snt The compiler selects the proper functions to execute based on number, types and order of arguments in the function call.
(s / select-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (f / function
            :mod (p2 / proper)
            :ARG1-of (e / execute-01
                  :ARG0 p))
      :ARG1-of (b / base-02
            :ARG2 (a / and
                  :op1 (n / number)
                  :op2 (t / type)
                  :op3 (o / order
                        :mod (a2 / argument)
                        :location (c2 / call-02
                              :ARG1 (f2 / function))))))"
538,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.,4,2,3,"# ::snt They differentiated by the compiler by the conditions/inputs used for one of the overloaded functions.
(d / differentiate-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (t / they)
      :ARG2 (s / slash
            :op1 (c2 / condition)
            :op2 (ii / input)
            :ARG1-of (u / use-01
                  :ARG2 (f / function
                        :quant 1
                        :ARG1-of (ii2 / include-91
                              :ARG2 (f2 / function
                                    :ARG1-of (o / overload-01)))))))"
539,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.",5,5,5,"# ::snt The compiler distinguishes overloaded functions by their signatures. It encodes each function identifier with the number and types of its parameters to generate type-safe linkage, which ensures the proper overloaded function is called.
(m / multi-sentence
      :snt1 (d / distinguish-01
            :ARG0 (c / compiler)
            :ARG1 (f / function
                  :ARG1-of (o / overload-01))
            :ARG2 (s / signature
                  :poss f))
      :snt2 (e / encode-01
            :ARG0 (ii / it)
            :ARG1 (ii2 / identifier
                  :mod (f2 / function)
                  :mod (e2 / each))
            :ARG2 (a / and
                  :op1 (n / number)
                  :op2 (t / type
                        :poss (p / parameter
                              :poss ii)))
            :purpose (g / generate-01
                  :ARG0 ii
                  :ARG1 (l / linkage
                        :ARG1-of (s2 / safe-01
                              :ARG2 (t2 / type)))
                  :ARG0-of (e3 / ensure-01
                        :ARG1 (c2 / call-02
                              :ARG1 f2
                              :ARG1-of (o2 / overload-01)
                              :mod (p2 / proper))))))"
540,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.",5,5,5,"# ::snt Overloaded functions are distinguished by their signatures, Name mangling or name decoration, and type-safe linkage ensures that proper overloaded functions is called and types of the arguments conform to tpes to the parameters.
(a / and
      :op1 (d / distinguish-01
            :ARG1 (f / function-01
                  :ARG1-of (o / overload-01))
            :ARG2 (o2 / or
                  :op1 (s / signature
                        :poss f)
                  :op2 (m / mangle-01
                        :ARG1 (n / name))
                  :op3 (d2 / decorate-01
                        :ARG1 (n2 / name))))
      :op2 (e / ensure-01
            :ARG0 (l / linkage
                  :ARG1-of (s2 / safe-01
                        :ARG2 (t / type)))
            :ARG1 (a2 / and
                  :op1 (c / call-02
                        :ARG1 (f2 / function
                              :ARG1-of (o3 / overload-01)
                              :mod (p / proper)))
                  :op2 (c2 / conform-01
                        :ARG1 (t2 / type
                              :poss (a3 / argument))
                        :ARG2 (s3 / string-entity
                              :value ""tpes"")
                        :ARG2 (p2 / parameter)))))"
541,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects proper function to execute based on number, types and order of arguments in the function call.",5,5,5,"# ::snt The compiler selects proper function to execute based on number, types and order of arguments in the function call.
(s / select-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (f / function
            :mod (p2 / proper))
      :purpose (e / execute-01
            :ARG1 f)
      :ARG1-of (b / base-02
            :ARG2 (a / and
                  :op1 (n / number)
                  :op2 (t / type)
                  :op3 (o / order
                        :poss (t2 / thing
                              :ARG1-of (a2 / argue-01)
                              :location (c2 / call-01
                                    :ARG1 (f2 / function)))))))"
542,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the type they are initilized with (int, char, etc.)",2,4,3,"# ::snt By the type they are initilized with (int, char, etc.)
(ii / initiate-01
      :ARG1 (t / they)
      :manner (t2 / type
            :example (a / and
                  :op1 (ii2 / int)
                  :op2 (s / string-entity
                        :value ""char"")
                  :op3 (e / et-cetera))))"
543,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It selects the proper function to execute based on number, types and order of arguments in the function call.",5,5,5,"# ::snt It selects the proper function to execute based on number, types and order of arguments in the function call.
(s / select-01
      :ARG0 (ii / it)
      :ARG1 (f / function
            :mod (p / proper)
            :ARG1-of (e / execute-01))
      :ARG1-of (b / base-02
            :ARG2 (a / and
                  :op1 (n / number)
                  :op2 (t / type)
                  :op3 (o / order
                        :mod (a2 / argument))
                  :location (c / call-02
                        :ARG1 (f2 / function)))))"
544,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded functions must have the same return type but different input parameters,1,5,3,"# ::snt overloaded functions must have the same return type but different input parameters
(o / obligate-01
      :ARG2 (h / have-03
            :ARG0 (f / function-01
                  :ARG1-of (o2 / overload-01))
            :ARG1 (t / type
                  :mod (r / return-01)
                  :ARG1-of (s / same-01)
                  :ARG1-of (c / contrast-01
                        :ARG2 (p / parameter
                              :mod (ii / input)
                              :ARG1-of (d / differ-02))))))"
545,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","It examines the names, types, and order of arguments on each function.",5,5,5,"# ::snt It examines the names, types, and order of arguments on each function.
(e / examine-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (t2 / thing
                              :ARG2-of (a2 / argue-01))))
            :op2 (t3 / thing
                  :mod (t4 / type))
            :op3 (o / order
                  :poss t2)
            :topic (f / function-01
                  :mod (e2 / each))))"
546,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",unique function signatures,5,5,5,"# ::snt unique function signatures
(s / signature
      :mod (f / function-01)
      :ARG1-of (u / unique-01))"
547,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Is based on number, types, and order of arguments in the function call.",5,5,5,"# ::snt Is based on number, types, and order of arguments in the function call.
(b / base-02
      :ARG2 (a / and
            :op1 (n / number)
            :op2 (t / type)
            :op3 (o / order)
            :poss (t2 / thing
                  :ARG1-of (a2 / argue-01)
                  :location (c / call-02
                        :ARG1 (f / function)))))"
548,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5,5,5,"# ::snt Compiler selects proper function to execute based on number, types and order of arguments in the function call.
(s / select-01
      :ARG0 (c / compiler)
      :ARG1 (f / function
            :mod (p / proper))
      :purpose (e / execute-01
            :ARG0 c
            :ARG1 f)
      :ARG1-of (b / base-02
            :ARG2 (a / and
                  :op1 (n / number)
                  :op2 (t / type)
                  :op3 (o / order
                        :mod (a2 / argument))
                  :location (c2 / call-02
                        :ARG1 (f2 / function)))))"
549,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
550,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","they have to have same return type, but different input parameters",1,5,3,"# ::snt they have to have same return type, but different input parameters
(c / contrast-01
      :ARG1 (o / obligate-01
            :ARG2 (h / have-03
                  :ARG0 (t / they)
                  :ARG1 (t2 / type
                        :mod (r / return-01)
                        :ARG1-of (s / same-01))))
      :ARG2 h
      :ARG0 t
      :ARG1 (p / parameter
            :mod (ii / input)
            :ARG1-of (d / differ-02)))"
551,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",Overloaded functions are differentiated by their parameters.,4,5,4.5,"# ::snt Overloaded functions are differentiated by their parameters.
(d / differentiate-01
      :ARG0 (p / parameter
            :poss (f / function
                  :ARG1-of (o / overload-01)
                  :ARG1-of d)))"
552,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","The compiler selects the right function to execute from the number, types and order of arguments in the function call.",5,5,5,"# ::snt The compiler selects the right function to execute from the number, types and order of arguments in the function call.
(s / select-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (f / function
            :ARG1-of (r / right-02)
            :purpose (e / execute-01)
            :ARG1-of e)
      :ARG2 (a / and
            :op1 (n / number)
            :op2 (t / type)
            :op3 (o / order)
            :poss (a2 / argument)
            :location (c2 / call-02
                  :ARG1 (f2 / function))))"
553,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",it creates a set of candidate functions then a set of viable functions,3,3,3,"# ::snt it creates a set of candidate functions then a set of viable functions
(c / create-01
      :ARG0 (ii / it)
      :ARG1 (s / set
            :consist-of (f / function-01
                  :ARG1 (c2 / candidate)))
      :ARG2 (s2 / set
            :consist-of (f2 / function-01
                  :ARG1-of (v / viable-02)))
      :time (t / then))"
554,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",their function signature.,5,5,5,"# ::snt their function signature.
(s / sign-01
      :ARG0 (t / they)
      :ARG1 (f / function-01))"
555,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The number and type of its parameters.,5,5,5,"# ::snt The number and type of its parameters.
(a / and
      :op1 (n / number
            :quant-of (p / parameter
                  :poss (ii / it)))
      :op2 (t / type
            :poss p))"
556,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by their function signature,5,5,5,"# ::snt by their function signature
(s / sign-01
      :ARG0 (t / they)
      :ARG1 (f / function-01
            :ARG0 t))"
557,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They have the same name, just different parameters.",3,4,3.5,"# ::snt They have the same name, just different parameters.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (t / they)
            :ARG1 (n / name
                  :ARG1-of (s / same-01)))
      :ARG2 h
      :ARG0 t
      :ARG1 (p / parameter
            :ARG1-of (d / differ-02)
            :mod (j / just)))"
558,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","They are differntiated by number, types and order of arguments in the function call.",5,5,5,"# ::snt They are differntiated by number, types and order of arguments in the function call.
(d / differ-02
      :ARG1 (t / they)
      :ARG2 (a / and
            :op1 (n / number)
            :op2 (t2 / type)
            :op3 (o / order
                  :mod (a2 / argument))
            :location (c / call-02
                  :ARG1 (f / function))))"
559,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","it looks at the number, types, and order of arguments in the function call ",5,5,5,"# ::snt it looks at the number, types, and order of arguments in the function call 
(l / look-01
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (n / number)
            :op2 (t / type)
            :op3 (o / order)
            :poss (a2 / argument)
            :location (c / call-02
                  :ARG1 (f / function))))"
560,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",The compiler differentiates overloaded functions by their signature.,5,5,5,"# ::snt The compiler differentiates overloaded functions by their signature.
(d / differentiate-01
      :ARG0 (p / person
            :ARG0-of (c / compile-01))
      :ARG1 (f / function
            :ARG1-of (o / overload-01))
      :ARG2 (s / signature
            :poss f))"
561,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the number, types, and order of their arguments",5,5,5,"# ::snt By the number, types, and order of their arguments
(a / argue-01
      :ARG0 (t / they)
      :manner (a2 / and
            :op1 (n / number)
            :op2 (t2 / type)
            :op3 (o / order)))"
562,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","Compiler selects proper function to execute based on number, types and order of arguments in the function call.",5,5,5,"# ::snt Compiler selects proper function to execute based on number, types and order of arguments in the function call.
(s / select-01
      :ARG0 (c / compiler)
      :ARG1 (f / function
            :mod (p / proper))
      :purpose (e / execute-01
            :ARG0 c
            :ARG1 f)
      :ARG1-of (b / base-02
            :ARG2 (a / and
                  :op1 (n / number)
                  :op2 (t / type)
                  :op3 (o / order
                        :mod (a2 / argument))
                  :location (c2 / call-02
                        :ARG1 (f2 / function)))))"
563,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",paremeters,4,5,4.5,"# ::snt paremeters
(p / paremeter)"
564,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","By the number, and the types and order of the  parameters.",5,5,5,"# ::snt By the number, and the types and order of the  parameters.
(a / and
      :op1 (n / number)
      :op2 (a2 / and
            :op1 (t / type)
            :op2 (o / order)
            :poss (p / parameter)))"
565,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",by the number and type of arguments,5,5,5,"# ::snt by the number and type of arguments
(a / and
      :op1 (n / number
            :quant-of (a2 / argue-01))
      :op2 (t / type
            :quant-of a2))"
566,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.","by their signature (return type, argument list)",3,5,4,"# ::snt by their signature (return type, argument list)
(s / signature
      :poss (t / they)
      :example (a / and
            :op1 (t2 / type
                  :mod (r / return-01))
            :op2 (l / list-01
                  :ARG1 (a2 / argue-01))))"
567,3.5,How are overloaded functions differentiated by the compiler?,"Based on the function signature. When an overloaded function is called, the compiler will find the function whose signature is closest to the given function call.",overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.,1,5,3,"# ::snt overloaded function simply invovles haing a method with the same name within the class. is used to implement a method for subclass which overrides in other words replaces the implementation of the super class. Overloading the concept of providing different meaning to a object based on the context of its presence. Overloading is one type of polymorphism and this is also a feature in programing.
(m / multi-sentence
      :snt1 (ii / invoke-01
            :ARG0 (f / function
                  :ARG1-of (o / overload-01))
            :ARG1 (m2 / method
                  :ARG1-of (n / name-01
                        :ARG2 (c / class))
                  :ARG1-of (s / same-01))
            :ARG1-of (s2 / simple-02))
      :snt2 (u / use-01
            :ARG1 (ii2 / implement-01
                  :ARG1 (m3 / method
                        :purpose (s3 / subclass)
                        :ARG0-of (o2 / override-01
                              :ARG1 (ii3 / implement-01
                                    :ARG1 (c2 / class
                                          :mod (s4 / super)))
                              :ARG0-of (r / replace-01
                                    :ARG1 ii3
                                    :manner (w / word
                                          :mod (o3 / other)))))))
      :snt2 (o4 / overload-01
            :ARG1 (c3 / concept
                  :topic (p / provide-01
                        :ARG1 (t / thing
                              :ARG1-of (m4 / mean-01)
                              :ARG1-of (d / differ-02))
                        :ARG2 (o5 / object)
                        :ARG1-of (b / base-02
                              :ARG2 (c4 / context
                                    :poss (p2 / present-02
                                          :ARG1 o5))))))
      :snt3 (a / and
            :op1 (p3 / polymorphism
                  :mod (t2 / type
                        :quant 1))
            :op2 (f2 / feature
                  :topic (p4 / program-01)
                  :domain (t3 / this)
                  :mod (a2 / also))))"
568,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   ",5,5,5,"# ::snt A base case that is the simplest case for a problem so that the function will lead to it, if this does not happen then it will end up as an infinite loop. And a condition to know when to terminate.   
(m / multi-sentence
      :snt1 (c / case-04
            :ARG1 (p / problem)
            :mod (b / base)
            :ARG1-of (h / have-degree-91
                  :ARG2 (s / simple-02
                        :ARG1 c)
                  :ARG3 (m2 / most))
            :purpose (l / lead-03
                  :ARG0 (f / function-01)
                  :ARG2 (ii / it)))
      :snt2 (e / end-up-03
            :ARG1 (ii2 / it)
            :ARG2 (l2 / loop
                  :mod (ii3 / infinite))
            :condition (h2 / have-polarity-91
                  :ARG1 l
                  :ARG2 -))
      :snt3 (a / and
            :op2 (c2 / condition
                  :purpose (k / know-01
                        :ARG1 (t / time
                              :time-of (t2 / terminate-01))))))"
569,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",badly designed algorithyms. using recursion for a non recursive problem.,2,3,2.5,"# ::snt badly designed algorithyms. using recursion for a non recursive problem.
(m / multi-sentence
      :snt1 (a / algorithm
            :ARG1-of (d / design-01
                  :ARG1-of (b / bad-07)))
      :snt2 (u / use-01
            :ARG1 (r / repeat-01)
            :ARG2 (p / problem
                  :mod (r2 / repeat-01
                        :polarity -))))"
570,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.,5,5,5,"# ::snt Infinite recursion can occur when the base case is omitted or the recursion step is written incorrectly so that it never converges on the base case.
(p / possible-01
      :ARG1 (r / recur-01
            :mod (ii / infinite))
      :condition (o / or
            :op1 (o2 / omit-01
                  :ARG1 (c / case-03
                        :mod (b / base)))
            :op2 (w / write-01
                  :ARG1 (s / step-01
                        :ARG1 r)
                  :manner (c2 / correct-02
                        :polarity -)
                  :ARG0-of (c3 / cause-01
                        :ARG1 (c4 / converge-01
                              :polarity -
                              :ARG1 s
                              :ARG2 c
                              :time (e / ever))))))"
571,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  ",5,5,5,"# ::snt Infinite recursion is an infinite loop if the condition is not met.  Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case causes ""indefinite"" recursion, eventually exhausting memory.  
(m / multi-sentence
      :snt1 (l / loop
            :mod (ii / infinite)
            :domain (r / recur-01
                  :mod (d / definite))
            :condition (m2 / meet-01
                  :polarity -
                  :ARG1 (c / condition-01)))
      :snt2 (c2 / cause-01
            :ARG0 (o / or
                  :op1 (o2 / omit-01
                        :ARG1 (c3 / case-03
                              :mod (b / base)))
                  :op2 (w / write-01
                        :ARG1 (s / step
                              :mod (r2 / recur-01))
                        :manner (c4 / correct-02
                              :polarity -)
                        :purpose (c5 / converge-01
                              :polarity -
                              :ARG1 s
                              :ARG2 c3)))
            :ARG1 (r3 / recur-01
                  :mod (d2 / definite
                        :polarity -))
            :ARG0-of (e / exhaust-01
                  :ARG1 (m3 / memory)
                  :time (e2 / eventual))))"
572,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.,5,5,5,"# ::snt Either omitting the base case or writing the recursion step incorrectly so that it does not converge on the base case can cause an infinite recursion.
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (o / or
                  :op1 (o2 / omit-01
                        :ARG1 (c2 / case
                              :mod (b / base)))
                  :op2 (w / write-01
                        :ARG1 (s / step
                              :mod (c3 / converge-01
                                    :polarity -
                                    :ARG1 c2))
                        :ARG1-of (c4 / correct-02
                              :polarity -)
                        :purpose (c5 / converge-01
                              :polarity -
                              :ARG1 c2
                              :ARG2 (c6 / case)))
                  :ARG1 (r / recur-01
                        :mod (ii / infinite)))))"
573,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Not having a base case that returns a base value.,3,5,4,"# ::snt Not having a base case that returns a base value.
(h / have-03
      :polarity -
      :ARG1 (c / case-04
            :mod (b / base)
            :ARG0-of (r / return-02
                  :ARG1 (v / value
                        :mod (b2 / base)))))"
574,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).,5,5,5,"# ::snt Incorrect or missing base case. Must reduce to the base case. The function must get simpler each time it is run (converge to the base case).
(m / multi-sentence
      :snt1 (o / or
            :op1 (c / correct-02
                  :polarity -
                  :ARG1 (c2 / case
                        :mod (b / base)))
            :op2 (m2 / miss-01
                  :ARG1 c2))
      :snt2 (o2 / obligate-01
            :ARG2 (r / reduce-01
                  :ARG2 (c3 / case
                        :mod (b2 / base))))
      :snt3 (o3 / obligate-01
            :ARG2 (g / get-03
                  :ARG1 (f / function)
                  :ARG2 (s / simple-02
                        :ARG1 f)
                  :ARG2-of (h / have-degree-91
                        :ARG1 f
                        :ARG3 (m3 / more))
                  :frequency (r2 / rate-entity-91
                        :ARG4 (r3 / run-01
                              :ARG1 f))))
      :snt4 (c4 / converge-01
            :ARG1 f
            :ARG2 c3
            :mod (b3 / base)))"
575,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",no base case no change in values.,4,5,4.5,"# ::snt no base case no change in values.
(c / change-01
      :polarity -
      :ARG1 (v / value)
      :ARG2 (c2 / case
            :mod (b / base)))"
576,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.",5,5,5,"# ::snt If at each recursive call the problem does not diminish or if it does not diminish to a base case, can cause infinite recursion.
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (o / or
                  :op1 (d / diminish-01
                        :polarity -
                        :ARG1 (p2 / problem)
                        :time (c2 / call-02
                              :mod (r / recursive)
                              :mod (e / each)))
                  :op2 (d2 / diminish-01
                        :polarity -
                        :ARG1 p2
                        :ARG4 (c3 / case-03
                              :mod (b / base))))))"
577,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Omitting the base case or incorrectly calling the recursive step.,5,5,5,"# ::snt Omitting the base case or incorrectly calling the recursive step.
(o / or
      :op1 (o2 / omit-01
            :ARG1 (c / case-03
                  :mod (b / base)))
      :op2 (c2 / call-01
            :ARG1 (s / step-01
                  :mod (r / recursive))
            :ARG1-of (c3 / correct-02
                  :polarity -)))"
578,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",The recursive problem cannot be reduced to reach the base case.,4,5,4.5,"# ::snt The recursive problem cannot be reduced to reach the base case.
(p / possible-01
      :polarity -
      :ARG1 (r / reduce-01
            :ARG1 (p2 / problem
                  :mod (r2 / recursive))
            :purpose (r3 / reach-01
                  :ARG1 (c / case-03
                        :mod (b / base)))))"
579,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case",5,5,5,"# ::snt Lack of defining a base case, or writing the recursion step incorrectly so that it does not converge on the base case
(o / or
      :op1 (l / lack-01
            :ARG1 (d / define-01
                  :ARG1 (c / case-03
                        :mod (b / base))))
      :op2 (w / write-01
            :ARG1 (s / step
                  :mod (r / recur-01))
            :ARG1-of (c2 / correct-02
                  :polarity -)
            :purpose (c3 / converge-01
                  :polarity -
                  :ARG1 s
                  :ARG2 c)))"
580,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Not having the proper case to leave the recursion,3,5,4,"# ::snt Not having the proper case to leave the recursion
(h / have-03
      :polarity -
      :ARG1 (c / case-03
            :mod (p / proper))
      :purpose (l / leave-15
            :ARG1 (r / recur-01)))"
581,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","no base case, or the recursive calls do not converge to the base case",5,5,5,"# ::snt no base case, or the recursive calls do not converge to the base case
(o / or
      :op1 (c / case-03
            :polarity -
            :mod (b / base))
      :op2 (c2 / converge-01
            :polarity -
            :ARG1 (c3 / call-02
                  :mod (r / recursive))
            :ARG2 c))"
582,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.",5,5,5,"# ::snt No base case, or an incorrectly written recursion step that does not converge on the base case will lead to infinite recursion.
(l / lead-03
      :polarity -
      :ARG0 (o / or
            :op1 (c / case-03
                  :mod (b / base))
            :op2 (s / step
                  :mod (c2 / converge-01
                        :polarity -
                        :ARG1 (c3 / case-03
                              :mod (b2 / base)))
                  :ARG1-of (w / write-01
                        :ARG1-of (c4 / correct-02
                              :polarity -))
                  :mod (r / recur-01)))
      :ARG2 r
      :mod (ii / infinite))"
583,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.",5,5,5,"# ::snt If the recursion function never reaches or successfully defines the base case it will recurse forever.  This happens many ways, such as the function doesn't progress towards the base case, or the function is coded poorly and doesn't even contain a base case.
(m / multi-sentence
      :snt1 (r / recur-01
            :ARG1 (f / function
                  :ARG0-of (r2 / recur-01))
            :duration (f2 / forever)
            :condition (o / or
                  :op1 (r3 / reach-01
                        :polarity -
                        :ARG0 f
                        :ARG1 (c / case
                              :mod (b / base))
                        :time (e / ever))
                  :op2 (d / define-01
                        :polarity -
                        :ARG0 f
                        :ARG1 c
                        :manner (s / succeed-01
                              :ARG0 f))))
      :snt2 (w / way
            :quant (m2 / many)
            :example o
            :op1 (p / progress-01
                  :polarity -
                  :ARG1 (f3 / function)
                  :ARG4 (c2 / case
                        :mod (b2 / base)))
            :op2 (c3 / code-01
                  :ARG1 f3
                  :manner (p2 / poor))
            :op3 (c4 / contain-01
                  :polarity -
                  :ARG0 f3
                  :ARG1 (c5 / case
                        :mod (b3 / base))
                  :mod (e2 / even))))"
584,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included."," not creating a base case, or in the case where the base case will never be met.",5,5,5,"# ::snt  not creating a base case, or in the case where the base case will never be met.
(o / or
      :op1 (c / create-01
            :polarity -
            :ARG1 (c2 / case-03
                  :mod (b / base)))
      :op2 (c3 / case-03
            :location-of (m / meet-01
                  :polarity -
                  :ARG1 c3
                  :mod b)
            :time (e / ever)))"
585,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",improper handling of cases such that not all possible values are able to be handled.,2,5,3.5,"# ::snt improper handling of cases such that not all possible values are able to be handled.
(h / handle-01
      :ARG1 (c / case-03)
      :manner (p / proper
            :polarity -)
      :ARG0-of (c2 / cause-01
            :ARG1 (p2 / possible-01
                  :polarity -
                  :ARG1 (h2 / handle-01
                        :ARG1 (v / value
                              :mod (a / all))))))"
586,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",There is no base case. The recursion step doesn't reduce the problem during each recursive call.,4,5,4.5,"# ::snt There is no base case. The recursion step doesn't reduce the problem during each recursive call.
(m / multi-sentence
      :snt1 (c / case-04
            :polarity -
            :mod (b / base))
      :snt2 (r / reduce-01
            :polarity -
            :ARG0 (s / step
                  :mod (r2 / recur-01))
            :ARG1 (p / problem)
            :time (c2 / call-02
                  :mod (r3 / recursive)
                  :mod (e / each))))"
587,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","no base case, as in a single return that does not include calling the function again.  a static value to end at.",2,5,3.5,"# ::snt no base case, as in a single return that does not include calling the function again.  a static value to end at.
(m / multi-sentence
      :snt1 (c / case-04
            :polarity -
            :mod (b / base)
            :example (r / return-01
                  :ARG1-of (s / single-02)
                  :ARG2-of (ii / include-01
                        :polarity -
                        :ARG1 (c2 / call-02
                              :ARG1 (f / function-01)
                              :mod (a / again)))))
      :snt2 (e / end-01
            :ARG1 (v / value
                  :mod (s2 / static))))"
588,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.",5,5,5,"# ::snt Either omitting the base case, or writing the recursion step incorrectly so the it does not reach the base case can cause infinite recursion.
(p / possible-01
      :ARG1 (c / cause-01
            :ARG0 (o / or
                  :op1 (o2 / omit-01
                        :ARG1 (c2 / case
                              :mod (b / base)))
                  :op2 (w / write-01
                        :ARG1 (s / step
                              :mod (r / recur-01))
                        :ARG1-of (c3 / correct-02
                              :polarity -)
                        :purpose (r2 / reach-01
                              :polarity -
                              :ARG0 s
                              :ARG1 c2)))
            :ARG1 (r3 / recur-01
                  :mod (ii / infinite))))"
589,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",omitting the base case or writing the recursive call so that it does not converge upon the base case.,5,5,5,"# ::snt omitting the base case or writing the recursive call so that it does not converge upon the base case.
(o / or
      :op1 (o2 / omit-01
            :ARG1 (c / case
                  :mod (b / base)))
      :op2 (w / write-01
            :ARG1 (c2 / call-02
                  :mod (r / recursive))
            :purpose (c3 / converge-01
                  :polarity -
                  :ARG0 c2
                  :ARG1 c)))"
590,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case",5,5,5,"# ::snt Either omitting the base case, or writing the recursion step incorrectly so that it does not converge on the base case
(o / or
      :op1 (o2 / omit-01
            :ARG1 (c / case-03
                  :mod (b / base)))
      :op2 (w / write-01
            :ARG1 (s / step
                  :mod (r / recur-01))
            :ARG1-of (c2 / correct-02
                  :polarity -)
            :purpose (c3 / converge-01
                  :polarity -
                  :ARG1 s
                  :ARG2 c)))"
591,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",Infinite recursion may occur if no base case is defined or if the call is not varied.,4,5,4.5,"# ::snt Infinite recursion may occur if no base case is defined or if the call is not varied.
(p / possible-01
      :ARG1 (r / recur-01
            :mod (ii / infinite))
      :condition (o / or
            :op1 (d / define-01
                  :polarity -
                  :ARG1 (c / case-03
                        :mod (b / base)))
            :op2 (v / vary-01
                  :polarity -
                  :ARG1 (c2 / call-02))))"
592,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Not having a base case, or building a recursion process that doesn't converge on the base case.",5,5,5,"# ::snt Not having a base case, or building a recursion process that doesn't converge on the base case.
(o / or
      :op1 (h / have-03
            :polarity -
            :ARG1 (c / case
                  :mod (b / base)))
      :op2 (b2 / build-01
            :ARG1 (p / process-02
                  :ARG1 (r / recur-01)
                  :ARG0-of (c2 / converge-01
                        :polarity -
                        :ARG2 c))))"
593,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","Either omitting the base case, or writing the recursion step incorerectly ",5,5,5,"# ::snt Either omitting the base case, or writing the recursion step incorerectly 
(o / or
      :op1 (o2 / omit-01
            :ARG1 (c / case-03
                  :mod (b / base)))
      :op2 (w / write-01
            :ARG1 (s / step
                  :mod (r / recur-01))
            :manner (c2 / corerect
                  :polarity -)))"
594,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",no base case or if the programmar does not define the base case as the simplest case and it never gets reached,5,5,5,"# ::snt no base case or if the programmar does not define the base case as the simplest case and it never gets reached
(o / or
      :op2 (a / and
            :op1 (d / define-01
                  :polarity -
                  :ARG0 (p / programmar)
                  :ARG1 (c / case-03
                        :mod (b / base))
                  :ARG2 (c2 / case-03
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / simple-02
                                    :ARG1 c)
                              :ARG3 (m / most))))
            :op2 (r / reach-01
                  :polarity -
                  :ARG1 c
                  :time (e / ever))))"
595,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",No easily reached base case and no base case at all,5,5,5,"# ::snt No easily reached base case and no base case at all
(a / and
      :op1 (c / case-03
            :polarity -
            :mod (b / base)
            :ARG1-of (r / reach-01
                  :ARG1-of (e / easy-05)))
      :op2 (c2 / case-03
            :polarity -
            :mod (b2 / base)
            :mod (a2 / at-all)))"
596,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",function is never allowed to reach the 'base case',5,5,5,"# ::snt function is never allowed to reach the 'base case'
(a / allow-01
      :polarity -
      :ARG1 (r / reach-01
            :ARG0 (f / function-01)
            :ARG1 (c / case-03
                  :mod (b / base)))
      :time (e / ever))"
597,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.","it has no base case, or the base case is never met",5,5,5,"# ::snt it has no base case, or the base case is never met
(o / or
      :op1 (h / have-03
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (c / case-03
                  :mod (b / base)))
      :op2 (m / meet-03
            :polarity -
            :ARG1 c
            :time (e / ever)))"
598,3.6,"When defining a recursive function, what are possible causes for infinite recursion?","If the recursion step is defined incorrectly, or if the base case is not included.",recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes,1,5,3,"# ::snt recursion refers to situations in which functions call themselves. These types of functions are known as recursive functions. That being said Infinite recursion occurs when the function is designed in such a way as to call it self forever without stopping possible causes
(m / multi-sentence
      :snt1 (r / refer-01
            :ARG1 (r2 / recur-01)
            :ARG2 (s / situation
                  :location-of (c / call-01
                        :ARG0 (f / function)
                        :ARG1 f)))
      :snt2 (k / know-02
            :ARG1 (f2 / function
                  :mod (t / type
                        :mod (t2 / this)))
            :ARG2 (f3 / function
                  :ARG1-of (r3 / recur-01)))
      :snt3 (s2 / say-01
            :ARG1 (t3 / that))
      :snt4 (o / occur-01
            :ARG1 (r4 / recur-01
                  :mod (ii / infinite))
            :time (d / design-01
                  :ARG1 (f4 / function)
                  :manner (w / way
                        :manner-of (c2 / call-01
                              :ARG0 f4
                              :ARG1 f4
                              :ARG3 (s3 / self)
                              :duration (f5 / forever)
                              :manner (s4 / stop-01
                                    :polarity -
                                    :ARG0 f4
                                    :ARG1 (c3 / cause
                                          :ARG1-of (p / possible-01))))))))"
599,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. ",5,5,5,"# ::snt Both involve a controlled repetition structures, and they both have a termination test.  Also both of them can loop forever. 
(m / multi-sentence
      :snt1 (a / and
            :op1 (ii / involve-01
                  :ARG1 (s / structure
                        :mod (r / repeat-01)
                        :ARG1-of (c / control-01))
                  :ARG2 (b / both))
            :op2 (h / have-03
                  :ARG0 (b2 / both)
                  :ARG1 (t / test-01
                        :ARG1 (t2 / terminate-01))))
      :snt2 (p / possible-01
            :ARG1 (l / loop-01
                  :ARG1 (t3 / they
                        :mod (b3 / both))
                  :duration (f / forever))
            :mod (a2 / also)))"
600,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.",1,3,2,"# ::snt As discussed earlier, recursion may be used to process iterative actions. Recursion is used for calculations where the answer can be described in a function that relates to itself.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (r / recursion)
                  :ARG2 (p2 / process-01
                        :ARG1 (a / act-02
                              :mod (ii / iterative))))
            :ARG1-of (d / discuss-01
                  :time (b / before)))
      :snt2 (u2 / use-01
            :ARG1 (r2 / recursion)
            :ARG2 (c / calculate-01
                  :location-of (p3 / possible-01
                        :ARG1 (d2 / describe-01
                              :ARG1 (a2 / answer-01)
                              :ARG2 (f / function
                                    :ARG1-of (r3 / relate-01)
                                    :ARG2-of r3))))))"
601,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.,5,5,5,"# ::snt Both iteration and recursion are based on control statements and involve repetition. They can both also occur indefinitely.
(m / multi-sentence
      :snt1 (a / and
            :op1 (b / base-02
                  :ARG1 (a2 / and
                        :op1 (ii / iterate-01)
                        :op2 (r / recur-01))
                  :ARG2 (s / state-01
                        :ARG1 (c / control-01)))
            :op2 (ii2 / involve-01
                  :ARG1 (r2 / repeat-01)))
      :snt2 (p / possible-01
            :ARG1 (b2 / both
                  :op1 ii)
            :duration (ii3 / indefinite
                  :polarity -)
            :mod (a3 / also)))"
602,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem,5,5,5,"# ::snt Both are based on a control statement         - Iteration-repetition structure         - Recursion-selection structure        Both involve repetition         -Iteration-explicitly uses repetition structure         -Recursion-repeated function calls        Both involve a termination test         -Iteration-loop-termination test         -Recursion-base case         Both gradually approach termination         -Iteration-modifies counter until loop-termination test fails         -Recursion-produces progressively simpler versions of problem        Both can occur indefinitely         -Iteration-if loop-continuation condition never fails         -Recursion-if recursion step does not simplify the problem
(b / base-02
      :ARG1 (b2 / both)
      :ARG2 (a / and
            :op1 (s / state-01
                  :ARG1 (c / control-01))
            :op2 (a2 / and
                  :op1 (ii / iterate-01)
                  :op2 (s2 / structure
                        :mod (r / repetition))
                  :op3 (s3 / structure
                        :mod (s4 / select-01
                              :ARG1 (r2 / repeat-01)))
                  :op4 (u / use-01
                        :ARG0 (ii2 / iterate-01)
                        :ARG1 (s5 / structure
                              :mod (r3 / repetition))
                        :manner (e / explicit))
                  :op5 (c2 / call-03
                        :ARG1 (f / function)
                        :mod r3)
                  :op6 (t / test-01
                        :ARG1 (t2 / terminate-01))
                  :op7 (t3 / test-01
                        :ARG1 (t4 / terminate-01
                              :ARG1 (l / loop)))
                  :op8 (c3 / case-03
                        :ARG1 (t5 / terminate-01)
                        :mod (b3 / base
                              :mod l)))
            :op9 (a3 / approach-02
                  :ARG0 (b4 / both)
                  :manner (g / gradual))
            :op10 (m / modify-01
                  :ARG0 b4
                  :ARG1 (c4 / counter)
                  :time (u2 / until
                        :op1 (t6 / terminate-01)))))"
603,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.",5,5,5,"# ::snt Iteration and recursion have many similarities: both are based on a control statement, involve repetition, involve a termination test, gradually approach termination and can occur infinitely.
(r / resemble-01
      :ARG1 (a / and
            :op1 (ii / iterate-01)
            :op2 (r2 / recur-01))
      :ARG2 (a2 / and
            :op1 (b / base-02
                  :ARG1 a
                  :ARG2 (s / state-01
                        :ARG1 (c / control-01)))
            :op2 (ii2 / involve-01
                  :ARG1 (r3 / repeat-01))
            :op3 (ii3 / involve-01
                  :ARG1 (t / test-01
                        :ARG1 (t2 / terminate-01)))
            :op4 (a3 / approach-02
                  :ARG1 (t3 / terminate-01)
                  :manner (g / gradual))
            :op5 (p / possible-01
                  :ARG1 t3
                  :degree (ii4 / infinite))))"
604,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.",5,5,5,"# ::snt Both rely on repetition, both have a base case, both can become an infinite loop. Anything recursive can also be solved with iteration.
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / rely-01
                  :ARG0 (b / both)
                  :ARG1 (r2 / repeat-01))
            :op2 (h / have-03
                  :ARG0 b
                  :ARG1 (c / case
                        :mod (b2 / base)))
            :op3 (p / possible-01
                  :ARG1 (b3 / become-01
                        :ARG1 b
                        :ARG2 (l / loop
                              :mod (ii / infinite)))))
      :snt2 (p2 / possible-01
            :ARG1 (s / solve-01
                  :ARG1 (a2 / anything
                        :ARG1-of (r3 / repeat-01))
                  :manner (ii2 / iterate-01)
                  :mod (a3 / also))))"
605,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.",3,5,4,"# ::snt Both will repeat (loop) until a condition is met, and exit the loop. Both are capable of entering an infinite loop.
(m / multi-sentence
      :snt1 (r / repeat-01
            :ARG0 (b / both)
            :ARG1 (l / loop)
            :time (u / until
                  :op1 (m2 / meet-01
                        :ARG1 (c / condition))))
      :snt2 (e / exit-01
            :ARG0 (b2 / both)
            :ARG1 (l2 / loop))
      :snt3 (c2 / capable-01
            :ARG1 b2
            :ARG2 (e2 / enter-01
                  :ARG0 b2
                  :ARG1 (l3 / loop
                        :mod (ii / infinite)))))"
606,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do iterativly you can do recursively,2,4,3,"# ::snt anything you can do iterativly you can do recursively
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (a / anything
                  :ARG1-of (d2 / do-02
                        :ARG0 y
                        :manner (ii / iterative)))
            :manner (r / recursive)))"
607,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are repetative and both have a end test.,4,5,4.5,"# ::snt Both are repetative and both have a end test.
(a / and
      :op1 (r / repeat-01
            :ARG1 (b / both))
      :op2 (h / have-03
            :ARG0 b
            :ARG1 (t / test-01
                  :mod (e / end))))"
608,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Incorrectly writing either can result in infinite loops, both perform the same task over and over.",3,4,3.5,"# ::snt Incorrectly writing either can result in infinite loops, both perform the same task over and over.
(a / and
      :op1 (p / possible-01
            :ARG1 (r / result-01
                  :ARG1 (w / write-01
                        :ARG1 (e / either)
                        :ARG1-of (c / correct-02
                              :polarity -))
                  :ARG2 (l / loop
                        :mod (ii / infinite))))
      :op2 (p2 / perform-02
            :ARG0 (b / both
                  :ARG1 (t / task
                        :ARG1-of (s / same-01))
                  :frequency (o / over-and-over))))"
609,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5,5,5,"# ::snt Both are based on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.
(m / multi-sentence
      :snt1 (b / base-02
            :ARG1 (b2 / both)
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :snt2 (ii / involve-01
            :ARG0 (b3 / both)
            :ARG1 (r / repeat-01))
      :snt3 (ii2 / involve-01
            :ARG0 (b4 / both)
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01)))
      :snt4 (a / approach-02
            :ARG0 (b5 / both)
            :ARG1 (t3 / terminate-01)
            :manner (g / gradual))
      :snt5 (p / possible-01
            :ARG1 (e / event
                  :mod (b6 / both))
            :degree (ii3 / infinite)))"
610,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely",5,5,5,"# ::snt Both are based on a control statement, Both involve repetition, Both involve a termination test, Both gradually approach termination, Both can occur infinitely
(a / and
      :op1 (b / base-02
            :ARG1 (b2 / both)
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (ii / involve-01
            :ARG1 (r / repeat-01
                  :ARG1 b2))
      :op3 (ii2 / involve-01
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01))
            :ARG2 b2)
      :op4 (a2 / approach-01
            :ARG0 b2
            :ARG1 (t3 / terminate-01)
            :manner (g / gradual))
      :op5 (p / possible-01
            :ARG1 (o / occur-01
                  :ARG1 b2
                  :degree (ii3 / infinite))))"
611,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
612,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,anything you can do recursively you can do iteratively,2,4,3,"# ::snt anything you can do recursively you can do iteratively
(p / possible-01
      :ARG1 (d / do-02
            :ARG0 (y / you)
            :ARG1 (a / anything
                  :ARG1-of (d2 / do-02
                        :ARG0 y
                        :manner (r / recursive)))
            :manner (ii / iterative)))"
613,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.",2,5,3.5,"# ::snt Many problems can be solved by both iteration and recursion, and either may go into a condition of infinite execution if a termination test is omitted.
(a / and
      :op1 (p / possible-01
            :ARG1 (s / solve-01
                  :ARG0 (a2 / and
                        :op1 (ii / iterate-01)
                        :op2 (r / recur-01)
                        :mod (b / both))
                  :ARG1 (p2 / problem
                        :quant (m / many))))
      :op2 (p3 / possible-01
            :ARG1 (g / go-01
                  :ARG1 a2
                  :ARG4 (c / condition
                        :mod (e / execute-01
                              :mod (ii2 / infinite))))
            :condition (o / omit-01
                  :ARG1 (t / test-01
                        :ARG1 (t2 / terminate-01)))))"
614,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.",5,5,5,"# ::snt Iteration and recursion both use repetition and perform several simple operations and algorithms successively until they reach a certain limit.  So both involve a termination test to find that limit and both slowly approach that termination limit.  Both are based on a control statement as well.    If coded poorly, both can continue on for forever until the compiler or the computer either locks up, shuts down or halts the operation.
(m / multi-sentence
      :snt1 (a / and
            :op1 (u / use-01
                  :ARG0 (a2 / and
                        :op1 (ii / iterate-01)
                        :op2 (r / recur-01))
                  :ARG1 (r2 / repeat-01))
            :op2 (p / perform-02
                  :ARG0 a2
                  :ARG1 (a3 / and
                        :op1 (o / operate-01)
                        :op2 (a4 / algorithm)
                        :quant (s / several)
                        :ARG1-of (s2 / simple-02))
                  :manner (s3 / successive)
                  :time (u2 / until
                        :op1 (r3 / reach-01
                              :ARG0 a2
                              :ARG1 (l / limit
                                    :mod (c / certain))))))
      :snt2 (a5 / and
            :op1 (ii2 / involve-01
                  :ARG1 (t / test-01
                        :ARG1 (t2 / terminate-01)
                        :purpose (f / find-01
                              :ARG0 a2
                              :ARG1 (l2 / limit
                                    :mod (t3 / terminate-01)))))
            :op2 (a6 / approach-02
                  :ARG0 a2
                  :ARG1 l2
                  :manner (s4 / slow-05)))
      :snt2 (b / base-02
            :ARG1 (s5 / state-01
                  :ARG1 (c2 / control-01))
            :mod (a7 / as-well))
      :snt3 (p2 / possible-01
            :ARG1 (c3 / continue-01
                  :ARG1 (b2 / both)
                  :duration (f2 / forever)
                  :condition (c4 / code-01
                        :ARG1-of (p3 / poor-02)))))"
615,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on control statement, involve repetition, and involve a termination test within loops",5,5,5,"# ::snt both based on control statement, involve repetition, and involve a termination test within loops
(a / and
      :op1 (b / base-02
            :ARG1 (b2 / both)
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (ii / involve-01
            :ARG1 (r / repeat-01))
      :op3 (ii2 / involve-01
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01)
                  :location (l / loop))))"
616,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,they are methods of repeating the same task.,1,3,2,"# ::snt they are methods of repeating the same task.
(m / method
      :instrument-of (r / repeat-01
            :ARG1 (t / task
                  :ARG1-of (s / same-01)))
      :domain (t2 / they))"
617,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.,5,5,5,"# ::snt Both involve a termination test.   They use a control statement and repition to solve the problem.  They can also result in an infinite loop.
(m / multi-sentence
      :snt1 (ii / involve-01
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01))
            :ARG2 (b / both))
      :snt2 (u / use-01
            :ARG0 (t3 / they)
            :ARG1 (a / and
                  :op1 (s / state-01
                        :ARG1 (c / control-01))
                  :op2 (p / propose-01))
            :ARG2 (s2 / solve-01
                  :ARG0 t3
                  :ARG1 (p2 / problem)))
      :snt3 (p3 / possible-01
            :ARG1 (r / result-01
                  :ARG1 (t4 / they)
                  :ARG2 (l / loop
                        :mod (ii2 / infinite))
                  :mod (a2 / also))))"
618,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"based on a control statement, involve repetition, involve a termination test.",5,5,5,"# ::snt based on a control statement, involve repetition, involve a termination test.
(a / and
      :op1 (b / base-02
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (ii / involve-01
            :ARG1 (r / repeat-01))
      :op3 (ii2 / involve-01
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01))))"
619,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.,5,5,5,"# ::snt Both are bases on a control statement. Both involve repetition. Both involve a termination test. Both gradually approach termination. Both can occur infinitely.
(m / multi-sentence
      :snt1 (b / base-02
            :ARG1 (b2 / both)
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :snt2 (ii / involve-01
            :ARG0 (b3 / both)
            :ARG1 (r / repeat-01))
      :snt3 (ii2 / involve-01
            :ARG0 (b4 / both)
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01)))
      :snt4 (a / approach-02
            :ARG0 (b5 / both)
            :ARG1 (t3 / terminate-01)
            :manner (g / gradual))
      :snt5 (p / possible-01
            :ARG1 (b6 / both)
            :degree (ii3 / infinite)))"
620,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.",5,5,5,"# ::snt both based on a control statement, both involve repitition, both involve a termination test, both gradually approach termination, both can potentially occur infinetly.
(a / and
      :op1 (b / base-02
            :ARG1 (b2 / both)
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (ii / involve-01
            :ARG0 b2
            :ARG1 (r / repitition))
      :op3 (ii2 / involve-01
            :ARG0 (b3 / both)
            :ARG1 (t / test-01
                  :ARG1 (t2 / terminate-01)))
      :op4 (a2 / approach-01
            :ARG0 (b4 / both)
            :ARG1 (t3 / terminate-01)
            :manner (g / gradual))
      :op5 (p / possible-01
            :ARG1 (e / event
                  :mod (b5 / both))
            :manner (ii3 / indefinite)
            :mod (p2 / potential)))"
621,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely",5,5,5,"# ::snt they are both based on a control statement, both involve repetition, both involve a termination case, both graduatlly approach that termination case, and both can occur infinitely
(a / and
      :op1 (b / base-02
            :ARG1 (t / they
                  :mod (b2 / both))
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (ii / involve-01
            :ARG0 t
            :ARG1 (r / repeat-01
                  :ARG1 t))
      :op3 (ii2 / involve-01
            :ARG0 t
            :ARG1 (c2 / case-03
                  :ARG1 (t2 / terminate-01)))
      :op4 (a2 / approach-02
            :ARG0 t
            :ARG1 c2
            :manner (g / graduate-01
                  :ARG1 t))
      :op5 (p / possible-01
            :ARG1 (e / event
                  :mod (b3 / both))
            :degree (ii3 / infinite)))"
622,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.",5,5,5,"# ::snt They both use repetition, a control or test to terminate, and both can infinitely repeat if not defined correctly.
(a / and
      :op1 (u / use-01
            :ARG0 (t / they
                  :mod (b / both))
            :ARG1 (r / repeat-01
                  :ARG1 (o / or
                        :op1 (c / control-01)
                        :op2 (t2 / test-01)))
            :ARG2 (t3 / terminate-01
                  :ARG0 t))
      :op2 (p / possible-01
            :ARG1 (r2 / repeat-01
                  :ARG1 t
                  :degree (ii / infinite))
            :condition (d / define-01
                  :polarity -
                  :ARG1 t
                  :ARG1-of (c2 / correct-02))))"
623,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.",5,5,5,"# ::snt Both are based on a control statement; both gradually approach termination ending with a termination test; both involve repetition, and can both repeat infinitely if their  termination requirements are not met.
(a / and
      :op1 (b / base-02
            :ARG1 (b2 / both)
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (a2 / approach-02
            :ARG0 b2
            :ARG1 (t / terminate-01
                  :ARG1-of (e / end-01
                        :ARG2 (t2 / test-01
                              :ARG1 (t3 / terminate-01))))
            :manner (g / gradual))
      :op3 (ii / involve-01
            :ARG0 b2
            :ARG1 (r / repeat-01
                  :ARG1 b2))
      :op4 (p / possible-01
            :ARG1 (r2 / repeat-01
                  :ARG0 b2
                  :degree (ii2 / infinite)
                  :condition (m / meet-01
                        :polarity -
                        :ARG1 (r3 / require-01
                              :ARG1 b2
                              :ARG2 t3)))))"
624,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely",5,5,5,"# ::snt both are based on a control statement, involve repetition and involve a termination test. both gradually approach termination, both can occur infinitely
(m / multi-sentence
      :snt1 (a / and
            :op1 (b / base-02
                  :ARG1 (b2 / both)
                  :ARG2 (s / state-01
                        :ARG1 (c / control-01)))
            :op2 (ii / involve-01
                  :ARG1 (r / repeat-01
                        :ARG1 b2))
            :op3 (ii2 / involve-01
                  :ARG1 (t / test-01
                        :ARG1 (t2 / terminate-01))))
      :snt2 (a2 / approach-02
            :ARG0 (b3 / both)
            :ARG1 (t3 / terminate-01)
            :manner (g / gradual))
      :snt3 (p / possible-01
            :ARG1 (t4 / terminate-01
                  :mod (ii3 / infinite))))"
625,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).,3,4,3.5,"# ::snt they are used to solve the same type of problems. they do a task over and over again until a cirtain conditional statement is reached (its called the base case in recursion).
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (t / they)
            :ARG2 (s / solve-01
                  :ARG0 t
                  :ARG1 (p / problem
                        :mod (t2 / type
                              :ARG1-of (s2 / same-01)))))
      :snt2 (d / do-02
            :ARG0 (t3 / they)
            :ARG1 (t4 / task)
            :mod (a / again)
            :frequency (o / over-and-over)
            :time (u2 / until
                  :op1 (r / reach-01
                        :ARG1 (s3 / state-01
                              :ARG1-of (c / condition-01)
                              :mod (c2 / circuit)))
                  :ARG1-of (c3 / call-01
                        :ARG2 (c4 / case-04
                              :mod (b / base)
                              :mod (r2 / repeat-01))))))"
626,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly,5,5,5,"# ::snt Based on control statement;  involve repetition; involve a terminal test; both can occur infinitly
(a / and
      :op1 (b / base-02
            :ARG2 (s / state-01
                  :ARG1 (c / control-01)))
      :op2 (ii / involve-01
            :ARG1 (r / repeat-01))
      :op3 (ii2 / involve-01
            :ARG1 (t / test-01
                  :mod (t2 / terminal)))
      :op4 (p / possible-01
            :ARG1 (b2 / both
                  :mod (ii3 / infinite))))"
627,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"repetition, termination test, eventually terminate, occur infinately",5,5,5,"# ::snt repetition, termination test, eventually terminate, occur infinately
(a / and
      :op1 (r / repeat-01)
      :op2 (t / test-01
            :ARG1 (t2 / terminate-01))
      :op3 (t3 / terminate-01
            :time (e / eventual))
      :mod (ii / indefinite))"
628,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,both need to have some kind of base case to tell when the loop needs to stop.,3,3,3,"# ::snt both need to have some kind of base case to tell when the loop needs to stop.
(n / need-01
      :ARG0 (b / both)
      :ARG1 (h / have-03
            :ARG0 b
            :ARG1 (c / case
                  :mod (b2 / base)
                  :mod (k / kind
                        :mod (s / some)))
            :purpose (t / tell-01
                  :ARG0 b
                  :ARG1 (t2 / time
                        :time-of (n2 / need-01
                              :ARG0 (l / loop)
                              :ARG1 (s2 / stop-01
                                    :ARG1 l))))))"
629,3.7,What are the similarities between iteration and recursion?,They both involve repetition; they both have termination tests; they can both occur infinitely.,"they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through",2,5,3.5,"# ::snt they both are able to do repetiive tasks. however recurisve calls itself with different parameters and defines and exit clause that is guaranteeed to be reached. Iterative includes a loop which iterates a pre-determined number of times, or checks for an exit clause every time through
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG2 (c2 / capable-01
                  :ARG1 (t / they
                        :mod (b / both))
                  :ARG2 (d / do-02
                        :ARG0 t
                        :ARG1 (t2 / task
                              :ARG1-of (r / repeat-01)))))
      :snt2 (a / and
            :op1 (c3 / call-02
                  :ARG0 (c4 / company
                        :name (n / name
                              :op1 ""Recruitative""))
                  :ARG1 c4
                  :ARG2 (p / parameter
                        :ARG1-of (d2 / differ-02)))
            :op2 (d3 / define-01
                  :ARG0 c4
                  :ARG1 (c5 / clause
                        :mod (e / exit-01)
                        :ARG1-of (r2 / reach-01
                              :ARG1-of (g / guarantee-01)))))
      :snt2 (ii / include-01
            :ARG1 (l / loop
                  :ARG0-of (ii2 / iterate-01
                        :frequency (n2 / number
                              :ARG1-of (d4 / determine-01
                                    :ARG1-of (p2 / predetermine-01)))))
            :ARG2 (c6 / check-01
                  :ARG0 l
                  :ARG1 c5
                  :mod e))
      :frequency (r3 / rate-entity-91
            :ARG3 (t3 / time
                  :mod (e2 / every))))"
630,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user,3,5,4,"# ::snt int n[10]; //array of 10 integers and int n[arraySize] //where arraySize is some positive integer defined by the user
(a / and
      :op1 (s / string-entity
            :value ""n[10"")
      :op2 (s2 / string-entity
            :value ""n[arraySize"")
      :location-of (a2 / arraySize
            :domain (ii / integer
                  :mod (s3 / some)
                  :mod (p / positive)
                  :ARG1-of (d / define-01
                        :ARG0 (p2 / person
                              :ARG0-of (u / use-01))))))"
631,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.,3,5,4,"# ::snt by either inputing the different elements in the array at coding or giving the array specifacations as to the size of the array. it is also possible when giving it specifacations to tell the array to grow as needed.
(m / multi-sentence
      :snt1 (o / or
            :op1 (ii / input-01
                  :ARG0 (a / array)
                  :ARG1 (e / element
                        :ARG1-of (d / differ-02))
                  :time (c / code-01))
            :op2 (g / give-01
                  :ARG0 a
                  :ARG1 (s / specification
                        :topic (s2 / size
                              :poss a))))
      :snt2 (p / possible-01
            :ARG1 (t / tell-01
                  :ARG0 (ii2 / it)
                  :ARG1 (g2 / grow-01
                        :ARG1 (a2 / array)
                        :ARG1-of (n / need-01)))
            :time (g3 / give-01
                  :ARG0 ii2
                  :ARG1 (s3 / specification))
            :mod (a3 / also)))"
632,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.,5,5,5,"# ::snt You can initialize and array by using an initializer list in its declaration or by initializing its size with a constant variable.
(p / possible-01
      :ARG1 (ii / initialize-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (a2 / array))
            :manner (o / or
                  :op1 (u / use-01
                        :ARG0 y
                        :ARG1 (l / list
                              :ARG0-of (ii2 / initialize-01))
                        :location (d / declare-02
                              :ARG1 a2))
                  :op2 (ii3 / initialize-01
                        :ARG0 y
                        :ARG1 (s / size
                              :poss a2)
                        :instrument (v / variable
                              :mod (c / constant))))))"
633,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Pass the length along with the array or use a vector.,2,4,3,"# ::snt Pass the length along with the array or use a vector.
(o / or
      :op1 (p / pass-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / length)
            :accompanier (a / array))
      :op2 (u / use-01
            :mode imperative
            :ARG0 y
            :ARG1 (v / vector)))"
634,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.",5,5,5,"# ::snt One way is to declare a size of the array using a variable that is equal to an integer. The other way, if the size is omitted in the declaration, the compiler determines the size of the array based on the size of the initializer list.
(m / multi-sentence
      :snt1 (w / way
            :quant 1
            :domain (d / declare-02
                  :ARG1 (s / size
                        :poss (a / array))
                  :manner (u / use-01
                        :ARG1 (v / variable
                              :ARG1-of (e / equal-01
                                    :ARG2 (ii / integer))))))
      :snt2 (d2 / determine-01
            :ARG0 (p / person
                  :ARG0-of (c / compile-01))
            :ARG1 (s2 / size
                  :poss (a2 / array))
            :condition (o / omit-01
                  :ARG1 (s3 / size)
                  :location (d3 / declare-01))
            :ARG1-of (b / base-02
                  :ARG2 (s4 / size
                        :poss (l / list
                              :mod (ii2 / initialize-01))))
            :mod (w2 / way
                  :mod (o2 / other))))"
635,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}",5,5,5,"# ::snt In the declaration (int array [x]) or with an initilizer (int array[]={0,1,2,etc.}
(o / or
      :op1 (b / be-located-at-91
            :ARG2 (d / declare-01))
      :op2 (b2 / be-located-at-91
            :ARG2 (a / array
                  :mod (s / string-entity
                        :value ""x"")))
      :op3 (b3 / be-located-at-91
            :ARG2 (t / thing
                  :ARG0-of (ii / initiate-01)
                  :ARG1-of (m / mean-01
                        :ARG2 (s2 / string-entity
                              :value ""0,1 ) :op4 ( string-entity_2 :value "")))))"
636,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)",5,5,5,"# ::snt 1. Declare the length of the array (int array[10];) 2. Initialize the array (int array[] = {0, 1, 2, 3}; //compiler will assume size of 4)
(m / multi-sentence
      :snt1 (d / declare-01
            :li 1
            :ARG1 (l / length
                  :poss (a / array)))
      :snt2 (ii / initialize-01
            :li 2
            :ARG1 (a2 / array)
            :ARG1-of (m2 / mean-01
                  :ARG2 (a3 / array
                        :ARG1-of (e / equal-01
                              :ARG2 (a4 / and
                                    :op1 0
                                    :op2 1
                                    :op3 2
                                    :op4 3)))))
      :snt3 (a5 / assume-02
            :ARG0 (c / compiler)
            :ARG1 (s / size-01
                  :ARG1 (a6 / array
                        :quant 4))))"
637,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",statically and dynamically,2,3,2.5,"# ::snt statically and dynamically
(a / and
      :op1 (s / statically)
      :op2 (d / dynamically))"
638,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Explicitly int array[10]; or by variable const int size = 10; int array[size];,3,5,4,"# ::snt Explicitly int array[10]; or by variable const int size = 10; int array[size];
(o / or
      :op1 (a / array
            :mod (ii / int)
            :ARG1-of (e / explicit-02)
            :ARG1-of (e2 / equal-01
                  :ARG2 10))
      :op2 (a2 / array
            :mod (ii2 / int)
            :ARG1-of e2
            :ARG2 10)
      :mod (c / const
            :ARG1-of (v / variable-01)))"
639,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. ",5,5,5,"# ::snt Array lengths can be explicitly specified by inputing the number of elements between the brackets [ ] during declaration, or implicitly by including an initializer list WITHOUT specifying a number between [ ], the compiler will automatically declare the array with the proper number of elements needed for the list. 
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (s / specify-01
                  :ARG1 (l / length
                        :mod (a / array))
                  :manner (e / explicit)
                  :manner (o / or
                        :op1 (ii / input-01
                              :ARG1 (n / number
                                    :quant-of (e2 / element)
                                    :location (b / between
                                          :op1 (b2 / bracket)))
                              :time (d / declare-02))
                        :op2 (ii2 / include-01
                              :ARG1 (l2 / list
                                    :ARG0-of (ii3 / initialize-01))
                              :manner (s2 / specify-01
                                    :polarity -
                                    :ARG1 (n2 / number
                                          :quant-of (e3 / element
                                                :ARG1-of (n3 / need-01
                                                      :purpose (l3 / list))
                                                :mod (p2 / proper))))))))
      :snt2 (d2 / declare-02
            :ARG0 (c / compiler)
            :ARG1 (a2 / array)
            :manner (a3 / automatic)))"
640,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Specify an arrays size with a constant variable. And setting array elements with calculations.,2,5,3.5,"# ::snt Specify an arrays size with a constant variable. And setting array elements with calculations.
(m / multi-sentence
      :snt1 (s / specify-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s2 / size
                  :poss (a / array))
            :instrument (v / variable
                  :mod (c / constant)))
      :snt2 (a2 / and
            :op1 (s3 / set-02
                  :ARG0 y
                  :ARG1 (e / element
                        :poss (a3 / array))
                  :instrument (c2 / calculate-01))))"
641,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","statically, using {} and dynamically, using []",4,4,4,"# ::snt statically, using {} and dynamically, using []
(a / and
      :op1 (s / statically
            :manner (u / use-01
                  :ARG1 (s2 / string-entity
                        :value """")))
      :op2 (d / dynamic-02
            :ARG1 (u2 / use-01
                  :ARG1 s2)))"
642,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","define it as array[5] or array[1,2,3,4,5]",4,5,4.5,"# ::snt define it as array[5] or array[1,2,3,4,5]
(d / define-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii / it)
      :ARG2 (o / or
            :op1 (a / array
                  :mod (s / string-entity
                        :value 5))
            :op2 (a2 / array
                  :mod (s2 / string-entity
                        :value ""1,2,3,4,5""))))"
643,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",Static and dynamic.,2,3,2.5,"# ::snt Static and dynamic.
(a / and
      :op1 (s / static)
      :op2 (d / dynamic))"
644,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",manually inside the brackets or automatically via an initializer list,5,5,5,"# ::snt manually inside the brackets or automatically via an initializer list
(o / or
      :op1 (ii / inside
            :op1 (b / bracket)
            :manner (m / manual))
      :op2 (v / via
            :op1 (l / list
                  :ARG0-of (ii2 / initialize-01))
            :manner (a / automatic)))"
645,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.",5,5,5,"# ::snt You can use an initializer list, or simply tell the compiler how many elements you want in the array.  For an Initializer list:  int a[] = {10, 2, 3, -4, 5};  For an elemental declaration: int b[5];  Both arrays have 5 elements in them, but array a is already initialized.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (o / or
                  :op1 (u / use-01
                        :ARG0 (y / you)
                        :ARG1 (l / list
                              :ARG0-of (ii / initialize-01)))
                  :op2 (t / tell-01
                        :ARG0 y
                        :ARG1 (t2 / thing
                              :quant-of (e / element
                                    :ARG1-of (w / want-01
                                          :ARG0 y))
                              :location (a / array))
                        :ARG2 (p2 / person
                              :ARG0-of (c / compile-01))
                        :ARG1-of (s / simple-02))))
      :snt2 (a2 / and
            :op1 (e2 / equal-01
                  :ARG1 (s2 / string-entity
                        :value ""a"")
                  :ARG2 a2
                  :op1 (s3 / string-entity
                        :value 10)
                  :op2 (s4 / string-entity
                        :value ""3-4"")
                  :op3 (s5 / string-entity
                        :value ""b"")
                  :op4 (s6 / string-entity
                        :value 5)
                  :purpose (d / declare-01
                        :ARG1 (e3 / element))))
      :snt2 (c2 / contrast-01
            :ARG1 (h / have-03
                  :ARG0 (a3 / array
                        :mod (b / both))
                  :ARG1 (e4 / element
                        :quant 5)
                  :location a3)
            :ARG2 (ii2 / initialize-01
                  :ARG1 (a4 / array
                        :mod (a5 / a))
                  :time (a6 / already))))"
646,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. ",4,5,4.5,"# ::snt In a string you can specify with the strlen(arrayname) command. This gets the length of the string. Another way is with integers where you initiate the size from the start, ex array[40] specifying a possible length of up to 40. Then it is passed by an object the actual ammout in the array. Another way is to declare it in an initializing program. 
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (s / specify-01
                  :ARG0 (y / you)
                  :ARG1 (s2 / string)
                  :instrument (c / command
                        :name (n / name
                              :op1 ""stlen(arrayname""))))
      :snt2 (g / get-01
            :ARG0 (t / this)
            :ARG1 (l / length
                  :poss (s3 / string)))
      :snt3 (w / way
            :mod (a / another)
            :prep-with (ii / integer
                  :location-of (ii2 / initiate-01
                        :ARG0 (y2 / you)
                        :ARG1 (s4 / size)
                        :time (f / from
                              :op1 (s5 / start-01))
                        :example (s6 / string
                              :value 40)
                        :ARG0-of (s7 / specify-01
                              :ARG1 (l2 / length
                                    :quant (u / up-to
                                          :op1 40)
                                    :ARG1-of (p2 / possible-01))))))
      :snt2 (p3 / pass-03
            :ARG0 (o / object)
            :ARG1 (a2 / ammout
                  :ARG1-of (a3 / actual-02)
                  :location (a4 / array))
            :time (t2 / then))
      :snt3 (d / declare-02
            :ARG0 (p4 / program
                  :ARG0-of (ii3 / initialize-01))
            :ARG1 a2))"
647,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. ",5,5,5,"# ::snt Implicit, namely when you give it values, like {1,2,3,4,5,6,7,8,9}, at which the compiler will automatically give this a size. Static, during the declaration. 
(m / multi-sentence
      :snt1 (ii / implicit
            :domain (g / give-01
                  :ARG0 (y / you)
                  :ARG1 (v / value
                        :ARG1-of (r / resemble-01
                              :ARG2 (s / string-entity
                                    :value ""1,2,3,4,5,6,7,8,9""))
                        :ARG2-of (g2 / give-01
                              :ARG0 (p / person
                                    :ARG0-of (c / compile-01))
                              :ARG1 (s2 / size)
                              :ARG1-of (a / automatic-02))))
            :ARG2 (ii2 / it))
      :snt2 (s3 / static
            :time (d / declare-02)))"
648,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }",5,5,5,"# ::snt Supply an integer inside the brackets or the compiler counts the number of elements in the initializer list. int n[5]; int n[] = { 1,2,3,4,5 }
(o / or
      :op1 (s / supply-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / integer
                  :location (ii2 / inside
                        :op1 (b / bracket))))
      :op2 (c / count-01
            :ARG0 (p / person
                  :ARG0-of (c2 / compile-01))
            :ARG1 (n / number
                  :quant-of (e / element
                        :part-of (l / list-01
                              :ARG1 (ii3 / initialize-01)))))
      :op3 (e2 / equal-01
            :ARG1 (ii4 / int
                  :value 5)
            :ARG2 (v / value-entity
                  :value ""int_1""
                  :value ""n[]"")))"
649,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",either initializing the array with a specific length or initializing an array while declaring its contents.,5,5,5,"# ::snt either initializing the array with a specific length or initializing an array while declaring its contents.
(o / or
      :op1 (ii / initialize-01
            :ARG1 (a / array)
            :ARG2 (l / length
                  :ARG1-of (s / specific-02)))
      :op2 (ii2 / initialize-01
            :ARG1 (a2 / array)
            :time (d / declare-02
                  :ARG1 (t / thing
                        :ARG2-of (c / contain-01
                              :ARG1 a2)))))"
650,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",within the brackets or by using an initializer list.,5,5,5,"# ::snt within the brackets or by using an initializer list.
(o / or
      :op1 (w / within
            :op1 (b / bracket))
      :op2 (u / use-01
            :ARG1 (l / list
                  :ARG0-of (ii / initialize-01))))"
651,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",specify the number of elements in the array declaration with a constant or using a constant variable for future scalability,3,5,4,"# ::snt specify the number of elements in the array declaration with a constant or using a constant variable for future scalability
(o / or
      :op1 (s / specify-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / number
                  :quant-of (e / element
                        :location (d / declare-02
                              :ARG1 (a / array))))
            :instrument (c / constant))
      :op2 (u / use-01
            :ARG0 y
            :ARG1 (v / variable
                  :mod (c2 / constant))
            :purpose (s2 / scalability
                  :time (f / future))))"
652,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",with a number and with a variable,3,3,3,"# ::snt with a number and with a variable
(a / and
      :op1 (n / number)
      :op2 (v / variable))"
653,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)",5,5,5,"# ::snt explicitly, by declaring it in brackets (i.e. int array[50];) and implicitly, by initializing several values (i.e. int array[] = {1, 2, 3};)
(a / and
      :op1 (d / declare-02
            :ARG1 (ii / it)
            :ARG2 (b / bracket)
            :ARG1-of (m / mean-01
                  :ARG2 (a2 / array
                        :mod (s / string-entity
                              :value 50))))
      :op2 (ii2 / initialize-01
            :ARG1 (v / value
                  :quant (s2 / several)
                  :ARG1-of (m2 / mean-01
                        :ARG2 (s3 / string-entity
                              :value 1)
                        :op3 (s4 / string-entity
                              :value 3))))
      :manner (e / explicit))"
654,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}",4,5,4.5,"# ::snt one way of specifying of array is A[10] ; other way of specifying array is a[arraysize] = [1,2,3,4,5,6,7,8,9,10}
(m / multi-sentence
      :snt1 (h / have-manner-91
            :ARG1 (s / specify-01
                  :ARG1 (a / array))
            :ARG2 (s2 / string-entity
                  :value ""A[10"")
            :mod (o / one))
      :snt2 (h2 / have-manner-91
            :ARG1 (s3 / specify-01
                  :ARG1 (a2 / array)
                  :mod (o2 / other))
            :ARG2 (s4 / string-entity
                  :value ""a[arraysize""
                  :ARG1-of (e / equal-01
                        :ARG2 (s5 / string-entity
                              :value ""12,3,4,5,6,7,8,9,10"")))))"
655,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable,5,5,5,"# ::snt 1-Initializing an array in a declaration with an initializer list 2-Specifying an arrays size with a constant variable
(a / and
      :li 1
      :op1 (ii / initialize-01
            :ARG1 (a2 / array)
            :medium (d / declare-01)
            :instrument (l / list
                  :ARG0-of (ii2 / initialize-01)))
      :op2 (s / specify-01
            :li 2
            :ARG1 (s2 / size
                  :poss (a3 / array))
            :instrument (v / variable
                  :mod (c / constant))))"
656,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};",5,5,5,"# ::snt Initializing the size in the brackets: int a[100]; Initializing the length by assigning variables: int a[] = {1,2,3};
(a / and
      :op1 (ii / initialize-01
            :ARG1 (s / size)
            :location (b / bracket)
            :manner (s2 / string-entity
                  :value ""int_0""
                  :value 100))
      :op2 (ii2 / initialize-01
            :ARG1 (l / length)
            :manner (a2 / assign-01
                  :ARG1 (v / variable)
                  :manner (s3 / string-entity
                        :value ""int_1 :value ""))))"
657,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.",user defined value or by the number of elements in initializer list,5,5,5,"# ::snt user defined value or by the number of elements in initializer list
(o / or
      :op1 (v / value
            :ARG1-of (d / define-01
                  :ARG0 (p / person
                        :ARG0-of (u / use-01))))
      :op2 (n / number
            :quant-of (e / element
                  :part-of (l / list-01
                        :ARG1 (t / thing
                              :ARG0-of (ii / initialize-01))))))"
658,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}",5,5,5,"# ::snt you can assign the size of it inside the brackets when you declare the array [3], or you can have it set by how many items you set the array equal to {1,2,3}
(o / or
      :op1 (p / possible-01
            :ARG1 (a / assign-01
                  :ARG0 (y / you)
                  :ARG1 (s / size
                        :poss (ii / it))
                  :location (ii2 / inside
                        :op1 (b / bracket))
                  :time (d / declare-02
                        :ARG0 y
                        :ARG1 (a2 / array))))
      :op2 (p2 / possible-01
            :ARG1 (s2 / set-02
                  :ARG0 y
                  :ARG1 ii)
            :ARG2 (n / number
                  :quant-of (ii3 / item
                        :ARG1-of (e / equal-01
                              :ARG2 e
                              :ARG2 n
                              :quant-of ii3
                              :ARG1-of (s3 / set-02
                                    :ARG0 y
                                    :ARG1 (a3 / array)))))))"
659,4.1,What are the two different ways of specifying the length of an array?,"In the array declaration, or by using an initializer list.","use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. ",3,5,4,"# ::snt use an arraylist, or have your program ask the array how many elements it has. As an obj it it should have member length that is the number of slots it has. 
(m / multi-sentence
      :snt1 (o / or
            :op1 (u / use-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (a / arraylist))
            :op2 (h / have-04
                  :mode imperative
                  :ARG0 y
                  :ARG1 (a2 / ask-01
                        :ARG0 (p / program
                              :poss y)
                        :ARG1 (e / element
                              :quant (m2 / many)
                              :ARG1-of (h2 / have-03
                                    :ARG0 a))
                        :ARG2 a)))
      :snt2 (r / recommend-01
            :ARG1 (h3 / have-03
                  :ARG0 (ii / it)
                  :ARG1 (l / length
                        :mod (m3 / member)
                        :ARG1-of (m4 / mean-01
                              :ARG2 (n / number
                                    :quant-of (s / slot
                                          :ARG1-of h3
                                          :ARG0 ii))))))
      :ARG1-of (c / cause-01
            :ARG0 (o2 / object-01)))"
660,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole",1,4,2.5,"# ::snt strings that are used in an char array are much easier to manipulate than as a string object, because each character is stored separately rather than as a whole
(c / cause-01
      :ARG0 (s / store-01
            :ARG1 (c2 / character
                  :mod (e / each))
            :ARG1-of (s2 / separate-02)
            :ARG1-of (ii / instead-of-91
                  :ARG2 (c3 / character
                        :mod (w / whole))))
      :ARG1 (h / have-degree-91
            :ARG1 (m / manipulate-01
                  :ARG1 (s3 / string
                        :ARG1-of (u / use-01
                              :ARG2 (a / array
                                    :mod (c4 / char)))))
            :ARG2 (e2 / easy-05
                  :ARG1 m)
            :ARG3 (m2 / more
                  :quant (m3 / much))
            :ARG4 (m4 / manipulate-01
                  :ARG1 s3)))"
661,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.",1,5,3,"# ::snt the type string uses less storage and you have to change the string all at once. with an array of characters you can make permutations of words using the characters stored in the array, without needing to actually access and change the variables. with an array of characters you can just change how they're accessed.
(m / multi-sentence
      :snt1 (a / and
            :op1 (u / use-01
                  :ARG0 (s / string
                        :mod (t / type))
                  :ARG1 (s2 / store-01
                        :ARG1-of (h / have-quant-91
                              :ARG3 (l / less))))
            :op2 (o / obligate-01
                  :ARG1 (y / you)
                  :ARG2 (c / change-01
                        :ARG0 y
                        :ARG1 s
                        :mod (a2 / all-at-once))))
      :snt2 (p / possible-01
            :ARG1 (p2 / permute-01
                  :ARG0 (y2 / you)
                  :ARG1 (w / word)
                  :ARG2 (c2 / character
                        :ARG1-of (s3 / store-01
                              :location (a3 / array
                                    :consist-of (c3 / character))))
                  :manner (n / need-01
                        :polarity -
                        :ARG0 y2
                        :ARG1 (a4 / and
                              :op1 (a5 / access-01
                                    :ARG0 y2
                                    :ARG1 (v / variable)
                                    :ARG1-of (a6 / actual-02))
                              :op2 (c4 / change-01
                                    :ARG0 y2
                                    :ARG1 v))))
            :prep-with a3
            :consist-of c2))"
662,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.",5,5,5,"# ::snt Unlike in a string declared using type string, in a string declared using an array of characters the programmer must provide the null terminating character and must ensure the array is large enough to hold the string and null terminating character.
(o / obligate-01
      :ARG1 (p / person
            :ARG0-of (p2 / program-01))
      :ARG2 (a / and
            :op1 (p3 / provide-01
                  :ARG0 p
                  :ARG1 (c / character
                        :ARG0-of (t / terminate-01
                              :polarity -)))
            :op2 (e / ensure-01
                  :ARG0 p
                  :ARG1 (h / have-degree-91
                        :ARG1 (a2 / array)
                        :ARG2 (l / large)
                        :ARG3 (e2 / enough)
                        :ARG6 (h2 / hold-01
                              :ARG0 a2
                              :ARG1 (a3 / and
                                    :op1 (s / string)
                                    :op2 (c2 / character
                                          :ARG0-of (t2 / terminate-01)
                                          :mod (n / null)))))))
      :location (s2 / string
            :ARG1-of (d / declare-02
                  :manner (u / use-01
                        :ARG1 (s3 / string
                              :mod (t3 / type))))))"
663,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; ",5,5,5,"# ::snt All strings represented by character arrays end with the null character. You declare an object of type string just like any other type, for example:  string s; 
(m / multi-sentence
      :snt1 (e / end-01
            :ARG1 (s / string
                  :mod (a / all)
                  :ARG1-of (r / represent-01
                        :ARG0 (a2 / array
                              :mod (c / character))))
            :ARG2 (c2 / character
                  :mod (n / null)))
      :snt2 (d / declare-02
            :ARG0 (y / you)
            :ARG1 (o / object
                  :mod (t / type
                        :mod (s2 / string))
                  :ARG1-of (r2 / resemble-01
                        :ARG2 (t2 / type
                              :mod (o2 / other)
                              :mod (a3 / any)
                              :example (s3 / string)))
                  :mod (j / just))))"
664,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.",1,4,2.5,"# ::snt By using an array of characters, one can store and manipulate the strings rather than just having a type string variable.
(p / possible-01
      :ARG1 (a / and
            :op1 (s / store-01
                  :ARG0 (o / one)
                  :ARG1 (s2 / string))
            :op2 (m / manipulate-01
                  :ARG0 o
                  :ARG1 s2))
      :ARG1-of (ii / instead-of-91
            :ARG2 (h / have-03
                  :ARG0 o
                  :ARG1 (v / variable
                        :mod (s3 / string)
                        :mod (t / type))
                  :mod (j / just)))
      :manner (u / use-01
            :ARG0 o
            :ARG1 (a2 / array
                  :consist-of (c / character))))"
665,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays),0,4,2,"# ::snt type string is an array of chars that will make an array of single letter characters while an array of strings will be an actual array of words (or an array of char arrays)
(c / contrast-01
      :ARG1 (s / string
            :mod (t / type)
            :domain (a / array
                  :consist-of (c2 / char)
                  :ARG0-of (m / make-01
                        :ARG1 (a2 / array
                              :consist-of (c3 / character
                                    :mod (l / letter
                                          :ARG1-of (s2 / single-02)))))))
      :ARG2 (o / or
            :op1 (a3 / array
                  :consist-of (s3 / string))
            :op2 (a4 / array
                  :consist-of (w / word)
                  :ARG1-of (a5 / actual-02))
            :domain s3))"
666,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.",2,5,3.5,"# ::snt They're basically the same, however, a string ends w/ a null character, denoting the end of the string (and the size). A char array has potential to be any size, so it must be declared or limited.
(m / multi-sentence
      :snt1 (h / have-concession-91
            :ARG1 (s / same-01
                  :ARG1 (t / they)
                  :mod (b / basic))
            :ARG2 (e / end-01
                  :ARG1 (s2 / string)
                  :ARG2 (c / character
                        :mod (n / null)
                        :ARG0-of (d / denote-01
                              :ARG1 (a / and
                                    :op1 e
                                    :op2 (s3 / size))))))
      :snt2 (h2 / have-03
            :ARG0 (a2 / array
                  :mod (c2 / char))
            :ARG1 (p / potential
                  :domain (s4 / size
                        :mod (a3 / any)))
            :ARG0-of (c3 / cause-01
                  :ARG1 (o / obligate-01
                        :ARG2 (o2 / or
                              :op1 (d2 / declare-02
                                    :ARG1 a2)
                              :op2 (l / limit-01
                                    :ARG1 a2))))))"
667,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.,4,4,4,"# ::snt string is a class in the standard library and has method that modify it. Whereas the char array is on able to be modifie by the user.
(m / multi-sentence
      :snt1 (a / and
            :op1 (c / class
                  :domain (s / string)
                  :part-of (l / library
                        :ARG1-of (s2 / standard-02)))
            :op2 (h / have-03
                  :ARG0 s
                  :ARG1 (m2 / method
                        :ARG0-of (m3 / modify-01
                              :ARG1 s))))
      :snt2 (c2 / contrast-01
            :ARG1 (p / possible-01
                  :ARG1 (m4 / modify-01
                        :ARG0 (p2 / person
                              :ARG0-of (u / use-01))
                        :ARG1 (a2 / array
                              :mod (c3 / char))))))"
668,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.",3,4,3.5,"# ::snt By using an array of characters, you are limited to the size of the array of characters.  By declaring by type the end of the string is acknowledged by white space.
(m / multi-sentence
      :snt1 (l / limit-01
            :ARG1 (y / you)
            :ARG2 (s / size-01
                  :ARG1 (a / array
                        :consist-of (c / character)))
            :manner (u / use-01
                  :ARG0 y
                  :ARG1 (a2 / array
                        :consist-of (c2 / character))))
      :snt2 (a3 / acknowledge-01
            :ARG0 (s2 / space
                  :ARG1-of (w / white-02))
            :ARG1 (e / end-01
                  :ARG1 (s3 / string))
            :manner (d / declare-01
                  :manner (t / type-01))))"
669,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. ",5,5,5,"# ::snt The data class type string are designed to handle character data, and has many functions built into the class library to deal with them. An array of characters however is subject to all the same rules of any other array with no real additional functionality. Another difference is that the string class deals with the null character implicitly, unlike an array of characters, which must handle the null character explicitly. 
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / design-01
                  :ARG1 (s / string
                        :ARG1-of (t / type-01
                              :ARG2 (c / class
                                    :mod (d2 / data))))
                  :purpose (h / handle-01
                        :ARG0 s
                        :ARG1 d2
                        :mod (c2 / character))))
      :op2 (h2 / have-03
            :ARG0 s
            :ARG1 (f / function
                  :quant (m2 / many)
                  :ARG1-of (b / build-01
                        :ARG2 (l / library
                              :mod (c3 / class))
                        :purpose (d3 / deal-01
                              :ARG0 s
                              :ARG2 c2))))
      :snt2 (c4 / contrast-01
            :ARG2 (s2 / subject-01
                  :ARG1 (a2 / array
                        :consist-of (c5 / character))
                  :ARG2 (r / rule
                        :ARG1-of (s3 / same-01
                              :ARG2 (a3 / array
                                    :mod (o / other)
                                    :mod (a4 / any))
                              :ARG0-of (h3 / have-03
                                    :polarity -
                                    :ARG1 (f2 / functionality
                                          :ARG1-of (r2 / real-04)
                                          :mod (a5 / additional))))
                        :mod (a6 / all))))
      :snt3 (d4 / differ-02
            :ARG1 d3
            :ARG0 (c6 / class
                  :mod (s4 / string))
            :ARG2 (c7 / character
                  :mod (n / null))
            :manner (ii / implicit)
            :ARG1-of (r3 / resemble-01
                  :polarity -
                  :ARG2 (d5 / deal-01
                        :ARG0 c6
                        :ARG1 c7
                        :ARG2 (a7 / array
                              :consist-of (c8 / character
                                    :ARG0-of (h4 / handle-01
                                          :ARG1-of (o2 / obligate-01
                                                :ARG2 (h5 / handle-01)))
                                    :ARG1-of h4))))))"
670,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.,5,5,5,"# ::snt string declared used in an array of characters contains each character in the array and a special string-termination character called the null character versus the type string.
(c / contain-01
      :ARG0 (s / string
            :ARG1-of (d / declare-01
                  :ARG2 (u / use-01
                        :ARG1 s
                        :ARG2 (a / array
                              :consist-of (c2 / character)))))
      :ARG1 (a2 / and
            :op1 (c3 / character
                  :mod (e / each)
                  :location a)
            :op2 (c4 / character
                  :ARG1-of (c5 / call-01
                        :ARG2 (c6 / character
                              :ARG1-of (n / null-02))
                        :ARG1-of (c7 / contrast-01
                              :ARG2 (s2 / string
                                    :ARG1-of (t / type-01)))
                        :ARG1-of (s3 / special-02)
                        :ARG2-of (t2 / terminate-01
                              :ARG1 (s4 / string))))))"
671,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,A char array reads a string as each individual character. A string literal array reads the entire string.,2,4,3,"# ::snt A char array reads a string as each individual character. A string literal array reads the entire string.
(m / multi-sentence
      :snt1 (r / read-01
            :ARG0 (a / array
                  :mod (s / string)
                  :mod (c / char))
            :ARG1 (s2 / string)
            :manner (c2 / character
                  :mod (ii / individual)
                  :mod (e / each)))
      :snt2 (r2 / read-01
            :ARG0 (a2 / array
                  :mod (s3 / string)
                  :mod (l / literal))
            :ARG1 (s4 / string
                  :mod (e2 / entire))))"
672,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,array of characters can only hold as many characters as the array size and strings are not that limited.,4,4,4,"# ::snt array of characters can only hold as many characters as the array size and strings are not that limited.
(p / possible-01
      :ARG1 (h / hold-01
            :ARG0 (a / array
                  :consist-of (c / character))
            :ARG1 (c2 / character
                  :ARG1-of (h2 / have-quant-91
                        :ARG2 (m / many)
                        :ARG3 (e / equal)
                        :ARG4 (l / limit-01
                              :polarity -
                              :ARG1 (a2 / and
                                    :op1 (s / size
                                          :mod (a3 / array))
                                    :op2 (s2 / string)))))
            :mod (o / only)))"
673,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"Stings can only be modified by functions of the String class, an array of characters can be modified by the user",3,4,3.5,"# ::snt Stings can only be modified by functions of the String class, an array of characters can be modified by the user
(a / and
      :op1 (p / possible-01
            :ARG1 (m / modify-01
                  :ARG0 (f / function
                        :poss (c / class
                              :name (n / name
                                    :op1 ""String"")))
                  :ARG1 (s / string)
                  :mod (o / only)))
      :op2 (p2 / possible-01
            :ARG1 (m2 / modify-01
                  :ARG0 (p3 / person
                        :ARG0-of (u / use-01))
                  :ARG1 (a2 / array
                        :consist-of (c2 / character)))))"
674,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"if by type string, the array contains an additional terminating null character",3,5,4,"# ::snt if by type string, the array contains an additional terminating null character
(h / have-condition-91
      :ARG2 (c / contain-01
            :ARG0 (a / array)
            :ARG1 (c2 / character
                  :mod (n / null)
                  :ARG0-of (t / terminate-01)
                  :mod (a2 / additional)))
      :ARG2 (s / string
            :ARG1-of (t2 / type-01)))"
675,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,The array of characters has a null character \0 at the end of the array to signify the array's end.  The string does not have this.,5,5,5,"# ::snt The array of characters has a null character \0 at the end of the array to signify the array's end.  The string does not have this.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (a / array
                  :consist-of (c / character))
            :ARG1 (c2 / character
                  :quant 0
                  :mod (n / null)
                  :ARG0-of (s / signify-01
                        :ARG1 (e / end-01
                              :ARG1 (a2 / array)))))
      :snt2 (h2 / have-03
            :polarity -
            :ARG0 (s2 / string)
            :ARG1 (t / this)))"
676,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.,2,4,3,"# ::snt strings with type string are just that. Strings. They are not part of an array list at all where as one declared by an array is actually an array of characters able to be pointed and detected.
(m / multi-sentence
      :snt1 (s / string
            :consist-of (s2 / string
                  :ARG1-of (t / type-01
                        :ARG2 (s3 / string)))
            :domain (t2 / that
                  :mod (j / just)))
      :snt2 (s4 / string)
      :snt3 (c / contrast-01
            :ARG1 (h / have-part-91
                  :polarity -
                  :ARG1 (l / list
                        :mod (a / array))
                  :ARG2 (a2 / array
                        :consist-of (c2 / character
                              :ARG1-of (p / point-01
                                    :ARG1-of (p2 / possible-01))
                              :ARG1-of (d / detect-01
                                    :ARG1-of (p3 / possible-01)))
                        :ARG1-of (d2 / declare-02
                              :ARG0 (a3 / array)))
                  :degree (a4 / at-all))))"
677,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the array of characters has a set length, while the type string has virtually unlimited length.",4,4,4,"# ::snt the array of characters has a set length, while the type string has virtually unlimited length.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (a / array
                  :consist-of (c2 / character))
            :ARG1 (l / length
                  :ARG1-of (s / set-03)))
      :ARG2 (h2 / have-03
            :ARG0 (s2 / string
                  :ARG1-of (t / type-01))
            :ARG1 (l2 / length
                  :ARG1-of (l3 / limit-01
                        :polarity -
                        :mod (v / virtual)))))"
678,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.,1,3,2,"# ::snt Char array - Individual letters can be accessed directly with array subscript notation.  String array - array subscript will return the entire string.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / access-01
                  :ARG1 (l / letter
                        :mod (ii / individual))
                  :manner (d / direct-02)
                  :instrument (n / notation
                        :mod (s / subscript
                              :mod (a2 / array)))))
      :snt2 (a3 / array
            :mod (s2 / string)
            :ARG0-of (r / return-02
                  :ARG1 (s3 / string
                        :mod (e / entire)))))"
679,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,array of characters need a termination character as well as size specification whether its explicit or implicit.,5,5,5,"# ::snt array of characters need a termination character as well as size specification whether its explicit or implicit.
(n / need-01
      :ARG0 (a / array
            :consist-of (c / character))
      :ARG1 (a2 / and
            :op1 (c2 / character
                  :ARG0-of (t / terminate-01))
            :op2 (s / specify-01
                  :ARG1 (s2 / size)
                  :ARG1-of (r / regardless-91
                        :ARG2 (o / or
                              :op1 (e / explicit)
                              :op2 (ii / implicit))))))"
680,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,when using an array individual characters can be accessed and manipulated.,1,4,2.5,"# ::snt when using an array individual characters can be accessed and manipulated.
(p / possible-01
      :ARG1 (a / and
            :op1 (a2 / access-01
                  :ARG1 (c / character
                        :mod (ii / individual)))
            :op2 (m / manipulate-01
                  :ARG1 c))
      :time (u / use-01
            :ARG1 (a3 / array)))"
681,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,strings declared using an array of characters could result in data loss if character array not initialized large enough.,4,4,4,"# ::snt strings declared using an array of characters could result in data loss if character array not initialized large enough.
(p / possible-01
      :ARG1 (r / result-01
            :ARG1 (s / string
                  :ARG1-of (d / declare-02)
                  :ARG0-of (u / use-01
                        :ARG1 (a / array
                              :consist-of (c / character))))
            :ARG2 (l / lose-02
                  :ARG1 (d2 / data)))
      :condition (ii / initialize-01
            :polarity -
            :ARG1 (a2 / array
                  :consist-of (c2 / character))
            :ARG1-of (h / have-degree-91
                  :ARG2 (l2 / large)
                  :ARG3 (e / enough))))"
682,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable",3,4,3.5,"# ::snt an array is passed by reference therefore if an array of characters is changed, the memory is changed not just the variable
(p / pass-01
      :ARG1 (a / array)
      :manner (r / reference)
      :ARG0-of (c / cause-01
            :ARG1 (c2 / change-01
                  :ARG1 (m / memory)
                  :ARG1-of (c3 / contrast-01
                        :ARG2 (c4 / change-01
                              :ARG1 (v / variable
                                    :mod (j / just))))
                  :condition (c5 / change-01
                        :ARG1 (a2 / array
                              :consist-of (c6 / character))))))"
683,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.",3,4,3.5,"# ::snt the type string has several built-in functions not available when using a char array, but the individual characters in an array or more directly accessible than the characters in a string type string.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (s / string
                  :mod (t / type))
            :ARG1 (f / function
                  :ARG1-of (b / build-in-02)
                  :quant (s2 / several)
                  :ARG1-of (a / available-02
                        :polarity -
                        :time (u / use-01
                              :ARG1 (a2 / array
                                    :consist-of (s3 / string
                                          :mod (t2 / type)))))))
      :ARG2 (o / or
            :op1 (c2 / character
                  :mod (ii / individual)
                  :location (a3 / array))
            :op2 (a4 / accessible-02
                  :ARG1 c2
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (d / direct-02
                              :ARG1 (a5 / access-01)
                              :ARG3 (m / more)
                              :ARG4 c2)))))"
684,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"declaring a string, it includes white spaces but declaring a array of character does not include white spaces",0,3,1.5,"# ::snt declaring a string, it includes white spaces but declaring a array of character does not include white spaces
(c / contrast-01
      :ARG1 (ii / include-01
            :ARG0 (d / declare-01
                  :ARG1 (s / string))
            :ARG1 (s2 / space
                  :ARG1-of (w / white-02)))
      :ARG2 (ii2 / include-01
            :polarity -
            :ARG0 (d2 / declare-01
                  :ARG1 (a / array
                        :consist-of (c2 / character)))
            :ARG1 s2))"
685,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"an array of characters has one element a string doesnt have. it is the termination element, or ""null""",5,5,5,"# ::snt an array of characters has one element a string doesnt have. it is the termination element, or ""null""
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (a / array
                  :consist-of (c / character))
            :ARG1 (e / element
                  :quant 1
                  :ARG1-of (h2 / have-03
                        :polarity -
                        :ARG0 (s / string))))
      :snt2 (h3 / have-03
            :ARG0 (ii / it)
            :ARG1 (e2 / element
                  :ARG0-of (t / terminate-01)
                  :ARG1-of (m2 / mean-01
                        :ARG2 (n / null)))))"
686,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.,4,4,4,"# ::snt Strings declared using the type string can vary in length. Strings declared using an array of characters can not extend past the array length.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (v / vary-01
                  :ARG1 (s / string
                        :ARG1-of (d / declare-02
                              :manner (u / use-01
                                    :ARG1 (s2 / string
                                          :mod (t / type)))))
                  :ARG2 (l / length)))
      :snt2 (p2 / possible-01
            :polarity -
            :ARG1 (e / extend-01
                  :ARG1 (s3 / string
                        :ARG1-of (d2 / declare-02
                              :manner (u2 / use-01
                                    :ARG1 (a / array
                                          :consist-of (c / character)))))
                  :ARG4 (p3 / past
                        :op1 (l2 / length
                              :mod a)))))"
687,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"cant modify individual characters of a type string array, character type array can modify individual characters",1,4,2.5,"# ::snt cant modify individual characters of a type string array, character type array can modify individual characters
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (m2 / modify-01
                  :ARG1 (c / character
                        :mod (ii / individual))
                  :ARG2 (a / array
                        :mod (s / string
                              :mod (t / type)))))
      :snt2 (p2 / possible-01
            :ARG1 (m3 / modify-01
                  :ARG0 (a2 / array
                        :mod (t2 / type
                              :mod (c2 / character)))
                  :ARG1 (c3 / character
                        :mod (ii2 / individual)))))"
688,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"the type string is a class and is safer, while the other is just an array of characters.",3,4,3.5,"# ::snt the type string is a class and is safer, while the other is just an array of characters.
(c / contrast-01
      :ARG1 (a / and
            :op1 (c2 / class
                  :domain (s / string
                        :ARG1-of (t / type-01)))
            :op2 (h / have-degree-91
                  :ARG1 s
                  :ARG2 (s2 / safe-01
                        :ARG1 s)
                  :ARG3 (m / more)))
      :ARG2 (a2 / array
            :consist-of (c3 / character)
            :domain (o / other)
            :mod (j / just)))"
689,4.2,What is the main difference between strings declared using the type string versus strings declared using an array of characters?,The strings declared using an array of characters have a null element added at the end of the array.,"array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type ",1,4,2.5,"# ::snt array  it is the collection of similar data types ex:int a[10]  ten indicates the size of array. [ ] is index of array, we can give only integer values to array of a.  where as string mean collection of group of characters.  string declarations have a datatype usually causes storage to be allocated in memory that is capable of holding some predetermined number of symbols.    However  Arrays can be declared to contain values of any non reference data type. Multiple arrarys of the same type 
(m / multi-sentence
      :snt1 (a / array
            :domain (c / collect-01
                  :ARG1 (t / type
                        :mod (d / data)
                        :ARG1-of (r / resemble-01)))
            :example (a2 / and
                  :op1 (ii / index
                        :domain (a3 / array))
                  :op2 (p / possible-01
                        :ARG1 (g / give-01
                              :ARG0 (w / we)
                              :ARG1 (v / value
                                    :mod (ii2 / integer)
                                    :mod (o / only))
                              :ARG2 (a4 / array
                                    :consist-of (s / string)))))
            :snt2 (m2 / mean-01
                  :ARG1 (s2 / string)
                  :ARG2 (c2 / collect-01
                        :ARG1 (g2 / group
                              :consist-of (c3 / character)))))
      :snt3 (c4 / cause-01
            :ARG0 (d2 / declare-02
                  :ARG1 (s3 / string))
            :ARG1 (a5 / allocate-01
                  :ARG1 (s4 / store-01)
                  :ARG2 (m3 / memory
                        :ARG1-of (c5 / capable-01
                              :ARG2 (h / hold-01
                                    :ARG0 m3
                                    :ARG1 (n / number
                                          :quant-of (s5 / symbol)
                                          :ARG1-of (p2 / predetermine-01)
                                          :mod (s6 / some))))))
            :mod (u / usual))
      :snt3 (c6 / contrast-01
            :ARG2 (p3 / possible-01
                  :ARG1 (d3 / declare-01
                        :ARG1 a3)
                  :ARG2 (c7 / contain-01
                        :ARG0 a3
                        :ARG1 (v2 / value
                              :mod (d4 / data
                                    :mod (a6 / any)
                                    :mod (r2 / reference
                                          :polarity -)))))))"
690,4.3,How are arrays passed to functions?,by reference.,by reference only,5,5,5,"# ::snt by reference only
(r / refer-01
      :mod (o / only))"
691,4.3,How are arrays passed to functions?,by reference.,a reference pointer to an element in the array.,4,5,4.5,"# ::snt a reference pointer to an element in the array.
(p / pointer
      :purpose (r / reference)
      :destination (e / element
            :part-of (a / array)))"
692,4.3,How are arrays passed to functions?,by reference.,Arrays are passed to functions by reference.,5,5,5,"# ::snt Arrays are passed to functions by reference.
(p / pass-05
      :ARG1 (a / array)
      :ARG2 (f / function)
      :manner (r / reference))"
693,4.3,How are arrays passed to functions?,by reference.,#NAME?,5,5,5,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
694,4.3,How are arrays passed to functions?,by reference.,Arrays are passed by reference.,5,5,5,"# ::snt Arrays are passed by reference.
(p / pass-03
      :ARG1 (a / array)
      :instrument (r / reference))"
695,4.3,How are arrays passed to functions?,by reference.,"you must pass the array and its size to the function. Ex. function(array, size);",4,4,4,"# ::snt you must pass the array and its size to the function. Ex. function(array, size);
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (p / pass-03
                  :ARG0 y
                  :ARG1 (a / and
                        :op1 (a2 / array)
                        :op2 (s / size
                              :poss a2))
                  :ARG2 (f / function)))
      :snt2 (e / exemplify-01
            :ARG0 (f2 / function
                  :ARG1-of (m2 / mean-01
                        :ARG2 (a3 / and
                              :op1 (a4 / array)
                              :op2 (s2 / size))))))"
696,4.3,How are arrays passed to functions?,by reference.,"Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.",3,4,3.5,"# ::snt Usually the same way you pass anything else... you do not have to specify the length of a char array, just pass it to the function by sending the name of the array.  Example: char str[20]; isPalindrome(str); // this sends the char array to the function isPalindrome.  Otherwise, would need to send the length of the array as well.
(m / multi-sentence
      :snt1 (w / way
            :ARG1-of (s / same-01
                  :manner-of (p / pass-03
                        :ARG0 (y / you)
                        :ARG1 (a / anything
                              :mod (e / else))))
            :ARG2-of s)
      :mod (u / usual)
      :snt2 (c / contrast-01
            :ARG1 (o / obligate-01
                  :polarity -
                  :ARG1 y
                  :ARG2 (s2 / specify-01
                        :ARG0 y
                        :ARG1 (l / length
                              :poss (a2 / array
                                    :mod (c2 / char)))))
            :ARG2 (p2 / pass-03
                  :ARG0 y
                  :ARG1 a2
                  :ARG2 (f / function)
                  :manner (s3 / send-01
                        :ARG0 y
                        :ARG1 (n / name-01
                              :ARG1 a2))
                  :mod (j / just)))
      :snt2 (e2 / exemplify-01
            :ARG0 (a3 / and
                  :op1 (s4 / string
                        :value 20)
                  :op2 (s5 / string
                        :value ""isPalindrome(str""))
            :op3 (s6 / send-01
                  :ARG0 (t / this)
                  :ARG1 (a4 / array
                        :mod (c3 / char))
                  :ARG2 (f2 / function
                        :name (n2 / name
                              :op1 ""isPalindrome""))))
      :snt3 (n3 / need-01
            :ARG0 (ii / i)
            :ARG1 (s7 / send-01
                  :ARG0 y
                  :ARG1 (l2 / length
                        :poss (a5 / array)
                        :mod (a6 / as-well))
                  :condition (h / have-polarity-91
                        :ARG1 (n4 / need-01
                              :ARG0 y
                              :ARG1 (s8 / send-01
                                    :ARG0 y
                                    :ARG1 (l3 / length)))))))"
697,4.3,How are arrays passed to functions?,by reference.,you pass a pointer to the first item and also pass the size.,4,3,3.5,"# ::snt you pass a pointer to the first item and also pass the size.
(a / and
      :op1 (p / pass-01
            :ARG0 (y / you)
            :ARG1 (p2 / pointer)
            :ARG2 (ii / item
                  :ord (o / ordinal-entity
                        :value 1)))
      :op2 (p3 / pass-01
            :ARG0 y
            :ARG1 (s / size)
            :mod (a2 / also)))"
698,4.3,How are arrays passed to functions?,by reference.,By reference.,5,5,5,"# ::snt By reference.
(r / refer-01)"
699,4.3,How are arrays passed to functions?,by reference.,"In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.",4,4,4,"# ::snt In two parts, the array itself, and it's size, so that the function it's being passed to can avoid out of bounds errors.
(h / have-part-91
      :ARG2 (a / and
            :op1 (a2 / array)
            :op2 (s / size
                  :poss a2))
      :ARG0-of (c / cause-01
            :ARG1 (p / possible-01
                  :ARG1 (a3 / avoid-01
                        :ARG0 (f / function
                              :ARG1-of (p2 / pass-01))
                        :ARG1 (e / error
                              :ARG1-of (o / out-06
                                    :ARG2 (b / bound-01)))))))"
700,4.3,How are arrays passed to functions?,by reference.,Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.,5,5,5,"# ::snt Specify array name without brackets. Array size is normally passed as another argument so the function can process the specific number of elements in the array. Arrays are passed by reference. Individual array elements passed by value. Functions that take arrays as arguments.
(m / multi-sentence
      :snt1 (s / specify-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / name
                  :mod (a / array))
            :manner (b / bracket
                  :polarity -))
      :snt2 (p / pass-01
            :ARG1 (s2 / size
                  :mod (a2 / array))
            :ARG2 (a3 / argument
                  :mod (a4 / another))
            :ARG1-of (n2 / normal-02)
            :purpose (p2 / possible-01
                  :ARG1 (p3 / process-01
                        :ARG0 (f / function)
                        :ARG1 (n3 / number
                              :quant-of (e / element
                                    :part-of (a5 / array))
                              :ARG1-of (s3 / specific-02)))))
      :snt2 (p4 / pass-01
            :ARG1 (a6 / array)
            :ARG2 (r / reference))
      :snt3 (p5 / pass-01
            :ARG1 (e2 / element
                  :ARG1-of (ii / individual-02)
                  :part-of (a7 / array))
            :ARG2 (v / value))
      :snt4 (f2 / function
            :ARG0-of (t / take-01
                  :ARG1 (a8 / array)
                  :ARG2 (a9 / argument))))"
701,4.3,How are arrays passed to functions?,by reference.,Arrays are passed by reference.,5,5,5,"# ::snt Arrays are passed by reference.
(p / pass-03
      :ARG1 (a / array)
      :instrument (r / reference))"
702,4.3,How are arrays passed to functions?,by reference.,the same way but with [] at the declaration and the actual function.,3,3,3,"# ::snt the same way but with [] at the declaration and the actual function.
(c / contrast-01
      :ARG1 (w / way
            :ARG1-of (s / same-01))
      :ARG2 (a / and
            :op1 (d / declare-02)
            :op2 (f / function-01
                  :ARG1-of (a2 / actual-02))))"
703,4.3,How are arrays passed to functions?,by reference.,specify the array name without brackets.,3,3,3,"# ::snt specify the array name without brackets.
(s / specify-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (a / array)))
      :manner (b / bracket
            :polarity -))"
704,4.3,How are arrays passed to functions?,by reference.,by reference,5,5,5,"# ::snt by reference
(r / refer-01)"
705,4.3,How are arrays passed to functions?,by reference.,"You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.",5,5,5,"# ::snt You pass the name of the array to the function. So for: int bin [10]; you pass it to an array like so: jingle(bin); but jingle must be declared correctly in order to receive an array, either with prototype void jingle (int []); or with the definition in its initialization: void jingle (int array[]);  It's also worth noting that arrays are passed to function by reference, so as to not copy large arrays over and over and burn memory.  This gives the function complete control over the array however.
(m / multi-sentence
      :snt1 (p / pass-01
            :ARG0 (y / you)
            :ARG1 (n / name
                  :poss (a / array))
            :ARG2 (f / function))
      :snt2 (c / contrast-01
            :ARG1 (p2 / pass-01
                  :ARG0 (y2 / you)
                  :ARG1 (n2 / name
                        :poss (a2 / array))
                  :ARG2 (a3 / array)
                  :ARG1-of (r / resemble-01
                        :ARG2 (s / string-entity
                              :value ""so""
                              :op1 (s2 / string-entity
                                    :value ""jingle""))))
            :ARG2 (o / obligate-01
                  :ARG1 (d / declare-02
                        :ARG1 s2
                        :ARG1-of (c2 / correct-02))
                  :purpose (r2 / receive-01
                        :ARG0 s2
                        :ARG1 a3)
                  :manner (o2 / or
                        :op1 (s3 / string-entity
                              :value ""void""
                              :value ""jingle""
                              :mod (p3 / prototype))
                        :op2 (s4 / string-entity
                              :value ""void""
                              :value ""jingle""
                              :mod (a4 / array
                                    :mod (ii / initialize-01)
                                    :ARG1-of ii)))))
      :snt2 (w / worth-02
            :ARG1 (n3 / note-01
                  :ARG1 (a5 / array
                        :mod (t / that))
                  :mod (a6 / also))))"
706,4.3,How are arrays passed to functions?,by reference.,They are called by the function then the function must loop through the array to get the set of characters.,1,3,2,"# ::snt They are called by the function then the function must loop through the array to get the set of characters.
(c / call-02
      :ARG0 (f / function)
      :ARG1 (t / they)
      :time (t2 / then)
      :ARG0-of (c2 / cause-01
            :ARG1 (o / obligate-01
                  :ARG2 (l / loop-01
                        :ARG0 f
                        :ARG1 (a / array)
                        :purpose (g / get-01
                              :ARG0 f
                              :ARG1 (s / set
                                    :consist-of (c3 / character)))))))"
707,4.3,How are arrays passed to functions?,by reference.,"by reference by default, unless you specify const, at which the later will make the array unmodifiable.",5,5,5,"# ::snt by reference by default, unless you specify const, at which the later will make the array unmodifiable.
(h / have-condition-91
      :ARG1 (s / specify-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (s2 / string-entity
                  :value ""const"")
            :ARG0-of (m / make-02
                  :ARG1 (p / possible-01
                        :polarity -
                        :ARG1 (m2 / modify-01
                              :ARG1 (a / array)))))
      :ARG2 (d / default-02
            :ARG1 (r / reference-01)))"
708,4.3,How are arrays passed to functions?,by reference.,"The function recieves both the array and the array size as parameters. function(arrayName, arraySize)",4,4,4,"# ::snt The function recieves both the array and the array size as parameters. function(arrayName, arraySize)
(m / multi-sentence
      :snt1 (r / receive-01
            :ARG0 (f / function)
            :ARG1 (a / and
                  :op1 (a2 / array)
                  :op2 (s / size
                        :mod (a3 / array)))
            :prep-as (p / parameter))
      :snt2 (f2 / function
            :ARG1-of (m2 / mean-01
                  :ARG2 (a4 / and
                        :op1 (n / name
                              :mod (a5 / array))
                        :op2 (s2 / size
                              :mod (a6 / array))))))"
709,4.3,How are arrays passed to functions?,by reference.,specifying array name and passing as reference in an argument into the function,5,5,5,"# ::snt specifying array name and passing as reference in an argument into the function
(a / and
      :op1 (s / specify-01
            :ARG1 (n / name
                  :poss (a2 / array)))
      :op2 (p / pass-01
            :ARG1 n
            :ARG2 (f / function)
            :ARG3 (t / thing
                  :ARG2-of (r / reference-01))
            :prep-as (a3 / argument)))"
710,4.3,How are arrays passed to functions?,by reference.,1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.,4,4,4,"# ::snt 1st you must specify the array name without brackets and then the array name and size are passed as two arguments in the function call.
(a / and
      :op1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (s / specify-01
                  :ARG0 y
                  :ARG1 (n / name
                        :mod (a2 / array))
                  :manner (b / bracket
                        :polarity -))
            :ord (o2 / ordinal-entity
                  :value 1))
      :op2 (p / pass-03
            :ARG1 (a3 / and
                  :op1 (n2 / name
                        :mod (a4 / array))
                  :op2 (s2 / size
                        :mod a4))
            :ARG2 (a5 / argument
                  :quant 2)
            :time (t / then)
            :location (c / call-03
                  :ARG1 (f / function))))"
711,4.3,How are arrays passed to functions?,by reference.,"arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array",5,5,5,"# ::snt arrays are passed by reference, passing the starting address of array. programmer specifies the array name without brackets and passes the array size as another argument so the function can process the specific number of elements in the array
(m / multi-sentence
      :snt1 (p / pass-01
            :ARG1 (a / array)
            :manner (r / reference)
            :manner (p2 / pass-01
                  :ARG1 (a2 / address
                        :ARG0-of (s / start-01
                              :ARG1 (a3 / array)))))
      :snt2 (a4 / and
            :op1 (s2 / specify-01
                  :ARG0 (p3 / person
                        :ARG0-of (p4 / program-01))
                  :ARG1 (n / name
                        :poss (a5 / array))
                  :manner (b / bracket
                        :polarity -))
            :op2 p2
            :ARG0 p3
            :ARG1 (s3 / size
                  :poss a5)
            :ARG2 (a6 / argument
                  :mod (a7 / another))
            :purpose (p5 / possible-01
                  :ARG1 (p6 / process-01
                        :ARG0 (f / function)
                        :ARG1 (n2 / number
                              :quant-of (e / element
                                    :location a5)
                              :ARG1-of (s4 / specific-02))))))"
712,4.3,How are arrays passed to functions?,by reference.,by reference only,5,5,5,"# ::snt by reference only
(r / refer-01
      :mod (o / only))"
713,4.3,How are arrays passed to functions?,by reference.,by reference,5,5,5,"# ::snt by reference
(r / refer-01)"
714,4.3,How are arrays passed to functions?,by reference.,by reference,5,5,5,"# ::snt by reference
(r / refer-01)"
715,4.3,How are arrays passed to functions?,by reference.,by refrence,5,5,5,"# ::snt by refrence
(b / byline-91
      :ARG2 (r / refrence))"
716,4.3,How are arrays passed to functions?,by reference.,"function( int [], int length)",4,4,4,"# ::snt function( int [], int length)
(f / function-01
      :ARG2 (a / and
            :op1 (s / string-entity
                  :value ""int_0"")
            :op2 (s2 / string-entity
                  :value ""int_1"")
            :op3 (s3 / string-entity
                  :value ""long"")))"
717,4.3,How are arrays passed to functions?,by reference.,by reference,5,5,5,"# ::snt by reference
(r / refer-01)"
718,4.3,How are arrays passed to functions?,by reference.,by reference,5,5,5,"# ::snt by reference
(r / refer-01)"
719,4.3,How are arrays passed to functions?,by reference.,"The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. ",1,4,2.5,"# ::snt The function reads the variables, stores them. then returns the what ever the variable reads. The function then prints the content of the array. 
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / read-01
                  :ARG0 (f / function)
                  :ARG1 (v / variable))
            :op2 (s / store-01
                  :ARG0 f
                  :ARG1 v))
      :snt2 (r2 / return-02
            :ARG0 f
            :ARG1 (t / thing
                  :ARG1-of (r3 / read-01
                        :ARG0 (v2 / variable)))
            :time (t2 / then))
      :snt3 (p / print-01
            :ARG0 (f2 / function)
            :ARG1 (c / content
                  :poss (a2 / array))
            :time (t3 / then)))"
720,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value,5,5,5,"# ::snt a static array will store the new values that were assigned to each of its elements. meaning if you call a function twice it will use the last values that were returned the first time.  if you don't declare it static then the new values will not be stored and will be reset to their original value
(m / multi-sentence
      :snt1 (s / store-01
            :ARG0 (a / array
                  :mod (s2 / static))
            :ARG1 (v / value
                  :ARG1-of (n / new-01)
                  :ARG1-of (a2 / assign-01
                        :ARG2 (e / element
                              :mod (e2 / each)
                              :poss a))))
      :snt2 (m2 / mean-01
            :ARG2 (u / use-01
                  :ARG0 (f / function)
                  :ARG1 (v2 / value
                        :mod (l / last)
                        :ARG1-of (r / return-02
                              :time (t / time
                                    :ord (o / ordinal-entity
                                          :value 1))))
                  :condition (c / call-01
                        :ARG0 (y / you)
                        :ARG1 f
                        :frequency 2)))
      :snt3 (a3 / and
            :op1 (s3 / store-01
                  :polarity -
                  :ARG1 (v3 / value
                        :ARG1-of (n2 / new-01)))
            :op2 (r2 / reset-01
                  :ARG1 v3
                  :ARG2 (v4 / value
                        :mod (o2 / original)
                        :poss v3))
            :condition (d / declare-02
                  :polarity -
                  :ARG0 (y2 / you
                        :ARG1 (ii / it)
                        :ARG2 (s4 / static)))))"
721,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array can only be referenced not accessed. Also static arrays can be used without creating an object.,3,5,4,"# ::snt a static array can only be referenced not accessed. Also static arrays can be used without creating an object.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (r / reference-01
                  :ARG1 (a / array
                        :mod (s / static))
                  :mod (o / only))
            :ARG1-of (a2 / access-01
                  :polarity -))
      :snt2 (p2 / possible-01
            :ARG1 (u / use-01
                  :ARG1 (a3 / array
                        :mod (s2 / static))
                  :manner (c / create-01
                        :polarity -
                        :ARG1 (o2 / object)))
            :mod (a4 / also)))"
722,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.,5,5,5,"# ::snt An array declared as static is not created and and initialized each time the function and it is also not destroyed when the function terminates.
(a / and
      :op1 (a2 / and
            :op1 (c / create-01
                  :polarity -
                  :ARG1 (a3 / array
                        :ARG1-of (d / declare-02
                              :ARG2 (s / static))))
            :op2 (ii / initialize-01
                  :polarity -
                  :ARG1 a3)
            :frequency (r / rate-entity-91
                  :ARG4 (f / function-01)))
      :op2 (d2 / destroy-01
            :polarity -
            :ARG1 a3
            :time (t / terminate-01
                  :ARG1 f)
            :mod (a4 / also)))"
723,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.",3,5,4,"# ::snt A program intializes static local arrays when their declarations are first encountered.  If a static array is not initialized explicityly by the programmer, earch element of that array is intialized to zero by the compiler when the array is created.  Non-static array members cannot be initialized at all in C++.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (p / program)
            :ARG1 (a / array
                  :ARG1-of (l / local-02)
                  :mod (s / static))
            :time (e / encounter-01
                  :ARG0 p
                  :ARG1 (d / declare-02
                        :ARG0 a)
                  :ord (o / ordinal-entity
                        :value 1)))
      :snt2 (ii2 / initialize-01
            :polarity -
            :ARG0 (p2 / person
                  :ARG0-of (p3 / program-01))
            :ARG1 (e2 / element
                  :mod (a2 / array
                        :mod (s2 / static)))
            :ARG2 (z / zero)
            :time (c / create-01
                  :ARG1 a2)
            :manner (e3 / explicit))
      :snt3 (p4 / possible-01
            :polarity -
            :ARG1 ii2
            :ARG1 (m2 / member
                  :mod (a3 / array
                        :mod (s3 / static
                              :polarity -)))
            :mod (a4 / at-all)
            :medium (l2 / language
                  :name (n / name
                        :op1 ""C++""))))"
724,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Arrays that are static remain the same size throughout the program execution.,3,5,4,"# ::snt Arrays that are static remain the same size throughout the program execution.
(r / remain-01
      :ARG1 (a / array
            :ARG1-of (s / static-02))
      :ARG3 (s2 / size
            :ARG1-of (s3 / same-01))
      :duration (e / execute-01
            :ARG1 (p / program)))"
725,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.",5,5,5,"# ::snt a static array will only be initilized once, a non static array will be re-initilized once the program reaches the initilization line again.
(a / and
      :op1 (ii / initiate-01
            :frequency 1
            :ARG1 (a2 / array
                  :mod (s / static))
            :mod (o / only))
      :op2 (ii2 / initiate-01
            :ARG1 (a3 / array
                  :mod (s2 / static
                        :polarity -))
            :mod (a4 / again)
            :time (o2 / once
                  :op1 (r / reach-01
                        :ARG0 (p / program)
                        :ARG1 (l / line
                              :ARG0-of (ii3 / initiate-01))
                        :mod a4))))"
726,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.,4,5,4.5,"# ::snt An array declared as static is available from beginning of program to end. One w/o static declaration disappears if it is not accessed within the right scope.
(m / multi-sentence
      :snt1 (a / available-02
            :ARG2 (a2 / array
                  :ARG1-of (d / declare-02
                        :ARG2 (s / static)))
            :time (f / from
                  :op1 (b / begin-01
                        :ARG1 (p / program))
                  :op2 (e / end-01
                        :ARG1 p)))
      :snt2 (d2 / disappear-01
            :ARG1 (a3 / array
                  :quant 1
                  :ARG1-of (d3 / declare-02
                        :polarity -
                        :ARG2 (s2 / static)))
            :condition (a4 / access-01
                  :polarity -
                  :ARG1 a3
                  :location (s3 / scope
                        :ARG1-of (r / right-03)))))"
727,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.,1,5,3,"# ::snt a static array has pre-runtime size and that size cannot be changed. A dynamic array gets its size at runtime.
(m / multi-sentence
      :snt1 (a / and
            :op1 (h / have-03
                  :ARG0 (a2 / array
                        :mod (s / static))
                  :ARG1 (s2 / size
                        :poss a2)
                  :time (b / before
                        :op1 (r / runtime)))
            :op2 (p / possible-01
                  :polarity -
                  :ARG1 (c / change-01
                        :ARG1 (s3 / size
                              :poss a2))))
      :snt2 (g / get-01
            :ARG0 (a3 / array
                  :mod (d / dynamic))
            :ARG1 (s4 / size
                  :poss a3)
            :time (r2 / runtime)))"
728,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","If an array is declared as static, it is not created each time the array is called.",5,5,5,"# ::snt If an array is declared as static, it is not created each time the array is called.
(c / create-01
      :polarity -
      :ARG1 (a / array)
      :frequency (r / rate-entity-91
            :ARG4 (c2 / call-01
                  :ARG1 (a2 / array)))
      :condition (d / declare-01
            :ARG1 a2
            :ARG2 (s / static)))"
729,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.",5,5,5,"# ::snt An array that is not declared as static will re-initialize every time the function declaring it is called. A static array will initialize only once, at the declaration, and will store the values in it's elements throughout the duration of the program, even if the same function is called multiple times, a static array will only initialize once.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (a / array
                  :ARG1-of (d / declare-02
                        :polarity -
                        :ARG2 (s / static)))
            :mod (a2 / again)
            :frequency (r / rate-entity-91
                  :ARG4 (c / call-02
                        :ARG1 (f / function
                              :ARG0-of (d2 / declare-02
                                    :ARG1 a)))))
      :snt2 (a3 / and
            :op1 (ii2 / initialize-01
                  :ARG1 (a4 / array
                        :mod (s2 / static))
                  :mod (o / only)
                  :time (d3 / declare-02))
            :op2 (s3 / store-01
                  :ARG0 a4
                  :ARG1 (v / value)
                  :location (e / element
                        :poss a4)
                  :duration (d4 / duration
                        :mod (p / program)))
            :concession (e2 / even-if
                  :op1 (c2 / call-02
                        :ARG1 (f2 / function
                              :ARG1-of (s4 / same-01))
                        :frequency (m2 / multiple)))))"
730,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  ",4,5,4.5,"# ::snt All elements are initialized to zero if not explicitly initialized, this does not happen for automatic local arrays  
(ii / initialize-01
      :ARG1 (e / element
            :mod (a / all))
      :ARG2 (z / zero)
      :condition (ii2 / initialize-01
            :polarity -
            :ARG1 e
            :manner (e2 / explicit))
      :ARG1-of (c / contrast-01
            :ARG2 (ii3 / initialize-01
                  :polarity -
                  :ARG1 e
                  :ARG2 (a2 / array
                        :ARG1-of (l / local-02)
                        :mod (a3 / automatic)))))"
731,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.",4,5,4.5,"# ::snt All elements are initialized to zero if not explicitly initialized for a static array, while a non-static array is not initialized to zero.
(c / contrast-01
      :ARG1 (ii / initialize-01
            :ARG1 (e / element
                  :mod (a / all))
            :ARG2 (z / zero)
            :condition (ii2 / initialize-01
                  :polarity -
                  :ARG1 e
                  :ARG2 (a2 / array
                        :mod (s / static))
                  :ARG1-of (e2 / explicit-02)))
      :ARG2 (ii3 / initialize-01
            :polarity -
            :ARG1 (a3 / array
                  :mod (s2 / static
                        :polarity -))
            :ARG2 (z2 / zero)))"
732,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static cannot be changed,1,5,3,"# ::snt static cannot be changed
(p / possible-01
      :polarity -
      :ARG1 (c / change-01
            :ARG1 (s / static)))"
733,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.",3,5,4,"# ::snt A static array has a set size that cannot change. The data may not need all of the space assigned, or could go beyond the size.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (a / array
                  :mod (s / static))
            :ARG1 (s2 / size
                  :mod (s3 / set)
                  :ARG1-of (c / change-01
                        :ARG1-of (p / possible-01
                              :polarity -))))
      :snt2 (o / or
            :op1 (p2 / possible-01
                  :ARG1 (n / need-01
                        :polarity -
                        :ARG0 (d / data)
                        :ARG1 (s4 / space
                              :ARG1-of (a2 / assign-01)
                              :mod (a3 / all))))
            :op2 (p3 / possible-01
                  :ARG1 (g / go-01
                        :ARG1 d
                        :ARG4 (b / beyond
                              :op1 (s5 / size))))))"
734,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).",1,5,3,"# ::snt A static member prevents naming conflicts (not put into global namespace) while allowing for information hiding (private, public).
(h / have-concession-91
      :ARG1 (a / allow-01
            :ARG0 (m / member
                  :ARG1-of (s / static-02))
            :ARG1 (h2 / hide-01
                  :ARG1 (ii / information
                        :ARG1-of (p / private-02)
                        :ARG1-of (p2 / public-02))))
      :ARG2 (p3 / prevent-01
            :ARG0 m
            :ARG1 (c / conflict-01
                  :ARG2 (n / name-01))
            :ARG1-of (p4 / put-01
                  :polarity -
                  :ARG2 (n2 / namespace
                        :mod (g / globe)))))"
735,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.,5,5,5,"# ::snt A static local array exists for the duration of the program and its elements are initialized to 0 if not explicitly initialized. So a static local array's elements will still be the same when called later unless specifically initialized to something else.  This doesn't happen for automatic arrays.
(m / multi-sentence
      :snt1 (a / and
            :op1 (e / exist-01
                  :ARG1 (a2 / array
                        :ARG1-of (l / local-02)
                        :mod (s / static))
                  :duration (d / duration
                        :poss (p / program)))
            :op2 (ii / initialize-01
                  :ARG1 (e2 / element
                        :poss a2)
                  :condition (ii2 / initialize-01
                        :polarity -
                        :ARG1 e2
                        :ARG1-of (e3 / explicit-02)))
            :snt2 (c / cause-01
                  :ARG1 (s2 / same-01
                        :ARG1 (e4 / element
                              :poss (a3 / array
                                    :ARG1-of (l2 / local-02)
                                    :mod (s3 / static)))
                        :mod (s4 / still)
                        :time (c2 / call-01
                              :time (a4 / after
                                    :op1 (n / now)))
                        :condition ii2
                        :polarity -
                        :ARG1 e4
                        :ARG2 (s5 / something
                              :mod (e5 / else))
                        :ARG1-of (s6 / specific-02))))
      :snt2 (t / this
            :polarity -
            :topic a3
            :mod (a5 / automatic)))"
736,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. ",1,5,3,"# ::snt Static arrays are those with a declared size, that is known to the program, whereas non-static arrays leave the size undeclared and open so it can be assigned later. Usually used for input purposes. 
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (a / array
                  :mod (s / static)
                  :ARG0-of (h / have-03
                        :ARG1 (s2 / size
                              :ARG1-of (d / declare-02)
                              :ARG1-of (k / know-02
                                    :ARG0 (p / program)))))
            :ARG2 (l / leave-14
                  :ARG0 (a2 / array
                        :mod (s3 / static
                              :polarity -))
                  :ARG1 (a3 / and
                        :op1 (d2 / declare-02
                              :polarity -
                              :ARG1 (s4 / size))
                        :op2 (o / open-04
                              :ARG1 a2
                              :purpose (p2 / possible-01
                                    :ARG1 (a4 / assign-01
                                          :ARG1 s4
                                          :time (a5 / after
                                                :op1 d2)))))))
      :snt2 (u / use-01
            :ARG1 (a6 / array
                  :mod (s5 / static))
            :ARG2 (p3 / purpose
                  :mod (ii / input))
            :mod (u2 / usual)))"
737,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","static arrays keep the values after the end of a function, while non static reinitialize every time.",5,5,5,"# ::snt static arrays keep the values after the end of a function, while non static reinitialize every time.
(c / contrast-01
      :ARG1 (k / keep-01
            :ARG0 (a / array
                  :mod (s / static))
            :ARG1 (v / value)
            :time (a2 / after
                  :op1 (e / end-01
                        :ARG1 (f / function-01))))
      :ARG2 (r / reinitialize-01
            :ARG0 a
            :mod (s2 / static
                  :polarity -)
            :frequency (t / time
                  :mod (e2 / every))))"
738,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.",5,5,5,"# ::snt Static arrays are created and initialized only once, and the values aren't destroyed  when the function terminates in the program. Automatic arrays reset everytime the function is called.
(m / multi-sentence
      :snt1 (a / and
            :op1 (c / create-01
                  :frequency 1
                  :ARG1 (a2 / array
                        :mod (s / static)))
            :op2 (ii / initialize-01
                  :frequency 1
                  :ARG1 a2)
            :mod (o / only))
      :snt2 (d / destroy-01
            :polarity -
            :ARG1 (v / value)
            :time (t / terminate-01
                  :ARG1 (f / function)
                  :location (p / program)))
      :snt3 (r / reset-01
            :ARG1 (a3 / array
                  :mod (a4 / automatic))
            :frequency (r2 / rate-entity-91
                  :ARG4 (c2 / call-02
                        :ARG1 (f2 / function)))))"
739,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.",5,5,5,"# ::snt its not created and initialized each time program calls the function, and is not destroyed every time the function ends in the program.
(a / and
      :op1 (a2 / and
            :op1 (c / create-01
                  :polarity -
                  :ARG1 (ii / it))
            :op2 (ii2 / initialize-01
                  :polarity -
                  :ARG1 ii)
            :frequency (r / rate-entity-91
                  :ARG4 (c2 / call-02
                        :ARG0 (p / program)
                        :ARG1 (f / function-01))))
      :op2 (d / destroy-01
            :polarity -
            :ARG1 ii
            :frequency (r2 / rate-entity-91
                  :ARG4 (e / end-01
                        :ARG1 f
                        :location (p2 / program)))))"
740,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.",5,5,5,"# ::snt When we declare it static the array is not destroyed after the function is over.  When an array is not declared as static, the array is created and initialized every time a function calls it.
(m / multi-sentence
      :snt1 (d / destroy-01
            :polarity -
            :ARG1 (a / array)
            :time (d2 / declare-02
                  :ARG0 (w / we)
                  :ARG1 (ii / it)
                  :ARG2 (s / static))
            :time (a2 / after
                  :op1 (o / over-01
                        :ARG1 (f / function))))
      :snt2 (a3 / and
            :op1 (c / create-01
                  :ARG1 (a4 / array))
            :op2 (ii2 / initialize-01
                  :ARG1 a4)
            :frequency (r / rate-entity-91
                  :ARG4 (c2 / call-02
                        :ARG0 (f2 / function)
                        :ARG1 a4)))
      :time (d3 / declare-02
            :polarity -
            :ARG1 a4
            :ARG2 (s2 / static)))"
741,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",the static array exists for the duration of the program,4,5,4.5,"# ::snt the static array exists for the duration of the program
(e / exist-01
      :ARG1 (a / array
            :mod (s / static))
      :duration (p / program))"
742,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",an array declared as static can only be declared once,2,5,3.5,"# ::snt an array declared as static can only be declared once
(p / possible-01
      :ARG1 (d / declare-02
            :ARG1 (a / array
                  :ARG1-of (d2 / declare-02
                        :ARG2 (s / static)))
            :mod (o / only)
            :time (o2 / once)))"
743,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates",5,5,5,"# ::snt A static array exists in memory until the program terminates, whereas an automatic (or normal) array is removed when the function that created it terminates
(c / contrast-01
      :ARG1 (e / exist-01
            :ARG1 (a / array
                  :mod (s / static))
            :location (m / memory)
            :time (u / until
                  :op1 (t / terminate-01
                        :ARG1 (p / program))))
      :ARG2 (r / remove-01
            :ARG1 (a2 / array
                  :mod (o / or
                        :op1 (a3 / automatic)
                        :op2 (n / normal-02)))
            :time (t2 / terminate-01
                  :ARG1 (f / function
                        :ARG0-of (c2 / create-01
                              :ARG1 a2)))))"
744,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
745,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized,5,5,5,"# ::snt Only constants can be used to declare the size of automatic and static arrays Exists for the duration of the program Is initialized when its declaration is first encountered All elements are initialized to zero if not explicitly initialized
(p / possible-01
      :ARG1 (u / use-01
            :ARG1 (c / constant
                  :mod (o / only))
            :ARG2 (d / declare-02
                  :ARG1 (s / size
                        :poss (a / and
                              :op1 (a2 / array
                                    :mod (a3 / automatic))
                              :op2 (a4 / array
                                    :mod (s2 / static))))))
      :ARG1-of (ii / initialize-01
            :time (e / encounter-01
                  :ARG1 (d2 / declare-02
                        :ARG1 (e2 / element
                              :mod (a5 / all)))
                  :ord (o2 / ordinal-entity
                        :value 1)))
      :condition (ii2 / initialize-01
            :polarity -
            :ARG1 e2
            :manner (e3 / explicit)))"
746,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",A static array cannot be changed in the program.,1,5,3,"# ::snt A static array cannot be changed in the program.
(p / possible-01
      :polarity -
      :ARG1 (c / change-01
            :ARG1 (a / array
                  :mod (s / static))
            :location (p2 / program)))"
747,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.",static arrays are available throughout the program,5,5,5,"# ::snt static arrays are available throughout the program
(a / available-02
      :ARG2 (a2 / array
            :mod (s / static))
      :time (t / throughout
            :op1 (p / program)))"
748,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.",5,5,5,"# ::snt a static array is allocated when the program starts and is freed when the program exits but has limited scope, while an array that is not declared static is allocated and freed when it comes into and out of scope.
(c / contrast-01
      :ARG1 (a / and
            :op1 (a2 / allocate-01
                  :ARG1 (a3 / array
                        :mod (s / static))
                  :time (s2 / start-01
                        :ARG1 (p / program)))
            :op2 (f / free-01
                  :ARG1 a3
                  :time (e / exit-01
                        :ARG0 p)))
      :ARG2 (a4 / and
            :op1 (a5 / allocate-01
                  :ARG1 (a6 / array
                        :ARG1-of (d / declare-02
                              :polarity -)
                        :mod (s3 / static)))
            :op2 (f2 / free-01
                  :ARG1 a6
                  :time (a7 / and
                        :op1 (c2 / come-01
                              :ARG1 a6
                              :ARG4 (s4 / scope))
                        :op2 (c3 / come-01
                              :ARG1 a6
                              :ARG4 s4)))))"
749,4.4,"What is the difference between an array declared as static, and one that is not?","The arrays declared as static live throughout the life of the program; that is, they are initialized only once, when the function that declares the array it is first called.","if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   ",1,5,3,"# ::snt if they are declared fixed or static that means they can't change size once their storage has been allocated, however one that is not or dynamic arrarys can be resized.   
(c / contrast-01
      :ARG1 (m / mean-01
            :ARG1 (d / declare-02
                  :ARG1 (t / they)
                  :ARG2 (o / or
                        :op1 (f / fix-03
                              :ARG1 t)
                        :op2 (s / static-02
                              :ARG1 t)))
            :ARG2 (p / possible-01
                  :polarity -
                  :ARG1 (c2 / change-01
                        :ARG0 t
                        :ARG1 (s2 / size)
                        :time (a / allocate-01
                              :ARG1 (s3 / storage
                                    :poss t)))))
      :ARG2 (p2 / possible-01
            :ARG1 (r / resize-01
                  :ARG1 (o2 / or
                        :op1 (a2 / array
                              :ARG1-of (f2 / fix-03
                                    :polarity -))
                        :op2 (a3 / array
                              :mod (d2 / dynamic))))))"
750,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","at least 2, depending on how many arrays are being used.",1,4,2.5,"# ::snt at least 2, depending on how many arrays are being used.
(d / depend-01
      :ARG0 (a / array
            :quant (a2 / at-least
                  :op1 2))
      :ARG1 (a3 / array
            :quant (m / many)
            :ARG1-of (u / use-01)))"
751,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all of them.,2,5,3.5,"# ::snt all of them.
(t / they
      :mod (a / all))"
752,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.",5,5,5,"# ::snt When passing a multi-dimensional array, all dimensions must be specified except for the first dimension.
(o / obligate-01
      :ARG2 (s / specify-01
            :ARG1 (d / dimension
                  :mod (a / all)
                  :ARG2-of (e / except-01
                        :ARG1 (d2 / dimension
                              :ord (o2 / ordinal-entity
                                    :value 1)))))
      :time (p / pass-05
            :ARG1 (a2 / array
                  :mod (d3 / dimension
                        :quant (m / multiple)))))"
753,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.,2,5,3.5,"# ::snt It depends what parameters you are passing in a multidimensional.  A multideminsional can have more than two dimensions.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG0 (ii / it)
            :ARG1 (p / parameter
                  :ARG1-of (p2 / pass-03
                        :ARG0 (y / you)
                        :ARG2 (m2 / multidimensional))))
      :snt2 (p3 / possible-01
            :ARG1 (h / have-03
                  :ARG0 (m3 / multidimensional)
                  :ARG1 (d2 / dimension
                        :quant (m4 / more-than
                              :op1 2)))))"
754,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",The first dimension is not required however the subsequent dimension(s) are needed for the compiler.,5,5,5,"# ::snt The first dimension is not required however the subsequent dimension(s) are needed for the compiler.
(c / contrast-01
      :ARG1 (r / require-01
            :polarity -
            :ARG1 (d / dimension
                  :ord (o / ordinal-entity
                        :value 1)))
      :ARG2 (n / need-01
            :ARG1 (d2 / dimension
                  :mod (s / subsequent))
            :purpose (p / person
                  :ARG0-of (c2 / compile-01))))"
755,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all but the first,5,5,5,"# ::snt all but the first
(e / except-01
      :ARG1 (a / all)
      :ARG2 (t / thing
            :ord (o / ordinal-entity
                  :value 1)))"
756,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",All of the dimensions must be specified.,2,5,3.5,"# ::snt All of the dimensions must be specified.
(o / obligate-01
      :ARG2 (s / specify-01
            :ARG1 (d / dimension
                  :mod (a / all))))"
757,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",just the first one at least.,1,3,2,"# ::snt just the first one at least.
(o / one
      :ord (o2 / ordinal-entity
            :value 1)
      :mod (j / just)
      :mod (a / at-least))"
758,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","Two paramaters, the array and how many columns.  array(a[],[3])",4,4,4,"# ::snt Two paramaters, the array and how many columns.  array(a[],[3])
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / array)
            :op2 (c / column
                  :quant (a3 / amr-unknown)))
      :snt2 (a4 / array
            :li ""a"")
      :snt3 (a5 / array
            :li 3))"
759,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: ""MultiArray[][4][6], 2""",4,5,4.5,"# ::snt The size of the first dimension can be omitted, same as a regular array. However, for every dimension outside the first, the size of those dimensions must be specified when passed, for example, a multi-dimensional array of [2][4][6] with the name MultiArray would be passed as: ""MultiArray[][4][6], 2""
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (o / omit-01
                  :ARG1 (s / size
                        :poss (d / dimension
                              :ord (o2 / ordinal-entity
                                    :value 1)))
                  :ARG1-of (s2 / same-01
                        :ARG2 (s3 / size
                              :poss (a / array
                                    :ARG1-of (r / regular-02))))))
      :snt2 (c / contrast-01
            :ARG2 (o3 / obligate-01
                  :ARG1 (s4 / specify-01
                        :ARG1 (s5 / size
                              :poss (d2 / dimension
                                    :mod (t / that))
                              :mod (e / every)
                              :location (o4 / outside
                                    :op1 d2))
                        :time (p2 / pass-03)))
            :snt3 (e2 / exemplify-01
                  :ARG0 (p3 / pass-03
                        :ARG1 (a2 / array
                              :mod (d3 / dimension
                                    :quant (m2 / multiple))
                              :consist-of (s6 / string-entity
                                    :value ""MultiArray"")
                              :ARG1-of (n / name-01
                                    :ARG2 (s7 / string-entity
                                          :value ""MultiArray"")))))))"
760,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension,4,5,4.5,"# ::snt Size of subsequent dimensions are required. Compiler must know how many elements to skip to move to the second element in the first dimension
(m / multi-sentence
      :snt1 (r / require-01
            :ARG1 (s / size
                  :poss (d / dimension
                        :mod (s2 / subsequent))))
      :snt2 (o / obligate-01
            :ARG1 (p / person
                  :ARG0-of (c / compile-01))
            :ARG2 (k / know-01
                  :ARG0 p
                  :ARG1 (n / number
                        :quant-of (e / element
                              :ARG1-of (s3 / skip-01
                                    :purpose (m2 / move-01
                                          :ARG1 p
                                          :ARG2 (e2 / element
                                                :ord (o2 / ordinal-entity
                                                      :value 2)
                                                :part-of (d2 / dimension
                                                      :ord o2
                                                      :value 1)))))))))"
761,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",Every dimension after the first.,5,5,5,"# ::snt Every dimension after the first.
(d / dimension
      :mod (e / every)
      :time (a / after
            :op1 (f / first)))"
762,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",both,2,3,2.5,"# ::snt both
(b / both)"
763,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","the size of the first dimension does not need to be specified, but all other dimensions do.",5,5,5,"# ::snt the size of the first dimension does not need to be specified, but all other dimensions do.
(c / contrast-01
      :ARG1 (n / need-01
            :polarity -
            :ARG1 (s / specify-01
                  :ARG1 (s2 / size
                        :poss (d / dimension
                              :ord (o / ordinal-entity
                                    :value 1)))))
      :ARG2 (n2 / need-01
            :ARG1 (s3 / specify-01
                  :ARG1 (d2 / dimension
                        :mod (a / all)
                        :mod (o2 / other)))))"
764,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","when passing (in main) a multidimensional array to a function, no dimensions need be specified",1,3,2,"# ::snt when passing (in main) a multidimensional array to a function, no dimensions need be specified
(n / need-01
      :polarity -
      :ARG1 (s / specify-01
            :ARG1 (d / dimension))
      :time (p / pass-05
            :ARG1 (a / array
                  :mod (m / multidimensional))
            :ARG2 (f / function-01)
            :mod (m2 / main)))"
765,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.",5,5,5,"# ::snt All dimensions except for the first one need to be specified when passing an array to a function, the compiler needs to know how many memory addresses to skip to make it back to the 2nd element in the first dimension.  The size of the first dimension does not need to be specified.
(m / multi-sentence
      :snt1 (a / and
            :op1 (n / need-01
                  :ARG1 (s / specify-01
                        :ARG1 (d / dimension
                              :mod (a2 / all)
                              :ARG2-of (e / except-01
                                    :ARG1 (d2 / dimension
                                          :ord (o / ordinal-entity
                                                :value 1)))))
                  :time (p / pass-01
                        :ARG1 (a3 / array)
                        :ARG2 (f / function)))
            :op2 (n2 / need-01
                  :ARG0 (p2 / person
                        :ARG0-of (c / compile-01))
                  :ARG1 (k / know-01
                        :ARG0 p2
                        :ARG1 (n3 / number
                              :quant-of (a4 / address
                                    :mod (m2 / memory)
                                    :ARG1-of (s2 / skip-01
                                          :purpose (m3 / make-02
                                                :ARG0 p2
                                                :ARG1 (b / back)
                                                :destination (e2 / element
                                                      :ord o
                                                      :value 2)
                                                :part-of d2
                                                :ord o
                                                :value 1)))))))
      :snt2 (n4 / need-01
            :polarity -
            :ARG1 (s3 / specify-01
                  :ARG1 (s4 / size
                        :poss (d3 / dimension
                              :ord o
                              :value 1)))))"
766,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",as many as there are dimensions. Most commonly just rows and columns,2,5,3.5,"# ::snt as many as there are dimensions. Most commonly just rows and columns
(m / multi-sentence
      :snt1 (h / have-quant-91
            :ARG2 (m2 / many)
            :ARG3 (e / equal)
            :ARG4 (d / dimension))
      :snt2 (h2 / have-degree-91
            :ARG1 (a / and
                  :op1 (r / row)
                  :op2 (c / column)
                  :mod (j / just))
            :ARG2 (c2 / common)
            :ARG3 (m3 / most)))"
767,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.",1,5,3,"# ::snt at least 2, but it should always equal the number of dimensions that the argument is expecting... like...  blah[][][][] will require 4 dimensional array input. blah[][][] will require a 3 dimensional array. blah[][] will require a 2 dimensional array.
(m / multi-sentence
      :snt1 (h / have-concession-91
            :ARG1 (r / recommend-01
                  :ARG1 (e / equal-01
                        :ARG1 (ii / it)
                        :ARG2 (n / number
                              :quant-of (d / dimension)
                              :ARG1-of (e2 / expect-01
                                    :ARG0 (a / argue-01)))
                        :time (a2 / always))))
      :snt2 (a3 / and
            :op1 (r2 / require-01
                  :ARG0 (b / blah)
                  :ARG1 (ii2 / input
                        :mod (a4 / array
                              :quant 4
                              :mod (d2 / dimension))))
            :op2 (r3 / require-01
                  :ARG0 (b2 / blah)
                  :ARG1 (a5 / array
                        :quant 3
                        :mod d2))
            :op3 (r4 / require-01
                  :ARG0 (b3 / blah)
                  :ARG1 (a6 / array
                        :quant 2
                        :mod d2))))"
768,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","None, just pass the array name.",1,3,2,"# ::snt None, just pass the array name.
(a / and
      :op1 (n / none)
      :op2 (p / pass-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n2 / name
                  :mod (a2 / array))
            :mod (j / just)))"
769,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all subsequent dimensions after the first dimension.  first is not needed to be specified.,5,5,5,"# ::snt all subsequent dimensions after the first dimension.  first is not needed to be specified.
(m / multi-sentence
      :snt1 (d / dimension
            :mod (s / subsequent)
            :mod (a / all)
            :time (a2 / after
                  :op1 (d2 / dimension
                        :ord (o / ordinal-entity
                              :value 1))))
      :snt2 (n / need-01
            :polarity -
            :ARG1 (s2 / specify-01
                  :ARG1 (d3 / dimension
                        :ord o
                        :value 1))))"
770,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","all dimensions, excluding the first one.",5,5,5,"# ::snt all dimensions, excluding the first one.
(e / exclude-01
      :ARG1 (d / dimension
            :mod (a / all))
      :ARG2 (d2 / dimension
            :ord (o / ordinal-entity
                  :value 1)))"
771,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",all dimensions but the first,5,5,5,"# ::snt all dimensions but the first
(e / except-01
      :ARG1 (d / dimension
            :ord (o / ordinal-entity
                  :value 1))
      :mod (a / all))"
772,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][]),1,5,3,"# ::snt the first needs to be specified by size and the rest need only be stated( first like this [3] then [][][])
(m / multi-sentence
      :snt1 (a / and
            :op1 (n / need-01
                  :ARG1 (s / specify-01
                        :ARG1 (t / thing
                              :ord (o / ordinal-entity
                                    :value 1))
                        :manner (s2 / size)))
            :op2 (n2 / need-01
                  :ARG1 (s3 / state-01
                        :ARG1 (t2 / thing
                              :ARG1-of (r / rest-01))
                        :mod (o2 / only))))
      :snt2 (t3 / then
            :op2 (r2 / resemble-01
                  :ARG2 (t4 / this
                        :mod 3)
                  :ord (o3 / ordinal-entity
                        :value 1))))"
773,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",one less than the number of dimensions the array contains,4,5,4.5,"# ::snt one less than the number of dimensions the array contains
(h / have-quant-91
      :ARG1 1
      :ARG3 (l / less)
      :ARG4 (n / number
            :quant-of (d / dimension
                  :ARG1-of (c / contain-01
                        :ARG0 (a / array)))))"
774,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
775,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",one,1,3,2,"# ::snt one
(o / one)"
776,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",All subsequent dimensions after the first one.,5,5,5,"# ::snt All subsequent dimensions after the first one.
(d / dimension
      :mod (s / subsequent)
      :mod (a / all)
      :time (a2 / after
            :op1 (o / one
                  :ord (o2 / ordinal-entity
                        :value 1))))"
777,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",two or more,1,4,2.5,"# ::snt two or more
(o / or
      :op1 (a / at-least
            :op1 2)
      :op2 (m / more))"
778,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.",1 less than the total number of dimensions,4,5,4.5,"# ::snt 1 less than the total number of dimensions
(h / have-quant-91
      :ARG1 1
      :ARG3 (l / less)
      :ARG4 (n / number
            :quant-of (d / dimension)
            :ARG1-of (t / total-01)))"
779,4.5,How many dimensions need to be specified when passing a multi-dimensional array as an argument to a function?,"All the dimensions, except the first one.","Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. ",2,5,3.5,"# ::snt Multi dimensional arrays are accessed using more than 1  index, one for each dimension at least. 
(a / access-01
      :ARG1 (a2 / array
            :mod (d / dimension
                  :quant (m / multiple)))
      :manner (u / use-01
            :ARG1 (ii / index
                  :quant (m2 / more-than
                        :op1 1)
                  :ARG1-of (m3 / mean-01
                        :ARG2 (ii2 / index
                              :quant 1
                              :mod (d2 / dimension
                                    :mod (e / each))
                              :mod (a3 / at-least))))))"
780,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.",1,5,3,"# ::snt Takes an element of an array and compares it with the next element, depending on the values of the two elements they will switch and then the program will compare the new switched element with the next one in the array.
(a / and
      :op1 (t / take-01
            :ARG1 (e / element
                  :part-of (a2 / array)))
      :op2 (c / compare-01
            :ARG1 e
            :ARG2 (e2 / element
                  :mod (n / next)
                  :part-of (a3 / array))
            :ARG0-of (d / depend-01
                  :ARG1 (v / value
                        :poss (e3 / element
                              :quant 2
                              :ARG1-of (s / switch-01
                                    :ARG0 (t2 / they))))))
      :op3 (c2 / compare-01
            :ARG0 (p / program)
            :ARG1 (e4 / element
                  :ARG1-of (s2 / switch-01
                        :ARG1-of (n2 / new-01)))
            :ARG2 (e5 / element
                  :mod (n3 / next)
                  :part-of a3))
      :time (t3 / then))"
781,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.",5,5,5,"# ::snt Insertion sort divides the list into sorted and unsorted regions, then takes each item from the unsorted region and inserts it into its correct order in the sorted region.
(a / and
      :op1 (d / divide-02
            :ARG0 (s / sort-01
                  :ARG1 (ii / insert-01))
            :ARG1 (l / list)
            :ARG2 (a2 / and
                  :op1 (r / region
                        :ARG1-of (s2 / sort-01
                              :polarity -))
                  :op2 (r2 / region
                        :ARG1-of (s3 / sort-01))))
      :op2 (a3 / and
            :op1 (t / take-01
                  :ARG0 s
                  :ARG1 (ii2 / item
                        :mod (e / each))
                  :ARG2 (r3 / region
                        :ARG1-of (s4 / sort-01
                              :polarity -)))
            :op2 (ii3 / insert-01
                  :ARG0 s
                  :ARG1 ii2
                  :ARG2 (o / order
                        :ARG1-of (c / correct-02)
                        :poss ii2)
                  :location r3)
            :time (t2 / then)))"
782,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",The sorted array or list is built one entry at a time.,3,4,3.5,"# ::snt The sorted array or list is built one entry at a time.
(b / build-01
      :ARG1 (o / or
            :op1 (a / array)
            :op2 (l / list)
            :ARG1-of (s / sort-01))
      :ARG2 (e / enter-01
            :quant 1
            :ARG1-of (r / rate-entity-91
                  :ARG2 (t / time))))"
783,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.,5,5,5,"# ::snt It starts with the second element and checks it to see if it is less than the element(s) to the left of it and if it is it inserts it into its corrected position.
(a / and
      :op1 (s / start-01
            :ARG0 (ii / it)
            :ARG1 (e / element
                  :ord (o / ordinal-entity
                        :value 2)))
      :op2 (c / check-01
            :ARG0 ii
            :ARG1 e
            :purpose (s2 / see-01
                  :ARG0 ii
                  :ARG1 (h / have-quant-91
                        :ARG1 e
                        :ARG3 (l / less)
                        :ARG4 (e2 / element
                              :location (r / relative-position
                                    :op1 ii
                                    :direction (l2 / left-19))))))
      :op3 (ii2 / insert-01
            :ARG0 ii
            :ARG1 e
            :ARG2 (p / position-01
                  :ARG1 e
                  :ARG1-of (c2 / correct-01))
            :condition (h2 / have-polarity-91
                  :ARG1 e
                  :ARG2 -)))"
784,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Compare two numbers at a time and swap until the entire list is sorted.,1,3,2,"# ::snt Compare two numbers at a time and swap until the entire list is sorted.
(a / and
      :op1 (c / compare-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / number
                  :quant 2
                  :mod (a2 / at-a-time)))
      :op2 (s / swap-01
            :mode imperative
            :ARG0 y
            :time (u / until
                  :op1 (s2 / sort-01
                        :ARG1 (l / list
                              :mod (e / entire))))))"
785,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.",5,5,5,"# ::snt Assume the first number is sorted, then move down the list and 'insert' the numbers you come across into the corresponding place on the sorted side of the list.
(a / and
      :op1 (a2 / assume-02
            :ARG1 (s / sort-01
                  :ARG1 (n / number
                        :ord (o / ordinal-entity
                              :value 1))))
      :op2 (m / move-01
            :ARG1 (y / you)
            :ARG2 (d / down
                  :op1 (l / list)))
      :op3 (ii / insert-01
            :ARG0 y
            :ARG1 (n2 / number
                  :ARG1-of (c / come-across-21
                        :ARG2 y))
            :ARG2 (p / place
                  :ARG1-of (c2 / correspond-01)
                  :location (s2 / side
                        :ARG1-of (s3 / sort-01))))
      :time (t / then))"
786,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.,5,4,4.5,"# ::snt insertion sort is were after k iterations the first k items in the array are sorted it take the k+1 item and inserts it into the correct position in the already sorted k elements.
(s / sort-01
      :ARG1 (ii / insert-01)
      :condition (a / and
            :op1 (t / take-01
                  :ARG0 (ii2 / iterate-01
                        :ARG1 (ii3 / item
                              :quant 1
                              :quant 1
                              :part-of (a2 / array)))
                  :ARG1 (ii4 / item
                        :quant 1
                        :quant 1))
            :op2 (ii5 / insert-01
                  :ARG0 ii2
                  :ARG1 ii3
                  :ARG2 (p / position-01
                        :ARG1 ii3
                        :ARG2 (e / element
                              :quant 1
                              :ARG1-of (s2 / sort-01
                                    :time (a3 / already)))
                        :ARG1-of (c / correct-02)))))"
787,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Looking at the 2nd element move forward and place the element in the correct spot.,4,5,4.5,"# ::snt Looking at the 2nd element move forward and place the element in the correct spot.
(a / and
      :op1 (m / move-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / look-01
                  :ARG0 y
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 2)))
            :direction (f / forward))
      :op2 (p / place-01
            :mode imperative
            :ARG0 y
            :ARG1 e
            :ARG2 (s / spot
                  :ARG1-of (c / correct-02))))"
788,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. ",5,5,5,"# ::snt Starting at the beginning of an array, take each element in order and place it in it's correct position relative to all previously sorted elements. 
(a / and
      :op1 (t / take-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element
                  :mod (e2 / each))
            :manner (o / order))
      :op2 (p / place-01
            :mode imperative
            :ARG0 y
            :ARG1 e
            :ARG2 (p2 / position-01
                  :ARG1 e
                  :ARG1-of (c / correct-02)
                  :ARG1-of (r / relative-05
                        :ARG2 (e3 / element
                              :ARG1-of (s / sort-01
                                    :time (p3 / previous))
                              :mod (a2 / all)))))
      :ARG1-of (s2 / start-01
            :time (b / begin-01
                  :ARG1 (a3 / array))))"
789,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",To sort the elements in an array by removing an element from the input data and inserting it at the correct position.,5,5,5,"# ::snt To sort the elements in an array by removing an element from the input data and inserting it at the correct position.
(s / sort-01
      :ARG1 (e / element
            :location (a / array))
      :manner (a2 / and
            :op1 (r / remove-01
                  :ARG1 e
                  :ARG2 (d / data
                        :ARG1-of (ii / input-01)))
            :op2 (ii2 / insert-01
                  :ARG1 e
                  :ARG2 (p / position
                        :ARG1-of (c / correct-02)))))"
790,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.",5,5,5,"# ::snt Insertion sort removes an element from the data, and inserts it at the correct position in the already sorted list.
(a / and
      :op1 (r / remove-01
            :ARG0 (s / sort-01
                  :ARG1 (ii / insert-01))
            :ARG1 (e / element)
            :ARG2 (d / data))
      :op2 (ii2 / insert-01
            :ARG0 s
            :ARG1 e
            :ARG2 (p / position
                  :ARG1-of (c / correct-02)
                  :location (l / list
                        :ARG1-of (s2 / sort-01
                              :time (a2 / already))))))"
791,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Take a number and choose a pivot point and insert the number in the correct position from the pivot point.,2,4,3,"# ::snt Take a number and choose a pivot point and insert the number in the correct position from the pivot point.
(a / and
      :op1 (t / take-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / number))
      :op2 (c / choose-01
            :mode imperative
            :ARG0 y
            :ARG1 (p / point
                  :mod (p2 / pivot)))
      :op3 (ii / insert-01
            :mode imperative
            :ARG0 y
            :ARG1 n
            :ARG2 (p3 / position-01
                  :ARG1 n
                  :ARG2 p
                  :ARG1-of (c2 / correct-02))))"
792,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",have a marker and sort everything to the left of the value for every new value when moving to the right.,3,3,3,"# ::snt have a marker and sort everything to the left of the value for every new value when moving to the right.
(a / and
      :op1 (h / have-03
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (m / marker))
      :op2 (s / sort-01
            :mode imperative
            :ARG0 y
            :ARG1 (e / everything
                  :location (r / relative-position
                        :op1 (v / value)
                        :direction (l / left)))
            :purpose (v2 / value
                  :ARG1-of (n / new-01)
                  :mod (e2 / every))
            :time (m2 / move-01
                  :ARG2 (r2 / right-08))))"
793,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.,4,5,4.5,"# ::snt The main idea behind insertion sort is to take a random variable from the right and insert it in order to the left.
(ii / idea
      :mod (m / main)
      :location (b / behind
            :op1 (s / sort-01
                  :ARG1 (ii2 / insert-01)))
      :domain (a / and
            :op1 (t / take-01
                  :ARG1 (v / variable
                        :ARG1-of (r / random-02))
                  :ARG2 (r2 / right-08))
            :op2 (ii3 / insert-01
                  :ARG1 v
                  :direction (l / left-19))))"
794,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.,5,4,4.5,"# ::snt Insertion sort progresses through a list of elements and determines where the next element should be inserted into an already sorted array starting with sorting and using the first two elements.
(a / and
      :op1 (p / progress-01
            :ARG1 (s / sort-01
                  :ARG1 (ii / insert-01))
            :path (t / through
                  :op1 (l / list
                        :consist-of (e / element))))
      :op2 (d / determine-01
            :ARG0 s
            :ARG1 (l2 / location
                  :location-of (r / recommend-01
                        :ARG1 (ii2 / insert-01
                              :ARG1 (e2 / element
                                    :mod (n / next))
                              :ARG2 (a2 / array
                                    :ARG1-of (s2 / sort-01
                                          :time (a3 / already)))
                              :ARG1-of (s3 / start-01
                                    :ARG2 (a4 / and
                                          :op1 (s4 / sort-01)
                                          :op2 (u / use-01
                                                :ARG1 (e3 / element
                                                      :quant 2
                                                      :ord (o / ordinal-entity
                                                            :value 1))))))))))"
795,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it goes through the list only once, picking each integer and putting it in its desired position, then continuing. ",4,4,4,"# ::snt it goes through the list only once, picking each integer and putting it in its desired position, then continuing. 
(g / go-through-20
      :ARG0 (ii / it)
      :ARG1 (l / list)
      :frequency (r / rate-entity-91
            :ARG3 1
            :mod (o / only))
      :manner (a / and
            :op1 (p / pick-01
                  :ARG0 ii
                  :ARG1 (ii2 / integer
                        :mod (e / each)))
            :op2 (p2 / put-01
                  :ARG0 ii
                  :ARG1 ii2
                  :ARG2 (p3 / position
                        :ARG1-of (d / desire-01
                              :ARG0 ii2)))
            :op3 (c / continue-01
                  :ARG0 ii
                  :time (t / then))))"
796,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.,3,4,3.5,"# ::snt Inserting array items in to their appropriate positions from smallest to largest at a pivot which starts on the second element of the array.
(ii / insert-01
      :ARG1 (ii2 / item
            :part-of (a / array))
      :ARG2 (p / position-01
            :ARG1 ii2
            :ARG2 p
            :ARG1 ii2
            :ARG2 (h / have-degree-91
                  :ARG1 ii2
                  :ARG2 (s / small)
                  :ARG3 (m / most))
            :ARG4 (h2 / have-degree-91
                  :ARG1 ii2
                  :ARG2 (l / large)
                  :ARG3 (m2 / most)))
      :ARG1-of (a2 / appropriate-02)
      :location (p2 / pivot
            :ARG1-of (s2 / start-01
                  :location (e / element
                        :ord (o / ordinal-entity
                              :value 2)
                        :part-of (a3 / array)))))"
797,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",Insert the item into its proper position by shifting larger sorted array values to the right.,1,5,3,"# ::snt Insert the item into its proper position by shifting larger sorted array values to the right.
(ii / insert-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (ii2 / item)
      :ARG2 (p / position-01
            :ARG1 ii2
            :mod (p2 / proper))
      :manner (s / shift-01
            :ARG0 y
            :ARG1 (v / value
                  :mod (a / array)
                  :ARG1-of (s2 / sort-01)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / more)))
            :ARG2 (r / right-06)))"
798,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",a comparison sort in which the sorted array is built one entry at a time,4,4,4,"# ::snt a comparison sort in which the sorted array is built one entry at a time
(s / sort-01
      :mod (c / compare-01)
      :manner-of (b / build-01
            :ARG1 (a / array
                  :ARG1-of s))
      :manner (e / enter-01
            :quant 1
            :ARG1-of (a2 / at-a-time)))"
799,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.",5,4,4.5,"# ::snt Insertion sort is an algorithm where the first element of the array is in the sorted list, all the other pick one by one and taken from the unsorted array, to the sorted array.
(a / algorithm
      :domain (s / sort-01
            :ARG1 (ii / insert-01))
      :condition (a2 / and
            :op1 (b / be-located-at-91
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (a3 / array))
                  :ARG2 (l / list
                        :ARG1-of (s2 / sort-01)))
            :op2 (p / pick-01
                  :ARG1 (o2 / other
                        :mod (a4 / all))
                  :manner (o3 / one-by-one))
            :op3 (t / take-01
                  :ARG1 o2
                  :ARG2 (a5 / array
                        :ARG1-of (s3 / sort-01
                              :polarity -))
                  :destination a5)))"
800,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.",5,5,5,"# ::snt Every iteration of an insertion sort takes away an element from the input data, inserting it at the right position in the sorted list.
(a / and
      :op1 (t / take-away-05
            :ARG0 (ii / iteration
                  :mod (e / every)
                  :mod (s / sort-01
                        :ARG1 (ii2 / insert-01)))
            :ARG1 (e2 / element)
            :ARG2 (d / data
                  :ARG1-of (ii3 / input-01)))
      :op2 (ii4 / insert-01
            :ARG0 ii
            :ARG1 e2
            :ARG2 (p / position-01
                  :ARG1 e2
                  :ARG2 (l / list
                        :ARG1-of (s2 / sort-01))
                  :ARG1-of (r / right-03))))"
801,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",the insertion sort creates a new array and inserts each item in its place with respect to the new array.,4,4,4,"# ::snt the insertion sort creates a new array and inserts each item in its place with respect to the new array.
(a / and
      :op1 (c / create-01
            :ARG0 (s / sort-01
                  :ARG1 (ii / insert-01))
            :ARG1 (a2 / array
                  :ARG1-of (n / new-01)))
      :op2 (ii2 / insert-01
            :ARG0 s
            :ARG1 (ii3 / item
                  :mod (e / each))
            :ARG2 (p / place-01
                  :ARG1 ii3
                  :ARG2 a2)))"
802,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.",5,5,5,"# ::snt Insertion sort takes each entitity of an unsorted array in order, and sorts it into the correct position between the entities it has sorted.
(a / and
      :op1 (t / take-01
            :ARG0 (s / sort-01
                  :ARG1 (a2 / array
                        :ARG1-of (s2 / sort-01
                              :polarity -))
                  :mod (ii / insert-01))
            :ARG1 (e / entity
                  :mod (e2 / each)
                  :part-of a2)
            :manner (o / order))
      :op2 (s3 / sort-01
            :ARG0 s
            :ARG1 a2
            :ARG2 (p / position-01
                  :ARG1 a2
                  :ARG2 (b / between
                        :op1 (e3 / entity
                              :ARG1-of s2
                              :ARG0 s)))
            :ARG1-of (c / correct-02)))"
803,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... ",5,5,5,"# ::snt it takes the second element and swaps it with the 1st if it is less and keeps it there if its larger, then it goes to the third element and inserts it in the right places with respect to the first 2 elements and so on... 
(a / and
      :op1 (a2 / and
            :op1 (t / take-01
                  :ARG0 (ii / it)
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 2)))
            :op2 (s / swap-01
                  :ARG0 ii
                  :ARG1 e
                  :ARG2 (e2 / element
                        :ord (o2 / ordinal-entity
                              :value 1))
                  :condition (h / have-quant-91
                        :ARG1 e
                        :ARG3 (l / less)))
            :op3 (k / keep-01
                  :ARG0 ii
                  :ARG1 e2
                  :location (t2 / there)
                  :condition (h2 / have-degree-91
                        :ARG1 e2
                        :ARG2 (l2 / large)
                        :ARG3 (m / more))))
      :op4 (a3 / and
            :op1 (g / go-02
                  :ARG0 ii
                  :ARG4 (e3 / element
                        :ord o2
                        :value 3)))
      :op2 (ii2 / insert-01
            :ARG0 ii
            :ARG1 e3
            :ARG2 (p / place
                  :ARG1-of (r / right-02)
                  :topic (e4 / element
                        :quant 2
                        :ord (o3 / ordinal-entity
                              :value 1))))
      :op3 (e5 / et-cetera))"
804,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.",3,5,4,"# ::snt Starting with the first element in the array, each following element is put in place by determining if it is smaller or larger than the starting element.
(p / put-01
      :ARG1 (e / element
            :ARG1-of (f / follow-01)
            :mod (e2 / each))
      :ARG2 (ii / in-place)
      :manner (d / determine-01
            :ARG1 (o / or
                  :op1 (h / have-degree-91
                        :ARG1 e
                        :ARG2 (s / small)
                        :ARG3 (m / more)
                        :ARG4 (e3 / element
                              :ARG0-of (s2 / start-01)))
                  :op2 (h2 / have-degree-91
                        :ARG1 e3
                        :ARG2 (l / large)
                        :ARG3 (m2 / more)
                        :ARG4 e3)))
      :ARG1-of (s3 / start-01
            :ARG2 e3))"
805,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items",5,4,4.5,"# ::snt one by one, each item is taken and placed into the correct place in the sorted portion of the array until there are no more items
(a / and
      :op1 (t / take-01
            :ARG1 (ii / item
                  :mod (e / each)))
      :op2 (p / place-01
            :ARG1 ii
            :ARG2 (p2 / place
                  :ARG1-of (c / correct-02)
                  :location (p3 / portion
                        :ARG1-of (s / sort-01)
                        :part-of (a2 / array))))
      :time (u / until
            :op1 (ii2 / item
                  :quant (m / more
                        :polarity -)))
      :manner (o / one-by-one))"
806,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.",you take each element and insert it in the correct position with respect to all the elements before it,5,5,5,"# ::snt you take each element and insert it in the correct position with respect to all the elements before it
(a / and
      :op1 (t / take-01
            :ARG0 (y / you)
            :ARG1 (e / element
                  :mod (e2 / each)))
      :op2 (ii / insert-01
            :ARG0 y
            :ARG1 e
            :ARG2 (p / position-01
                  :ARG1 e
                  :ARG1-of (c / correct-02)
                  :ARG1-of (r / respect-01
                        :ARG2 (e3 / element
                              :mod (a2 / all)
                              :time (b / before
                                    :op1 e))))))"
807,5.1,"In one sentence, what is the main idea implemented by insertion sort?","Taking one array element at a time, from left to right, it inserts it in the right position among the already sorted elements on its left.","Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.",4,4,4,"# ::snt Insertion sort is a simple sorting algorithm, a comparison sort in which the sorted array (or list) is built one entry at a time.
(s / sort-01
      :ARG1 (ii / insert-01)
      :ARG1-of (m / mean-01
            :ARG2 (a / algorithm
                  :ARG1-of (s2 / simple-02)
                  :ARG0-of (s3 / sort-01)
                  :ARG1-of m
                  :ARG2 (s4 / sort-01
                        :ARG1-of (c / compare-01)
                        :manner-of (b / build-01
                              :ARG1 (o / or
                                    :op1 (a2 / array
                                          :ARG1-of s4))
                              :op2 (l / list
                                    :ARG1-of (s5 / sort-01)))
                        :quant (e / entry
                              :quant 1
                              :ARG1-of (r / rate-entity-91
                                    :ARG2 (t / temporal-quantity
                                          :quant 1
                                          :unit (y / year))))))))"
808,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front,5,5,5,"# ::snt Searches an array for the largest or the smallest element and is moved out to the front of the array then it will search for the next largest or the smallest element to move out to the front
(a / and
      :op1 (s / search-01
            :ARG0 (ii / it)
            :ARG1 (a2 / array)
            :ARG2 (o / or
                  :op1 (e / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / large)
                              :ARG3 (m / most)))
                  :op2 (e2 / element
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m2 / most)))))
      :op2 (m3 / move-01
            :ARG1 e2
            :ARG2 (f / front
                  :part-of a2))
      :direction (o2 / out)
      :time (t / then))"
809,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.",5,4,4.5,"# ::snt Selection sort searches the whole array for the largest item and puts it at the end of the array, then searches for the second largest item and puts it at the second to last spot and so on.
(a / and
      :op1 (a2 / and
            :op1 (s / search-01
                  :ARG0 (s2 / sort-01
                        :ARG1 (s3 / select-01))
                  :ARG1 (a3 / array
                        :mod (w / whole))
                  :ARG2 (ii / item
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / large)
                              :ARG3 (m / most))))
            :op2 (p / put-01
                  :ARG0 s2
                  :ARG1 ii
                  :ARG2 (e / end
                        :part-of (a4 / array))))
      :op3 (a5 / and
            :op1 (s4 / search-01
                  :ARG0 s2
                  :ARG1 (ii2 / item
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l2 / large)
                              :ARG3 (m2 / most)
                              :ARG5 (ii3 / item
                                    :ord (o / ordinal-entity
                                          :value 2)))))
            :op2 (p2 / put-01
                  :ARG0 s2
                  :ARG1 ii3
                  :ARG2 (s5 / spot
                        :ord (o2 / ordinal-entity
                              :value ""-1"")))
            :op3 (e2 / et-cetera)))"
810,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Finds the minimum value and swap it with the value in the first position.,5,5,5,"# ::snt Finds the minimum value and swap it with the value in the first position.
(a / and
      :op1 (f / find-01
            :ARG1 (v / value
                  :mod (m / minimum)))
      :op2 (s / swap-01
            :ARG1 v
            :ARG2 (v2 / value
                  :location (p / position
                        :ord (o / ordinal-entity
                              :value 1)))))"
811,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.,5,5,5,"# ::snt It finds the minimum element in the array and swaps it with the first element then repeats this step swapping the minimum element with nth positions in the array.
(a / and
      :op1 (f / find-01
            :ARG0 (ii / it)
            :ARG1 (e / element
                  :mod (m / minimum)
                  :location (a2 / array)))
      :op2 (s / swap-01
            :ARG0 ii
            :ARG1 e
            :ARG2 (e2 / element
                  :ord (o / ordinal-entity
                        :value 1)))
      :op3 (r / repeat-01
            :ARG0 ii
            :ARG1 (s2 / step
                  :mod (t / this))
            :ARG2 (s3 / swap-01
                  :ARG0 ii
                  :ARG1 e2
                  :ARG2 (p / position
                        :quant (n / nth
                              :location a2)))
            :time (t2 / then)))"
812,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.",4,5,4.5,"# ::snt Find the lowest value and place it at the front, then find the next lowest and place it in front of the last value, etc.
(a / and
      :op1 (a2 / and
            :op1 (f / find-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / low-04
                                    :ARG1 v)
                              :ARG3 (m / most))))
            :op2 (p / place-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 v
                  :ARG2 (f2 / front)))
      :op2 (a3 / and
            :op1 (f3 / find-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (v2 / value
                        :mod (n / next)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l2 / low-04
                                    :ARG1 v2)
                              :ARG3 (m2 / most))))
            :op2 (p2 / place-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 v2
                  :ARG2 (ii / in-front-of
                        :op1 (v3 / value
                              :mod (l3 / last))))
            :op3 (e / et-cetera)))"
813,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.",5,4,4.5,"# ::snt Cycle through the unsorted list, place the minimum in the next slot in the sorted list, and repeat.
(a / and
      :op1 (c / cycle-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / list
                  :ARG1-of (s / sort-01
                        :polarity -)))
      :op2 (p / place-01
            :mode imperative
            :ARG0 y
            :ARG1 (m / minimum)
            :ARG2 (s2 / slot
                  :mod (n / next)
                  :part-of (l2 / list
                        :ARG1-of (s3 / sort-01))))
      :op3 (r / repeat-01
            :mode imperative
            :ARG0 y))"
814,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.,5,5,5,"# ::snt find the minimum value in the list swap it with the first element in the list the find the second largest and swap it with the second element in the array continue like this until  the array is sorted.
(a / and
      :op1 (f / find-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (v / value
                  :mod (m / minimum)
                  :location (l / list)))
      :op2 (s / swap-01
            :mode imperative
            :ARG0 y
            :ARG1 v
            :ARG2 (e / element
                  :ord (o / ordinal-entity
                        :value 1)
                  :part-of (l2 / list)))
      :op3 (a2 / and
            :op1 (f2 / find-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (e2 / element
                        :ord (o2 / ordinal-entity
                              :value 2)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l3 / large)
                              :ARG3 (m2 / most))))
            :op2 (s2 / swap-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (v2 / value
                        :ARG2 (e3 / element
                              :ord (o3 / ordinal-entity
                                    :value 2)
                              :part-of (a3 / array))))
            :ARG1-of (c / continue-01
                  :ARG1-of (r / resemble-01
                        :ARG2 (t / this))
                  :time (u / until
                        :op1 (s3 / sort-01
                              :ARG1 (a4 / array))))))"
815,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the smallest and put it in the current position till you get to the end.,5,5,5,"# ::snt Find the smallest and put it in the current position till you get to the end.
(a / and
      :op1 (f / find-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (t / thing
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m / most))))
      :op2 (p / put-01
            :mode imperative
            :ARG0 y
            :ARG1 t
            :ARG2 (p2 / position
                  :time (c / current))
            :time (u / until
                  :op1 (g / get-05
                        :ARG1 y
                        :ARG2 (e / end)))))"
816,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the ""current"" position by one. ",5,5,5,"# ::snt Find the lowest unsorted value in the array and place it at the current position (starting at the first element in the array) and advance the ""current"" position by one. 
(a / and
      :op1 (f / find-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (v / value
                  :ARG1-of (s / sort-01
                        :polarity -)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / low-04
                              :ARG1 v)
                        :ARG3 (m / most))
                  :location (a2 / array)))
      :op2 (p / place-01
            :mode imperative
            :ARG0 y
            :ARG1 v
            :ARG2 (p2 / position
                  :time (c / current)
                  :ARG1-of (s2 / start-01
                        :ARG2 (e / element
                              :ord (o / ordinal-entity
                                    :value 1)
                              :part-of (a3 / array)))))
      :op3 (a4 / advance-01
            :mode imperative
            :ARG0 y
            :ARG1 (p3 / position
                  :time (c2 / current))
            :ARG2 (o2 / one)))"
817,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.,2,5,3.5,"# ::snt To sort the elements by comparing two elements and swapping the smaller one to sort the elements in the array.
(s / sort-01
      :ARG1 (e / element)
      :manner (a / and
            :op1 (c / compare-01
                  :ARG1 (e2 / element
                        :quant 2))
            :op2 (s2 / swap-01
                  :ARG1 (e3 / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s3 / small)
                              :ARG3 (m / more)))
                  :purpose (s4 / sort-01
                        :ARG1 (e4 / element
                              :location (a2 / array))))))"
818,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.",5,4,4.5,"# ::snt Selection sort finds the minimum value in the list, swaps it with the first value in the list, and repeats throughout the list.
(a / and
      :op1 (f / find-01
            :ARG0 (s / sort-01
                  :ARG1 (s2 / select-01))
            :ARG1 (v / value
                  :mod (m / minimum)
                  :location (l / list)))
      :op2 (s3 / swap-01
            :ARG0 s
            :ARG1 v
            :ARG2 (v2 / value
                  :ord (o / ordinal-entity
                        :value 1)
                  :location (l2 / list)))
      :op3 (r / repeat-01
            :ARG0 s
            :location (t / throughout
                  :op1 (l3 / list))))"
819,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Select the minimum number from the array and put it in the current position, then move on",5,5,5,"# ::snt Select the minimum number from the array and put it in the current position, then move on
(a / and
      :op1 (s / select-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / number
                  :mod (m / minimum))
            :ARG2 (a2 / array))
      :op2 (p / put-01
            :mode imperative
            :ARG0 y
            :ARG1 n
            :ARG2 (p2 / position
                  :time (c / current)))
      :op3 (m2 / move-01
            :mode imperative
            :ARG0 y
            :ARG2 (o / on)
            :time (t / then)))"
820,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.,5,5,5,"# ::snt Find the lowest value and place it in the front of the list and swap it with that value. Continue moving right.
(m / multi-sentence
      :snt1 (a / and
            :op1 (f / find-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / low-04
                                    :ARG1 v)
                              :ARG3 (m2 / most))))
            :op2 (p / place-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 v
                  :ARG2 (f2 / front
                        :part-of (l2 / list)))
            :op3 (s / swap-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 v
                  :ARG2 (v2 / value
                        :mod (t / that))))
      :snt2 (c / continue-01
            :mode imperative
            :ARG0 y)
      :ARG1 (m3 / move-01
            :ARG0 y
            :ARG1-of (r / right-06)))"
821,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",The main idea behind selection sort is to take the least variable from the right and put it directly to the left.,5,4,4.5,"# ::snt The main idea behind selection sort is to take the least variable from the right and put it directly to the left.
(ii / idea
      :mod (m / main)
      :topic (s / sort-01
            :ARG1 (s2 / select-01))
      :domain (a / and
            :op1 (t / take-01
                  :ARG1 (v / variable
                        :ARG1-of (h / have-quant-91
                              :ARG3 (l / least)))
                  :ARG2 (r / right-08))
            :op2 (p / put-01
                  :ARG1 (ii2 / it)
                  :ARG2 (l2 / left-19)
                  :ARG1-of (d / direct-02))))"
822,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.",5,5,5,"# ::snt Find the smallest value in the list and make it the first element, then find the smallest value of the leftover list and make it the first element of the leftover list and continue until the list is sorted.
(a / and
      :op1 (a2 / and
            :op1 (f / find-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m / most))
                        :part-of (l / list)))
            :op2 (m2 / make-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 v
                  :ARG2 (e / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (l2 / list
                              :mod (l3 / leftover)))))
      :op2 (a3 / and
            :op1 (f2 / find-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (v2 / value
                        :time (t / then))
                  :op2 (m3 / make-02
                        :mode imperative
                        :ARG0 y
                        :ARG1 v2
                        :ARG2 (e2 / element)
                        :op3 (c / continue-01
                              :mode imperative
                              :ARG0 y
                              :time (u / until
                                    :op1 (s2 / sort-01
                                          :ARG1 l2)))))))"
823,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",It runs through and finds the lowest (or highest) value and puts it in its desired position.,5,4,4.5,"# ::snt It runs through and finds the lowest (or highest) value and puts it in its desired position.
(a / and
      :op1 (r / run-02
            :ARG0 (ii / it))
      :op2 (f / find-01
            :ARG0 ii
            :ARG1 (o / or
                  :op1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / low-04
                                    :ARG1 v)
                              :ARG3 (m / most)))
                  :op2 (v2 / value
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (h3 / high-02
                                    :ARG1 v2)
                              :ARG3 (m2 / most)))))
      :op2 (p / put-01
            :ARG0 ii
            :ARG1 v
            :ARG2 (p2 / position-01
                  :ARG1 ii
                  :ARG1-of (d / desire-01
                        :ARG0 ii))))"
824,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.",5,5,5,"# ::snt Places the smallest item in the list at position 1, and then proceeds to each value until the last position of the ray is reached.
(a / and
      :op1 (p / place-01
            :ARG1 (ii / item
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m / most)))
            :ARG2 (p2 / position
                  :ord (o / ordinal-entity
                        :value 1))
            :ARG2 (l / list))
      :op2 (p3 / proceed-01
            :ARG2 (v / value
                  :mod (e / each))
            :time (t / then)
            :time (u / until
                  :op1 (r / reach-01
                        :ARG1 (p4 / position
                              :mod (l2 / last)
                              :poss (r2 / ray))))))"
825,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Search for the largest item in an array and swap it with the last unsorted item.,5,4,4.5,"# ::snt Search for the largest item in an array and swap it with the last unsorted item.
(a / and
      :op1 (s / search-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / item
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / most))
                  :part-of (a2 / array)))
      :op2 (s2 / swap-01
            :mode imperative
            :ARG0 y
            :ARG1 ii
            :ARG2 (ii2 / item
                  :ARG1-of (s3 / sort-01
                        :polarity -
                        :mod (l2 / last)))))"
826,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.,5,5,5,"# ::snt finds the smallest element and places in 1st position. then the process is repeated on the rest of the array.
(m / multi-sentence
      :snt1 (a / and
            :op1 (f / find-01
                  :ARG1 (e / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m2 / most))))
            :op2 (p / place-01
                  :ARG1 e
                  :ARG2 (p2 / position
                        :ord (o / ordinal-entity
                              :value 1))))
      :snt2 (r / repeat-01
            :ARG1 (p3 / process-02)
            :location (r2 / rest
                  :part-of (a2 / array))
            :time (t / then)))"
827,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted,5,4,4.5,"# ::snt Selection sort is an algorithm that selects the larges item the array and puts it in its place; then select the next largest until the array is sorted
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / select-01
                  :ARG0 (a2 / algorithm)
                  :ARG1 (ii / item
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / large)
                              :ARG3 (m2 / most))
                        :part-of (a3 / array)))
            :op2 (p / put-01
                  :ARG0 a2
                  :ARG1 ii
                  :ARG2 (p2 / place-01
                        :ARG0 ii
                        :ARG1 ii)))
      :snt2 (s2 / select-01
            :ARG0 a2
            :ARG1 (ii2 / item
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (l2 / large)
                        :ARG3 (m3 / most)))
            :time (t / then)
            :time (u / until
                  :op1 (s3 / sort-01
                        :ARG1 (a4 / array)))))"
828,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Select the smallest number in the list and move it to the front of the list and then advance to the next number.,5,5,5,"# ::snt Select the smallest number in the list and move it to the front of the list and then advance to the next number.
(a / and
      :op1 (s / select-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / number
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s2 / small)
                        :ARG3 (m / most)
                        :ARG5 (n2 / number
                              :location (l / list)))))
      :op2 (m2 / move-01
            :mode imperative
            :ARG0 y
            :ARG1 n
            :ARG2 (f / front
                  :part-of l))
      :op3 (a2 / advance-01
            :mode imperative
            :ARG0 y
            :ARG2 (n3 / number
                  :mod (n4 / next))
            :time (t / then)))"
829,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.,5,4,4.5,"# ::snt the selection sort chooses the largest or smallest value in an unsorted list and creates a new list using the selection depending on how it is sorted.
(a / and
      :op1 (c / choose-01
            :ARG0 (s / sort-01
                  :ARG1 (s2 / select-01))
            :ARG1 (o / or
                  :op1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / large)
                              :ARG3 (m / most)))
                  :op2 (v2 / value
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s3 / small)
                              :ARG3 (m2 / most)))
                  :part-of (l2 / list
                        :ARG1-of (s4 / sort-01
                              :polarity -))))
      :op2 (c2 / create-01
            :ARG0 s
            :ARG1 (l3 / list
                  :ARG1-of (n / new-01))
            :manner (u / use-01
                  :ARG0 s)
            :ARG0-of (d / depend-01
                  :ARG1 (t / thing
                        :manner-of (s5 / sort-01
                              :ARG1 l3)))))"
830,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted",4,5,4.5,"# ::snt Selection sort finds the smallest number left unsorted in an array, and puts it at the end of what it has sorted
(a / and
      :op1 (f / find-01
            :ARG0 (s / sort-01
                  :ARG1 (s2 / select-01))
            :ARG1 (n / number
                  :ARG1-of (s3 / sort-01
                        :polarity -)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s4 / small)
                        :ARG3 (m / most)))
            :location (a2 / array))
      :op2 (p / put-01
            :ARG0 s
            :ARG1 n
            :ARG2 (e / end
                  :part-of (t / thing
                        :ARG1-of (s5 / sort-01
                              :ARG0 s)))))"
831,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position",5,5,5,"# ::snt selects the minimum from the remaining elements of the array, and palces the miminum in the current position and moves to the next position
(a / and
      :op1 (s / select-01
            :ARG1 (m / minimum)
            :ARG2 (e / element
                  :ARG1-of (r / remain-01)
                  :part-of (a2 / array)))
      :op2 (p / palce-01
            :ARG1 (m2 / miminum)
            :location (p2 / position
                  :time (c / current)))
      :op3 (m3 / move-01
            :ARG1 m2
            :ARG2 (p3 / position
                  :mod (n / next))))"
832,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","To put the biggest element at the end of the list and place the next highest element behind it, and so on.",3,4,3.5,"# ::snt To put the biggest element at the end of the list and place the next highest element behind it, and so on.
(a / and
      :op1 (a2 / and
            :op1 (p / put-01
                  :ARG1 (e / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (b / big)
                              :ARG3 (m / most)))
                  :ARG2 (e2 / end-01
                        :ARG1 (l / list)))
            :op2 (p2 / place-01
                  :ARG1 (e3 / element
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (h3 / high-02
                                    :ARG1 e3)
                              :ARG3 (m2 / most))
                        :location (b2 / behind
                              :op1 e2)))
            :op3 (e4 / et-cetera)))"
833,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array",5,4,4.5,"# ::snt the sort finds the largest item and places it at the end, then then next largest is found and placed next to last, continue until there is only one number left, this is the beginning of the sorted array
(a / and
      :op1 (a2 / and
            :op1 (f / find-01
                  :ARG0 (s / sort-01)
                  :ARG1 (ii / item
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / large)
                              :ARG3 (m / most))))
            :op2 (p / place-01
                  :ARG0 s
                  :ARG1 ii
                  :ARG2 (e / end)))
      :op2 (a3 / and
            :op1 (f2 / find-01
                  :ARG0 s
                  :ARG1 ii
                  :mod (n / next))
            :op2 (p2 / place-01
                  :ARG0 s
                  :ARG1 ii
                  :ARG2 (n2 / next
                        :op1 (l2 / last)))
            :time (t / then))
      :op3 (c / continue-01
            :ARG0 s
            :time (u / until
                  :op1 (l3 / leave-17
                        :ARG1 (n3 / number
                              :quant 1
                              :mod (o / only)))))
      :op4 (b / begin-01
            :ARG1 (a4 / array
                  :ARG1-of s))
      :domain (t2 / this))"
834,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.","you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.",5,5,5,"# ::snt you loop through the entire list, and for each iteration you find the smallest element and move it to the current position.
(a / and
      :op1 (l / loop-01
            :ARG0 (y / you)
            :ARG1 (l2 / list
                  :mod (e / entire)))
      :op2 (a2 / and
            :op1 (f / find-01
                  :ARG0 y
                  :ARG1 (e2 / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m / most))))
            :op2 (m2 / move-01
                  :ARG0 y
                  :ARG1 e2
                  :ARG2 (p / position
                        :time (c / current)))
            :time (ii / iterate-01
                  :mod (e3 / each))))"
835,5.2,"In one sentence, what is the main idea implemented by selection sort?","Taking one array element at a time, from left to right, it identifies the minimum from the remaining elements and swaps it with the current element.",Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.,5,5,5,"# ::snt Find the minimum value in the list swap it with the value in the first position; repeat the steps above for remainder of the list(starting in the second position.
(m / multi-sentence
      :snt1 (f / find-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (v / value
                  :mod (m2 / minimum)
                  :location (l / list)))
      :snt2 (s / swap-01
            :mode imperative
            :ARG0 y
            :ARG1 v
            :ARG2 (v2 / value
                  :location (p / position
                        :ord (o / ordinal-entity
                              :value 1))))
      :snt3 (r / repeat-01
            :mode imperative
            :ARG0 y
            :ARG1 (s2 / step
                  :location (a / above))
            :purpose (r2 / remainder
                  :part-of (l2 / list)
                  :ARG1-of (s3 / start-01
                        :location (p2 / position
                              :ord (o2 / ordinal-entity
                                    :value 2))))))"
836,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. ",4,3,3.5,"# ::snt The run time for this sorting program is n^2.  Best case is the list is already sorted, worst case is the list is sorted but in reverse. 
(m / multi-sentence
      :snt1 (r / run-09
            :ARG1 (p / program
                  :ARG0-of (s / sort-01)
                  :mod (t / this))
            :duration (t2 / temporal-quantity
                  :quant 2
                  :unit (s2 / second)))
      :snt2 (c / contrast-01
            :ARG1 (c2 / case-04
                  :ARG1 (s3 / sort-01
                        :ARG1 (l / list)
                        :time (a / already))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c2)
                        :ARG3 (m2 / most)))
            :ARG2 (c3 / case-04
                  :ARG1 (s4 / sort-01
                        :ARG1 (l2 / list)
                        :ARG1-of (r2 / reverse-01))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (b / bad-07
                              :ARG1 c3)
                        :ARG3 (m3 / most)))))"
837,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.",5,4,4.5,"# ::snt Insertion sort is O(n) and performs n-1 operations in the best-case scenario, which is when the list or array is already sorted.
(a / and
      :op1 (s / string-entity
            :value ""O(n"")
      :domain (s2 / sort-01
            :ARG1 (ii / insert-01))
      :op2 (p / perform-02
            :ARG0 s2
            :ARG1 (o / operate-01
                  :ARG1 (s3 / string-entity
                        :value 1))
            :time (s4 / scenario
                  :ARG1-of (h / have-degree-91
                        :ARG2 (c / case-04)
                        :ARG3 (m / most))
                  :time (s5 / sort-01
                        :ARG1 (o2 / or
                              :op1 (l / list)
                              :op2 (a2 / array))
                        :time (a3 / already)))))"
838,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). ",3,3,3,"# ::snt The number of operations for insertions sort, under best-case, is  n(n-1)/2. The best case for insertion sort is on a sorted list where it runs is O(n). 
(m / multi-sentence
      :snt1 (n / number
            :quant-of (o / operate-01
                  :purpose (s / sort-01
                        :ARG1 (ii / insert-01)))
            :prep-under (c / case-04
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c)
                        :ARG3 (m2 / most))))
      :snt2 (c2 / case-04
            :ARG1 (s2 / sort-01
                  :ARG1 (ii2 / insert-01))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (g2 / good-02
                        :ARG1 c2)
                  :ARG3 (m3 / most))
            :location (l / list
                  :ARG1-of (s3 / sort-01)
                  :location-of (r / run-01
                        :ARG1 s2))))"
839,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.",4,4,4,"# ::snt Best case would be O(n) or n-1, because that's what it takes to scan the array and make one swap. The array would then be sorted and would take only 1 operation.
(m / multi-sentence
      :snt1 (o / or
            :op1 (s / string-entity
                  :value ""O(n""))
      :op2 (s2 / string-entity
            :value ""n-1"")
      :domain (c / case-04
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m2 / most)))
      :ARG1-of (c2 / cause-01
            :ARG0 (t / take-10
                  :ARG0 (a / and
                        :op1 (s3 / scan-01
                              :ARG1 (a2 / array))
                        :op2 (s4 / swap-01
                              :quant 1))))
      :snt2 (a3 / and
            :op1 (s5 / sort-01
                  :ARG1 (a4 / array)
                  :time (t2 / then))
            :op2 (t3 / take-10
                  :ARG0 a4
                  :ARG1 (o2 / operate-01
                        :quant 1
                        :mod (o3 / only)))))"
840,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,Best case-1 Worst Case-N,0,4,2,"# ::snt Best case-1 Worst Case-N
(a / and
      :op1 (c / case
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m / most)))
      :op2 (c2 / case
            :quant 1
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (b / bad-07
                        :ARG1 c2)
                  :ARG3 (m2 / most)
                  :ARG5 (c3 / case
                        :quant 1))))"
841,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.,5,5,5,"# ::snt It will do (n) operations where (n) is the number of elements in the array. Best case is when all the elements are already sorted.
(m / multi-sentence
      :snt1 (d / do-02
            :ARG0 (ii / it)
            :ARG1 (o / operate-01
                  :quant (n / number
                        :quant-of (e / element)
                        :location (a / array))
                  :domain (s / string-entity
                        :value ""n"")))
      :snt2 (c / case-04
            :ARG1 (s2 / sort-01
                  :ARG1 (e2 / element
                        :mod (a2 / all))
                  :time (a3 / already))
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m2 / most))))"
842,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,O(n),3,4,3.5,"# ::snt O(n)
(p / person
      :name (n / name
            :op1 ""O(n""))"
843,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,Best case is all elements sorted. n-1.,5,3,4,"# ::snt Best case is all elements sorted. n-1.
(m / multi-sentence
      :snt1 (c / case-04
            :ARG1 (s / sort-01
                  :ARG1 (e / element
                        :mod (a / all)))
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m2 / most)))
      :snt2 (s2 / string-entity
            :value ""n-1""))"
844,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate ""x"" times (""x"" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require ""x"" operations. ",5,5,5,"# ::snt The best case scenario for an insertion sort, where all the elements of the array have been already sorted, will cause the for loop to iterate ""x"" times (""x"" being the number of elements in the array) and the while loop to never have to iterate, resulting in the insertion sort to require ""x"" operations. 
(c / cause-01
      :ARG0 (s / scenario
            :mod (c2 / case
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c2)
                        :ARG3 (m / most)))
            :topic (s2 / sort-01
                  :ARG1 (ii / insert-01)
                  :condition (s3 / sort-01
                        :ARG1 (e / element
                              :mod (a / all)
                              :part-of (a2 / array))
                        :time (a3 / already))))
      :ARG1 (a4 / and
            :op1 (ii2 / iterate-01
                  :ARG0 (l / loop
                        :mod (f / for))
                  :ARG1 (s4 / string-entity
                        :value ""x"")
                  :ARG1-of (m2 / mean-01
                        :ARG2 (n / number
                              :quant-of (e2 / element
                                    :location a2))))
            :op2 (o / obligate-01
                  :polarity -
                  :ARG1 (l2 / loop
                        :mod (w / while))
                  :ARG2 (ii3 / iterate-01
                        :ARG0 l2
                        :ARG1 (s5 / string-entity
                              :time (e3 / ever)))
                  :ARG0-of (r / result-01
                        :ARG1 (r2 / require-01
                              :ARG0 s3
                              :ARG1 (ii4 / insertion))
                        :ARG1 (o2 / operate-01
                              :ARG1 s5)))))"
845,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,1 operation. the best case scenario s where it is already sorted and does one comparision.,3,3,3,"# ::snt 1 operation. the best case scenario s where it is already sorted and does one comparision.
(m / multi-sentence
      :snt1 (o / operate-01
            :quant 1)
      :snt2 (s / scenario
            :mod (c / case-04
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c)
                        :ARG3 (m2 / most)))
            :domain (a / and
                  :op1 (s2 / sort-01
                        :ARG1 (ii / it)
                        :time (a2 / already))
                  :op2 (c2 / compare-01
                        :quant 1
                        :ARG1 ii))))"
846,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"n operations, where n is the number of items.",3,5,4,"# ::snt n operations, where n is the number of items.
(o / operation
      :quant (n / number
            :quant-of (ii / item))
      :mod (s / string-entity
            :value ""n""))"
847,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,n-1,3,4,3.5,"# ::snt n-1
(s / string-entity
      :value ""n-1"")"
848,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"O(n), the list is already sorted.",5,4,4.5,"# ::snt O(n), the list is already sorted.
(s / sort-01
      :ARG1 (l / list)
      :time (a / already)
      :mod (o / oh
            :mode expressive))"
849,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,Insertion sort will take n-1 operations if the array is in reverse order.,4,4,4,"# ::snt Insertion sort will take n-1 operations if the array is in reverse order.
(h / have-condition-91
      :ARG1 (t / take-10
            :ARG0 (s / sort-01
                  :ARG1 (ii / insert-01))
            :ARG1 (o / operate-01
                  :quant 1
                  :quant (n / n))
            :ARG2 (o2 / order
                  :ARG1-of (r / reverse-01)
                  :domain (a / array))))"
850,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. ",5,5,5,"# ::snt In the best case scenario of an already sorted list, insertion sort will progress once through the list.  So the number of operations is directly proportional to the number of elements in the list.  Also noted as O(n) in big o notation. 
(m / multi-sentence
      :snt1 (p / progress-01
            :ARG1 (s / sort-01
                  :ARG1 (ii / insertion))
            :time (o / once)
            :path (t / through
                  :op1 (l / list))
            :condition (c / case-04
                  :ARG1 (l2 / list
                        :ARG1-of s
                        :time (a / already)))
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m2 / most)))
      :snt2 (p2 / proportional-02
            :ARG1 (n / number
                  :quant-of (o2 / operate-01))
            :ARG2 (n2 / number
                  :quant-of (e / element
                        :part-of l2)))
      :ARG1-of (d / direct-02)
      :snt3 (n3 / note-01
            :ARG1 (s2 / string-entity
                  :value ""O(n""))
      :mod (a2 / also)
      :location (n4 / notation
            :mod (b / big)))"
851,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,1 where there is a list of two ints and only one must be moved.,2,3,2.5,"# ::snt 1 where there is a list of two ints and only one must be moved.
(h / have-condition-91
      :li 1
      :ARG2 (a / and
            :op1 (l / list-01
                  :ARG1 (ii / int
                        :quant 2))
            :op2 (o / obligate-01
                  :ARG2 (m / move-01
                        :ARG1 (ii2 / int
                              :quant 1
                              :mod (o2 / only))))))"
852,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"Best case is N, while the worst case is N factorial.",2,4,3,"# ::snt Best case is N, while the worst case is N factorial.
(c / contrast-01
      :ARG1 (c2 / case-04
            :ARG1 (n / number
                  :value ""N"")
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c2)
                  :ARG3 (m / most)))
      :ARG2 (c3 / case-04
            :ARG1 (f / factorial
                  :quant (n2 / number
                        :value ""N""))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (b / bad-07
                        :ARG1 c3)
                  :ARG3 (m2 / most))))"
853,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,n-1 The best case is when the array is already sorted.,5,4,4.5,"# ::snt n-1 The best case is when the array is already sorted.
(c / case-04
      :li 1
      :ARG1 (s / sort-01
            :ARG1 (a / array)
            :time (a2 / already))
      :ARG1-of (h / have-degree-91
            :ARG2 (g / good-02
                  :ARG1 c)
            :ARG3 (m / most)))"
854,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,worst case its = O(n) time best case its = O(n^2) time,2,4,3,"# ::snt worst case its = O(n) time best case its = O(n^2) time
(c / case-04
      :ARG1 (e / equal-01
            :ARG1 (ii / it)
            :ARG2 (t / time
                  :quant (v / value-quantity
                        :quant 2)))
      :ARG1-of (h / have-degree-91
            :ARG2 (b / bad-07
                  :ARG1 c)
            :ARG3 (m / most)))"
855,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,O(n),3,4,3.5,"# ::snt O(n)
(p / person
      :name (n / name
            :op1 ""O(n""))"
856,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.,5,5,5,"# ::snt N number of times.  Where N equals the number of elements in the list.  Best-case scenario is that the elements in the list are already sorted.
(m / multi-sentence
      :snt1 (n / number
            :quant-of (t / time
                  :quant (n2 / number
                        :quant-of (e / element))))
      :snt2 (e2 / equal-01
            :ARG1 (n3 / number
                  :quant-of (e3 / element
                        :part-of (l / list)))
            :ARG2 (n4 / number
                  :quant-of (e4 / element)))
      :snt3 (s / scenario
            :mod (c / case-04
                  :ARG1 (s2 / sort-01
                        :ARG1 e4
                        :time (a / already))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 s)
                        :ARG3 (m2 / most)))))"
857,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements,5,5,5,"# ::snt the best case scenario for insertion sort is a list that is already sorted. the number of operations would be the same as the number of elements
(m / multi-sentence
      :snt1 (s / scenario
            :domain (l / list
                  :ARG1-of (s2 / sort-01
                        :time (a / already)))
            :mod (c / case
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c)
                        :ARG3 (m2 / most)))
            :purpose (s3 / sort-01
                  :ARG1 (ii / insert-01)))
      :snt2 (s4 / same-01
            :ARG1 (n / number
                  :quant-of (o / operate-01))
            :ARG2 (n2 / number
                  :quant-of (e / element))))"
858,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.",3,4,3.5,"# ::snt insertion sort will make zero operations (and length - 1 comparisons) in the best case scenario, that is, when the array its given is already in order.
(m / make-01
      :ARG0 (s / sort-01
            :ARG1 (ii / insert-01))
      :ARG1 (a / and
            :op1 (o / operate-01
                  :quant 0)
            :op2 (c / compare-01
                  :ARG1 (l / length
                        :quant 1)))
      :condition (s2 / scenario
            :mod (c2 / case-04
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c2)
                        :ARG3 (m2 / most))
                  :ARG1-of (m3 / mean-01
                        :ARG2 (ii2 / in-order-02
                              :ARG1 (a2 / array
                                    :ARG1-of (g2 / give-01)
                                    :ARG0-of g2)
                              :time (a3 / already))))))"
859,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,theta(n) the best case senario is that everything is already sorted,5,4,4.5,"# ::snt theta(n) the best case senario is that everything is already sorted
(s / scenario
      :mod (c / case-04
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m / most)))
      :domain (s2 / sort-01
            :ARG1 (e / everything)
            :time (a / already)))"
860,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,n operations  The best case scenario is when all the numbers are in increasing order.,5,5,5,"# ::snt n operations  The best case scenario is when all the numbers are in increasing order.
(h / have-degree-91
      :ARG1 (s / scenario
            :mod (c / case-04))
      :ARG2 (g / good-02
            :ARG1 s)
      :ARG3 (m / most)
      :time (o / order-03
            :ARG1 (n / number
                  :mod (a / all))
            :ARG1-of (ii / increase-01)))"
861,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,"it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order",2,3,2.5,"# ::snt it could be considered that having only one item would be the easiest to sort, but this could also be a trivial result as nothing is moved  having two items allows the algorithm to sort the items into the correct order
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (c2 / consider-01
                  :ARG1 (h / have-degree-91
                        :ARG1 (s / sort-01
                              :ARG1 (ii / item
                                    :quant 1
                                    :mod (o / only)))
                        :ARG2 (e / easy-05
                              :ARG1 s)
                        :ARG3 (m / most))))
      :ARG2 (p2 / possible-01
            :ARG1 (r / result-01
                  :ARG1 (t / this)
                  :mod (t2 / trivial)
                  :mod (a / also)
                  :ARG1-of (c3 / cause-01
                        :ARG0 (m2 / move-01
                              :ARG1 (n / nothing))))
            :ARG1-of (c4 / cause-01
                  :ARG0 (a2 / allow-01
                        :ARG0 (h2 / have-03
                              :ARG0 (ii2 / item
                                    :quant 2))
                        :ARG1 (s2 / sort-01
                              :ARG0 (a3 / algorithm)
                              :ARG1 ii2
                              :ARG2 (o2 / order
                                    :ARG1-of (c5 / correct-02)))))))"
862,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted),5,3,4,"# ::snt the best case is if it only has to look through the list once. The best case scenario is when it goes through the list and doesn't have to make any changes (the list is already sorted)
(m / multi-sentence
      :snt1 (c / case-04
            :ARG1 (o / obligate-01
                  :ARG1 (ii / it)
                  :ARG2 (l / look-01
                        :frequency 1
                        :ARG0 ii
                        :ARG1 (l2 / list))
                  :mod (o2 / only))
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m2 / most)))
      :snt2 (s / scenario
            :mod (c2 / case-04
                  :ARG1 (a / and
                        :op1 (g2 / go-through-20
                              :ARG0 (ii2 / it)
                              :ARG1 (l3 / list))
                        :op2 (o3 / obligate-01
                              :polarity -
                              :ARG1 ii2
                              :ARG2 (c3 / change-01
                                    :ARG0 ii2
                                    :mod (a2 / any)))
                        :ARG1-of (c4 / cause-01
                              :ARG0 (s2 / sort-01
                                    :ARG1 (l4 / list)
                                    :time (a3 / already)))))))"
863,5.3,"What is the number of operations for insertion sort under a best-case scenario, and what is the best-case scenario?",N (the length of the array) operations achieved for a sorted array.,very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1,2,3,2.5,"# ::snt very simplistic it moves one element from the list by one and inserting them in their correct position into a new slot then starting over. best case is (0)1
(m / multi-sentence
      :snt1 (s / simplistic
            :degree (v / very)
            :domain (a / and
                  :op1 (m2 / move-01
                        :ARG1 (e / element
                              :quant 1)
                        :ARG2 (l / list)
                        :manner (b / by
                              :op1 e))
                  :op2 (ii / insert-01
                        :ARG1 e
                        :ARG2 (p / position-01
                              :ARG1 e
                              :ARG1-of (c / correct-02))
                        :ARG3 (s2 / slot
                              :ARG1-of (n / new-01)))
                  :time (t / then
                        :op1 (s3 / start-01
                              :mod (o / over)))))
      :snt2 (c2 / case-04
            :ARG1 1
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c2)
                  :ARG3 (m3 / most))))"
864,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.",5,5,5,"# ::snt The base case for a recursive merge sort is one number.  One number by itself is a sorted list, regardless of what number it is.
(m / multi-sentence
      :snt1 (c / case-04
            :ARG1 (s / sort-01
                  :ARG1 (m2 / merge-01)
                  :manner (r / recursive))
            :ARG2 (n / number
                  :quant 1))
      :snt2 (l / list
            :ARG1-of (s2 / sort-01)
            :domain (n2 / number
                  :quant 1
                  :mod (b / by-oneself))
            :ARG1-of (r2 / regardless-91
                  :ARG2 (n3 / number
                        :domain n))))"
865,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.,5,5,5,"# ::snt The base case for a recursive implementation of merge sort is when the sequence being passed to merge sort has less than 2 elements.
(c / case-04
      :ARG1 (ii / implement-01
            :ARG1 (s / sort-01
                  :ARG1 (m / merge-01))
            :manner (r / recursive))
      :ARG2 (h / have-03
            :ARG0 (s2 / sequence
                  :ARG1-of (p / pass-01
                        :purpose s))
            :ARG1 (e / element
                  :quant (l / less-than
                        :op1 2)))
      :mod (b / base))"
866,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The base case for a recursive implementation of merge sort is one.,5,5,5,"# ::snt The base case for a recursive implementation of merge sort is one.
(c / case-04
      :ARG1 (ii / implement-01
            :ARG1 (s / sort-01
                  :ARG1 (m / merge-01))
            :manner (r / recursive))
      :mod (b / base))"
867,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The best case is the same as the worst case O(n log n) for a recursive merge sort.,1,3,2,"# ::snt The best case is the same as the worst case O(n log n) for a recursive merge sort.
(s / same-01
      :ARG1 (c / case
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m / most)))
      :ARG2 (c2 / case
            :name (n / name
                  :op1 ""O(n""
                  :op2 ""log""
                  :op3 ""n"")
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (b / bad-07
                        :ARG1 c2)
                  :ARG3 (m2 / most)))
      :purpose (s2 / sort-01
            :ARG1 (m3 / merge-01)
            :mod (r / recursive)))"
868,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),there is one object in the split array to sort.,5,5,5,"# ::snt there is one object in the split array to sort.
(o / object
      :quant 1
      :location (a / array
            :ARG1-of (s / split-01))
      :ARG2-of (s2 / sort-01
            :ARG1-of (p / possible-01)))"
869,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The base case is when the length of the current array is 1.,5,5,5,"# ::snt The base case is when the length of the current array is 1.
(h / have-condition-91
      :ARG1 (c / case-04
            :mod (b / base))
      :ARG2 (l / long-03
            :ARG1 (a / array
                  :time (c2 / current))
            :ARG2 1))"
870,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),O(nlog(n)),1,4,2.5,"# ::snt O(nlog(n))
(o / opine-01
      :ARG0 (ii / i))"
871,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),Best case is one element.  One element is sorted.,5,5,5,"# ::snt Best case is one element.  One element is sorted.
(m / multi-sentence
      :snt1 (c / case-04
            :ARG1 (e / element
                  :quant 1)
            :ARG1-of (h / have-degree-91
                  :ARG2 (g / good-02
                        :ARG1 c)
                  :ARG3 (m2 / most)))
      :snt2 (s / sort-01
            :ARG1 (e2 / element
                  :quant 1)))"
872,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),If the array being sorted has 0 or 1 elements,5,4,4.5,"# ::snt If the array being sorted has 0 or 1 elements
(h / have-condition-91
      :ARG2 (h2 / have-03
            :ARG0 (a / array
                  :ARG1-of (s / sort-01))
            :ARG1 (e / element
                  :quant (o / or
                        :op1 0
                        :op2 1))))"
873,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"T(n) = 0, if n&lt;2.",4,4,4,"# ::snt T(n) = 0, if n&lt;2.
(e / equal-01
      :ARG1 (v / value-entity
            :value ""T(n"")
      :ARG2 e
      :ARG1 (v2 / value-entity
            :value 2))"
874,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"A list size of 1, where it is already sorted.",5,5,5,"# ::snt A list size of 1, where it is already sorted.
(s / size-01
      :ARG1 (l / list)
      :ARG2 1
      :location-of (s2 / sort-01
            :ARG1 (ii / it)
            :time (a / already)))"
875,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),Single element in the array,5,5,5,"# ::snt Single element in the array
(e / element
      :ARG1-of (s / single-02)
      :part-of (a / array))"
876,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),O(nlog(n)),1,3,2,"# ::snt O(nlog(n))
(o / opine-01
      :ARG0 (ii / i))"
877,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),n * log( n ),1,3,2,"# ::snt n * log( n )
(s / string-entity
      :value ""n"")"
878,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),A list or array of only 1 element.,5,5,5,"# ::snt A list or array of only 1 element.
(o / or
      :op1 (l / list)
      :op2 (a / array)
      :consist-of (e / element
            :quant 1
            :mod (o2 / only)))"
879,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),where you only must merge sort once,3,4,3.5,"# ::snt where you only must merge sort once
(h / have-condition-91
      :ARG2 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (m / merge-01
                  :ARG0 y
                  :ARG1 (s / sort-01)
                  :mod (o2 / only)
                  :frequency 1)))"
880,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),A single Element on the Array.,5,5,5,"# ::snt A single Element on the Array.
(e / element
      :ARG1-of (s / single-02)
      :location (a / array))"
881,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),There is only one element in the subarray.,5,5,5,"# ::snt There is only one element in the subarray.
(e / element
      :quant 1
      :mod (o / only)
      :location (s / subarray))"
882,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"if the array length is less than or equal to 1, then that array is returned to the other array and merged together",5,4,4.5,"# ::snt if the array length is less than or equal to 1, then that array is returned to the other array and merged together
(a / and
      :op1 (r / return-01
            :ARG1 (a2 / array
                  :mod (t / that))
            :ARG4 (a3 / array
                  :mod (o / other)))
      :op2 (m / merge-01
            :ARG1 a2
            :manner (t2 / together))
      :condition (o2 / or
            :op1 (l / less-than
                  :op1 1
                  :domain (l2 / length
                        :poss a2))
            :op2 (e / equal-01
                  :ARG1 l2
                  :ARG2 1)))"
883,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } ",2,2,2,"# ::snt if (right &gt; left)   {     mid = (right + left) / 2;     m_sort(numbers, temp, left, mid);     m_sort(numbers, temp, mid+1, right);      merge(numbers, temp, left, mid+1, right);   } 
(h / have-condition-91
      :ARG2 (e / equal-01
            :ARG1 (a / and
                  :op1 (r / right-08)
                  :op2 (l / left-19))
            :ARG2 2)
      :ARG3 (a2 / and
            :op1 (s / string-entity
                  :value ""m_sort"")
            :op2 (s2 / string-entity
                  :value ""m_sort"")
            :op3 (s3 / string-entity
                  :value ""m_sort"")
            :op4 (s4 / string-entity
                  :value ""m_sort"")
            :op5 (s5 / string-entity
                  :value ""m_sort"")
            :op6 (s6 / string-entity
                  :value ""m_sort"")
            :op7 (s7 / string-entity
                  :value ""merge"")
            :op8 (s8 / string-entity
                  :value ""numbers, temp, left-19 ) :op9 ( string-entity_7 :value "")))"
884,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),The sequence of numbers has zero or one elements.,5,5,5,"# ::snt The sequence of numbers has zero or one elements.
(h / have-03
      :ARG0 (s / sequence
            :consist-of (n / number))
      :ARG1 (o / or
            :op1 (e / element
                  :quant 0)
            :op2 (e2 / element
                  :quant 1)))"
885,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),one element in an array,5,5,5,"# ::snt one element in an array
(e / element
      :quant 1
      :part-of (a / array))"
886,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),array of length 1,5,5,5,"# ::snt array of length 1
(a / array
      :ARG1-of (l / length-01
            :ARG2 1))"
887,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),the array has one element,5,5,5,"# ::snt the array has one element
(h / have-03
      :ARG0 (a / array)
      :ARG1 (e / element
            :quant 1))"
888,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"When there is only one element in the array, or when the starting element in the array is the same as the ending element.",4,5,4.5,"# ::snt When there is only one element in the array, or when the starting element in the array is the same as the ending element.
(o / or
      :op1 (b / be-located-at-91
            :ARG1 (e / element
                  :quant 1
                  :mod (o2 / only))
            :ARG2 (a / array))
      :op2 (s / same-01
            :ARG1 (e2 / element
                  :ARG0-of (s2 / start-01)
                  :part a)
            :ARG2 (e3 / element
                  :ARG0-of (e4 / end-01))))"
889,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),"when each half or the original array has nothing else to sort, and puts the halfs back together",2,3,2.5,"# ::snt when each half or the original array has nothing else to sort, and puts the halfs back together
(h / have-condition-91
      :ARG2 (a / and
            :op1 (h2 / have-03
                  :ARG0 (o / or
                        :op1 (h3 / half
                              :mod (e / each))
                        :op2 (a2 / array
                              :mod (o2 / original)))
                  :ARG1 (n / nothing
                        :mod (e2 / else)
                        :ARG1-of (s / sort-01)))
            :op2 (p / put-01
                  :ARG0 o
                  :ARG1 (h4 / half)
                  :ARG2 (t / together
                        :mod (b / back)))))"
890,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),the size of the list being sent is &lt;= 1,5,4,4.5,"# ::snt the size of the list being sent is &lt;= 1
(e / equal-01
      :ARG1 (s / size
            :poss (l / list
                  :ARG1-of (s2 / send-01)))
      :ARG2 1)"
891,5.4,What is the base case for a recursive implementation of merge sort?,When the size of the array to be sorted is 1 (or 2),O(n log n),1,3,2,"# ::snt O(n log n)
(l / log-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / string-entity
            :value ""n""))"
892,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Its a location in memory that contains the memory address of another location in memory that contains information.,5,5,5,"# ::snt Its a location in memory that contains the memory address of another location in memory that contains information.
(l / location
      :location (m / memory)
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m2 / memory)
                  :poss (l2 / location
                        :mod (a2 / another)
                        :location (m3 / memory)
                        :ARG0-of (c2 / contain-01
                              :ARG1 (ii / information))))))"
893,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address as its value.,5,5,5,"# ::snt A pointer is a variable that contains a memory address as its value.
(v / variable
      :domain (p / pointer)
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :ARG1-of (v2 / value-01
                        :ARG2 v))))"
894,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable which stores the address of another variable.,5,5,5,"# ::snt A pointer is a variable which stores the address of another variable.
(v / variable
      :ARG0-of (s / store-01
            :ARG1 (a / address
                  :poss (v2 / variable
                        :mod (a2 / another))))
      :domain (p / pointer))"
895,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Pointers are variables that contain as their values memory addresses of other variables.,5,5,5,"# ::snt Pointers are variables that contain as their values memory addresses of other variables.
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (v2 / variable
                        :mod (o / other)))
            :prep-as (v3 / value
                  :poss v))
      :domain (p / pointer))"
896,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored elsewhere in the computer memory using its address.,4,5,4.5,"# ::snt A data type whose value refers to another value stored elsewhere in the computer memory using its address.
(t / type
      :mod (d / data)
      :ARG0-of (r / refer-01
            :ARG1 (v / value
                  :mod (a / another)
                  :ARG1-of (s / store-01
                        :location (m / memory
                              :mod (c / computer))
                        :location (e / elsewhere)
                        :manner (u / use-01
                              :ARG0 t
                              :ARG1 (a2 / address
                                    :poss t))))))"
897,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a pointer holds a memory location,5,4,4.5,"# ::snt a pointer holds a memory location
(h / hold-01
      :ARG0 (p / pointer)
      :ARG1 (l / location
            :mod (m / memory)))"
898,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a name that represents actual location or value of a data type. int *bPtr points to an integer value.,5,4,4.5,"# ::snt a name that represents actual location or value of a data type. int *bPtr points to an integer value.
(m / multi-sentence
      :snt1 (r / represent-01
            :ARG0 (n / name)
            :ARG1 (o / or
                  :op1 (l / location
                        :ARG1-of (a / actual-02))
                  :op2 (v / value
                        :poss (t / type
                              :mod (d / data)))))
      :snt2 (p / point-01
            :ARG0 (s / string-entity
                  :value ""int""
                  :value ""bPtr"")
            :ARG2 (v2 / value
                  :mod (ii / integer))))"
899,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A variable that stores the address of another variable,5,5,5,"# ::snt A variable that stores the address of another variable
(v / variable
      :ARG0-of (s / store-01
            :ARG1 (a / address
                  :poss (v2 / variable
                        :mod (a2 / another)))))"
900,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address,5,5,5,"# ::snt a pointer is a programming language data type whose value refers directly to (or points to) another value stored elsewhere in the computer memory using its address
(o / or
      :op1 (r / refer-01
            :ARG0 (v / value)
            :ARG1 (v2 / value
                  :mod (a / another)
                  :ARG1-of (s / store-01
                        :location (m / memory
                              :mod (c / computer))
                        :location (e / elsewhere)
                        :manner (u / use-01
                              :ARG0 v
                              :ARG1 (a2 / address
                                    :poss v))))
            :ARG1-of (d / direct-02))
      :op2 (p / point-01
            :ARG0 v2
            :ARG1 v2)
      :domain (t / type
            :mod (d2 / data)
            :mod (l / language
                  :mod (p2 / programming))
            :poss t))"
901,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A data type whose value refers to another value stored somewhere else in the computer memory using its address.,5,5,5,"# ::snt A data type whose value refers to another value stored somewhere else in the computer memory using its address.
(t / type
      :mod (d / data)
      :ARG0-of (r / refer-01
            :ARG1 (v / value
                  :mod (a / another)
                  :ARG1-of (s / store-01
                        :location (s2 / somewhere
                              :mod (e / else))
                        :location (m / memory
                              :mod (c / computer))
                        :manner (u / use-01
                              :ARG0 t
                              :ARG1 (a2 / address
                                    :poss t))))))"
902,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,"It is like a variable however instead of holding data, it holds a location in memory.",4,5,4.5,"# ::snt It is like a variable however instead of holding data, it holds a location in memory.
(h / have-concession-91
      :ARG1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (v / variable))
      :ARG2 (ii2 / instead-of-91
            :ARG1 (h2 / hold-01
                  :ARG0 ii
                  :ARG1 (l / location
                        :location (m / memory)))
            :ARG2 (h3 / hold-01
                  :ARG0 ii
                  :ARG1 (d / data))))"
903,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a reference to a location in memory,5,5,5,"# ::snt A pointer is a reference to a location in memory
(r / refer-01
      :ARG0 (p / pointer)
      :ARG1 (l / location
            :location (m / memory)))"
904,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a reference to the memory location of an object.,4,5,4.5,"# ::snt A pointer is a reference to the memory location of an object.
(r / refer-01
      :ARG1 (p / pointer)
      :ARG2 (l / location
            :mod (m / memory)
            :poss (o / object)))"
905,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable that contains the memory address of a variable that has a value.,5,5,5,"# ::snt A pointer is a variable that contains the memory address of a variable that has a value.
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (v2 / variable
                        :ARG0-of (h / have-03
                              :ARG1 (v3 / value)))))
      :domain (p / pointer))"
906,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,"It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.",2,5,3.5,"# ::snt It is a variable that contains not only a *value but has a memory address associated with it, and can be moved along a string or an array by jumping up one memory address.
(a / and
      :op1 (c / contain-01
            :ARG0 (v / variable)
            :ARG1 (v2 / value
                  :mod (o / only
                        :polarity -)))
      :op2 (h / have-03
            :ARG0 v
            :ARG1 (a2 / address
                  :mod (m / memory)
                  :ARG1-of (a3 / associate-01
                        :ARG2 v2)))
      :op3 (p / possible-01
            :ARG1 (m2 / move-01
                  :ARG1 v
                  :ARG2 (a4 / along
                        :op1 (o2 / or
                              :op1 (s / string)
                              :op2 (a5 / array)))
                  :manner (j / jump-up-04
                        :ARG1 (a6 / address
                              :quant 1
                              :mod (m3 / memory))))))"
907,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Contains a variable's memory address as a value.,5,5,5,"# ::snt Contains a variable's memory address as a value.
(c / contain-01
      :ARG1 (a / address
            :mod (m / memory)
            :poss (v / variable))
      :prep-as (v2 / value))"
908,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,variable that points to the memory address of another variable and it is type specific.,5,5,5,"# ::snt variable that points to the memory address of another variable and it is type specific.
(a / and
      :op1 (p / point-01
            :ARG0 (v / variable)
            :ARG2 (a2 / address
                  :mod (m / memory)
                  :poss (v2 / variable
                        :mod (a3 / another))))
      :op2 (s / specific-02
            :ARG1 v
            :ARG2 (t / type)))"
909,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,An element that references a memory cell,5,5,5,"# ::snt An element that references a memory cell
(e / element
      :ARG0-of (r / reference-04
            :ARG1 (c / cell
                  :mod (m / memory))))"
910,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,Is a reference call to the place in memory where the object is stored.,4,4,4,"# ::snt Is a reference call to the place in memory where the object is stored.
(c / call-03
      :ARG1 (p / place
            :location (m / memory)
            :location-of (s / store-01
                  :ARG1 (o / object)))
      :mod (r / reference))"
911,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a variable that contains the address of another variable,5,5,5,"# ::snt a variable that contains the address of another variable
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss (v2 / variable
                        :mod (a2 / another)))))"
912,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,"A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.",5,5,5,"# ::snt A pointer variable contains the number of a memory address as its value, which may be null or 0, or the address of some value stored in memory.
(c / contain-01
      :ARG0 (v / variable
            :mod (p / pointer))
      :ARG1 (o / or
            :op1 (n / number
                  :poss (a / address
                        :mod (m / memory))
                  :ARG1-of (v2 / value-01
                        :ARG2 a)
                  :ARG1-of (n2 / null-02
                        :ARG1-of (p2 / possible-01)))
            :op2 (a2 / address
                  :poss (v3 / value
                        :quant (s / some)
                        :ARG1-of (s2 / store-01
                              :location (m2 / memory))))))"
913,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a variable that contains a memory address of anther variable,5,5,5,"# ::snt A pointer is a variable that contains a memory address of anther variable
(v / variable
      :domain (p / pointer)
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (v2 / variable
                        :mod (t / this)))))"
914,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A variable that contains the memory address of another variable that contains a specific value.,5,5,5,"# ::snt A variable that contains the memory address of another variable that contains a specific value.
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (v2 / variable
                        :mod (a2 / another)
                        :ARG0-of (c2 / contain-01
                              :ARG1 (v3 / value
                                    :ARG1-of (s / specific-02)))))))"
915,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,a variable with a memory address as the value,5,4,4.5,"# ::snt a variable with a memory address as the value
(v / variable
      :ARG0-of (h / have-03
            :ARG1 (a / address
                  :mod (m / memory)
                  :ARG1-of (v2 / value-01))))"
916,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,it is a type that points to something else. It is the memory address of something else,5,4,4.5,"# ::snt it is a type that points to something else. It is the memory address of something else
(m / multi-sentence
      :snt1 (t / type
            :domain (ii / it)
            :ARG0-of (p / point-01
                  :ARG2 (s / something
                        :mod (e / else))))
      :snt2 (a / address
            :mod (m2 / memory)
            :poss s
            :mod (e2 / else))
      :domain (ii2 / it))"
917,6.1,What is a pointer?,A variable that contains the address in memory of another variable.,A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.,4,5,4.5,"# ::snt A pointer is a way to get at another object. Essentially it is a way to grab an instance of an object and then either pass that instance a message or retreive some data from that object. A pointer is actually just an address of where an instance is held in memory.
(m / multi-sentence
      :snt1 (w / way
            :manner-of (g / get-05
                  :ARG1 (o / object
                        :mod (a / another)))
            :domain (p / pointer))
      :snt2 (a2 / and
            :op1 (w2 / way
                  :manner-of (g2 / grab-01
                        :ARG1 (ii / instance
                              :poss (o2 / object))))
            :op2 (o3 / or
                  :op1 (p2 / pass-03
                        :ARG0 ii
                        :ARG1 (m2 / message)
                        :ARG2 (ii2 / instance)
                        :op2 (r / retrieve-01
                              :ARG0 ii
                              :ARG1 (d / data
                                    :quant (s / some))
                              :ARG2 ii2)
                        :time (t / then))
                  :mod (e / essential))
            :snt2 (a3 / address
                  :domain (p3 / pointer)
                  :mod (j / just)
                  :ARG1-of (a4 / actual-02))))"
918,6.2,What does the address (&) operator return?,The memory address of its operand.,This operator returns the memory address of its operand.,5,5,5,"# ::snt This operator returns the memory address of its operand.
(r / return-02
      :ARG0 (o / operator
            :mod (t / this))
      :ARG1 (a / address
            :mod (m / memory)
            :poss (o2 / operand
                  :poss o)))"
919,6.2,What does the address (&) operator return?,The memory address of its operand.,The address operator returns the memory address of its operand.,5,5,5,"# ::snt The address operator returns the memory address of its operand.
(r / return-02
      :ARG0 (p / person
            :ARG0-of (o / operate-01
                  :ARG1 (a / address)))
      :ARG1 (a2 / address
            :mod (m / memory)
            :poss (o2 / operand
                  :poss p)))"
920,6.2,What does the address (&) operator return?,The memory address of its operand.,Returns memory address of its operand.,5,5,5,"# ::snt Returns memory address of its operand.
(r / return-02
      :ARG1 (a / address
            :mod (m / memory)
            :poss (o / operand
                  :poss (ii / it))))"
921,6.2,What does the address (&) operator return?,The memory address of its operand.,The address (&) operator returns the memory address of its operand.,5,5,5,"# ::snt The address (&) operator returns the memory address of its operand.
(r / return-02
      :ARG0 (o / operator
            :mod (a / address))
      :ARG1 (a2 / address
            :mod (m / memory)
            :poss (o2 / operand
                  :poss o)))"
922,6.2,What does the address (&) operator return?,The memory address of its operand.,Returns the memory address of its operand.,5,5,5,"# ::snt Returns the memory address of its operand.
(r / return-02
      :ARG1 (a / address
            :mod (m / memory)
            :poss (o / operand
                  :poss (ii / it))))"
923,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the place in memory of that element,5,3,4,"# ::snt returns the place in memory of that element
(r / return-02
      :ARG1 (p / place
            :ARG1-of (r2 / remember-01
                  :ARG0 (e / element
                        :mod (t / that)))))"
924,6.2,What does the address (&) operator return?,The memory address of its operand.,The address of the where the data is stored: &b will return the address of b.,4,5,4.5,"# ::snt The address of the where the data is stored: &b will return the address of b.
(r / return-02
      :ARG0 (a / address
            :poss (a2 / and
                  :op1 (l / location
                        :location-of (s / store-01
                              :ARG1 (d / data)))))
      :ARG1 (a3 / address
            :poss (s2 / string-entity
                  :value ""&b"")))"
925,6.2,What does the address (&) operator return?,The memory address of its operand.,The & operator returns the address of a variable,5,5,5,"# ::snt The & operator returns the address of a variable
(r / return-02
      :ARG0 (s / string-entity
            :value ""&""
            :value ""operator"")
      :ARG1 (a / address
            :poss (v / variable)))"
926,6.2,What does the address (&) operator return?,The memory address of its operand.,"the ampersand (&) means ""pass by reference"". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.",3,3,3,"# ::snt the ampersand (&) means ""pass by reference"". When the function is called, a pointer to the variable, instead of the variable itself, will be passed into the function.
(m / multi-sentence
      :snt1 (m2 / mean-01
            :ARG1 (s / string-entity
                  :value ""&"")
            :ARG2 (p / pass-03
                  :manner (r / reference)))
      :snt2 (p2 / pass-03
            :ARG1 (p3 / pointer
                  :destination (v / variable)
                  :ARG1-of (ii / instead-of-91
                        :ARG2 (v2 / variable)))
            :ARG2 (f / function)
            :time (c / call-01
                  :ARG1 f)))"
927,6.2,What does the address (&) operator return?,The memory address of its operand.,& returns the memory address of its operand.,5,5,5,"# ::snt & returns the memory address of its operand.
(a / and
      :op2 (r / return-02
            :ARG1 (a2 / address
                  :mod (m / memory)
                  :poss (o / operand
                        :poss (ii / it)))))"
928,6.2,What does the address (&) operator return?,The memory address of its operand.,the address of the variable in memory,5,5,5,"# ::snt the address of the variable in memory
(a / address
      :poss (v / variable
            :location (m / memory)))"
929,6.2,What does the address (&) operator return?,The memory address of its operand.,Returns the address location in memory of the item.,5,4,4.5,"# ::snt Returns the address location in memory of the item.
(r / return-02
      :ARG1 (l / location
            :mod (a / address))
      :purpose (m / memory
            :poss (ii / item)))"
930,6.2,What does the address (&) operator return?,The memory address of its operand.,The address operator returns the memory address of its operand.,5,5,5,"# ::snt The address operator returns the memory address of its operand.
(r / return-02
      :ARG0 (p / person
            :ARG0-of (o / operate-01
                  :ARG1 (a / address)))
      :ARG1 (a2 / address
            :mod (m / memory)
            :poss (o2 / operand
                  :poss p)))"
931,6.2,What does the address (&) operator return?,The memory address of its operand.,The & operator returns the memory address of the variable it precedes.,5,5,5,"# ::snt The & operator returns the memory address of the variable it precedes.
(r / return-02
      :ARG0 (o / operator
            :mod (s / string-entity
                  :value ""&""))
      :ARG1 (a / address
            :mod (m / memory)
            :poss (v / variable
                  :ARG1-of (p / precede-01
                        :ARG0 o))))"
932,6.2,What does the address (&) operator return?,The memory address of its operand.,"The memory address of operand, 0x000000 or something along those lines. ",4,5,4.5,"# ::snt The memory address of operand, 0x000000 or something along those lines. 
(a / address
      :mod (m / memory)
      :poss (o / operand)
      :ARG1-of (m2 / mean-01
            :ARG2 (o2 / or
                  :op1 (s / string-entity
                        :value ""0x000000"")
                  :op2 (s2 / something
                        :ARG1-of (r / resemble-01
                              :ARG2 (l / line
                                    :mod (t / that)))))))"
933,6.2,What does the address (&) operator return?,The memory address of its operand.,The object's memory address.,4,5,4.5,"# ::snt The object's memory address.
(a / address
      :mod (m / memory)
      :poss (o / object))"
934,6.2,What does the address (&) operator return?,The memory address of its operand.,the reference to a variable,5,4,4.5,"# ::snt the reference to a variable
(r / refer-01
      :ARG2 (v / variable))"
935,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the memory address of its operand,5,5,5,"# ::snt returns the memory address of its operand
(r / return-02
      :ARG1 (a / address
            :mod (m / memory)
            :poss (o / operand
                  :poss (ii / it))))"
936,6.2,What does the address (&) operator return?,The memory address of its operand.,memory address of its operand,5,5,5,"# ::snt memory address of its operand
(a / address
      :mod (m / memory)
      :poss (o / operand
            :poss (ii / it)))"
937,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the address number of the specified variable,5,4,4.5,"# ::snt returns the address number of the specified variable
(r / return-02
      :ARG1 (n / number
            :mod (a / address)
            :poss (v / variable
                  :ARG1-of (s / specify-01))))"
938,6.2,What does the address (&) operator return?,The memory address of its operand.,"It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.",4,5,4.5,"# ::snt It returns the memory address of it's operand. That is, if applied to a normal variable, it gives the variable's memory address, just as a pointer variable might.
(m / multi-sentence
      :snt1 (r / return-02
            :ARG0 (ii / it)
            :ARG1 (a / address
                  :mod (m2 / memory)
                  :poss (o / operand
                        :poss ii)))
      :snt2 (g / give-01
            :ARG0 (ii2 / it)
            :ARG1 (a2 / address
                  :mod (m3 / memory)
                  :poss (v / variable
                        :ARG1-of (n / normal-02)))
            :condition (a3 / apply-02
                  :ARG1 ii2
                  :ARG2 (v2 / variable
                        :ARG1-of n)))
      :ARG1-of (r2 / resemble-01
            :ARG2 (p / possible-01
                  :ARG1 (g2 / give-01
                        :ARG0 (v3 / variable
                              :ARG0-of (p2 / point-01)))
                  :ARG1 a2)
            :mod (j / just)))"
939,6.2,What does the address (&) operator return?,The memory address of its operand.,The & is a unary operator that returns the memory address of its operand,5,5,5,"# ::snt The & is a unary operator that returns the memory address of its operand
(o / operator
      :mod (u / unary)
      :domain (s / string-entity
            :value ""&"")
      :ARG0-of (r / return-02
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (o2 / operand
                        :poss o))))"
940,6.2,What does the address (&) operator return?,The memory address of its operand.,the address of the variable it is attached to,5,3,4,"# ::snt the address of the variable it is attached to
(a / address
      :poss (v / variable
            :ARG2-of (a2 / attach-01)
            :ARG1-of a2))"
941,6.2,What does the address (&) operator return?,The memory address of its operand.,the memory address of its operand,5,5,5,"# ::snt the memory address of its operand
(a / address
      :mod (m / memory)
      :poss (o / operand
            :poss (ii / it)))"
942,6.2,What does the address (&) operator return?,The memory address of its operand.,returns the address of what it is put in front of,5,4,4.5,"# ::snt returns the address of what it is put in front of
(r / return-02
      :ARG1 (a / address
            :poss (t / thing
                  :ARG1-of (p / put-01
                        :ARG2 (ii / in-front-of
                              :op1 (ii2 / it))))))"
943,6.2,What does the address (&) operator return?,The memory address of its operand.,returns a pointer,4,3,3.5,"# ::snt returns a pointer
(r / return-02
      :ARG1 (p / pointer))"
944,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns a synonym for the object to which its pointer operand points.,5,5,5,"# ::snt returns a synonym for the object to which its pointer operand points.
(r / return-02
      :ARG1 (s / synonym
            :domain (o / object
                  :ARG2-of (p / point-01
                        :ARG0 (o2 / operand
                              :ARG0-of (p2 / point-01)
                              :ARG1-of p2)))))"
945,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns a synonym for the object to which its pointer operand points.,5,5,5,"# ::snt The star operator returns a synonym for the object to which its pointer operand points.
(r / return-02
      :ARG0 (o / operator
            :mod (s / star))
      :ARG1 (s2 / synonym
            :domain (o2 / object
                  :ARG2-of (p / point-01
                        :ARG0 (o3 / operand
                              :ARG1 o3)
                        :ARG0 o3))))"
946,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to.,5,5,5,"# ::snt Returns synonym for the object its operand points to.
(r / return-02
      :ARG1 (s / synonym
            :domain (o / object
                  :ARG2-of (p / point-01
                        :ARG0 (o2 / operand
                              :poss o2)))))"
947,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,"It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).",5,5,5,"# ::snt It returns a synonym, alias or nickname of the name of the object that its operand points to in memory (dereferencing the pointer).
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (o / or
            :op1 (s / synonym)
            :op2 (a / alias)
            :op3 (n / nickname)
            :domain (t / thing
                  :ARG2-of (n2 / name-01
                        :ARG1 (o2 / object)
                        :ARG1-of (p / point-01
                              :ARG0 (o3 / operand
                                    :poss ii)
                              :location (m / memory)))))
      :manner (d / dereferencing
            :ARG1 (p2 / pointer)))"
948,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns an alias/nickname for the object to which the pointer operand points.,5,5,5,"# ::snt Returns an alias/nickname for the object to which the pointer operand points.
(r / return-02
      :ARG1 (s / slash
            :op1 (a / alias)
            :op2 (n / nickname)
            :poss (o / object
                  :ARG1-of (p / point-01
                        :ARG0 (o2 / operand
                              :mod (p2 / pointer))))))"
949,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the * operator returns the value in the memory address the element points to.,4,4,4,"# ::snt the * operator returns the value in the memory address the element points to.
(r / return-02
      :ARG0 (o / operator
            :mod (s / string-entity
                  :value ""*""))
      :ARG1 (v / value
            :location (a / address
                  :mod (m / memory)
                  :ARG2-of (p / point-01
                        :ARG0 (e / element)))))"
950,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * returns the value,4,4,4,"# ::snt The * returns the value
(r / return-02
      :ARG0 (s / string-entity
            :value ""*"")
      :ARG1 (v / value))"
951,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to),5,5,5,"# ::snt The * operator returns the dereferenced pointer variable (ie: it returns the value of whatever variable the pointer is pointing to)
(r / return-02
      :ARG0 (o / operator
            :mod (s / string-entity
                  :value ""*""))
      :ARG1 (v / variable
            :ARG0-of (p / point-01)
            :ARG1-of (d / dereference-01)
            :ARG1-of (m / mean-01
                  :ARG2 (r2 / return-02
                        :ARG0 o
                        :ARG1 (v2 / value
                              :poss (v3 / variable
                                    :mod (w / whatever)
                                    :ARG1-of (p2 / point-01
                                          :ARG0 (p3 / point-01
                                                :ARG0 (p4 / person
                                                      :ARG0-of (p5 / point-01))))))))))"
952,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The dereferencing operator returns the dereferenced object.,4,5,4.5,"# ::snt The dereferencing operator returns the dereferenced object.
(r / return-02
      :ARG0 (o / operator
            :ARG0-of (d / defer-01))
      :ARG1 (o2 / object
            :ARG1-of (d2 / derefer-01)))"
953,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,* returns the synonym for the object its operand points to.,5,5,5,"# ::snt * returns the synonym for the object its operand points to.
(r / return-02
      :ARG1 (s / synonym
            :domain (o / object
                  :ARG2-of (p / point-01
                        :ARG0 (o2 / operand)))))"
954,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the information in the address the pointer points to.,4,4,4,"# ::snt it returns the information in the address the pointer points to.
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (ii2 / information
            :location (a / address
                  :ARG1-of (p / point-03
                        :ARG0 (p2 / person)))))"
955,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the star operator returns the value at the memory address the pointer is pointing at.,5,4,4.5,"# ::snt the star operator returns the value at the memory address the pointer is pointing at.
(r / return-02
      :ARG0 (p / person
            :ARG0-of (o / operate-01
                  :ARG1 (s / star)))
      :ARG1 (v / value)
      :ARG2 (a / address
            :mod (m / memory)
            :ARG1-of (p2 / point-01
                  :ARG0 (p3 / pointer))))"
956,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The star operator returns the object at that memory location.,4,4,4,"# ::snt The star operator returns the object at that memory location.
(r / return-02
      :ARG0 (p / person
            :ARG0-of (o / operate-01
                  :ARG1 (s / star)))
      :ARG1 (o2 / object)
      :location (l / location
            :mod (m / memory)
            :mod (t / that)))"
957,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The * operator returns the value of the object's memory address it precedes.,4,3,3.5,"# ::snt The * operator returns the value of the object's memory address it precedes.
(r / return-02
      :ARG0 (o / operator
            :mod (s / string-entity
                  :value ""*""))
      :ARG1 (v / value
            :poss (a / address
                  :mod (m / memory)
                  :poss (o2 / object)
                  :ARG1-of (p / precede-01
                        :ARG0 o))))"
958,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value of the object that the operand points to,4,5,4.5,"# ::snt The value of the object that the operand points to
(p / point-01
      :ARG0 (o / operand)
      :ARG1 (v / value
            :poss (o2 / object)))"
959,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,The value stored in the object being pointed to.,4,4,4,"# ::snt The value stored in the object being pointed to.
(v / value
      :ARG1-of (s / store-01
            :location (o / object
                  :ARG1-of (p / point-01))))"
960,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,the value of the variable the pointer points to.,4,4,4,"# ::snt the value of the variable the pointer points to.
(p / point-01
      :ARG0 (p2 / person
            :ARG0-of (p3 / point-01))
      :ARG2 (v / value
            :poss (v2 / variable)))"
961,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,returns synonym for the object its operand points to,5,5,5,"# ::snt returns synonym for the object its operand points to
(r / return-02
      :ARG1 (s / synonym
            :domain (o / object
                  :ARG2-of (p / point-03
                        :ARG0 (o2 / operand
                              :poss o2)))))"
962,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,synonym for the object its operand points to,5,5,5,"# ::snt synonym for the object its operand points to
(s / synonym
      :domain (o / object
            :ARG2-of (p / point-01
                  :ARG0 (o2 / operand
                        :poss o2))))"
963,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,Returns synonym for the object its operand points to,5,5,5,"# ::snt Returns synonym for the object its operand points to
(s / synonym
      :domain (r / return-02)
      :ARG1 (o / object
            :ARG2-of (p / point-01
                  :ARG0 (o2 / operand
                        :poss r))))"
964,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,"It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.",4,5,4.5,"# ::snt It dereferences a pointer, meaning it returns the value stored in the memory address a pointer refers to.
(d / dereference-01
      :ARG0 (ii / it)
      :ARG1 (p / pointer)
      :ARG1-of (m / mean-01
            :ARG2 (r / return-02
                  :ARG0 ii
                  :ARG1 (v / value
                        :ARG1-of (s / store-01
                              :ARG2 (a / address
                                    :mod (m2 / memory)
                                    :ARG1-of (r2 / refer-01
                                          :ARG0 (p2 / pointer))))))))"
965,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,It is unary operator that returns the value of the variable located at the address,4,4,4,"# ::snt It is unary operator that returns the value of the variable located at the address
(r / return-02
      :ARG0 (o / operator
            :mod (u / unary))
      :ARG1 (v / value
            :poss (v2 / variable
                  :ARG1-of (l / locate-01
                        :location (a / address)))))"
966,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a reference to a = variable,1,3,2,"# ::snt a reference to a = variable
(r / refer-01
      :ARG2 (e / equal-01
            :ARG1 (v / variable)
            :ARG2 v))"
967,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,a synonym for the object to which its pointer operand points,5,5,5,"# ::snt a synonym for the object to which its pointer operand points
(s / synonym
      :domain (o / object
            :ARG2-of (p / point-01
                  :ARG0 (o2 / operand
                        :ARG0-of (p2 / point-01)
                        :ARG1-of p2))))"
968,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,it returns the actual data at the address pointed to,4,3,3.5,"# ::snt it returns the actual data at the address pointed to
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (d / data
            :ARG1-of (a / actual-02)
            :location (a2 / address
                  :ARG1-of (p / point-01))))"
969,6.3,What does the star (*) operator return?,An alias (synonym) for the name of the object that its operand points to in memory. It is the dereferencing operator.,will return zero or many characters placed before the operator,1,3,2,"# ::snt will return zero or many characters placed before the operator
(r / return-02
      :ARG1 (o / or
            :op1 (c / character
                  :quant 0)
            :op2 (c2 / character
                  :quant (m / many))
            :ARG1-of (p / place-01
                  :ARG2 (b / before
                        :op1 (p2 / person
                              :ARG0-of (o2 / operate-01))))))"
970,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.,2,4,3,"# ::snt The array itself can be signed to a pointer or each element of the array can be assigned to a pointer.
(o / or
      :op1 (p / possible-01
            :ARG1 (s / sign-01
                  :ARG1 (a / array)
                  :ARG2 (p2 / pointer)))
      :op2 (p3 / possible-01
            :ARG1 (a2 / assign-01
                  :ARG1 (e / element
                        :mod (e2 / each)
                        :part-of (a3 / array))
                  :ARG2 (p4 / pointer))))"
971,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.,5,4,4.5,"# ::snt An array can be addressed in pointer/offset notation by setting a pointer variable equal to the variable name of the array. Elements of the array can then be accessed by adding an offset value to the pointer variable.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / address-02
                  :ARG1 (a2 / array)
                  :ARG2 (n / notation
                        :mod (s / slash
                              :op1 (p2 / pointer)
                              :op2 (o / offset)))
                  :manner (s2 / set-02
                        :ARG1 (v / variable
                              :ARG0-of (p3 / pointer)
                              :ARG1-of (e / equal-01
                                    :ARG2 (n2 / name-01
                                          :ARG1 (v2 / variable)))))))
      :snt2 (p4 / possible-01
            :ARG1 (a3 / access-01
                  :ARG1 (e2 / element
                        :part-of (a4 / array))
                  :manner (a5 / add-02
                        :ARG1 (v3 / value
                              :mod (o2 / offset))
                        :ARG2 v2)
                  :time (t / then))))"
972,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element b[ n ] can be accessed by  *( bPtr + n ).,5,3,4,"# ::snt Element b[ n ] can be accessed by  *( bPtr + n ).
(p / possible-01
      :ARG1 (a / access-01
            :ARG1 (e / element
                  :name (n / name
                        :op1 ""bPtr"")
                  :ARG1-of (e2 / equal-01
                        :ARG2 (s / string-entity
                              :value ""n"")))))"
973,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Using either the name of the array as a pointer or using a separate pointer that points to the array.,3,3,3,"# ::snt Using either the name of the array as a pointer or using a separate pointer that points to the array.
(o / or
      :op1 (u / use-01
            :ARG1 (n / name
                  :poss (a / array))
            :ARG2 (p / pointer))
      :op2 (u2 / use-01
            :ARG1 (p2 / pointer
                  :ARG1-of (s / separate-02)
                  :ARG0-of (p3 / point-01
                        :ARG2 a))))"
974,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",An element b[3] can be referenced by using *( bPtr + 3) instead.,5,3,4,"# ::snt An element b[3] can be referenced by using *( bPtr + 3) instead.
(p / possible-01
      :ARG1 (r / reference-02
            :ARG1 (e / element
                  :name (n / name
                        :op1 ""b[3""))
            :manner (u / use-01
                  :ARG1 (e2 / equal-01
                        :ARG1 (s / string-entity
                              :value ""bPtr"")
                        :ARG2 3)
                  :ARG1-of (ii / instead-of-91))))"
975,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",you get the memory location of the first element and the you add an offset to it to get other elements.,5,5,5,"# ::snt you get the memory location of the first element and the you add an offset to it to get other elements.
(a / and
      :op1 (g / get-01
            :ARG0 (y / you)
            :ARG1 (l / location
                  :mod (m / memory)
                  :poss (e / element
                        :ord (o / ordinal-entity
                              :value 1))))
      :op2 (a2 / add-02
            :ARG0 y
            :ARG1 (o2 / offset)
            :ARG2 l
            :purpose (g2 / get-01
                  :ARG0 y
                  :ARG1 (e2 / element
                        :mod (o3 / other)))))"
976,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",yes *(array +offset),5,3,4,"# ::snt yes *(array +offset)
(a / and
      :op1 (a2 / array)
      :op2 (o / offset))"
977,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].",3,4,3.5,"# ::snt The name of an array is considered to be a pointer in C++, and can be passed as such in functions parameters. Declaring int a[10]; creates a pointer ""a"" which stores the address of a[0].
(m / multi-sentence
      :snt1 (a / and
            :op1 (c / consider-01
                  :ARG1 (p / pointer
                        :domain (n / name
                              :poss (a2 / array)))
                  :ARG2 (l / language
                        :name (n2 / name
                              :op1 ""C++"")))
            :op2 (p2 / possible-01
                  :ARG1 (p3 / pass-03
                        :ARG1 n
                        :ARG2 (p4 / parameter
                              :mod (f / function))
                        :manner (p5 / pointer
                              :domain n))))
      :snt2 (c2 / create-01
            :ARG0 (d / declare-01
                  :ARG1 (s / string-entity
                        :value 10
                        :ARG1-of d)
                  :value ""a""))
      :ARG1 (p6 / pointer
            :value ""a""
            :ARG0-of (s2 / store-01
                  :ARG1 (a3 / address
                        :poss s))))"
978,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.,5,4,4.5,"# ::snt Element b[ n ] can be accessed by  *( bPtr + n ) is an example of how an array can be addressed as pointer/offset notation.
(e / exemplify-01
      :ARG0 (p / possible-01
            :ARG1 (a / access-01
                  :ARG1 (e2 / element
                        :name (n / name
                              :op1 ""bPtr"")
                        :ARG1-of (e3 / equal-01
                              :ARG2 (s / string-entity
                                    :value ""n"")))))
      :ARG1 (p2 / possible-01
            :ARG1 (a2 / address-02
                  :ARG1 (a3 / array)
                  :manner (n2 / notation
                        :mod (s2 / slash
                              :op1 (p3 / pointer)
                              :op2 (o / offset-01))))))"
979,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*(array + element),5,3,4,"# ::snt *(array + element)
(e / equal-01
      :ARG1 (a / array)
      :ARG2 (e2 / element))"
980,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*f[3],2,3,2.5,"# ::snt *f[3]
(h / have-li-91
      :ARG2 3)"
981,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).,5,5,5,"# ::snt you can have a pointer to the front of the array and add to the memory location (or offset from the initial value).
(p / possible-01
      :ARG1 (a / and
            :op1 (p2 / point-01
                  :ARG0 (y / you)
                  :ARG2 (f / front
                        :part-of (a2 / array)))
            :op2 (a3 / add-02
                  :ARG0 y
                  :ARG2 (o / or
                        :op1 (l / location
                              :mod (m / memory))
                        :op2 (o2 / offset-01
                              :ARG2 (v / value
                                    :mod (ii / initial)))))))"
982,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.",2,5,3.5,"# ::snt The pointer to the array will initially point to the first element of that array.  When the pointer is incremented, it will point to the next element, and so on.
(m / multi-sentence
      :snt1 (p / point-01
            :ARG0 (p2 / pointer
                  :ARG2 (a / array))
            :ARG2 (e / element
                  :ord (o / ordinal-entity
                        :value 1)
                  :part-of (a2 / array
                        :mod (t / that)))
            :time (ii / initial))
      :snt2 (p3 / point-01
            :ARG0 (p4 / pointer)
            :ARG2 (e2 / element
                  :mod (n / next))
            :time (ii2 / increment-01
                  :ARG1 p4))
      :snt3 (e3 / et-cetera))"
983,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.,5,3,4,"# ::snt With int x[10]; int *xPtr; xPtr = x; Address &x[1] is the same as xPtr + 1.
(s / same-01
      :ARG1 (s2 / string-entity
            :value ""x[10"")
      :ARG2 (s3 / string-entity
            :value ""xPtr"")
      :condition (s4 / string-entity
            :value ""xPtr = x"")
      :condition (s5 / string-entity
            :value ""&x[1"")
      :ARG3 (s6 / string-entity
            :value ""xPtr + 1""))"
984,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Takes the number of array elements and points to each at a time,1,3,2,"# ::snt Takes the number of array elements and points to each at a time
(a / and
      :op1 (t / take-01
            :ARG1 (n / number
                  :quant-of (e / element
                        :mod (a2 / array))))
      :op2 (p / point-01
            :ARG2 e
            :mod (a3 / at-a-time)))"
985,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3),5,3,4,"# ::snt The array can act as a pointer or be referenced by a pointer.  *(arrayPtr + 3) or *(array + 3)
(p / possible-01
      :ARG1 (o / or
            :op1 (a / act-01
                  :ARG0 (a2 / array)
                  :ARG1 (p2 / pointer))
            :op2 (r / reference-01
                  :ARG0 (p3 / pointer)
                  :ARG1 a2)
            :example o
            :op1 (s / string-entity
                  :value ""arrayPtr + 3"")
            :op2 (s2 / string-entity
                  :value ""arrayPtr + 3"")))"
986,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",by using the *(pointer + element-index),5,3,4,"# ::snt by using the *(pointer + element-index)
(u / use-01
      :ARG1 (s / string-entity
            :value ""+""
            :op1 (p / pointer)
            :op2 (ii / index
                  :mod (e / element))))"
987,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",using the star operator.   array: b[n] can be accessed by *(bpointer +n),5,4,4.5,"# ::snt using the star operator.   array: b[n] can be accessed by *(bpointer +n)
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (o / operator
                  :mod (s / star)))
      :snt2 (p / possible-01
            :ARG1 (a / access-01
                  :ARG1 (s2 / string-entity
                        :value ""bpointer +n"")
                  :ARG2 (a2 / array))))"
988,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",Element A[n] can be accessed by *(APtr + n),5,3,4,"# ::snt Element A[n] can be accessed by *(APtr + n)
(p / possible-01
      :ARG1 (a / access-01
            :ARG1 (e / element
                  :name (n / name
                        :op1 ""A[n""))
            :manner (s / string-entity
                  :value ""APtr + n"")))"
989,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)",2,4,3,"# ::snt by referencing a pointer and referring to other pointers relative to the first pointer(pointer+1, pointer +2, etc)
(a / and
      :op1 (r / refer-01
            :ARG1 (p / pointer))
      :op2 (r2 / refer-01
            :ARG1 (p2 / pointer
                  :mod (o / other)
                  :ARG1-of (r3 / relative-05
                        :ARG2 (p3 / pointer
                              :ord (o2 / ordinal-entity
                                    :value 1))
                        :example (a2 / and
                              :op1 (p4 / pointer
                                    :quant 1)
                              :op2 (p5 / pointer
                                    :quant 2)
                              :op3 (e / et-cetera))))))"
990,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.","First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);",5,5,5,"# ::snt First, some pointer variable must reference the first entity in the array. Any variable in the array can then be accessed by referring to that first entity's address plus some offset. i.e. ptrToArray = array;  nthEntity = *(ptrToArray + n);
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG2 (r / reference-01
                  :ARG0 (v / variable
                        :mod (p / pointer)
                        :mod (s / some))
                  :ARG1 (e / entity
                        :ord (o2 / ordinal-entity
                              :value 1)
                        :location (a / array)))
            :ord (o3 / ordinal-entity
                  :value 1))
      :snt2 (p2 / possible-01
            :ARG1 (a2 / access-01
                  :ARG1 (v2 / variable
                        :mod (a3 / any)
                        :location (a4 / array))
                  :manner (r2 / refer-01
                        :ARG1 (a5 / and
                              :op1 (a6 / address
                                    :poss (e2 / entity
                                          :ord (o4 / ordinal-entity
                                                :value 1)))
                              :op2 (o5 / offset
                                    :mod (s2 / some))))
                  :time (t / then))
            :snt2 a5
            :op1 (e3 / equal-01
                  :ARG1 (s3 / string-entity
                        :value ""ptrToArray"")
                  :ARG2 a4))
      :op2 (e4 / equal-01
            :ARG1 (s4 / string-entity
                  :value ""nthEntity"")
            :ARG2 (s5 / string-entity
                  :value ""ptrToArray"")))"
991,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&[b3] is as bptr + 3. Array can be treated as pointer,4,3,3.5,"# ::snt &[b3] is as bptr + 3. Array can be treated as pointer
(p / possible-01
      :ARG1 (t / treat-01
            :ARG1 (a / array)
            :ARG2 (p2 / pointer)))"
992,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",a[i] = *(a+i),5,3,4,"# ::snt a[i] = *(a+i)
(e / equal-01
      :ARG1 (s / string-entity
            :value ""a[i]""
            :ARG2-of e)
      :value ""a+i"")"
993,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",&b[3]  bPtr + 3,5,3,4,"# ::snt &b[3]  bPtr + 3
(a / and
      :op1 (s / string-entity
            :value 3)
      :op2 (s2 / string-entity
            :value ""bPtr + 3""))"
994,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",*(arrayName + index),5,3,4,"# ::snt *(arrayName + index)
(e / equal-01
      :ARG1 (n / name
            :mod (a / array))
      :ARG2 (ii / index))"
995,6.4,How can an array be addressed in pointer/offset notation?,"By initializing a pointer to point to the first element of the array, and then incrementing this pointer with the index of the array element.",multi-dimensional array,0,2,1,"# ::snt multi-dimensional array
(a / array
      :mod (d / dimension
            :quant (m / multiple)))"
996,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the number of bytes of an array during program compilation.,4,5,4.5,"# ::snt the number of bytes of an array during program compilation.
(n / number
      :quant-of (b / bytes
            :part-of (a / array))
      :time (c / compile-01
            :ARG1 (p / program)))"
997,6.5,What does the sizeof operator return?,The size in bytes of its operand.,The sizeof operator returns the size of the operand.,5,3,4,"# ::snt The sizeof operator returns the size of the operand.
(r / return-02
      :ARG0 (s / size
            :mod (o / operator))
      :ARG1 (s2 / size
            :mod (o2 / operand)))"
998,6.5,What does the sizeof operator return?,The size in bytes of its operand.,Returns size of operand in bytes.,5,5,5,"# ::snt Returns size of operand in bytes.
(r / return-02
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (o / operand)))
      :ARG3 (b / bytes))"
999,6.5,What does the sizeof operator return?,The size in bytes of its operand.,It returns the size of an array in bytes.,4,5,4.5,"# ::snt It returns the size of an array in bytes.
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (s / size-01
            :ARG1 (a / array)
            :ARG2 (b / bytes)))"
1000,6.5,What does the sizeof operator return?,The size in bytes of its operand.,Returns the size of the array in bytes during the program compilation.,4,5,4.5,"# ::snt Returns the size of the array in bytes during the program compilation.
(r / return-02
      :ARG1 (s / size-01
            :ARG1 (a / array)
            :ARG2 (b / bytes)
            :time (c / compile-01
                  :ARG1 (p / program))))"
1001,6.5,What does the sizeof operator return?,The size in bytes of its operand.,it returns the size of the argument passed in,5,3,4,"# ::snt it returns the size of the argument passed in
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (a / argue-01
                        :ARG1-of (p / pass-01)))))"
1002,6.5,What does the sizeof operator return?,The size in bytes of its operand.,The byte size of the date stored ina variable.,4,5,4.5,"# ::snt The byte size of the date stored ina variable.
(s / size
      :mod (b / byte)
      :poss (d / date
            :ARG1-of (s2 / store-01
                  :ARG2 (v / variable))))"
1003,6.5,What does the sizeof operator return?,The size in bytes of its operand.,sizeof returns the size of the operand in bytes,5,5,5,"# ::snt sizeof returns the size of the operand in bytes
(r / return-02
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (o / operand)))
      :ARG2 (t2 / thing
            :ARG2-of (s2 / size-01
                  :ARG1 o))
      :ARG3 (b / bytes))"
1004,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"The amount of memory required for a specific parameter such as ints, doubles.",4,3,3.5,"# ::snt The amount of memory required for a specific parameter such as ints, doubles.
(d / double-01
      :ARG1 (a / amount
            :quant-of (m / memory)
            :ARG1-of (r / require-01
                  :purpose (p / parameter
                        :ARG1-of (s / specific-02)
                        :example (s2 / string-entity
                              :value ""int"")))))"
1005,6.5,What does the sizeof operator return?,The size in bytes of its operand.,sizeof returns the size of the operand in bytes.,5,5,5,"# ::snt sizeof returns the size of the operand in bytes.
(r / return-02
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (o / operand)))
      :ARG2 (t2 / thing
            :ARG2-of (s2 / size-01
                  :ARG1 o))
      :ARG3 (b / bytes))"
1006,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of the information in bits.,1,4,2.5,"# ::snt the size of the information in bits.
(s / size-01
      :ARG1 (ii / information)
      :ARG2 (b / bit))"
1007,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of the string.,3,3,3,"# ::snt the size of the string.
(s / size-01
      :ARG1 (s2 / string))"
1008,6.5,What does the sizeof operator return?,The size in bytes of its operand.,sizeof returns the size in bytes of the respective object.,4,5,4.5,"# ::snt sizeof returns the size in bytes of the respective object.
(r / return-02
      :ARG0 (s / size)
      :ARG1 (s2 / size
            :ARG1-of (m / mean-01
                  :ARG2 (b / bytes))
            :poss (o / object
                  :mod (r2 / respective))))"
1009,6.5,What does the sizeof operator return?,The size in bytes of its operand.,The sizeof operator returns the total number of bytes of its operand.,5,5,5,"# ::snt The sizeof operator returns the total number of bytes of its operand.
(r / return-02
      :ARG0 (s / size
            :poss (c / company
                  :ARG0-of (o / operate-01)))
      :ARG1 (n / number
            :quant-of (b / bytes
                  :part-of (o2 / operation
                        :poss c))
            :ARG1-of (t / total-01)))"
1010,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"The size of an operand in bytes. Used with variable names, type names, and constant values",5,5,5,"# ::snt The size of an operand in bytes. Used with variable names, type names, and constant values
(m / multi-sentence
      :snt1 (s / size-01
            :ARG1 (o / operand)
            :ARG2 (b / bytes))
      :snt2 (u / use-01
            :accompanier (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (v / variable)))
                  :op2 (t2 / thing
                        :ARG2-of (n2 / name-01
                              :ARG1 (t3 / type)))
                  :op3 (t4 / thing
                        :ARG1-of (v2 / value-01
                              :mod (c / constant))))))"
1011,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size in bytes needed to store the object in memory,4,5,4.5,"# ::snt the size in bytes needed to store the object in memory
(s / size
      :quant (b / bytes)
      :ARG1-of (n / need-01
            :purpose (s2 / store-01
                  :ARG1 (o / object)
                  :ARG2 (m / memory))))"
1012,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of the list object.,4,2,3,"# ::snt the size of the list object.
(s / size-01
      :ARG1 (o / object
            :mod (l / list)))"
1013,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the sizeof operator returns the size in bytes of an array parameter,3,5,4,"# ::snt the sizeof operator returns the size in bytes of an array parameter
(r / return-02
      :ARG0 (o / operator
            :name (n / name
                  :op1 ""sizeof""))
      :ARG1 (s / size
            :ARG1-of (m / mean-01
                  :ARG2 (s2 / size
                        :quant (b / byt)
                        :part-of (p / parameter
                              :mod (a / array))))))"
1014,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the size of operand in bytes,5,5,5,"# ::snt the size of operand in bytes
(s / size-01
      :ARG1 (o / operand)
      :ARG2 (b / bytes))"
1015,6.5,What does the sizeof operator return?,The size in bytes of its operand.,returns the size in bytes of the specified data,4,5,4.5,"# ::snt returns the size in bytes of the specified data
(r / return-02
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (d / data
                        :ARG1-of (s2 / specify-01)))
            :quant (b / bytes)))"
1016,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"It returns the size of an operand in memory, which is checked at compiler-time.",5,3,4,"# ::snt It returns the size of an operand in memory, which is checked at compiler-time.
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (s / size
            :poss (o / operand)
            :location (m / memory)
            :ARG1-of (c / check-01
                  :time (t / time
                        :time-of (c2 / compile-01)))))"
1017,6.5,What does the sizeof operator return?,The size in bytes of its operand.,Return size of operand in bytes,5,5,5,"# ::snt Return size of operand in bytes
(r / return-02
      :ARG1 (s / size-01
            :ARG1 (o / operand)
            :ARG2 (b / bytes)))"
1018,6.5,What does the sizeof operator return?,The size in bytes of its operand.,the total number of bytes of an object.,4,5,4.5,"# ::snt the total number of bytes of an object.
(n / number
      :quant-of (b / byte
            :part-of (o / object))
      :ARG1-of (t / total-01))"
1019,6.5,What does the sizeof operator return?,The size in bytes of its operand.,total number of bytes in the array,4,5,4.5,"# ::snt total number of bytes in the array
(n / number
      :quant-of (b / bytes
            :part-of (a / array))
      :ARG1-of (t / total-01))"
1020,6.5,What does the sizeof operator return?,The size in bytes of its operand.,it returns the size in bytes of a certain variable type,4,5,4.5,"# ::snt it returns the size in bytes of a certain variable type
(r / return-02
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (t2 / type
                        :mod (v / variable)
                        :mod (c / certain)))
            :quant (b / bytes)))"
1021,6.5,What does the sizeof operator return?,The size in bytes of its operand.,"it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type",3,5,4,"# ::snt it yields the size in bytes of the operand, which can be an expression or the parenthesized name of a type
(y / yield-01
      :ARG0 (ii / it)
      :ARG1 (t / thing
            :ARG2-of (s / size-01
                  :ARG1 (o / operand)
                  :ARG1-of (m / mean-01
                        :ARG2 (o2 / or
                              :op1 (e / express-01)
                              :op2 (n / name-01
                                    :ARG1 (t2 / type)
                                    :ARG1-of (p / parenthesize-01))
                              :ARG1-of (p2 / possible-01)))
                  :quant (b / bytes))))"
1022,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",They can be passed by value or by reference,2,3,2.5,"# ::snt They can be passed by value or by reference
(p / possible-01
      :ARG1 (p2 / pass-03
            :ARG1 (t / they)
            :manner (o / or
                  :op1 (v / value)
                  :op2 (r / reference))))"
1023,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.",5,5,5,"# ::snt Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, constant pointer to constant data.
(a / and
      :op1 (p / point-01
            :ARG2 (d / data
                  :mod (c / constant
                        :polarity -)))
      :op2 (p2 / point-01
            :ARG2 (d2 / data
                  :mod (c2 / constant
                        :polarity -)))
      :op3 (p3 / point-01
            :ARG2 (d3 / data
                  :mod (c3 / constant
                        :polarity -)))
      :op4 (p4 / point-01
            :ARG2 d3)
      :op5 (p5 / point-01
            :ARG2 d3
            :mod c2))"
1024,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",#NAME?,5,5,5,"# ::snt #NAME?
(n / name
      :polarity (a / amr-unknown))"
1025,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.",5,5,5,"# ::snt Four different ways: Nonconstant pointer to nonconstant data, a nonconstant pointer to constant data, a constant pointer to nonconstant data and a constant pointer to constant data.
(w / way
      :quant 4
      :ARG1-of (d / differ-02)
      :domain (a / and
            :op1 (p / point-01
                  :ARG2 (d2 / data
                        :mod (c / constant
                              :polarity -)))
            :op2 (p2 / point-01
                  :ARG2 (d3 / data
                        :mod (c2 / constant
                              :polarity -)))
            :op3 (p3 / point-01
                  :ARG2 d3)
            :op4 (p4 / point-01
                  :ARG2 d3)
            :op5 (p5 / point-01
                  :ARG2 d3)))"
1026,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass-by-value or pass-by-reference.,2,3,2.5,"# ::snt Pass-by-value or pass-by-reference.
(o / or
      :op1 (p / pass-by-value)
      :op2 (p2 / pass-by-reference))"
1027,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass a pointer to a pointer or pass a reference to pointer.,2,3,2.5,"# ::snt you can pass a pointer to a pointer or pass a reference to pointer.
(p / possible-01
      :ARG1 (o / or
            :op1 (p2 / pass-01
                  :ARG0 (y / you)
                  :ARG1 (p3 / pointer)
                  :ARG2 (p4 / pointer))
            :op2 (p5 / pass-01
                  :ARG0 y
                  :ARG1 (r / refer-01
                        :ARG0 y
                        :ARG1 (p6 / pointer)))))"
1028,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",by address &bPtr or directly bPtr.,2,3,2.5,"# ::snt by address &bPtr or directly bPtr.
(o / or
      :op1 (a / address
            :mod (s / string-entity
                  :value ""&bPtr""
                  :op2-of o))
      :value ""&bPtr""
      :ARG1-of (d / direct-02))"
1029,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. ",5,5,5,"# ::snt Nonconstant pointer to nonconstant data, constant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to constant data. 
(a / and
      :op1 (p / point-01
            :ARG2 (d / data
                  :mod (c / constant
                        :polarity -)))
      :op2 (p2 / point-01
            :ARG2 (d2 / data
                  :mod (c2 / constant
                        :polarity -)))
      :op3 (p3 / point-01
            :ARG2 d2
            :mod (c3 / constant
                  :polarity -))
      :op4 (p4 / point-01
            :ARG2 d2)
      :op5 (p5 / point-01
            :ARG2 d2
            :mod c2))"
1030,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",By argument and reference.,1,3,2,"# ::snt By argument and reference.
(a / and
      :op1 (a2 / argue-01)
      :op2 (r / reference-02))"
1031,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.",5,5,5,"# ::snt Nonconstant pointer to nonconstant data, nonconstant pointer to constant data, constant pointer to nonconstant data, and constant pointer to constant data.
(a / and
      :op1 (p / point-01
            :ARG2 (d / data
                  :mod (c / constant
                        :polarity -)))
      :op2 (p2 / point-01
            :ARG2 (d2 / data
                  :mod (c2 / constant
                        :polarity -)))
      :op3 (p3 / point-01
            :ARG2 (d3 / data
                  :mod (c3 / constant
                        :polarity -)))
      :op4 (p4 / point-01
            :ARG2 d3)
      :op5 (p5 / point-01
            :ARG2 d3))"
1032,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",pass by value and pass by reference with reference or pointer arguments.,2,3,2.5,"# ::snt pass by value and pass by reference with reference or pointer arguments.
(a / and
      :op1 (p / pass-by-17
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (v / value))
      :op2 (p2 / pass-by-17
            :mode imperative
            :ARG0 y
            :ARG1 (t / thing
                  :ARG2-of (r / reference-01))
            :instrument (o / or
                  :op1 (t2 / thing
                        :ARG2-of (a2 / argue-01))
                  :op2 (t3 / thing
                        :ARG0-of (p3 / point-01)))))"
1033,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass them with the pointer (*) or the memory address (&),2,3,2.5,"# ::snt you can pass them with the pointer (*) or the memory address (&)
(p / possible-01
      :ARG1 (p2 / pass-03
            :ARG0 (y / you)
            :ARG1 (o / or
                  :op1 (p3 / pointer)
                  :op2 (a / address
                        :mod (m / memory)))
            :ARG2 (t / they)))"
1034,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const,5,5,5,"# ::snt nonconst -&gt; nonconst const -&gt; nonconst nonconst -&gt; const const -&gt; const
(a / and
      :op1 (c / const
            :polarity -)
      :op2 (c2 / const
            :polarity -)
      :op3 (c3 / const
            :polarity -))"
1035,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data,5,5,5,"# ::snt Nonconstant pointer to nonconstant data Constant pointer to nonconstant data Nonconstant pointer to constant data Constant point to constant data
(p / point-01
      :ARG1 (c / constant
            :polarity -)
      :ARG2 (d / data
            :mod c)
      :ARG0-of (p2 / point-01
            :ARG2 (d2 / data
                  :mod (c2 / constant
                        :polarity -))))"
1036,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.",5,5,5,"# ::snt Non-constant pointer to non-constant data, non-constant pointer to constant data, constant pointer to constant data, constant pointer to non-constant data.
(a / and
      :op1 (p / point-01
            :ARG2 (d / data
                  :mod (c / constant
                        :polarity -)))
      :op2 (p2 / point-01
            :ARG2 (d2 / data
                  :mod (c2 / constant
                        :polarity -)))
      :op3 (p3 / point-01
            :ARG2 (d3 / data
                  :mod (c3 / constant
                        :polarity -)))
      :op4 (p4 / point-01
            :ARG2 d3)
      :op5 (p5 / point-01
            :ARG2 d3
            :mod c2))"
1037,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *),2,3,2.5,"# ::snt Pass by reference with reference arguments. function(int &)  Pass by reference with pointer arguments. function(int *)
(m / multi-sentence
      :snt1 (p / pass-01
            :manner (r / reference)
            :accompanier (t / thing
                  :ARG0-of (a / argue-01
                        :ARG1 (t2 / thing
                              :ARG2-of (r2 / reference-01)))))
      :snt2 (p2 / pass-01
            :manner (r3 / reference)
            :accompanier (t3 / thing
                  :ARG0-of (a2 / argue-01
                        :ARG1 (p3 / pointer))))
      :snt3 (f / function))"
1038,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",you can pass the reference or the dereference in a function,2,2,2,"# ::snt you can pass the reference or the dereference in a function
(p / possible-01
      :ARG1 (p2 / pass-03
            :ARG0 (y / you)
            :ARG1 (o / or
                  :op1 (r / refer-01)
                  :op2 (d / dereference))
            :location (f / function)))"
1039,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.,5,5,5,"# ::snt 1. nonconstant pointer to nonconstant data. Its delcaration does no include  const qualifier. 2. nonconstant pointer to constant data. Provides the performance of pass-by-reference and the protection of pass-by-value 3. Constant pointer to nonconstant data.  4. Constant pointer to constant date.
(m / multi-sentence
      :snt1 (ii / include-01
            :polarity -
            :li 1
            :ARG1 (t / thing
                  :ARG0-of (p / point-01
                        :ARG2 (d / data
                              :mod (c / constant
                                    :polarity -))))
            :ARG2 (t2 / thing
                  :ARG2-of (q / qualify-02)
                  :mod (c2 / constant))
            :poss (ii2 / it))
      :snt2 (p2 / point-01
            :li 2
            :ARG2 (d2 / data
                  :mod (c3 / constant
                        :polarity -)))
      :snt3 (p3 / provide-01
            :li 3
            :ARG1 (a / and
                  :op1 (p4 / perform-02
                        :ARG1 (r / reference-01
                              :mod (p5 / pass-by-value)))
                  :op2 (p6 / protect-01
                        :ARG0 p2
                        :ARG1 (v / value
                              :mod p5))))
      :snt4 (p7 / point-01
            :ARG1 c3)
      :ARG2 (d3 / date
            :mod (c4 / constant)))"
1040,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data",5,5,5,"# ::snt constant pointer to constant data, constant pointer to nonconstant data, nonconstant pointer to constant data, nonconstant pointer to nonconstant data
(a / and
      :op1 (p / point-01
            :ARG2 (d / data
                  :mod (c / constant)))
      :op2 (p2 / point-01
            :ARG2 d
            :mod (c2 / constant
                  :polarity -))
      :op3 (p3 / point-01
            :ARG2 d)
      :op4 (p4 / point-01
            :ARG2 d)
      :op5 (p5 / point-01
            :ARG2 d)
      :op6 (p6 / point-01
            :polarity -
            :ARG2 d))"
1041,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data,5,5,5,"# ::snt Nonconstant pointer to nonconstant data Nonconstant pointer to constant data Constant pointer to nonconstant data Constant pointer to constant data
(p / pointer
      :mod (c / constant
            :polarity -)
      :prep-to (d / data
            :mod c)
      :mod (c2 / constant)
      :prep-to (d2 / data
            :mod (c3 / constant
                  :polarity -))
      :mod c2
      :prep-to (p2 / pointer
            :prep-to (d3 / data
                  :mod c2)))"
1042,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.",2,3,2.5,"# ::snt Pointers may be passed to functions by value, by reference with reference arguments, or by reference with pointer arguments.
(p / possible-01
      :ARG1 (p2 / pass-03
            :ARG1 (p3 / pointer)
            :ARG2 (f / function)
            :manner (o / or
                  :op1 (v / value)
                  :op2 (t / thing
                        :ARG1-of (r / reference-01)
                        :accompanier (t2 / thing
                              :ARG1-of (a / argue-01)))
                  :op3 (t3 / thing
                        :ARG1-of (r2 / reference-01)
                        :accompanier (p4 / pointer)))))"
1043,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.,5,5,5,"# ::snt There are four way to pass pointer to a function 1. non constant pointer to non constant data 2.non constant pointer to  constant data. 3. constant pointer to non constant data. 4. constant pointer to  constant data.
(m / multi-sentence
      :snt1 (w / way
            :quant 4
            :manner-of (p / pass-03
                  :ARG1 (p2 / pointer)
                  :ARG2 (f / function)))
      :snt2 (p3 / pointer
            :mod (c / constant
                  :polarity -)
            :prep-to (d / data
                  :mod (c2 / constant
                        :polarity -)))
      :snt3 (p4 / pointer
            :mod (c3 / constant
                  :polarity -)
            :prep-to (d2 / data))
      :snt4 (p5 / pointer
            :mod (c4 / constant
                  :prep-to c4
                  :polarity -))
      :snt5 (p6 / pointer
            :mod c4
            :prep-to (d3 / data))
      :snt6 (p7 / pointer
            :mod c4
            :prep-to (d4 / data)
            :mod (c5 / constant)))"
1044,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.",nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data,5,5,5,"# ::snt nonconstant pointer to nonconstant data nonconstant pointer to constant data constant pointer to nonconstant data constant pointer to constant data
(p / pointer
      :mod (c / constant
            :polarity -)
      :prep-to (d / data
            :mod c)
      :mod (c2 / constant)
      :prep-to (d2 / data
            :mod c2
            :polarity -)
      :mod c2
      :prep-to (p2 / pointer
            :prep-to (d3 / data
                  :mod (c3 / constant))))"
1045,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","pass by value, pass by reference with reference arguments, pass by reference with pointer arguments",2,3,2.5,"# ::snt pass by value, pass by reference with reference arguments, pass by reference with pointer arguments
(a / and
      :op1 (p / pass-by-17
            :ARG0 (y / you)
            :ARG1 (v / value))
      :op2 (p2 / pass-by-17
            :ARG0 y
            :ARG1 (t / thing
                  :ARG2-of (r / reference-01))
            :accompanier (t2 / thing
                  :ARG0-of (a2 / argue-01
                        :ARG1 (t3 / thing
                              :ARG2-of (r2 / reference-01)))))
      :op3 (p3 / pass-by-17
            :ARG0 y
            :ARG1 t3
            :accompanier (t4 / thing
                  :ARG2-of (a3 / argue-01
                        :ARG1 (p4 / pointer)))))"
1046,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither",5,3,4,"# ::snt you can pass it where either the pointer cant be moved, the data pointed to cant be changed, or both or neither
(p / possible-01
      :ARG1 (p2 / pass-03
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :location (o / or
                  :op1 (p3 / possible-01
                        :polarity -
                        :ARG1 (m / move-01
                              :ARG1 (p4 / pointer)))
                  :op2 (p5 / possible-01
                        :polarity -
                        :ARG1 (c / change-01
                              :ARG1 (d / data
                                    :ARG1-of (p6 / point-01))))
                  :op3 o
                  :op1 (b / both)
                  :op2 (n / neither))))"
1047,6.6,What are the different ways to pass a pointer to a function?,"There are four ways: nonconstant pointer to constant data, nonconstant pointer to nonconstant data, constant pointer to constant data, constant pointer to nonconstant data.","there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function",2,3,2.5,"# ::snt there are only two ways to pass something, by value and by reference. Use of dot or pointer operators within the receiving function and use of '&' operator inside the passing function
(m / multi-sentence
      :snt1 (w / way
            :quant 2
            :manner-of (p / pass-03
                  :ARG1 (s / something)
                  :manner (a / and
                        :op1 (v / value)
                        :op2 (r / reference)))
            :mod (o / only))
      :snt2 (a2 / and
            :op1 (u / use-01
                  :ARG1 (o2 / or
                        :op1 (o3 / operator
                              :mod (d / dot))
                        :op2 (o4 / operator
                              :mod (p2 / pointer)))
                  :location (f / function
                        :ARG0-of (r2 / receive-01)))
            :op2 (u2 / use-01
                  :ARG1 (o5 / operator
                        :mod (s2 / string-entity
                              :value ""&""))
                  :location (f2 / function
                        :ARG0-of (p3 / pass-03)))))"
1048,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.,5,5,5,"# ::snt A pointer that points to the memory address of the beginning part of a functions.  pretty much the pointer points to the function so it can be called to execute.
(m / multi-sentence
      :snt1 (p / pointer
            :ARG0-of (p2 / point-01
                  :ARG2 (a / address
                        :mod (m2 / memory)
                        :poss (p3 / part
                              :ARG0-of (b / begin-01
                                    :ARG1 (f / function))))))
      :snt2 (p4 / point-01
            :ARG0 (p5 / pointer)
            :ARG2 (f2 / function)
            :degree (p6 / pretty-much)
            :purpose (p7 / possible-01
                  :ARG1 (c / call-01
                        :ARG1 f2
                        :purpose (e / execute-01
                              :ARG1 f2)))))"
1049,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,A function pointer is a pointer that contains the address of the  function in memory.,5,5,5,"# ::snt A function pointer is a pointer that contains the address of the  function in memory.
(p / pointer
      :domain (p2 / pointer
            :ARG0-of (c / contain-01
                  :ARG1 (a / address
                        :poss (f / function-01))
                  :location (m / memory))))"
1050,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5,5,5,"# ::snt Function Pointers are pointers, i.e. variables, which point to the address of a function.
(p / pointer
      :domain (f / function)
      :ARG1-of (m / mean-01
            :ARG2 (v / variable
                  :ARG0-of (p2 / point-01
                        :ARG2 (a / address
                              :poss (f2 / function))))))"
1051,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.",5,5,5,"# ::snt A pointer to a function is the address where the code for the function resides. They can be passed to functions, returned from functions, stored in arrays and assigned to other pointers.
(m / multi-sentence
      :snt1 (a / address
            :location-of (r / reside-01
                  :ARG0 (f / function)
                  :ARG1 (c / code
                        :poss f))
            :domain (p / pointer))
      :snt2 (p2 / possible-01
            :ARG1 (a2 / and
                  :op1 (p3 / pass-01
                        :ARG1 (t / they)
                        :ARG2 (f2 / function))
                  :op2 (r2 / return-02
                        :ARG1 t
                        :ARG2 (f3 / function))
                  :op3 (s / store-01
                        :ARG1 t
                        :ARG2 (a3 / array))
                  :op4 (a4 / assign-01
                        :ARG1 t
                        :ARG2 (p4 / pointer
                              :mod (o / other))))))"
1052,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,It contains the address of the function in memory.,5,5,5,"# ::snt It contains the address of the function in memory.
(c / contain-01
      :ARG0 (ii / it)
      :ARG1 (a / address
            :poss (f / function-01
                  :location (m / memory))))"
1053,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,when it is dereferenced a function pointer calls its function with zero or more arguments.,4,3,3.5,"# ::snt when it is dereferenced a function pointer calls its function with zero or more arguments.
(c / call-01
      :ARG0 (p / pointer
            :mod (f / function))
      :ARG1 (f2 / function
            :poss f)
      :manner (o / or
            :op1 (a / argument
                  :quant 0)
            :op2 (a2 / argument
                  :quant (m / more-than
                        :op1 0)))
      :time (d / dereference-01
            :ARG1 f))"
1054,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer to a function,5,2,3.5,"# ::snt a pointer to a function
(p / pointer
      :destination (f / function))"
1055,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"A pointer to a function itself, contains the address of the function and can be used to call that function",5,5,5,"# ::snt A pointer to a function itself, contains the address of the function and can be used to call that function
(a / and
      :op1 (c / contain-01
            :ARG0 (p / pointer
                  :destination (f / function))
            :ARG1 (a2 / address
                  :poss f))
      :op2 (p2 / possible-01
            :ARG1 (u / use-01
                  :ARG1 p
                  :ARG2 (c2 / call-01
                        :ARG1 (f2 / function
                              :mod (t / that))))))"
1056,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"Function Pointers are pointers, i.e. variables, which point to the address of a function.",5,5,5,"# ::snt Function Pointers are pointers, i.e. variables, which point to the address of a function.
(p / pointer
      :domain (f / function)
      :ARG1-of (m / mean-01
            :ARG2 (v / variable
                  :ARG0-of (p2 / point-01
                        :ARG2 (a / address
                              :poss (f2 / function))))))"
1057,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,A pointer to a function that contains the addresses of the function.,5,5,5,"# ::snt A pointer to a function that contains the addresses of the function.
(p / pointer
      :destination (f / function)
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss f)))"
1058,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer that contains the address of a function,5,5,5,"# ::snt a pointer that contains the address of a function
(p / pointer
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss (f / function-01))))"
1059,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a function pointer is a pointer to a function. It can be used in substitution for calling a function.,5,5,5,"# ::snt a function pointer is a pointer to a function. It can be used in substitution for calling a function.
(m / multi-sentence
      :snt1 (p / pointer
            :domain (f / function))
      :snt2 (p2 / possible-01
            :ARG1 (u / use-01
                  :ARG1 (ii / it)
                  :ARG2 (s / substitute-01
                        :ARG1 (c / call-02
                              :ARG1 (f2 / function))))))"
1060,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.,5,5,5,"# ::snt Points to the memory address of a function.  Kind of like breaking a branch off of a tree object and hitting other objects with it.
(m / multi-sentence
      :snt1 (p / point-01
            :ARG2 (a / address
                  :mod (m2 / memory)
                  :poss (f / function)))
      :snt2 (r / resemble-01
            :ARG2 (a2 / and
                  :op1 (b / break-01
                        :ARG1 (b2 / branch
                              :part-of (o / object
                                    :mod (t / tree))))
                  :op2 (h / hit-01
                        :ARG1 (o2 / object
                              :mod (o3 / other))
                        :ARG2 b2))
            :degree (k / kind-of)))"
1061,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.",5,5,5,"# ::snt They are pointers that contain the addresses to functions, they can be passed and returned from functions, as well as stored in arrays and assigned to other function pointers.
(a / and
      :op1 (p / pointer
            :ARG0-of (c / contain-01
                  :ARG1 (a2 / address
                        :poss (f / function))))
      :op2 (p2 / possible-01
            :ARG1 (a3 / and
                  :op1 (p3 / pass-03
                        :ARG1 p)
                  :op2 (r / return-02
                        :ARG1 p
                        :source f))
            :op3 (a4 / and
                  :op1 (s / store-01
                        :ARG1 p
                        :location (a5 / array))
                  :op2 (a6 / assign-01
                        :ARG1 p
                        :ARG2 (p4 / pointer
                              :mod (f2 / function)
                              :mod (o / other))))))"
1062,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Pointer variables that point to function addresses.,5,5,5,"# ::snt Pointer variables that point to function addresses.
(v / variable
      :ARG0-of (p / point-01)
      :ARG0-of (p2 / point-01
            :ARG2 (a / address
                  :mod (f / function-01))))"
1063,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Contains the address of the function in memory.,5,5,5,"# ::snt Contains the address of the function in memory.
(c / contain-01
      :ARG1 (a / address
            :poss (f / function-01
                  :location (m / memory))))"
1064,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"a pointer that points to a function itself, which allows passing a function as a parameter to another function.",5,3,4,"# ::snt a pointer that points to a function itself, which allows passing a function as a parameter to another function.
(p / pointer
      :ARG0-of (p2 / point-01
            :ARG2 (f / function))
      :ARG0-of (a / allow-01
            :ARG1 (p3 / pass-05
                  :ARG1 (f2 / function)
                  :ARG2 (f3 / function
                        :mod (a2 / another))
                  :manner (p4 / parameter))))"
1065,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,pointers that contain the addresses of functions.,5,5,5,"# ::snt pointers that contain the addresses of functions.
(p / pointer
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss (f / function-01))))"
1066,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,is a pointer that contains the address of a function,5,5,5,"# ::snt is a pointer that contains the address of a function
(p / pointer
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss (f / function-01))))"
1067,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer that contains the address of the function definition,4,5,4.5,"# ::snt a pointer that contains the address of the function definition
(p / pointer
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss (d / define-01
                        :ARG1 (f / function-01)))))"
1068,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.",5,5,5,"# ::snt A function pointer contains the memory address of a function. Using a function pointer, a function can be passed to or returned by another function. Function pointers can also be stored in arrays.
(m / multi-sentence
      :snt1 (c / contain-01
            :ARG0 (p / pointer
                  :mod (f / function))
            :ARG1 (a / address
                  :mod (m2 / memory)
                  :poss (f2 / function)))
      :snt2 (p2 / possible-01
            :ARG1 (o / or
                  :op1 (p3 / pass-03
                        :ARG0 (f3 / function
                              :mod (a2 / another)
                              :ARG1-of p3))
                  :op2 (r / return-03
                        :ARG0 f3
                        :ARG1 f3))
            :manner (u / use-01
                  :ARG1 (p4 / pointer))
            :snt3 (p5 / possible-01
                  :ARG1 (s / store-01
                        :ARG1 (p6 / pointer
                              :mod (f4 / function))
                        :ARG2 (a3 / array)
                        :mod (a4 / also)))))"
1069,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,Function pointer is a pointer to a function. function pointer contains address of functions,5,5,5,"# ::snt Function pointer is a pointer to a function. function pointer contains address of functions
(m / multi-sentence
      :snt1 (p / pointer
            :mod (f / function))
      :snt2 (c / contain-01
            :ARG0 (p2 / pointer
                  :mod (f2 / function))
            :ARG1 (a / address
                  :poss f2)))"
1070,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,a pointer that contains the address of a function in memory.,5,5,5,"# ::snt a pointer that contains the address of a function in memory.
(p / pointer
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :poss (f / function-01
                        :location (m / memory)))))"
1071,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,it contains the address of the function in memory,5,5,5,"# ::snt it contains the address of the function in memory
(c / contain-01
      :ARG0 (ii / it)
      :ARG1 (a / address
            :poss (f / function-01
                  :location (m / memory))))"
1072,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,it is a pointer that points to the address of a function.,5,5,5,"# ::snt it is a pointer that points to the address of a function.
(p / pointer
      :domain (ii / it)
      :ARG0-of (p2 / point-01
            :ARG2 (a / address
                  :poss (f / function-01))))"
1073,6.7,What is a function pointer?,The address of the location in memory where the function code resides.,"When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.",4,4,4,"# ::snt When dereferenced, a function pointer invokes a function, passing it zero or more arguments just like a normal function. In programming languages like C, function pointers can be used to simplify code, such as replacing large switch statements.
(m / multi-sentence
      :snt1 (ii / invoke-01
            :ARG0 (p / pointer
                  :mod (f / function))
            :ARG1 (f2 / function)
            :manner (p2 / pass-03
                  :ARG0 p
                  :ARG1 (o / or
                        :op1 (a / argument
                              :quant 0)
                        :op2 (a2 / argument
                              :quant (m2 / more)))
                  :ARG1-of (r / resemble-01
                        :ARG2 (f3 / function
                              :ARG1-of (n / normal-02))))
            :time (d / dereference-01))
      :snt2 (p3 / possible-01
            :ARG1 (u / use-01
                  :ARG1 (p4 / pointer
                        :mod (f4 / function))
                  :ARG2 (s / simplify-01
                        :ARG0 p4
                        :ARG1 (c / code)
                        :example (r2 / replace-01
                              :ARG1 (s2 / state-01
                                    :ARG1 (s3 / switch
                                          :mod (l / large))))))
            :location (l2 / language
                  :name (n2 / name
                        :op1 ""C"")
                  :mod (p5 / program-01))))"
1074,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. ",4,5,4.5,"# ::snt Consists of sequence of nodes, each containing a number of data fields and one or two links called pointers that point to the next or previous nodes. 
(c / consist-01
      :ARG2 (s / sequence
            :consist-of (n / node
                  :ARG0-of (c2 / contain-01
                        :ARG1 (a / and
                              :op1 (f / field
                                    :quant (n2 / number)
                                    :mod (d / data))
                              :op2 (l / link
                                    :quant (o / or
                                          :op1 1
                                          :op2 2)
                                    :ARG1-of (c3 / call-01
                                          :ARG2 (p / pointer))
                                    :ARG0-of (p2 / point-01
                                          :ARG2 (o2 / or
                                                :op1 (n3 / node
                                                      :mod (n4 / next))
                                                :op2 (n5 / node
                                                      :mod (p3 / previous))))))))))"
1075,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A linked list is a list in which each item in the list points to the next item in the list.,4,5,4.5,"# ::snt A linked list is a list in which each item in the list points to the next item in the list.
(l / list
      :ARG1-of (l2 / link-01)
      :domain (l3 / list
            :location-of (p / point-01
                  :ARG1 (ii / item
                        :mod (e / each)
                        :part-of (l4 / list))
                  :ARG2 (ii2 / item
                        :mod (n / next)
                        :part-of l4))))"
1076,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. ",4,5,4.5,"# ::snt A linked list is a chain of structs or records called nodes and you have the ability to add, delete, or retrieve items. 
(a / and
      :op1 (c / chain-01
            :ARG1 (o / or
                  :op1 (s / struct)
                  :op2 (r / record
                        :ARG1-of (c2 / call-01
                              :ARG2 (n / node))))
            :ARG2 (l / list
                  :ARG1-of (l2 / link-01)))
      :op2 (p / possible-01
            :ARG1 (o2 / or
                  :op1 (a2 / add-02
                        :ARG0 (y / you)
                        :ARG1 (ii / item))
                  :op2 (d / delete-01
                        :ARG0 y
                        :ARG1 ii)
                  :op3 (r2 / retrieve-01
                        :ARG0 y
                        :ARG1 ii))))"
1077,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A list of elements, or nodes, that are linked to one another such that each element points to the next element.",4,5,4.5,"# ::snt A list of elements, or nodes, that are linked to one another such that each element points to the next element.
(l / list
      :consist-of (o / or
            :op1 (e / element)
            :op2 (n / node)
            :ARG1-of (l2 / link-01
                  :ARG2 (o2 / other)
                  :ARG0-of (c / cause-01
                        :ARG1 (p / point-01
                              :ARG0 (e2 / element
                                    :mod (e3 / each))
                              :ARG2 (e4 / element
                                    :mod (n2 / next)))))))"
1078,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.",4,5,4.5,"# ::snt A sequence of nodes, each containing data fields (specified by programmer) and pointer(s) which can point to the next or previous nodes.
(s / sequence
      :consist-of (n / node
            :ARG0-of (c / contain-01
                  :ARG1 (a / and
                        :op1 (f / field
                              :mod (d / data)
                              :ARG1-of (s2 / specify-01
                                    :ARG0 (p / person
                                          :ARG0-of (p2 / program-01))))
                        :op2 (p3 / pointer
                              :ARG0-of (p4 / point-01
                                    :ARG2 (o / or
                                          :op1 (n2 / node
                                                :mod (n3 / next))
                                          :op2 (n4 / node
                                                :mod (p5 / previous)))
                                    :ARG1-of (p6 / possible-01)))))))"
1079,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,a list of nodes where each node contains a data member and also a pointer to the next node.,4,5,4.5,"# ::snt a list of nodes where each node contains a data member and also a pointer to the next node.
(l / list
      :consist-of (n / node)
      :location-of (c / contain-01
            :ARG0 (n2 / node
                  :mod (e / each))
            :ARG1 (a / and
                  :op1 (m / member
                        :mod (d / data))
                  :op2 (p / pointer
                        :destination (n3 / node
                              :mod (n4 / next))
                        :mod (a2 / also)))))"
1080,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A list of items linked together.  Each item is linked to its successor.,4,5,4.5,"# ::snt A list of items linked together.  Each item is linked to its successor.
(m / multi-sentence
      :snt1 (l / list
            :consist-of (ii / item
                  :ARG1-of (l2 / link-01
                        :manner (t / together))))
      :snt2 (l3 / link-01
            :ARG1 (ii2 / item
                  :mod (e / each))
            :ARG2 (ii3 / item
                  :ARG1-of (s / succeed-02
                        :ARG0 ii2))))"
1081,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.,4,5,4.5,"# ::snt A linked list is a chain of nodes that each store a single piece of data and pointer variables that point to other nodes in the list.
(c / chain-01
      :ARG1 (n / node
            :ARG0-of (s / store-01
                  :ARG1 (a / and
                        :op1 (p / piece
                              :consist-of (d / data)
                              :ARG1-of (s2 / single-02))
                        :op2 (v / variable
                              :ARG0-of (p2 / point-01
                                    :ARG2 (n2 / node
                                          :mod (o / other)
                                          :part-of (l / list)))))))
      :ARG2 l
      :ARG1-of (l2 / link-01))"
1082,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes. ",4,5,4.5,"# ::snt one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes. 
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / structure
                  :quant 1
                  :ARG1-of (ii / include-91
                        :ARG2 (s2 / structure
                              :mod (d / data)
                              :mod (f / fundamental))))
            :op2 (p / possible-01
                  :ARG1 (u / use-01
                        :ARG1 s2
                        :ARG2 (ii2 / implement-01
                              :ARG1 (s3 / structure
                                    :mod (d2 / data)
                                    :mod (o / other))))))
      :snt2 (c / consist-01
            :ARG1 (ii3 / it)
            :ARG2 (a2 / and
                  :op1 (s4 / sequence
                        :consist-of (n / node)
                        :ARG0-of (c2 / contain-01
                              :ARG1 (f2 / field
                                    :mod (d3 / data)
                                    :ARG1-of (a3 / arbitrary-02)))))
            :op2 (r / reference
                  :quant (o2 / or
                        :op1 1
                        :op2 2)
                  :ARG0-of (p2 / point-01
                        :ARG2 (a4 / and
                              :op1 (n2 / node
                                    :mod (n3 / next))
                              :op2 (n4 / node
                                    :mod (p3 / previous)))))))"
1083,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.",4,5,4.5,"# ::snt A data structure in a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.
(s / structure-01
      :ARG1 (d / data)
      :location (s2 / sequence
            :consist-of (n / node
                  :ARG0-of (c / contain-01
                        :ARG1 (a / and-or
                              :op1 (f / field
                                    :mod (d2 / data)
                                    :ARG1-of (a2 / arbitrary-02))
                              :op2 (r / reference
                                    :quant (o / or
                                          :op1 1
                                          :op2 2)
                                    :ARG1-of (m / mean-01
                                          :ARG2 (l / link))
                                    :ARG0-of (p / point-01
                                          :ARG2 a
                                          :op1 (n2 / node
                                                :mod (n3 / next))
                                          :op2 (n4 / node
                                                :mod (p2 / previous)))))))))"
1084,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,Information in memory linked to the next piece of information and can only be linked forwards and not backwards.,2,5,3.5,"# ::snt Information in memory linked to the next piece of information and can only be linked forwards and not backwards.
(a / and
      :op1 (l / link-01
            :ARG1 (ii / information
                  :location (m / memory))
            :ARG2 (p / piece
                  :mod (ii2 / information)
                  :mod (n / next)))
      :op2 (p2 / possible-01
            :ARG1 (a2 / and
                  :op1 (l2 / link-01
                        :ARG1 ii
                        :direction (f / forward))
                  :op2 (l3 / link-01
                        :polarity -
                        :ARG1 ii
                        :direction (b / backwards))
                  :mod (o / only))))"
1085,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.",5,5,5,"# ::snt A linked list is a data structure that is not necessarily in the same contiguous memory space (such as arrays). It holds the data type and points to the next data item in the list, or in a doubly linked list also to the previous item.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :ARG1-of (l / link-01)
            :location (s2 / space
                  :mod (m2 / memory)
                  :ARG1-of (s3 / same-01
                        :polarity -)
                  :example (a / array))
            :ARG1-of (n / need-01
                  :polarity -))
      :snt2 (a2 / and
            :op1 (h / hold-01
                  :ARG0 (ii / it)
                  :ARG1 (t / type
                        :mod (d2 / data)))
            :op2 (p / point-01
                  :ARG0 ii
                  :ARG2 (o / or
                        :op1 (ii2 / item
                              :mod (d3 / data)
                              :mod (n2 / next)
                              :location (l2 / list))
                        :op2 (ii3 / item
                              :mod (p2 / previous))
                        :mod (a3 / also)
                        :location (l3 / list
                              :ARG1-of (l4 / link-01
                                    :mod (d4 / double)))))))"
1086,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A linked list is a data structure containing one or more data elements with a pointer to the next node.,4,5,4.5,"# ::snt A linked list is a data structure containing one or more data elements with a pointer to the next node.
(s / structure-01
      :ARG1 (d / data)
      :ARG0-of (c / contain-01
            :ARG1 (o / or
                  :op1 (e / element
                        :mod (d2 / data))
                  :op2 (e2 / element
                        :mod (d3 / data)
                        :quant (a / at-least
                              :op1 1))
                  :op2 (p / pointer
                        :destination (n / node
                              :mod (n2 / next)))))
      :domain (l / list
            :ARG1-of (l2 / link-01)))"
1087,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A series of ""Nodes"" structures with a value and a pointer that point to a similar ""Node"". Not quite an array, but still can carry a list of values. ",4,5,4.5,"# ::snt A series of ""Nodes"" structures with a value and a pointer that point to a similar ""Node"". Not quite an array, but still can carry a list of values. 
(m / multi-sentence
      :snt1 (s / series
            :consist-of (s2 / structure-01
                  :ARG1 (n / node)
                  :ARG0-of (h / have-03
                        :ARG1 (a / and
                              :op1 (v / value)
                              :op2 (p / pointer
                                    :ARG0-of (p2 / point-01
                                          :ARG2 (n2 / node
                                                :ARG1-of (r / resemble-01))))))))
      :snt2 (c / contrast-01
            :ARG1 (a2 / array
                  :polarity -
                  :degree (q / quite))
            :ARG2 (p3 / possible-01
                  :ARG1 (c2 / carry-01
                        :ARG0 a2
                        :ARG1 (l / list
                              :consist-of (v2 / value)))
                  :mod (s3 / still))))"
1088,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A data type that contains a pointer to at least the next  element in a list.,4,5,4.5,"# ::snt A data type that contains a pointer to at least the next  element in a list.
(t / type
      :mod (d / data)
      :ARG0-of (c / contain-01
            :ARG1 (p / pointer
                  :destination (e / element
                        :mod (n / next)
                        :mod (a / at-least)
                        :part-of (l / list)))))"
1089,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,Each component contains a Node - a data item and a pointer to the next item in the list,4,5,4.5,"# ::snt Each component contains a Node - a data item and a pointer to the next item in the list
(c / contain-01
      :ARG0 (c2 / component
            :mod (e / each))
      :ARG1 (a / and
            :op1 (n / node
                  :consist-of (ii / item
                        :mod (d / data)))
            :op2 (p / pointer
                  :destination (ii2 / item
                        :mod (n2 / next)
                        :location (l / list)))))"
1090,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.",4,5,4.5,"# ::snt A linked list is a chain of structs or records called nodes.  Each node has at least two members, one of which points to the next item or node in the list.
(m / multi-sentence
      :snt1 (c / chain-01
            :ARG1 (o / or
                  :op1 (s / struct)
                  :op2 (r / record)
                  :ARG1-of (c2 / call-01
                        :ARG2 (n / node)))
            :ARG2 (l / list
                  :ARG1-of (l2 / link-01)))
      :snt2 (h / have-03
            :ARG0 (n2 / node
                  :mod (e / each))
            :ARG1 (p / person
                  :quant (a / at-least
                        :op1 2)
                  :ARG0-of (h2 / have-org-role-91
                        :ARG2 (m2 / member))
                  :ARG0-of (p2 / point-01
                        :ARG2 (o2 / or
                              :op1 (ii / item)
                              :op2 (n3 / node)
                              :mod (n4 / next)
                              :part-of (l3 / list))))))"
1091,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"An array based list that uses an implicit ordering scheme, often using pointers.",1,4,2.5,"# ::snt An array based list that uses an implicit ordering scheme, often using pointers.
(l / list
      :ARG1-of (b / base-02
            :ARG2 (a / array))
      :ARG0-of (u / use-01
            :ARG1 (s / scheme
                  :mod (o / order-02)
                  :mod (ii / implicit))
            :ARG0-of (u2 / use-01
                  :ARG1 (p / pointer)
                  :frequency (o2 / often))))"
1092,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,a series of structures containing data items and a pointer that links the structure to the next structure.,4,5,4.5,"# ::snt a series of structures containing data items and a pointer that links the structure to the next structure.
(s / structure
      :quant (s2 / series)
      :ARG0-of (c / contain-01
            :ARG1 (a / and
                  :op1 (ii / item
                        :mod (d / data))
                  :op2 (p / pointer
                        :ARG0-of (l / link-01
                              :ARG1 (s3 / structure)
                              :ARG2 (s4 / structure
                                    :mod (n / next)))))))"
1093,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)",4,5,4.5,"# ::snt A linked list is a collection of Objects each containing at least one data member, and a pointer to the next object in the list (and the previous object in the case of a doubly linked list)
(a / and
      :op1 (c / collect-01
            :ARG1 (o / object
                  :ARG0-of (c2 / contain-01
                        :ARG1 (m / member
                              :mod (d / data)
                              :quant (a2 / at-least
                                    :op1 1)))
                  :mod (e / each)))
      :op2 (p / pointer
            :destination (a3 / and
                  :op1 (o2 / object
                        :mod (n / next)
                        :location (l / list))
                  :op2 (o3 / object
                        :mod (p2 / previous)
                        :condition (l2 / list
                              :ARG1-of (l3 / link-01
                                    :mod (d2 / double))))))
      :domain (l4 / list
            :ARG1-of (l5 / link-01)))"
1094,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together,4,4,4,"# ::snt A link list is a data structure which is built from structures and pointers. It forms a chain of nodes with pointers representing the links of the chain and holding the entire thing together
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :domain (l / list
                  :mod (l2 / link))
            :ARG1-of (b / build-01
                  :ARG2 (a / and
                        :op1 (s2 / structure)
                        :op2 (p / pointer))))
      :snt2 (f / form-01
            :ARG0 (ii / it)
            :ARG1 (c / chain
                  :consist-of (n / node
                        :consist-of (p2 / pointer
                              :ARG0-of (r / represent-01
                                    :ARG1 (l3 / link
                                          :part-of c))))
                  :ARG0-of (h / hold-01
                        :ARG1 (t / thing
                              :mod (e / entire))
                        :ARG2 (t2 / together)))))"
1095,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element,4,5,4.5,"# ::snt its a list of pointers that are linked 2 each other. every pointer points to the next pointer which has the next element
(m / multi-sentence
      :snt1 (l / list
            :consist-of (p / pointer
                  :ARG1-of (l2 / link-01
                        :ARG2 (o / other
                              :mod (e / each)))))
      :snt2 (p2 / pointer
            :ARG2 (p3 / pointer
                  :mod (e2 / every))
            :ARG0-of (h / have-03
                  :ARG1 (e3 / element
                        :mod (n / next)))))"
1096,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,linear collection of self-referential nodes connected by pointers.,4,4,4,"# ::snt linear collection of self-referential nodes connected by pointers.
(c / collect-01
      :ARG1 (n / node
            :ARG0-of (r / refer-01
                  :ARG1 (s / self))
            :ARG1-of (c2 / connect-01
                  :ARG2 (p / pointer)))
      :manner (l / linear))"
1097,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,the items of a data structure are linked to each other using pointers,4,5,4.5,"# ::snt the items of a data structure are linked to each other using pointers
(l / link-01
      :ARG1 (ii / item
            :part-of (s / structure-01
                  :ARG1 (d / data)))
      :ARG2 (o / other
            :mod (e / each))
      :instrument (p / pointer))"
1098,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,A list of objects where each object contains a link to the next item in the list,4,5,4.5,"# ::snt A list of objects where each object contains a link to the next item in the list
(l / list-01
      :ARG1 (o / object)
      :location-of (c / contain-01
            :ARG0 (o2 / object
                  :mod (e / each))
            :ARG1 (l2 / link-01
                  :ARG2 (ii / item
                        :mod (n / next)
                        :location l))))"
1099,7.1,What is a linked list?,A collection of elements that can be allocated dynamically.,"A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  ",4,5,4.5,"# ::snt A linked list is one of the fundamental data structures, and can be used to implement other data structures. It consists of a sequence of nodes, each containing arbitrary data fields and one or two references (""links"") pointing to the next and/or previous nodes.  
(m / multi-sentence
      :snt1 (l / list
            :ARG1-of (l2 / link-01)
            :ARG1-of (ii / include-91
                  :ARG2 (s / structure
                        :mod (d / data)
                        :mod (f / fundamental))))
      :snt2 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 l
                  :ARG2 (ii2 / implement-01
                        :ARG1 (s2 / structure
                              :mod (d2 / data)
                              :mod (o / other)))))
      :snt3 (c / consist-01
            :ARG1 (ii3 / it)
            :ARG2 (a / and
                  :op1 (s3 / sequence
                        :consist-of (n / node
                              :ARG0-of (c2 / contain-01
                                    :ARG1 (f2 / field
                                          :mod (d3 / data)
                                          :ARG1-of (a2 / arbitrary-02)))
                              :mod (e / each)))
                  :op2 (r / reference
                        :quant (o2 / or
                              :op1 1
                              :op2 2)
                        :ARG0-of (p2 / point-01
                              :ARG2 (a3 / and
                                    :op1 (n2 / node
                                          :mod (n3 / next))
                                    :op2 (n4 / node
                                          :mod (p3 / previous))))))))"
1100,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.,5,5,5,"# ::snt Elements can be inserted into a link list at any point and does not need to be resized unlike an array needs to be.
(a / and
      :op1 (p / possible-01
            :ARG1 (ii / insert-01
                  :ARG1 (e / element)
                  :ARG2 (l / list
                        :mod (l2 / link))
                  :time (p2 / point
                        :mod (a2 / any))))
      :op2 (n / need-01
            :polarity -
            :ARG1 (r / resize-01
                  :ARG1 e)
            :ARG1-of (r2 / resemble-01
                  :polarity -
                  :ARG2 (n2 / need-01
                        :ARG1 (r3 / resize-01
                              :ARG1 (a3 / array))))))"
1101,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.",5,5,5,"# ::snt Unlike arrays, linked lists can insert and delete without shifting data and change in size easily.
(p / possible-01
      :ARG1 (a / and
            :op1 (ii / insert-01
                  :ARG0 (l / list
                        :ARG1-of (l2 / link-01)))
            :op2 (d / delete-01
                  :ARG0 l)
            :manner (a2 / and
                  :polarity -
                  :op1 (s / shift-01
                        :ARG0 l
                        :ARG1 (d2 / data))
                  :op2 (c / change-01
                        :ARG0 l
                        :ARG1 (s2 / size))
                  :ARG1-of (e / easy-05)))
      :ARG1-of (r / resemble-01
            :polarity -
            :ARG2 (a3 / array)))"
1102,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Array size is fixed,but Linked is not fixed.",5,5,5,"# ::snt Array size is fixed,but Linked is not fixed.
(c / contrast-01
      :ARG1 (f / fix-02
            :ARG1 (s / size
                  :mod (a / array)))
      :ARG2 (f2 / fix-02
            :polarity -
            :ARG1 (t / thing
                  :ARG1-of (l / link-01))))"
1103,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,You can insert into and delete items from a pointer-based linked list without shifting data.,5,4,4.5,"# ::snt You can insert into and delete items from a pointer-based linked list without shifting data.
(p / possible-01
      :ARG1 (a / and
            :op1 (ii / insert-01
                  :ARG0 (y / you)
                  :ARG1 (ii2 / item)
                  :ARG2 (l / list
                        :ARG1-of (l2 / link-01)
                        :ARG1-of (b / base-02
                              :ARG2 (p2 / pointer))))
            :op2 (d / delete-01
                  :ARG0 y
                  :ARG1 ii2)
            :manner (s / shift-01
                  :polarity -
                  :ARG0 y
                  :ARG1 (d2 / data))))"
1104,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.,5,5,5,"# ::snt Arrays must be of a defined size... elements can be added to a linked list w/o defining any size.
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG2 (s / size
                  :ARG1-of (d / define-01)
                  :domain (a / array)))
      :snt2 (p / possible-01
            :ARG1 (a2 / add-02
                  :ARG1 (e / element)
                  :ARG2 (l / list
                        :ARG1-of (l2 / link-01))
                  :manner (d2 / define-01
                        :polarity -
                        :ARG1 (s2 / size
                              :mod (a3 / any))))))"
1105,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time",3,5,4,"# ::snt The principal benefit of a linked list over a conventional array is that the order of the linked items may be different from the order that the data items are stored in memory or on disk, allowing the list of items to be traversed in a different order. A linked list is a self-referential datatype because it contains a pointer or link to another datum of the same type. Linked lists permit insertion and removal of nodes at any point in the list in constant time
(m / multi-sentence
      :snt1 (b / benefit-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (p / possible-01
                  :ARG1 (d / differ-02
                        :ARG1 (o / order
                              :poss (ii / item
                                    :ARG1-of (l3 / link-01)))
                        :ARG2 (o2 / order
                              :poss (s / store-01
                                    :ARG1 (ii2 / item
                                          :mod (d2 / data))
                                    :location (o3 / or
                                          :op1 (m2 / memory)
                                          :op2 (d3 / disk)))))
                  :ARG0-of (a / allow-01
                        :ARG1 (t / traverse-01
                              :ARG1 (l4 / list
                                    :consist-of ii2)
                              :manner o2)))
            :mod (p2 / principal)
            :ARG1-of (c / cause-01
                  :ARG0 (c2 / contain-01
                        :ARG0 l4
                        :ARG1 o3
                        :op1 (p3 / pointer)
                        :op2 l3
                        :ARG2 (d4 / datum
                              :mod (a2 / another)
                              :ARG1-of (s2 / same-01)))))
      :snt2 (p4 / permit-01
            :ARG0 (l5 / list
                  :ARG1-of (l6 / link-01))
            :ARG1 (a3 / and
                  :op1 (ii3 / insert-01
                        :ARG1 (n / node))
                  :op2 (r / remove-01
                        :ARG1 n))
            :location (a4 / array
                  :mod (c3 / conventional))))"
1106,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,You can expand when you need it.  You do not have to predetermine the size.,5,5,5,"# ::snt You can expand when you need it.  You do not have to predetermine the size.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (e / expand-01
                  :ARG0 (y / you)
                  :time (n / need-01
                        :ARG0 y
                        :ARG1 e)))
      :snt2 (o / obligate-01
            :polarity -
            :ARG1 (y2 / you)
            :ARG2 (p2 / predetermine-01
                  :ARG0 y2
                  :ARG1 (s / size))))"
1107,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists are able to grow and shrink in size as needed,5,5,5,"# ::snt Linked lists are able to grow and shrink in size as needed
(p / possible-01
      :ARG1 (a / and
            :op1 (g / grow-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01)))
            :op2 (s / shrink-01
                  :ARG1 l
                  :ARG3 (s2 / size))
            :ARG1-of (n / need-01)))"
1108,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions,5,5,5,"# ::snt Linked list is able to grow in size as needed. Does not require the shifting of items during insertions and deletions
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (g / grow-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :ARG2 (s / size)
                  :ARG1-of (n / need-01)))
      :snt2 (r / require-01
            :polarity -
            :ARG1 (s2 / shift-01
                  :ARG1 (ii / item)
                  :time (a / and
                        :op1 (ii2 / insert-01)
                        :op2 (d / delete-01)))))"
1109,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.",5,5,5,"# ::snt A linked list is not fixed in size, and does not require the shifting of items during insertions and deletions.
(a / and
      :op1 (f / fix-03
            :polarity -
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG2 (s / size))
      :op2 (r / require-01
            :polarity -
            :ARG0 l
            :ARG1 (s2 / shift-01
                  :ARG1 (ii / item)
                  :time (a2 / and
                        :op1 (ii2 / insert-01)
                        :op2 (d / delete-01)))))"
1110,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,There is no limit as to how many you create where an array can only hold a given amount of information.,3,3,3,"# ::snt There is no limit as to how many you create where an array can only hold a given amount of information.
(l / limit-01
      :polarity -
      :ARG1 (t / thing
            :quant-of (t2 / thing
                  :ARG1-of (c / create-01
                        :ARG0 (y / you))))
      :condition (p / possible-01
            :ARG1 (h / hold-01
                  :ARG0 (a / array)
                  :ARG1 (a2 / amount
                        :quant-of (ii / information)
                        :ARG1-of (g / give-01))
                  :mod (o / only))))"
1111,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists have constant time insertion and deletion,4,3,3.5,"# ::snt Linked lists have constant time insertion and deletion
(h / have-03
      :ARG0 (l / list
            :ARG1-of (l2 / link-01))
      :ARG1 (a / and
            :op1 (ii / insert-01
                  :ARG1 l
                  :time (t / time)
                  :ARG1-of (c / constant-02))
            :op2 (d / delete-01
                  :ARG1 l)))"
1112,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.",5,5,5,"# ::snt Linked lists can be grown dynamically, items don't require shifting, and they have a greater awesome factor than that of arrays.
(a / and
      :op1 (p / possible-01
            :ARG1 (g / grow-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :manner (d / dynamic)))
      :op2 (r / require-01
            :polarity -
            :ARG0 (ii / item)
            :ARG1 (s / shift-01
                  :ARG1 ii))
      :op3 (h / have-03
            :ARG0 l
            :ARG1 (f / factor
                  :ARG0-of (a2 / awe-01)
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (g2 / great)
                        :ARG3 (m / more)
                        :ARG4 (f2 / factor
                              :mod (a3 / array))))))"
1113,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.,5,5,5,"# ::snt Linked lists have an indefinite size. They can be added to and taken away from very easily with little difficulty in the shifting of data.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :mod (d / definite
                        :polarity -)))
      :snt2 (p / possible-01
            :ARG1 (a / and
                  :op1 (a2 / add-02
                        :ARG1 (t / they))
                  :op2 (t2 / take-01
                        :ARG1 t
                        :ARG2 (a3 / away)
                        :manner (e / easy-05
                              :degree (v / very)))
                  :manner (d2 / difficult
                        :degree (l3 / little)
                        :topic (s2 / shift-01
                              :ARG1 (d3 / data))))))"
1114,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.",5,5,5,"# ::snt Nearly infinite size, limited only by system memory and also the ability to expand the size dynamically.
(l / limit-01
      :ARG0 (a / and
            :op1 (m / memory
                  :mod (s / system)
                  :mod (o / only))
            :op2 (p / possible-01
                  :ARG1 (e / expand-01
                        :ARG1 (s2 / size)
                        :manner (d / dynamic))
                  :mod (a2 / also)))
      :ARG1 (s3 / size
            :mod (ii / infinite
                  :degree (n / near))))"
1115,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"They grow as needed, while arrays are of fixed size.",5,5,5,"# ::snt They grow as needed, while arrays are of fixed size.
(c / contrast-01
      :ARG1 (g / grow-01
            :ARG1 (t / they)
            :ARG1-of (r / resemble-01
                  :ARG2 (n / need-01)))
      :ARG2 (s / size
            :ARG1-of (f / fix-03)
            :domain (a / array)))"
1116,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i',5,5,5,"# ::snt Does not have a fixed size. Linked list is able to grow as needed. The time to access an array bases list takes a contant amount of time where as an linked-base like depends on 'i'
(m / multi-sentence
      :snt1 (h / have-03
            :polarity -
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :ARG1-of (f / fix-03)))
      :snt2 (p / possible-01
            :ARG1 (g / grow-01
                  :ARG1 (l3 / list
                        :ARG1-of (l4 / link-01))
                  :ARG1-of (n / need-01)))
      :snt3 (t / take-10
            :ARG0 (t2 / time
                  :ARG0 (a / access-01
                        :ARG1 (l5 / list
                              :mod (b / base
                                    :mod (a2 / array)))))
            :ARG1 t2)
      :ARG1 (a3 / amount
            :mod (c / contant))
      :concession (d / depend-01
            :ARG0 (b2 / base
                  :ARG1-of l4))
      :ARG1 (s2 / string-entity
            :value ""i""))"
1117,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.,5,5,5,"# ::snt Linked lists can grow and shrink as you need them to.  Arrays have a fixed size.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / and
                  :op1 (g / grow-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01)))
                  :op2 (s / shrink-01
                        :ARG1 l)
                  :ARG1-of (n / need-01
                        :ARG0 (y / you))))
      :snt2 (h / have-03
            :ARG0 (a2 / array)
            :ARG1 (s2 / size
                  :ARG1-of (f / fix-03))))"
1118,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,more memory can be allocated on the fly for more items,4,5,4.5,"# ::snt more memory can be allocated on the fly for more items
(p / possible-01
      :ARG1 (a / allocate-01
            :ARG1 (m / memory
                  :quant (m2 / more))
            :ARG2 (ii / item
                  :quant (m3 / more))
            :manner (o / on-the-fly)))"
1119,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"A linked list may be increased in size as needed, while an array's size is set when it is created",5,5,5,"# ::snt A linked list may be increased in size as needed, while an array's size is set when it is created
(p / possible-01
      :ARG1 (ii / increase-01
            :ARG1 (s / size
                  :poss (l / list
                        :ARG1-of (l2 / link-01)))
            :ARG1-of (n / need-01))
      :time (s2 / set-02
            :ARG1 (s3 / size
                  :poss (a / array))
            :time (c / create-01
                  :ARG1 a)))"
1120,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"Array has a fixed size, but linked list is able to grow in size as needed",5,5,5,"# ::snt Array has a fixed size, but linked list is able to grow in size as needed
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (a / array)
            :ARG1 (s / size
                  :ARG1-of (f / fix-03)))
      :ARG2 (p / possible-01
            :ARG1 (g / grow-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :ARG2 (s2 / size)
                  :ARG1-of (n / need-01))))"
1121,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,its resizeable,5,5,5,"# ::snt its resizeable
(p / possible-01
      :ARG1 (r / resize-01
            :ARG1 (ii / it)))"
1122,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,Linked lists do not have a set size and can grow or shrink as needed.,5,5,5,"# ::snt Linked lists do not have a set size and can grow or shrink as needed.
(a / and
      :op1 (h / have-03
            :polarity -
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :mod (s2 / set)))
      :op2 (p / possible-01
            :ARG1 (o / or
                  :op1 (g / grow-01
                        :ARG1 l)
                  :op2 (s3 / shrink-01
                        :ARG1 l)
                  :ARG1-of (n / need-01))))"
1123,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,linked lists are abe to grow as needed to a new size,5,5,5,"# ::snt linked lists are abe to grow as needed to a new size
(p / possible-01
      :ARG1 (g / grow-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG4 (s / size
                  :ARG1-of (n / new-01))
            :ARG1-of (n2 / need-01)))"
1124,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,"The size is not fixed, easier sorting because of no shifting, easier to insert items into the list",5,5,5,"# ::snt The size is not fixed, easier sorting because of no shifting, easier to insert items into the list
(a / and
      :op1 (f / fix-02
            :polarity -
            :ARG1 (s / size))
      :op2 (e / easy-05
            :ARG1 (s2 / sort-01
                  :ARG1-of (c / cause-01
                        :ARG0 (s3 / shift-01
                              :polarity -)))
            :ARG2-of (h / have-degree-91
                  :ARG1 s2
                  :ARG3 (m / more)))
      :op3 (e2 / easy-05
            :ARG1 (ii / insert-01
                  :ARG1 (ii2 / item)
                  :ARG2 (l / list))
            :ARG2-of (h2 / have-degree-91
                  :ARG1 ii
                  :ARG3 (m2 / more))))"
1125,7.2,What is the main advantage of linked lists over arrays?,The linked lists can be of variable length.,The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.,5,5,5,"# ::snt The size of array is restricted to declaration. Insertion/Deletion of values in middle of array is not possible.
(m / multi-sentence
      :snt1 (r / restrict-01
            :ARG1 (s / size
                  :poss (a / array))
            :ARG2 (d / declare-02
                  :ARG1 s))
      :snt2 (p / possible-01
            :polarity -
            :ARG1 (s2 / slash
                  :op1 (ii / insert-01
                        :ARG1 (v / value)
                        :location (m2 / middle
                              :part-of (a2 / array)))
                  :op2 (r2 / remove-01
                        :ARG1 v))))"
1126,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.,5,5,5,"# ::snt Array can retrieve memory from any place in the list while in a link list you have to traverse through each individual node.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (r / retrieve-01
                  :ARG0 (a / array)
                  :ARG1 (m / memory)
                  :ARG2 (p2 / place
                        :mod (a2 / any)
                        :location (l / list))))
      :ARG2 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (t / traverse-01
                  :ARG0 y
                  :ARG1 (n / node
                        :mod (ii / individual)
                        :mod (e / each)))
            :location (l2 / list
                  :mod (l3 / link))))"
1127,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.",4,5,4.5,"# ::snt Arrays require less memory than linked lists and allow direct access to a specified item. Also, insertion and deletion in arrays does not require a list traversal.
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / require-01
                  :ARG0 (a2 / array)
                  :ARG1 (m2 / memory
                        :ARG1-of (h / have-quant-91
                              :ARG3 (l / less)
                              :ARG4 (l2 / list
                                    :ARG1-of (l3 / link-01)))))
            :op2 (a3 / allow-01
                  :ARG0 a2
                  :ARG1 (a4 / access-01
                        :ARG1 (ii / item
                              :ARG1-of (s / specify-01))
                        :ARG1-of (d / direct-02))))
      :snt2 (r2 / require-01
            :polarity -
            :ARG0 (a5 / and
                  :op1 (ii2 / insert-01
                        :ARG1 (a6 / array))
                  :op2 (d2 / delete-01
                        :ARG1 a6))
            :ARG1 (t / traverse-01
                  :ARG1 (l4 / list))
            :mod (a7 / also)))"
1128,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.",5,5,5,"# ::snt Access to a particular element is very fast, because its location in memory can be determined mathematically and accessed directly.
(f / fast-02
      :ARG1 (a / access-01
            :ARG1 (e / element
                  :mod (p / particular)))
      :degree (v / very)
      :ARG1-of (c / cause-01
            :ARG0 (p2 / possible-01
                  :ARG1 (a2 / and
                        :op1 (d / determine-01
                              :ARG1 (l / location
                                    :poss e
                                    :location (m / memory))
                              :manner (m2 / mathematics))
                        :op2 (a3 / access-01
                              :ARG1 e
                              :ARG1-of (d2 / direct-02))))))"
1129,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.,5,5,5,"# ::snt Arrays are good for random access and good for sequential access which are both in constant time. Where linked lists are linear for random access. Arrays are faster in this case.
(m / multi-sentence
      :snt1 (a / and
            :op1 (g / good-02
                  :ARG1 (a2 / array)
                  :ARG2 (a3 / access-01
                        :mod (r / random)))
            :op2 (g2 / good-02
                  :ARG1 a2
                  :ARG2 (a4 / access-01
                        :mod (s / sequential)))
            :location (t / time
                  :ARG1-of (c / constant-02)))
      :snt2 (l / linear
            :domain (l2 / list
                  :ARG1-of (l3 / link-01))
            :purpose (a5 / access-01
                  :mod (r2 / random)))
      :snt3 (h / have-degree-91
            :ARG1 (a6 / array)
            :ARG2 (f / fast-02
                  :ARG1 a6)
            :ARG3 (m2 / more)
            :ARG4 (c2 / case-04
                  :ARG1 (t2 / this))))"
1130,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.",5,5,5,"# ::snt An array is capable of accessing any part of that array based on the index. The link list must be traversed from the beginning or the end, that is, data can only be accessed if it is adjacent to the previous or next nodes.
(m / multi-sentence
      :snt1 (c / capable-01
            :ARG1 (a / array)
            :ARG2 (a2 / access-01
                  :ARG0 a
                  :ARG1 (p / part
                        :mod (a3 / any)
                        :part-of (a4 / array
                              :mod (t / that)))
                  :ARG1-of (b / base-02
                        :ARG2 (ii / index))))
      :snt2 (o / obligate-01
            :ARG2 (t2 / traverse-01
                  :ARG1 (l / list
                        :mod (l2 / link))
                  :source (o2 / or
                        :op1 (b2 / begin-01)
                        :op2 (e / end-01)))
            :ARG1-of (m2 / mean-01
                  :ARG2 (p2 / possible-01
                        :ARG1 (a5 / access-01
                              :ARG1 (d / data))
                        :condition (a6 / adjacent-01
                              :ARG1 d
                              :ARG2 (o3 / or
                                    :op1 (n / node
                                          :mod (p3 / previous))
                                    :op2 (n2 / node
                                          :mod (n3 / next))))
                        :mod (o4 / only)))))"
1131,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5,5,5,"# ::snt On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG2 c
            :ARG1 (a / allow-01
                  :ARG0 (a2 / array)
                  :ARG1 (a3 / access-01
                        :manner (r / random)))
            :ARG2 (a4 / allow-01
                  :ARG0 (l / list
                        :ARG1-of (l2 / link-01))
                  :ARG1 (a5 / access-01
                        :ARG1 (e / element)
                        :manner (s / sequential)
                        :mod (o / only))))
      :snt2 (p / possible-01
            :ARG1 (t / traverse-01
                  :ARG1 (l3 / list
                        :ARG1-of (l4 / link-01
                              :manner (s2 / single)))
                  :direction (d / direction
                        :quant (o2 / one))
                  :mod (ii / in-fact)
                  :mod (o3 / only))))"
1132,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You have to keep up with the head of the list.,1,3,2,"# ::snt You have to keep up with the head of the list.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (k / keep-up-05
            :ARG0 y
            :ARG1 (p / person
                  :ARG0-of (h / head-01
                        :ARG1 (l / list)))))"
1133,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Arrays are easier to implement and require less memory,3,4,3.5,"# ::snt Arrays are easier to implement and require less memory
(a / and
      :op1 (h / have-degree-91
            :ARG1 (ii / implement-01
                  :ARG1 (a2 / array))
            :ARG2 (e / easy-05
                  :ARG1 ii)
            :ARG3 (m / more))
      :op2 (r / require-01
            :ARG0 a2
            :ARG1 (m2 / memory
                  :quant (l / less))))"
1134,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.,2,3,2.5,"# ::snt Linked list has an increase complexity of the implementation. The linked list has an array that keeps growing which leads to a increase in memory.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (c / complex
                  :domain (ii / implement-01)
                  :ARG1-of (ii2 / increase-01)))
      :snt2 (h2 / have-03
            :ARG0 (l3 / list
                  :ARG1-of (l4 / link-01))
            :ARG1 (a / array
                  :ARG1-of (g / grow-01
                        :ARG1-of (k / keep-02)
                        :ARG0-of (l5 / lead-03
                              :ARG2 (ii3 / increase-01
                                    :ARG1 (m2 / memory)))))))"
1135,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You don't have to iterate through the entire list to access elements.,5,4,4.5,"# ::snt You don't have to iterate through the entire list to access elements.
(o / obligate-01
      :polarity -
      :ARG1 (y / you)
      :ARG2 (ii / iterate-01
            :ARG0 y
            :ARG1 (l / list
                  :mod (e / entire))
            :purpose (a / access-01
                  :ARG0 y
                  :ARG1 (e2 / element))))"
1136,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.,2,4,3,"# ::snt you can go forwards and backwards and point to any piece of data at any given time where linked lists have to point to the next piece of data.
(p / possible-01
      :ARG1 (a / and
            :op1 (g / go-01
                  :ARG1 (y / you)
                  :ARG2 (a2 / and
                        :op1 (f / forward)
                        :op2 (b / backwards)))
            :op2 (p2 / point-01
                  :ARG0 y
                  :ARG2 (p3 / piece
                        :mod (d / data)
                        :mod (a3 / any))
                  :time (t / time
                        :mod (a4 / any)
                        :ARG1-of (g2 / give-01))
                  :location-of (o / obligate-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01))
                        :ARG2 (p4 / point-01
                              :ARG0 l
                              :ARG2 p3
                              :mod (d2 / data)
                              :mod (n / next))))))"
1137,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Take up less memory and are contiguously stored,4,4,4,"# ::snt Take up less memory and are contiguously stored
(a / and
      :op1 (t / take-up-10
            :ARG0 (m / memory
                  :quant (l / less)))
      :op2 (s / store-01
            :ARG1 m
            :manner (c / contiguously)))"
1138,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays, being fixed, are less error prone.",1,3,2,"# ::snt Arrays, being fixed, are less error prone.
(h / have-degree-91
      :ARG1 (a / array
            :ARG1-of (f / fix-02))
      :ARG2 (p / prone-01
            :ARG1 a
            :ARG2 (e / error))
      :ARG3 (l / less))"
1139,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. ",5,5,5,"# ::snt Arrays have a set list of values. Meaning you can pick a spot in the array such as a[7] picks the 8th spot in the array. With linked lists you have to keep track with pointers if you want to take specific nodes out, otherwise you must traverse the entire list. 
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (a / array)
            :ARG1 (l / list
                  :consist-of (v / value)
                  :ARG1-of (s / set-03)))
      :snt2 (m2 / mean-01
            :ARG2 (p / possible-01
                  :ARG1 (p2 / pick-01
                        :ARG0 (y / you)
                        :ARG1 (s2 / spot
                              :location (a2 / array)
                              :example (p3 / pick-01
                                    :ARG0 (s3 / string-entity
                                          :value 7)
                                    :ARG1 (s4 / spot
                                          :ord (o / ordinal-entity
                                                :value 8)
                                          :location a2))))))
      :snt2 (o2 / obligate-01
            :ARG1 (y2 / you)
            :ARG2 (k / keep-02
                  :ARG0 y2
                  :ARG1 (t / track-01
                        :ARG0 y2
                        :instrument (p4 / pointer))
                  :condition (w / want-01
                        :ARG0 y2
                        :ARG1 (t2 / take-out-11
                              :ARG0 y2
                              :ARG1 (n / node
                                    :ARG1-of (s5 / specific-02)))))
            :condition o2
            :ARG1 y2
            :ARG2 (t3 / traverse-01
                  :ARG0 y2
                  :ARG1 (l2 / list
                        :mod (e / entire)))))"
1140,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )",5,4,4.5,"# ::snt direct access to elements, and speed, linked lists have increased search times to access elements even if the list is sorted. ( like getting the last element without a pointer directly to the end of the list. )
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / access-01
                  :ARG1 (e / element)
                  :ARG1-of (d / direct-02))
            :op2 (s / speed))
      :snt2 (ii / increase-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (t / time
                  :duration-of (s2 / search-01)
                  :purpose (a3 / access-01
                        :ARG1 (e2 / element))
                  :concession (e3 / even-if
                        :op1 (s3 / sort-01
                              :ARG1 (l3 / list))))
            :snt3 (r / resemble-01
                  :ARG2 (g / get-04
                        :ARG1 (e4 / element
                              :mod (l4 / last))
                        :manner (p / pointer
                              :polarity -)
                        :ARG2 (e5 / end-01
                              :ARG1 (l5 / list))
                        :ARG1-of (d2 / direct-02)))))"
1141,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array items are accessed directly with equal access time,5,5,5,"# ::snt Array items are accessed directly with equal access time
(a / access-01
      :ARG1 (ii / item
            :mod (a2 / array))
      :ARG1-of (d / direct-02)
      :time (t / time
            :ARG1-of (e / equal-01)
            :time-of (a3 / access-01
                  :ARG1 ii)))"
1142,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-bases implementations require less memory than a pointer-bases one.,3,4,3.5,"# ::snt Array-bases implementations require less memory than a pointer-bases one.
(r / require-01
      :ARG0 (ii / implement-01
            :ARG1 (b / base
                  :mod (a / array)))
      :ARG1 (m / memory
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less)
                  :ARG4 (ii2 / implement-01
                        :ARG1 (b2 / base
                              :mod (p / pointer))))))"
1143,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.,5,5,5,"# ::snt You can access specific elements quickly in an array.  In a linked list you must traverse the list to get access the same element.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / access-01
                  :ARG0 (y / you)
                  :ARG1 (e / element
                        :ARG1-of (s / specific-02))
                  :location (a2 / array)
                  :ARG1-of (q / quick-02)))
      :snt2 (o / obligate-01
            :ARG1 (y2 / you)
            :ARG2 (t / traverse-01
                  :ARG0 y2
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :purpose (g / get-04
                        :ARG0 y2
                        :ARG1 (a3 / access-01
                              :ARG0 y2
                              :ARG1 (e2 / element
                                    :ARG1-of (s2 / same-01)))))))"
1144,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",link lists only allow sequential access where arrays allow random access,5,4,4.5,"# ::snt link lists only allow sequential access where arrays allow random access
(a / allow-01
      :ARG0 (l / list
            :mod (l2 / link))
      :ARG1 (a2 / access-01
            :manner (s / sequential))
      :mod (o / only)
      :condition (a3 / allow-01
            :ARG0 (a4 / array)
            :ARG1 (a5 / access-01
                  :manner (r / random))))"
1145,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects",5,5,5,"# ::snt Any entitiy in an array may accessed immediately, whereas a linked list must be traversed one item at a time because each object only points adjacent objects
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (a / access-01
                  :ARG1 (e / entitiy
                        :location (a2 / array)
                        :mod (a3 / any))
                  :time (ii / immediate)))
      :ARG2 (o / obligate-01
            :ARG2 (t / traverse-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :ARG1-of (c2 / cause-01
                        :ARG0 (p2 / point-01
                              :ARG0 (o2 / object
                                    :mod (e2 / each))
                              :ARG1 (o3 / object
                                    :ARG1-of (a4 / adjacent-01))
                              :mod (o4 / only))))))"
1146,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array based implementation requires less memory than lined lists based implementation,3,4,3.5,"# ::snt Array based implementation requires less memory than lined lists based implementation
(r / require-01
      :ARG0 (ii / implement-01
            :ARG1-of (b / base-02
                  :ARG2 (a / array)))
      :ARG1 (m / memory
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less)
                  :ARG4 (ii2 / implement-01
                        :ARG1-of (b2 / base-02
                              :ARG2 (l2 / list
                                    :ARG1-of (l3 / line-01)))))))"
1147,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).",Array-based implementations require less memory than a pointer-based ones,3,4,3.5,"# ::snt Array-based implementations require less memory than a pointer-based ones
(r / require-01
      :ARG0 (ii / implement-01
            :ARG1-of (b / base-02
                  :ARG2 (a / array)))
      :ARG1 (m / memory
            :ARG1-of (h / have-quant-91
                  :ARG3 (l / less)
                  :ARG4 (ii2 / implement-01
                        :ARG1-of (b2 / base-02
                              :ARG2 (p / pointer))))))"
1148,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","You can go up and down an array , but you can only go one direction while traversing a linked list.",1,5,3,"# ::snt You can go up and down an array , but you can only go one direction while traversing a linked list.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (a / and
                  :op1 (g / go-01
                        :ARG1 (y / you)
                        :ARG4 (a2 / array)
                        :direction (u / up))
                  :op2 (g2 / go-01
                        :ARG1 y
                        :direction (d / down))))
      :ARG2 (p2 / possible-01
            :ARG1 (g3 / go-01
                  :ARG1 y
                  :ARG4 (d2 / direction
                        :quant 1
                        :mod (o / only))
                  :time (t / traverse-01
                        :ARG0 y
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01))))))"
1149,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item",5,5,5,"# ::snt arrays allow for the random access of any item cotained a any time, linked lists must be gone through toget to the desired item
(m / multi-sentence
      :snt1 (a / allow-01
            :ARG0 (a2 / array)
            :ARG1 (a3 / access-01
                  :ARG1 (ii / item
                        :mod (a4 / any)
                        :ARG1-of (c / contain-01
                              :time (a5 / any)))
                  :manner (r / random)))
      :snt2 (o / obligate-01
            :ARG2 (g / go-through-20
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :purpose (g2 / get-05
                        :ARG1 l
                        :ARG2 (ii2 / item
                              :ARG1-of (d / desire-01))))))"
1150,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.",5,5,5,"# ::snt In arrays you have direct access to each element, but in linked lists you have to traverse the list up to the element that you need.
(c / contrast-01
      :ARG1 (a / access-01
            :ARG0 (y / you)
            :ARG1 (e / element
                  :mod (e2 / each))
            :ARG1-of (d / direct-02)
            :location (a2 / array))
      :ARG2 (o / obligate-01
            :ARG1 y
            :ARG2 (t / traverse-01
                  :ARG0 y
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :destination (e3 / element
                        :ARG1-of (n / need-01
                              :ARG0 y)))))"
1151,7.3,What is the main advantage of arrays over linked lists?,"The elements in an array can be accessed directly (as opposed to linked lists, which require iterative traversal).","Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.",5,5,5,"# ::snt Array size is fixed. But Linked is not fixed, data is also accessed quicker in array list, also memory requirement is less and no pointers required. Arrays have random access and less overheads compared to Linked list have sequential access only with too much overheads and no cache memory support. On the other hand, arrays allow random access, while linked lists allow only sequential access to elements. Singly-linked lists, in fact, can only be traversed in one direction.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (f / fix-02
                  :ARG1 (s / size
                        :mod (a / array)))
            :ARG2 (a2 / and
                  :op1 (f2 / fix-02
                        :polarity -
                        :ARG1 s)
                  :op2 (a3 / access-01
                        :ARG1 (d / data)
                        :location (l / list
                              :mod (a4 / array))
                        :ARG1-of (h / have-degree-91
                              :ARG2 (q / quick-02
                                    :ARG1 a3)
                              :ARG3 (m2 / more)))
                  :op3 (r / require-01
                        :ARG1 (m3 / memory)
                        :mod (a5 / also))
                  :op4 (r2 / require-01
                        :polarity -
                        :ARG1 (p / pointer))))
      :snt2 (h2 / have-03
            :ARG0 a4)
      :ARG1 (a6 / and
            :op1 (a7 / access-01
                  :mod (r3 / random))
            :op2 (o / overhead
                  :ARG1-of (h3 / have-quant-91
                        :ARG3 (l2 / less)
                        :ARG4 (o2 / overhead
                              :ARG1-of (c2 / compare-01
                                    :ARG2 (l3 / list
                                          :ARG1-of (l4 / link-01))))))
            :op3 (s2 / support-01
                  :polarity -
                  :ARG1 (m4 / memory
                        :mod (c3 / cache)))
            :mod (o3 / only))
      :snt3 (c4 / contrast-01
            :ARG1 (a8 / allow-01
                  :ARG0 (a9 / array)
                  :ARG1 (a10 / access-01
                        :ARG1 (e / element)
                        :mod (s3 / sequential)
                        :mod (o4 / only)))
            :ARG2 (p2 / possible-01
                  :ARG1 (l5 / list))))"
1152,7.4,How are linked lists passed as arguments to a function?,By reference.,They are passed by reference because you want the function to change the pointer,4,5,4.5,"# ::snt They are passed by reference because you want the function to change the pointer
(p / pass-03
      :ARG1 (t / they)
      :instrument (r / reference)
      :ARG1-of (c / cause-01
            :ARG0 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (c2 / change-01
                        :ARG0 (f / function)
                        :ARG1 (p2 / pointer)))))"
1153,7.4,How are linked lists passed as arguments to a function?,By reference.,Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.,5,5,5,"# ::snt Linked lists are passed as arguments to a function by passing the head pointer of the list by reference.
(p / pass-01
      :ARG1 (l / list
            :ARG1-of (l2 / link-01))
      :ARG2 (f / function-01)
      :manner (p2 / pass-01
            :ARG1 (p3 / person
                  :ARG0-of (p4 / point-01
                        :ARG1 (l3 / list)
                        :mod (h / head)))
            :ARG2 (r / reference))
      :prep-as (a / argument))"
1154,7.4,How are linked lists passed as arguments to a function?,By reference.,- A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.,5,5,5,"# ::snt - A function with access to a linked list's head pointer has access to the entire list.        - Pass the head ponter to a function as a reference argument.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (f / function
                  :ARG0-of (a / access-01
                        :ARG1 (p / pointer
                              :mod (h2 / head)
                              :part-of (l / list
                                    :ARG1-of (l2 / link-01)))))
            :ARG1 (a2 / access-01
                  :ARG0 f
                  :ARG1 (l3 / list
                        :mod (e / entire))))
      :snt2 (p2 / pass-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (p3 / ponter
                  :mod (h3 / head))
            :ARG2 (f2 / function)
            :purpose (a3 / argument
                  :ARG0-of (r / reference-01))))"
1155,7.4,How are linked lists passed as arguments to a function?,By reference.,By using a node.,2,3,2.5,"# ::snt By using a node.
(u / use-01
      :ARG1 (n / node))"
1156,7.4,How are linked lists passed as arguments to a function?,By reference.,Pass-by-reference,5,5,5,"# ::snt Pass-by-reference
(p / pass-by-reference-00)"
1157,7.4,How are linked lists passed as arguments to a function?,By reference.,you send a pointer to an object of the LinkedList class,2,3,2.5,"# ::snt you send a pointer to an object of the LinkedList class
(s / send-01
      :ARG0 (y / you)
      :ARG1 (p / pointer)
      :ARG2 (o / object
            :part-of (c / class
                  :name (n / name
                        :op1 ""LinkedList""))))"
1158,7.4,How are linked lists passed as arguments to a function?,By reference.,Passed as a pointer to the head.,5,3,4,"# ::snt Passed as a pointer to the head.
(p / pass-01
      :ARG2 (p2 / point-01
            :ARG2 (h / head)))"
1159,7.4,How are linked lists passed as arguments to a function?,By reference.,Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list,5,4,4.5,"# ::snt Passing the head pointer of a linked list to a function gives that function access to all nodes of that linked list
(g / give-01
      :ARG0 (p / pass-01
            :ARG1 (p2 / pointer
                  :mod (h / head)
                  :part-of (l / list
                        :ARG1-of (l2 / link-01)))
            :ARG2 (f / function))
      :ARG1 (a / access-01
            :ARG0 f
            :ARG1 (n / node
                  :mod (a2 / all)
                  :part-of (l3 / list
                        :ARG1-of (l4 / link-01))))
      :ARG2 f)"
1160,7.4,How are linked lists passed as arguments to a function?,By reference.,You have to pass the head pointer to a function since it has access to the entire list.,5,3,4,"# ::snt You have to pass the head pointer to a function since it has access to the entire list.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (p / pass-05
            :ARG0 y
            :ARG1 (p2 / pointer
                  :mod (h / head))
            :ARG2 (f / function))
      :ARG1-of (c / cause-01
            :ARG0 (a / access-01
                  :ARG0 f
                  :ARG1 (l / list
                        :mod (e / entire)))))"
1161,7.4,How are linked lists passed as arguments to a function?,By reference.,You pass the head pointer to a function as a reference argument.,5,5,5,"# ::snt You pass the head pointer to a function as a reference argument.
(p / pass-01
      :ARG0 (y / you)
      :ARG1 (p2 / pointer
            :mod (h / head))
      :ARG2 (f / function)
      :prep-as (t / thing
            :ARG1-of (a / argue-01)
            :ARG0-of (r / reference-04)))"
1162,7.4,How are linked lists passed as arguments to a function?,By reference.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
1163,7.4,How are linked lists passed as arguments to a function?,By reference.,passes a pointer to a linked list object,2,3,2.5,"# ::snt passes a pointer to a linked list object
(p / pass-01
      :ARG1 (p2 / pointer)
      :ARG2 (o / object
            :mod (l / list
                  :ARG1-of (l2 / link-01))))"
1164,7.4,How are linked lists passed as arguments to a function?,By reference.,"The linked list object contains the head, through which the other elements are accessible.",4,3,3.5,"# ::snt The linked list object contains the head, through which the other elements are accessible.
(c / contain-01
      :ARG0 (o / object
            :mod (l / list)
            :ARG1-of (l2 / link-01))
      :ARG1 (h / head
            :ARG2-of (a / access-01
                  :ARG1 (e / element
                        :mod (o2 / other)))))"
1165,7.4,How are linked lists passed as arguments to a function?,By reference.,By the head of the list. It takes the head address and traverses from there on in.,5,3,4,"# ::snt By the head of the list. It takes the head address and traverses from there on in.
(m / multi-sentence
      :snt1 (p / person
            :ARG0-of (h / head-01
                  :ARG1 (l / list)))
      :snt2 (a / and
            :op1 (t / take-01
                  :ARG0 (ii / it)
                  :ARG1 (a2 / address
                        :mod (h2 / head-01)))
            :op2 (t2 / traverse-01
                  :ARG0 ii
                  :source (t3 / there))))"
1166,7.4,How are linked lists passed as arguments to a function?,By reference.,as a pointer node.,3,3,3,"# ::snt as a pointer node.
(r / resemble-01
      :ARG2 (n / node
            :mod (p / pointer)))"
1167,7.4,How are linked lists passed as arguments to a function?,By reference.,A method with access to a linked list's head pointer as access to the entire list,5,3,4,"# ::snt A method with access to a linked list's head pointer as access to the entire list
(m / method
      :ARG0-of (a / access-01
            :ARG1 (p / pointer
                  :mod (h / head)
                  :part-of (l / list
                        :ARG1-of (l2 / link-01))))
      :ARG1-of (r / resemble-01
            :ARG2 (a2 / access-01
                  :ARG1 (l3 / list
                        :mod (e / entire)))))"
1168,7.4,How are linked lists passed as arguments to a function?,By reference.,A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument,5,5,5,"# ::snt A function with access to a linked list's head pointer has access to the entire list. Pass the head pointer to a function as a reference argument
(m / multi-sentence
      :snt1 (a / access-01
            :ARG0 (f / function
                  :ARG0-of (a2 / access-01
                        :ARG1 (p / pointer
                              :mod (h / head)
                              :poss (l / list
                                    :ARG1-of (l2 / link-01)))))
            :ARG1 (l3 / list
                  :mod (e / entire)))
      :snt2 (p2 / pass-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 p
            :mod h)
      :ARG2 (f2 / function)
      :prep-as (a3 / argument
            :mod (r / reference)))"
1169,7.4,How are linked lists passed as arguments to a function?,By reference.,the head pointer is passed to a function as a reference argument.,5,5,5,"# ::snt the head pointer is passed to a function as a reference argument.
(p / pass-01
      :ARG1 (p2 / pointer
            :mod (h / head))
      :ARG2 (f / function)
      :prep-as (t / thing
            :ARG1-of (a / argue-01)
            :ARG0-of (r / reference-01)))"
1170,7.4,How are linked lists passed as arguments to a function?,By reference.,the pointer to the first element is passed to a function,5,3,4,"# ::snt the pointer to the first element is passed to a function
(p / pass-01
      :ARG1 (p2 / pointer
            :destination (e / element
                  :ord (o / ordinal-entity
                        :value 1)))
      :ARG2 (f / function))"
1171,7.4,How are linked lists passed as arguments to a function?,By reference.,"linked lists are passed by reference, specificly the Head pointer",5,5,5,"# ::snt linked lists are passed by reference, specificly the Head pointer
(p / pass-03
      :ARG1 (l / list
            :ARG1-of (l2 / link-01))
      :manner (r / reference
            :ARG1-of (m / mean-01
                  :ARG2 (p2 / pointer
                        :mod (h / head)
                        :ARG1-of (s / specific-02)))))"
1172,7.4,How are linked lists passed as arguments to a function?,By reference.,Pass the head pointer to a function as a reference argument,5,5,5,"# ::snt Pass the head pointer to a function as a reference argument
(p / pass-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (p2 / pointer
            :mod (h / head))
      :ARG2 (f / function-01)
      :prep-as (t / thing
            :ARG2-of (a / argue-01)
            :ARG0-of (r / reference-01)))"
1173,7.4,How are linked lists passed as arguments to a function?,By reference.,by refrenece,5,5,5,"# ::snt by refrenece
(b / byline-91
      :ARG0 (p / person
            :name (n / name
                  :op1 ""refrenece"")))"
1174,7.4,How are linked lists passed as arguments to a function?,By reference.,By passing the head pointer and going through the list as needed inside the function.,5,3,4,"# ::snt By passing the head pointer and going through the list as needed inside the function.
(a / and
      :op1 (p / pass-05
            :ARG1 (p2 / pointer
                  :mod (h / head)))
      :op2 (g / go-through-20
            :ARG1 (l / list)
            :ARG1-of (n / need-01)
            :location (ii / inside
                  :op1 (f / function-01))))"
1175,7.4,How are linked lists passed as arguments to a function?,By reference.,linked lists are passed by using pointers,3,3,3,"# ::snt linked lists are passed by using pointers
(p / pass-03
      :ARG1 (l / list
            :ARG1-of (l2 / link-01))
      :manner (u / use-01
            :ARG1 (p2 / pointer)))"
1176,7.4,How are linked lists passed as arguments to a function?,By reference.,the head object is passed to the function,4,3,3.5,"# ::snt the head object is passed to the function
(p / pass-01
      :ARG1 (o / object
            :mod (h / head))
      :ARG2 (f / function-01))"
1177,7.4,How are linked lists passed as arguments to a function?,By reference.,"Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. ",0,3,1.5,"# ::snt Linked lists permit insertion and removal of nodes at any point in the list in constant time,[1] but do not allow random access. 
(c / contrast-01
      :ARG1 (p / permit-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (a / and
                  :op1 (ii / insert-01
                        :ARG1 (n / node))
                  :op2 (r / remove-01
                        :ARG1 n))
            :time (p2 / point
                  :mod (a2 / any)
                  :part-of (l3 / list))
            :time (t / time
                  :ARG1-of (c2 / constant-02)))
      :ARG2 (a3 / allow-01
            :polarity -
            :ARG0 l3
            :ARG1 (a4 / access-01
                  :ARG1-of (r2 / random-02)))
      :ARG1-of (d / describe-01
            :ARG0 (p3 / publication
                  :ARG1-of (c3 / cite-01
                        :ARG2 1))))"
1178,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,They are passed by reference because you want the function to change the pointer,0,1,0.5,"# ::snt They are passed by reference because you want the function to change the pointer
(p / pass-03
      :ARG1 (t / they)
      :instrument (r / reference)
      :ARG1-of (c / cause-01
            :ARG0 (w / want-01
                  :ARG0 (y / you)
                  :ARG1 (c2 / change-01
                        :ARG0 (f / function)
                        :ARG1 (p2 / pointer)))))"
1179,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.",5,5,5,"# ::snt In a circular linked list, every node has a successor which means that the last node's successor is the head or first node.
(h / have-03
      :ARG0 (n / node
            :mod (e / every))
      :ARG1 (p / person
            :ARG0-of (s / succeed-01))
      :location (l / list
            :ARG1-of (l2 / link-01)
            :mod (c / circular))
      :ARG1-of (m / mean-01
            :ARG2 (o / or
                  :op1 (p2 / person
                        :ARG0-of (s2 / succeed-01
                              :ARG1 (n2 / node
                                    :mod (l3 / last))))
                  :op2 (p3 / person
                        :ARG0-of (s3 / succeed-01
                              :ARG1 (n3 / node
                                    :ord (o2 / ordinal-entity
                                          :value 1)))))))"
1180,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.,5,4,4.5,"# ::snt A circular linked list is a linked list that links items in a continuous circle. This allows the full list to be traversed by starting at any item in the list; a fixed head or tail is not required.
(m / multi-sentence
      :snt1 (l / list
            :ARG1-of (l2 / link-01)
            :domain (l3 / list
                  :ARG1-of (l4 / link-01)
                  :ARG0-of (l5 / link-01
                        :ARG1 (ii / item)
                        :location (c / circle
                              :ARG1-of (c2 / continue-01))))
            :mod (c3 / circular))
      :snt2 (a / allow-01
            :ARG0 (t / this)
            :ARG1 (t2 / traverse-01
                  :ARG1 (l6 / list
                        :ARG1-of (f / full-09))
                  :manner (s / start-01
                        :ARG2 (ii2 / item
                              :mod (a2 / any)
                              :part-of (l7 / list)))))
      :snt3 (r / require-01
            :polarity -
            :ARG1 (o / or
                  :op1 (h / head)
                  :op2 (t3 / tail)
                  :ARG1-of (f2 / fix-03))))"
1181,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points to the first node.",5,5,5,"# ::snt In a circular linked list, the last node points to the first node.
(p / point-01
      :ARG0 (n / node
            :ord (o / ordinal-entity
                  :value ""-1""))
      :ARG1 (n2 / node
            :ord (o2 / ordinal-entity
                  :value 1))
      :location (l / list
            :ARG1-of (l2 / link-01)
            :mod (c / circular)))"
1182,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.",5,5,5,"# ::snt On a circular linked list, the end element points to the head, thus making the circle. A basic link list has nothing pointing to the head, and the last element points to null.
(m / multi-sentence
      :snt1 (p / point-01
            :ARG1 (e / element
                  :mod (e2 / end))
            :ARG2 (h / head)
            :ARG0-of (m2 / make-02
                  :ARG1 (c / circle)))
      :snt2 (a / and
            :op1 (p2 / point-01
                  :ARG1 (n / nothing)
                  :ARG2 h)
            :op2 (p3 / point-01
                  :ARG1 (e3 / element
                        :mod (l / last))
                  :ARG2 (n2 / null))
            :domain (l2 / list
                  :ARG1-of (l3 / link-01)
                  :mod (b / basic))))"
1183,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,the circular linked list's last node points to the begining of the list while a standard linked list points to NULL,5,5,5,"# ::snt the circular linked list's last node points to the begining of the list while a standard linked list points to NULL
(c / contrast-01
      :ARG1 (p / point-01
            :ARG0 (n / node
                  :mod (l / last)
                  :poss (l2 / list
                        :ARG1-of (l3 / link-01
                              :mod (c2 / circular))))
            :ARG2 (b / begin-01
                  :ARG1 (l4 / list)))
      :ARG2 (p2 / point-01
            :ARG0 (l5 / list
                  :ARG1-of (l6 / link-01
                        :mod (s / standard)))
            :ARG2 (n2 / null)))"
1184,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,The last item in the list points to the head,5,5,5,"# ::snt The last item in the list points to the head
(p / point-01
      :ARG0 (ii / item
            :ord (o / ordinal-entity
                  :value ""-1"")
            :part-of (l / list))
      :ARG2 (h / head))"
1185,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a circular linked list, the last node points back to the first node, there is no NULL",5,5,5,"# ::snt In a circular linked list, the last node points back to the first node, there is no NULL
(m / multi-sentence
      :snt1 (p / point-01
            :ARG0 (n / node
                  :mod (l / last))
            :ARG2 (n2 / node
                  :ord (o / ordinal-entity
                        :value 1))
            :direction (b / back)
            :location (l2 / list
                  :ARG1-of (l3 / link-01)
                  :mod (c / circular)))
      :snt2 (n3 / null
            :polarity -))"
1186,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.",2,3,2.5,"# ::snt Circular linked lists are most useful for describing naturally circular structures, and have the advantage of regular structure and being able to traverse the list starting at any point.
(a / and
      :op1 (u / useful-05
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)
                  :mod (c / circular))
            :ARG2 (d / describe-01
                  :ARG1 (s / structure
                        :mod (c2 / circular)
                        :ARG1-of (n / natural-03)))
            :ARG2-of (h / have-degree-91
                  :ARG1 l
                  :ARG3 (m / most)))
      :op2 (a2 / advantage-01
            :ARG1 l
            :ARG2 (a3 / and
                  :op1 (s2 / structure
                        :ARG1-of (r / regular-02))
                  :op2 (p / possible-01
                        :ARG1 (t / traverse-01
                              :ARG1 (l3 / list)
                              :ARG1-of (s3 / start-01
                                    :time (p2 / point
                                          :mod (a4 / any))))))))"
1187,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,A circular linked list has the last node point back to the head of the linked list.,5,5,5,"# ::snt A circular linked list has the last node point back to the head of the linked list.
(h / have-03
      :ARG0 (l / list
            :ARG1-of (l2 / link-01)
            :mod (c / circular))
      :ARG1 (p / point
            :mod (n / node)
            :ord (o / ordinal-entity
                  :value ""-1""))
      :direction (b / back)
      :destination (h2 / head
            :part-of (l3 / list
                  :ARG1-of (l4 / link-01))))"
1188,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,Basic linked list points to a NULL at the end and circular points to the head at the end.,5,5,5,"# ::snt Basic linked list points to a NULL at the end and circular points to the head at the end.
(a / and
      :op1 (p / point-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01)
                  :mod (b / basic))
            :ARG2 (s / string-entity
                  :value ""NULL"")
            :time (e / end-01))
      :op2 (p2 / point-01
            :ARG0 (c / circular)
            :ARG2 (h / head)
            :time (e2 / end-01)))"
1189,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,in a circular linked list the the last item points to the first item.,5,5,5,"# ::snt in a circular linked list the the last item points to the first item.
(p / point-01
      :ARG0 (ii / item
            :ord (o / ordinal-entity
                  :value ""-1""))
      :ARG1 (ii2 / item
            :ord (o2 / ordinal-entity
                  :value 1))
      :location (l / list
            :ARG1-of (l2 / link-01
                  :mod (c / circular))))"
1190,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.",5,5,5,"# ::snt The circular linked list's tail points to the head, whereas the basic linked list's tail points to a NULL.
(c / contrast-01
      :ARG1 (p / point-01
            :ARG1 (t / tail
                  :part-of (l / list
                        :ARG1-of (l2 / link-01)
                        :mod (c2 / circular)))
            :ARG2 (h / head))
      :ARG2 (p2 / point-01
            :ARG1 (t2 / tail
                  :part-of (l3 / list
                        :ARG1-of (l4 / link-01)
                        :mod (b / basic)))
            :ARG2 (n / null)))"
1191,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning,5,5,5,"# ::snt a basic linked list has an end with a null value where a circular linked list has a pointer from the end to the beginning
(c / contrast-01
      :ARG1 (e / end-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)
                  :mod (b / basic))
            :ARG2 (v / value
                  :mod (n / null)))
      :ARG2 (h / have-03
            :ARG0 (l3 / list
                  :ARG1-of (l4 / link-01)
                  :mod (c2 / circular))
            :ARG1 (p / pointer
                  :source (e2 / end-01)
                  :destination (b2 / begin-01))))"
1192,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.",5,5,5,"# ::snt how to determine the end of the list, in basic linked lists the last element links to a null pointer, while circular linked lists link to the head element at the end.
(m / multi-sentence
      :snt1 (d / determine-01
            :ARG1 (e / end-01
                  :ARG1 (l / list))
            :manner (a / amr-unknown))
      :snt2 (c / contrast-01
            :ARG1 (l2 / link-01
                  :ARG1 (e2 / element
                        :mod (l3 / last))
                  :ARG2 (p / pointer
                        :mod (n / null))
                  :location (l4 / list
                        :ARG1-of (l5 / link-01
                              :mod (c2 / circular)
                              :ARG2-of c)))
            :ARG1 (e3 / element
                  :mod (h / head)
                  :time (e4 / end-01
                        :ARG1 l4))))"
1193,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.",5,5,5,"# ::snt No Node in a circular linked list contains NULL, the last Node points pack to a Node within the list.
(m / multi-sentence
      :snt1 (c / contain-01
            :ARG0 (n / node
                  :location (l / list
                        :ARG1-of (l2 / link-01)
                        :mod (c2 / circular)))
            :ARG1 (s / string-entity
                  :value ""NULL""))
      :snt2 (p / pack-01
            :ARG0 (p2 / point-04
                  :ARG1 (n2 / node
                        :mod (l3 / last)))
            :ARG2 (n3 / node
                  :location (l4 / list))))"
1194,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.",5,5,5,"# ::snt The difference between a circular linked list and a basic linked list is that a circular linked list, the last node references the first node. Every node in a circular linked list has a successor and no node in a circular linked list contains NULL.
(m / multi-sentence
      :snt1 (d / differ-02
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01
                        :mod (c / circular)))
            :ARG2 (l3 / list
                  :ARG1-of (l4 / link-01
                        :mod (b / basic)))
            :ARG3 (r / reference-01
                  :ARG0 (n / node
                        :mod (l5 / last))
                  :ARG1 (n2 / node
                        :ord (o / ordinal-entity
                              :value 1))))
      :snt2 (a / and
            :op1 (h / have-03
                  :ARG0 (n3 / node
                        :mod (e / every)
                        :part-of l3
                        :ARG1-of l4
                        :manner (c2 / circular))))
      :ARG1 (s / successor)
      :op2 (c3 / contain-01
            :polarity -
            :ARG0 (n4 / node
                  :part-of (l6 / list
                        :ARG1-of (l7 / link-01
                              :manner (c4 / circular))))
            :ARG1 (n5 / null)))"
1195,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,No node in a circular linked list contains NULL.,3,4,3.5,"# ::snt No node in a circular linked list contains NULL.
(c / contain-01
      :ARG0 (n / node
            :location (l / list
                  :ARG1-of (l2 / link-01)
                  :mod (c2 / circular)))
      :ARG1 (s / string-entity
            :value ""NULL""))"
1196,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,in a circular linked list the last element points to the head of the list,5,5,5,"# ::snt in a circular linked list the last element points to the head of the list
(p / point-01
      :ARG0 (e / element
            :ord (o / ordinal-entity
                  :value ""-1""))
      :ARG2 (p2 / person
            :ARG0-of (h / head-01
                  :ARG1 (l / list)))
      :location (l2 / list
            :ARG1-of (l3 / link-01
                  :mod (c / circular))))"
1197,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list",5,5,5,"# ::snt In a regular linked list the last object points to NULL. In a circular linked list, the last object points back to the beginning of the list
(m / multi-sentence
      :snt1 (p / point-01
            :ARG1 (o / object
                  :mod (l / last))
            :ARG2 (n / null)
            :location (l2 / list
                  :ARG1-of (l3 / link-01
                        :ARG1-of (r / regular-02))))
      :snt2 (p2 / point-01
            :ARG1 o
            :ARG2 (b / begin-01
                  :ARG1 (l4 / list))
            :direction (b2 / back)
            :location (l5 / list
                  :ARG1-of (l6 / link-01
                        :mod (c / circular)))))"
1198,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.",3,3,3,"# ::snt In circular linked list each node has successor, no node contains NULL, while in basic linked list last node contain NULL.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (s / successor)
            :location (l / list
                  :ARG1-of (l2 / link-01
                        :mod (c2 / circular))))
      :ARG2 c
      :ARG1 (c3 / contain-01
            :polarity -
            :ARG0 (n2 / node)
            :ARG1 (s2 / string-entity
                  :value ""NULL""))
      :ARG2 (c4 / contain-01
            :ARG0 (n3 / node
                  :mod (l3 / last))
            :ARG1 s2
            :location (l4 / list
                  :ARG1-of (l5 / link-01)
                  :mod (b / basic))))"
1199,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"in a circular linked lists, the last element points to the first",5,5,5,"# ::snt in a circular linked lists, the last element points to the first
(p / point-01
      :ARG0 (e / element
            :ord (o / ordinal-entity
                  :value ""-1""))
      :ARG1 (e2 / element
            :ord (o2 / ordinal-entity
                  :value 1))
      :location (l / list
            :ARG1-of (l2 / link-01)
            :mod (c / circular)))"
1200,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"A circular linked list does not have a last element. Instead, it's last item points to the head of the list.",5,5,5,"# ::snt A circular linked list does not have a last element. Instead, it's last item points to the head of the list.
(m / multi-sentence
      :snt1 (h / have-03
            :polarity -
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01)
                  :mod (c / circular))
            :ARG1 (e / element
                  :ord (o / ordinal-entity
                        :value ""-1"")))
      :snt2 (p / point-01
            :ARG0 (ii / item
                  :mod (l3 / last)
                  :poss (l4 / list))
            :ARG2 (h2 / head
                  :part-of (l5 / list))
            :ARG1-of (ii2 / instead-of-91)))"
1201,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer ",5,5,5,"# ::snt in a circular linked list, the last node contains a pointer that goes back to the first node; in a basic linked list, the last node contains a null pointer 
(c / contrast-01
      :ARG1 (c2 / contain-01
            :ARG0 (n / node
                  :mod (l / last))
            :ARG1 (p / pointer
                  :ARG0-of (g / go-01
                        :ARG4 (n2 / node
                              :ord (o / ordinal-entity
                                    :value 1))
                        :direction (b / back)))
            :location (l2 / list
                  :ARG1-of (l3 / link-01
                        :mod (c3 / circular))))
      :ARG2 (c4 / contain-01
            :ARG0 (n3 / node
                  :ord (o2 / ordinal-entity
                        :value ""-1""))
            :ARG1 (p2 / pointer
                  :mod (n4 / null))
            :location (l4 / list
                  :ARG1-of (l5 / link-01)
                  :mod (b2 / basic))))"
1202,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"in a circular linked list, the last object is linked back to the first object.",5,5,5,"# ::snt in a circular linked list, the last object is linked back to the first object.
(l / link-01
      :ARG1 (o / object
            :ord (o2 / ordinal-entity
                  :value ""-1""))
      :ARG2 (o3 / object
            :ord (o4 / ordinal-entity
                  :value 1))
      :direction (b / back)
      :location (l2 / list
            :ARG1-of (l3 / link-01
                  :manner (c / circular))))"
1203,7.5,What is the difference between a circular linked list and a basic linked list?,The last element in a circular linked list points to the head of the list.,"In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  ",2,5,3.5,"# ::snt In the case of a non circular link list, if you are at the last node of the list and u want to move to first u need to go to one, step back till u reach to first. But in circular link list from last to first you need to make only one move.  In a single link list u can move only in one direction but in double link list u can move in any direction back or forward or forward.  
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (n / need-01
                  :ARG0 (y / you)
                  :ARG1 (a / and
                        :op1 (g / go-02
                              :ARG0 y
                              :ARG4 (n2 / node
                                    :mod (l / last)
                                    :part-of (l2 / list)))
                        :op2 (s / step-01
                              :ARG0 y
                              :direction (b / back)
                              :time (u / until
                                    :op1 (r / reach-01
                                          :ARG0 y
                                          :ARG1 (f / first)))))
                  :condition (a2 / and
                        :op1 (b2 / be-located-at-91
                              :ARG1 y
                              :ARG2 n2
                              :mod (l3 / last)
                              :part-of (l4 / list)))
                  :op2 (w / want-01
                        :ARG0 y
                        :ARG1 (m2 / move-01
                              :ARG0 y
                              :ARG2 f))))
      :snt2 (c2 / contrast-01
            :ARG1 (p / possible-01
                  :ARG1 (m3 / move-01
                        :ARG0 (y2 / you)
                        :ARG1 (d / direction
                              :quant 1
                              :mod (o / only)))
                  :location l4
                  :mod (l5 / link
                        :mod (d2 / double)))
            :mod (o2 / only)))"
1204,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",they can traverse in both directions,3,4,3.5,"# ::snt they can traverse in both directions
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG0 (t2 / they)
            :ARG1 (d / direction
                  :mod (b / both))))"
1205,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",In a doubly linked list you can delete a node without having to traverse the list.,5,4,4.5,"# ::snt In a doubly linked list you can delete a node without having to traverse the list.
(p / possible-01
      :ARG1 (d / delete-01
            :ARG0 (y / you)
            :ARG1 (n / node)
            :location (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d2 / double)))
            :manner (o / obligate-01
                  :polarity -
                  :ARG1 y
                  :ARG2 (t / traverse-01
                        :ARG0 y
                        :ARG1 (l3 / list)))))"
1206,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.,5,4,4.5,"# ::snt A doubly-linked list allows you to delete a node without traversing the list to establish a trailing pointer.
(a / allow-01
      :ARG0 (l / list
            :ARG1-of (l2 / link-01
                  :mod (d / double)))
      :ARG1 (d2 / delete-01
            :ARG0 (y / you)
            :ARG1 (n / node)
            :manner (t / traverse-01
                  :polarity -
                  :ARG0 y
                  :ARG1 (l3 / list)
                  :purpose (e / establish-01
                        :ARG0 y
                        :ARG1 (p / pointer
                              :ARG0-of (t2 / trail-01))))))"
1207,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.,3,4,3.5,"# ::snt A doubly linked list allows you to traverse the list in either direction. Each node points to its successor as well as to its predecessor.
(m / multi-sentence
      :snt1 (a / allow-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d / double)))
            :ARG1 (t / traverse-01
                  :ARG0 (y / you)
                  :ARG1 (l3 / list)
                  :direction (e / either)))
      :snt2 (p / point-01
            :ARG0 (n / node
                  :mod (e2 / each))
            :ARG1 (a2 / and
                  :op1 (s / successor
                        :poss (ii / it))
                  :op2 (p2 / predecessor
                        :poss ii))))"
1208,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.",3,4,3.5,"# ::snt Doubly-linked lists can traverse backwards, though they still cannot access data at any point in the list, it can be shorter to traverse backwards.
(a / and
      :op1 (p / possible-01
            :ARG1 (t / traverse-01
                  :ARG0 (l / list
                        :ARG1-of (l2 / link-01
                              :mod (d / doubt)))
                  :direction (b / backwards)))
      :op2 (p2 / possible-01
            :polarity -
            :ARG1 (a2 / access-01
                  :ARG0 l
                  :ARG1 (d2 / data)
                  :time (p3 / point
                        :mod (a3 / any)
                        :part-of l))
            :mod (s / still))
      :op3 (p4 / possible-01
            :ARG1 (h / have-degree-91
                  :ARG1 (t2 / traverse-01
                        :direction (b2 / backwards))
                  :ARG2 (s2 / short-07
                        :ARG1 t2)
                  :ARG3 (m / more))))"
1209,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",you can traverse the list from front to back and back to front,3,4,3.5,"# ::snt you can traverse the list from front to back and back to front
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (l / list)
            :ARG2 (a / and
                  :op1 (f / front)
                  :op2 (b / back)
                  :op3 (b2 / back)
                  :op4 (f2 / front))))"
1210,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list in reverse.,3,4,3.5,"# ::snt You can traverse the list in reverse.
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (l / list)
            :manner (r / reverse-01)))"
1211,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists can be traversed in both directions,3,4,3.5,"# ::snt Doubly linked lists can be traversed in both directions
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d / doubt)))
            :direction (d2 / direction
                  :mod (b / both))))"
1212,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.",4,3,3.5,"# ::snt Double-linked lists require more space per node, and their elementary operations are more expensive; but they are often easier to manipulate because they allow sequential access to the list in both directions.
(c / contrast-01
      :ARG1 (a / and
            :op1 (r / require-01
                  :ARG0 (l / list
                        :ARG1-of (l2 / link-01
                              :ARG1-of (d / double-01)))
                  :ARG1 (s / space
                        :ARG1-of (h / have-quant-91
                              :ARG3 (m / more)
                              :ARG4 (n / node))))
            :op2 (h2 / have-degree-91
                  :ARG1 (o / operate-01
                        :ARG0 l
                        :mod (e / elementary))
                  :ARG2 (e2 / expensive)
                  :ARG3 (m2 / more)))
      :ARG2 (e3 / easy-05
            :ARG1 (m3 / manipulate-01
                  :ARG1 l)
            :ARG2-of (h3 / have-degree-91
                  :ARG1 m3
                  :ARG3 (m4 / more)
                  :frequency (o2 / often)
                  :ARG1-of (c2 / cause-01
                        :ARG0 (a2 / allow-01
                              :ARG0 l
                              :ARG1 (a3 / access-01
                                    :ARG1 (l3 / list)
                                    :manner (s2 / sequential)
                                    :manner (d2 / direction
                                          :mod (b / both))))))))"
1213,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse forwards and backwards through nodes.,3,4,3.5,"# ::snt You can traverse forwards and backwards through nodes.
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (f / forward)
                  :op2 (b / backwards))
            :path (n / node)))"
1214,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can point both forwards and backwards,3,4,3.5,"# ::snt You can point both forwards and backwards
(p / possible-01
      :ARG1 (p2 / point-01
            :ARG0 (y / you)
            :ARG2 (a / and
                  :op1 (f / forward)
                  :op2 (b / backwards))))"
1215,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can go backwards in the linked list and access previous data easier without having to keep track of the previous item,4,4,4,"# ::snt You can go backwards in the linked list and access previous data easier without having to keep track of the previous item
(p / possible-01
      :ARG1 (a / and
            :op1 (g / go-back-19
                  :ARG1 (y / you)
                  :location (l / list
                        :ARG1-of (l2 / link-01)))
            :op2 (a2 / access-01
                  :ARG0 y
                  :ARG1 (d / data
                        :time (p2 / previous))
                  :ARG1-of (h / have-degree-91
                        :ARG2 (e / easy-05
                              :ARG1 a2)
                        :ARG3 (m / more)))
            :manner (o / obligate-01
                  :polarity -
                  :ARG1 y
                  :ARG2 (k / keep-02
                        :ARG0 y
                        :ARG1 (t / track-01
                              :ARG0 y
                              :ARG1 (ii / item
                                    :time p2))))))"
1216,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Doubly linked lists allow backward movement through the nodes.,3,4,3.5,"# ::snt Doubly linked lists allow backward movement through the nodes.
(a / allow-01
      :ARG0 (l / list
            :ARG1-of (l2 / link-01
                  :mod (d / doubt)))
      :ARG1 (m / move-01
            :ARG1 (b / backward)
            :path (t / through
                  :op1 (n / node))))"
1217,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. ",3,4,3.5,"# ::snt they have double pointers, so each node can point forwards or backwards. Making it a little easer to get to where you need. 
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (t / they)
            :ARG1 (p / pointer
                  :ARG1-of (d / double-01))
            :purpose (p2 / possible-01
                  :ARG1 (p3 / point-01
                        :ARG0 (n / node
                              :mod (e / each))
                        :direction (o / or
                              :op1 (f / forward)
                              :op2 (b / backwards)))))
      :snt2 (m2 / make-02
            :ARG1 (e2 / easy-05
                  :ARG1 (g / get-05
                        :ARG1 (y / you)
                        :ARG2 (t2 / thing
                              :ARG1-of (n2 / need-01
                                    :ARG0 y)))
                  :mod (l / little)
                  :ARG2-of (h2 / have-degree-91
                        :ARG1 g
                        :ARG3 (m3 / more)))))"
1218,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",ability to backtrack through a list.,3,3,3,"# ::snt ability to backtrack through a list.
(c / capable-01
      :ARG2 (b / backtrack-01
            :ARG2 (l / list)))"
1219,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can move forwards and backwards in the double-linked list. Basic only moves forwards.,3,4,3.5,"# ::snt You can move forwards and backwards in the double-linked list. Basic only moves forwards.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (m2 / move-01
                  :ARG0 (y / you)
                  :ARG2 (a / and
                        :op1 (f / forward)
                        :op2 (b / backward))
                  :location (l / list
                        :ARG1-of (l2 / link-01
                              :ARG1-of (d / double-01)))))
      :snt2 (m3 / move-01
            :ARG0 (b2 / basic)
            :ARG2 (f2 / forward)
            :mod (o / only)))"
1220,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.,4,5,4.5,"# ::snt The advantage is that each node points to bothe its predecessor and its successor. There are no special cases for insertion and deletion.
(m / multi-sentence
      :snt1 (a / advantage-01
            :ARG2 (p / point-01
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG2 (a2 / and
                        :op1 (p2 / predecessor
                              :poss n)
                        :op2 (s / successor
                              :poss n))))
      :snt2 (c / case-04
            :polarity -
            :ARG1 a2
            :op1 (ii / insert-01)
            :op2 (d / delete-01))
      :ARG1-of (s2 / special-02))"
1221,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",each node points to both its predecessor and its successor.,4,3,3.5,"# ::snt each node points to both its predecessor and its successor.
(p / point-01
      :ARG0 (n / node
            :mod (e / each))
      :ARG2 (a / and
            :op1 (p2 / person
                  :ARG0-of (p3 / precede-01
                        :ARG1 n))
            :op2 (p4 / person
                  :ARG0-of (s / succeed-01
                        :ARG1 n))))"
1222,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back,3,5,4,"# ::snt a doubly linked list has pointers in both directions. this allows for access from back to front as well as front to back
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d / double)))
            :ARG1 (p / pointer
                  :location (d2 / direction
                        :mod (b / both))))
      :snt2 (a / allow-01
            :ARG0 (t / this)
            :ARG1 (a2 / access-01
                  :ARG0 (a3 / and
                        :op1 (b2 / back)
                        :op2 (f / front)
                        :op3 (b3 / back)))))"
1223,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish",3,4,3.5,"# ::snt A doubly linked list can be traversed either direction, while a normal linked list can only be traversed from start to finish
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (t / traverse-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01
                              :mod (d / double)))
                  :direction (e / either)))
      :ARG2 (p2 / possible-01
            :ARG1 (t2 / traverse-01
                  :ARG1 (l3 / list
                        :ARG1-of (l4 / link-01)
                        :ARG1-of (n / normal-02))
                  :mod (o / only)
                  :source (s / start-01
                        :ARG1 l3)
                  :destination (f / finish-01
                        :ARG1 l3))))"
1224,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction",4,4,4,"# ::snt Double Linked list are often easier to manipulate, because they allow sequential access to the list in both direction
(h / have-degree-91
      :ARG1 (m / manipulate-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d / double))))
      :ARG2 (e / easy-05
            :ARG1 m)
      :ARG3 (m2 / more)
      :frequency (o / often)
      :ARG1-of (c / cause-01
            :ARG0 (a / allow-01
                  :ARG0 l
                  :ARG1 (a2 / access-01
                        :ARG1 (l3 / list)
                        :manner (s / sequential)
                        :manner (d2 / direction
                              :mod (b / both))))))"
1225,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","given a node in the list, one can navigate easily in either direction",4,4,4,"# ::snt given a node in the list, one can navigate easily in either direction
(p / possible-01
      :ARG1 (n / navigate-01
            :ARG0 (o / one)
            :ARG1 (d / direction
                  :mod (e / either))
            :ARG1-of (e2 / easy-05))
      :condition (g / give-01
            :ARG1 (n2 / node
                  :part-of (l / list))))"
1226,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",You can traverse the list both forward and backwards.,3,4,3.5,"# ::snt You can traverse the list both forward and backwards.
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (l / list)
            :direction (a / and
                  :op1 (f / forward)
                  :op2 (b / backwards))))"
1227,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",a doubly linked list allows you to back up from a node rather than having to go through the entire list again,4,4,4,"# ::snt a doubly linked list allows you to back up from a node rather than having to go through the entire list again
(a / allow-01
      :ARG0 (l / list
            :ARG1-of (l2 / link-01
                  :mod (d / double)))
      :ARG1 (b / back-up-04
            :ARG0 (y / you)
            :source (n / node)
            :ARG1-of (ii / instead-of-91
                  :ARG2 (o / obligate-01
                        :ARG1 y
                        :ARG2 (g / go-through-20
                              :ARG0 y
                              :ARG1 (l3 / list
                                    :mod (e / entire))
                              :mod (a2 / again))))))"
1228,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.",Gives faster times for some operations such as insertion and deletion,5,5,5,"# ::snt Gives faster times for some operations such as insertion and deletion
(g / give-01
      :ARG1 (t / time
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / fast-02
                        :ARG1 t)
                  :ARG3 (m / more)))
      :ARG2 (o / operate-01
            :mod (s / some)
            :example (a / and
                  :op1 (ii / insert-01)
                  :op2 (d / delete-01))))"
1229,7.6,What is the main advantage of a doubly-linked list over a basic linked list?,"All the deletion and insertion operations can be performed in constant time, including those operations performed before a given location in the list or at the end of the list.","The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).",0,4,2,"# ::snt The primary disadvantage of doubly linked lists are that (1) each node requires an extra pointer, requiring more space, and (2) the insertion or deletion of a node takes a bit longer (more pointer operations).
(d / disadvantage
      :mod (p / primary)
      :poss (l / list
            :ARG1-of (l2 / link-01
                  :mod (d2 / double)))
      :domain (a / and
            :li 1
            :op1 (r / require-01
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (p2 / pointer
                        :mod (e2 / extra)
                        :ARG0-of (r2 / require-01
                              :ARG1 (s / space
                                    :quant (m / more)))))
            :op2 (t / take-10
                  :li 2
                  :ARG0 (o / or
                        :op1 (ii / insert-01
                              :ARG1 (n2 / node))
                        :op2 (d3 / delete-01
                              :ARG1 n2))
                  :ARG1 (l3 / long-03
                        :ARG2-of (h / have-degree-91
                              :ARG1 t
                              :ARG3 (m2 / more
                                    :quant (b / bit))))
                  :ARG1-of (m3 / mean-01
                        :ARG2 (o2 / operate-01
                              :ARG1 (p3 / pointer
                                    :quant (m4 / more)))))))"
1230,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,they take up twice as much memory for each node,5,5,5,"# ::snt they take up twice as much memory for each node
(t / take-up-10
      :ARG0 (t2 / they)
      :ARG1 (m / memory
            :ARG1-of (h / have-quant-91
                  :ARG3 (t3 / times
                        :quant 2)
                  :ARG4 (n / node
                        :mod (e / each)))))"
1231,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.",4,3,3.5,"# ::snt In a doubly linked list, there are more pointers to set and the mechanics of inserting and deleting are more difficult. Also, the special cases at the beginning or end of the list are more complicated.
(m / multi-sentence
      :snt1 (a / and
            :op1 (h / have-quant-91
                  :ARG1 (p / pointer
                        :ARG1-of (s / set-02))
                  :ARG3 (m2 / more))
            :op2 (h2 / have-degree-91
                  :ARG1 (m3 / mechanics
                        :topic (a2 / and
                              :op1 (ii / insert-01)
                              :op2 (d / delete-01))))
            :ARG2 (d2 / difficult)
            :ARG3 (m4 / more))
      :snt2 (c / complicate-01
            :ARG1 (c2 / case-04
                  :ARG1-of (s2 / special-02)
                  :time (o / or
                        :op1 (b / begin-01
                              :ARG1 (l / list))
                        :op2 (e / end-01
                              :ARG1 l)))
            :ARG2 (m5 / more)
            :mod (a3 / also)))"
1232,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.",4,4,4,"# ::snt There are more pointers to set, the mechanics of inserting into and deleting from a doubly linked list are a bit more involved than for a singly linked list.
(a / and
      :op1 (p / pointer
            :ARG1-of (s / set-02)
            :quant (m / more))
      :op2 (ii / involve-01
            :ARG1 (m2 / mechanic
                  :topic (a2 / and
                        :op1 (ii2 / insert-01
                              :ARG2 (l / list
                                    :ARG1-of (l2 / link-01
                                          :mod (d / double))))
                        :op2 (d2 / delete-01
                              :ARG2 l)))
            :ARG2-of (h / have-degree-91
                  :ARG1 m2
                  :ARG3 (m3 / more
                        :quant (b / bit))
                  :ARG4 (l3 / list
                        :ARG1-of (l4 / link-01
                              :manner (s2 / singly))))))"
1233,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.,3,3,3,"# ::snt Insertion and deletion with a doubly linked list are more involved than with a singly linked list leaving more room for error and complex algorithms.
(ii / involve-01
      :ARG1 (a / and
            :op1 (ii2 / insert-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01
                              :mod (d / double))))
            :op2 (d2 / delete-01
                  :ARG1 l))
      :ARG2-of (h / have-degree-91
            :ARG1 a
            :ARG3 (m / more)
            :ARG4 (l3 / list
                  :ARG1-of (l4 / link-01
                        :manner (s / sing-01)))
            :ARG0-of (l5 / leave-13
                  :ARG1 (r / room
                        :ARG1-of (h2 / have-quant-91
                              :ARG3 (m2 / more))
                        :purpose (a2 / and
                              :op1 (e / error)
                              :op2 (a3 / algorithm
                                    :ARG1-of (c / complex-02)))))))"
1234,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Need more memory to store ""previous"" pointers.",5,5,5,"# ::snt Need more memory to store ""previous"" pointers.
(n / need-01
      :ARG0 (ii / i)
      :ARG1 (m / memory
            :quant (m2 / more))
      :purpose (s / store-01
            :ARG0 ii
            :ARG1 (p / pointer
                  :time (p2 / previous))))"
1235,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,a node in a doubly linked list takes up more memory than a node in a singly linked list.,5,5,5,"# ::snt a node in a doubly linked list takes up more memory than a node in a singly linked list.
(t / take-up-10
      :ARG0 (n / node
            :part-of (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d / double))))
      :ARG1 (m / memory
            :ARG1-of (h / have-quant-91
                  :ARG3 (m2 / more)
                  :ARG4 (n2 / node
                        :part-of (l3 / list
                              :ARG1-of (l4 / link-01
                                    :manner (s / singly)))))))"
1236,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.,3,3,3,"# ::snt You have to keep up with where you are and you have to consider the predecessor and successor connections when inserting/deleting.
(a / and
      :op1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (k / keep-up-05
                  :ARG0 y
                  :ARG1 (l / location
                        :location-of y)))
      :op2 (o2 / obligate-01
            :ARG1 y
            :ARG2 (c / consider-02
                  :ARG0 y
                  :ARG1 (a2 / and
                        :op1 (c2 / connect-01
                              :ARG2 (p / person
                                    :ARG0-of (h / have-rel-role-91
                                          :ARG2 (p2 / predecessor))))
                        :op2 (c3 / connect-01
                              :ARG2 (p3 / person
                                    :ARG0-of (s / succeed-02)))))
            :time (s2 / slash
                  :op1 (ii / insert-01
                        :ARG0 y)
                  :op2 (d / delete-01
                        :ARG0 y))))"
1237,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes",5,5,5,"# ::snt Each node requires an extra node, requires more memory, and is more difficult to insert and remove individual nodes
(a / and
      :op1 (r / require-01
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (n2 / node
                  :mod (e2 / extra)))
      :op2 (r2 / require-01
            :ARG0 n
            :ARG1 (m / memory
                  :quant (m2 / more)))
      :op3 (h / have-degree-91
            :ARG1 (a2 / and
                  :op1 (ii / insert-01
                        :ARG1 (n3 / node
                              :mod (ii2 / individual)))
                  :op2 (r3 / remove-01
                        :ARG1 n3))
            :ARG2 (d / difficult)
            :ARG3 (m3 / more)))"
1238,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Double-linked lists require more space per node, and their elementary operations are more expensive",5,5,5,"# ::snt Double-linked lists require more space per node, and their elementary operations are more expensive
(a / and
      :op1 (r / require-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01
                        :ARG1-of (d / double-01)))
            :ARG1 (s / space
                  :quant (m / more)
                  :ARG1-of (r2 / rate-entity-91
                        :ARG2 (n / node))))
      :op2 (e / expensive
            :domain (o / operate-01
                  :ARG0 l
                  :mod (e2 / elementary))
            :ARG2-of (h / have-degree-91
                  :ARG1 o
                  :ARG3 (m2 / more))))"
1239,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,More difficult to delete and create nodes.,3,3,3,"# ::snt More difficult to delete and create nodes.
(h / have-degree-91
      :ARG1 (a / and
            :op1 (d / delete-01
                  :ARG1 (n / node))
            :op2 (c / create-01
                  :ARG1 n))
      :ARG2 (d2 / difficult)
      :ARG3 (m / more))"
1240,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.,5,5,5,"# ::snt They use more memory and you have to make 2 pointers and update 2 pointers each time you change the list.
(a / and
      :op1 (u / use-01
            :ARG0 (t / they)
            :ARG1 (m / memory
                  :quant (m2 / more)))
      :op2 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (a2 / and
                  :op1 (p / point-04
                        :quant 2)
                  :op2 (u2 / update-02
                        :ARG0 y
                        :ARG1 p)
                  :frequency (r / rate-entity-91
                        :ARG4 (c / change-01
                              :ARG0 y
                              :ARG1 (l / list))))))"
1241,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,nodes take up more memory,5,5,5,"# ::snt nodes take up more memory
(t / take-up-10
      :ARG0 (n / node)
      :ARG1 (m / memory
            :quant (m2 / more)))"
1242,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).",5,5,5,"# ::snt Each node requires an extra pointer (space requirements increased), Insertion or deletion of a node takes a longer (more pointer operations).
(m / multi-sentence
      :snt1 (r / require-01
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (p / pointer
                  :mod (e2 / extra))
            :ARG1-of (m2 / mean-01
                  :ARG2 (ii / increase-01
                        :ARG1 (r2 / require-01
                              :ARG1 (s / space)))))
      :snt2 (t / take-10
            :ARG0 (o / or
                  :op1 (ii2 / insert-01
                        :ARG1 (n2 / node))
                  :op2 (d / delete-01
                        :ARG1 n2))
            :ARG1 (o2 / operate-01
                  :ARG1 (p2 / pointer
                        :quant (m3 / more)))
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / long-03
                        :ARG1 (o3 / operation)
                        :ARG3 (m4 / more)))))"
1243,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,its a little more confusing. The special cases at the end and beginning become more difficult to do.,3,3,3,"# ::snt its a little more confusing. The special cases at the end and beginning become more difficult to do.
(m / multi-sentence
      :snt1 (h / have-degree-91
            :ARG1 (ii / it)
            :ARG2 (c / confuse-01
                  :ARG0 ii)
            :ARG3 (m2 / more
                  :quant (l / little)))
      :snt2 (b / become-01
            :ARG1 (c2 / case-04
                  :ARG1-of (s / special-02)
                  :time (a / and
                        :op1 (e / end-01)
                        :op2 (b2 / begin-01)))
            :ARG2 (d / difficult
                  :ARG2-of (h2 / have-degree-91
                        :ARG1 c2
                        :ARG3 (m3 / more)))))"
1244,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,increased actions to add and remove elements to the linked list.,3,3,3,"# ::snt increased actions to add and remove elements to the linked list.
(ii / increase-01
      :ARG1 (a / act-02
            :purpose (a2 / and
                  :op1 (a3 / add-02
                        :ARG1 (e / element)
                        :ARG2 (l / list
                              :ARG1-of (l2 / link-01)))
                  :op2 (r / remove-01
                        :ARG1 e))))"
1245,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.",3,3,3,"# ::snt Inserting and deleting in a double-linked list is more involved, and has special cases at the beginning and end.
(a / and
      :op1 (ii / involve-01
            :ARG1 (a2 / and
                  :op1 (ii2 / insert-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01
                                    :ARG1-of (d / double-01))))
                  :op2 (d2 / delete-01
                        :ARG1 l))
            :ARG2-of (h / have-degree-91
                  :ARG1 a2
                  :ARG3 (m / more)))
      :op2 (h2 / have-03
            :ARG0 a2
            :ARG1 (c / case-03
                  :ARG1-of (s / special-02)
                  :time (a3 / and
                        :op1 (b / begin-01)
                        :op2 (e / end-01)))))"
1246,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,The main disadvanate is that if hard to remove all items in the list.,1,3,2,"# ::snt The main disadvanate is that if hard to remove all items in the list.
(a / advance-01
      :polarity -
      :ARG1 (r / remove-01
            :ARG1 (ii / item
                  :mod (a2 / all)
                  :location (l / list)))
      :mod (m / main)
      :condition (h / hard-02
            :ARG1 r))"
1247,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.",5,5,5,"# ::snt each node requires an extra pointer, taking up more storage.  insertions and deletions require more pointer operations.
(m / multi-sentence
      :snt1 (r / require-01
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (p / pointer
                  :mod (e2 / extra))
            :ARG0-of (c / cause-01
                  :ARG1 (t / take-up-12
                        :ARG0 n
                        :ARG1 (s / store-01
                              :quant (m2 / more)))))
      :snt2 (r2 / require-01
            :ARG0 (a / and
                  :op1 (ii / insert-01)
                  :op2 (d / delete-01))
            :ARG1 (o / operate-01
                  :ARG1 (p2 / pointer)
                  :quant (m3 / more))))"
1248,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"in a doubly linked list there are twice as many pointers for each element , therefore more memory is used",5,5,5,"# ::snt in a doubly linked list there are twice as many pointers for each element , therefore more memory is used
(c / cause-01
      :ARG0 (p / pointer
            :ARG1-of (h / have-quant-91
                  :ARG3 (t / times
                        :quant 2)
                  :ARG4 (e / element
                        :mod (e2 / each)))
            :location (l / list
                  :ARG1-of (l2 / link-01
                        :mod (d / double))))
      :ARG1 (u / use-01
            :ARG1 (m / memory
                  :quant (m2 / more))))"
1249,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list,3,4,3.5,"# ::snt The process of adding and removing Nodes in a Doubly linked list is more complex than in a basic linked list
(h / have-degree-91
      :ARG1 (p / process-02
            :ARG1 (a / and
                  :op1 (a2 / add-02
                        :ARG1 (n / node)
                        :location (l / list
                              :ARG1-of (l2 / link-01
                                    :mod (d / doubt))))
                  :op2 (r / remove-01
                        :ARG1 n)))
      :ARG2 (c / complex)
      :ARG3 (m / more)
      :ARG4 (l3 / list
            :ARG1-of (l4 / link-01
                  :mod (b / basic))))"
1250,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"Double linked lists require more space per node, and their elementary operation are more expensive",5,5,5,"# ::snt Double linked lists require more space per node, and their elementary operation are more expensive
(a / and
      :op1 (r / require-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01
                        :ARG1-of (d / double-01)))
            :ARG1 (s / space
                  :quant (m / more)
                  :ARG1-of (r2 / rate-entity-91
                        :ARG2 (n / node))))
      :op2 (e / expensive
            :domain (o / operate-01
                  :ARG1 l
                  :mod (e2 / elementary))
            :ARG2-of (h / have-degree-91
                  :ARG1 o
                  :ARG3 (m2 / more))))"
1251,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations",5,5,5,"# ::snt 1- each node requires an extra pointer, requiring more space 2- the insertion or deletion of a node takes a bit longer, more pointer operations
(m / multi-sentence
      :snt1 (r / require-01
            :li 1
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (p / pointer
                  :mod (e2 / extra))
            :ARG0-of (r2 / require-01
                  :ARG1 (s / space
                        :quant (m2 / more))))
      :snt2 (t / take-10
            :li 2
            :ARG0 (o / or
                  :op1 (ii / insert-01
                        :ARG1 (n2 / node))
                  :op2 (d / delete-01
                        :ARG1 n2))
            :ARG1 (o2 / operation
                  :mod (p2 / pointer
                        :quant (m3 / more)))
            :ARG1-of (h / have-degree-91
                  :ARG2 (l / long-03
                        :ARG1 o2)
                  :ARG3 (m4 / more))))"
1252,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,It takes up twice the storage needed.,5,5,5,"# ::snt It takes up twice the storage needed.
(t / take-up-12
      :ARG0 (ii / it)
      :ARG1 (t2 / thing
            :ARG1-of (s / store-01)
            :ARG1-of (n / need-01)
            :quant (t3 / twice)))"
1253,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list",5,5,5,"# ::snt using more pointers to enable the backward movement takes up more memory, having more pointers make it slightly more work to add or remove a node from the list
(a / and
      :op1 (t / take-up-10
            :ARG0 (u / use-01
                  :ARG1 (p / pointer
                        :quant (m / more))
                  :ARG2 (e / enable-01
                        :ARG1 (m2 / move-01
                              :direction (b / backward))))
            :ARG1 (m3 / memory
                  :quant (m4 / more)))
      :op2 (m5 / make-02
            :ARG0 (p2 / pointer
                  :quant (m6 / more
                        :mod (s / slight)))
            :ARG1 (w / work-01
                  :ARG1 (o / or
                        :op1 (a2 / add-02
                              :ARG1 (n / node)
                              :ARG2 (l / list))
                        :op2 (r / remove-01
                              :ARG1 n
                              :ARG2 l))
                  :ARG1-of (h / have-quant-91
                        :ARG3 (m7 / more)))))"
1254,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,"increased memory requirements, slightly more complicated when modifying elements in the list",5,5,5,"# ::snt increased memory requirements, slightly more complicated when modifying elements in the list
(a / and
      :op1 (ii / increase-01
            :ARG1 (r / require-01
                  :ARG1 (m / memory)))
      :op2 (c / complicate-01
            :ARG1 r
            :time (m2 / modify-01
                  :ARG1 (e / element
                        :part-of (l / list)))
            :ARG2-of (h / have-degree-91
                  :ARG1 r
                  :ARG3 (m3 / more
                        :quant (s / slight)))))"
1255,7.7,What is the main disadvantage of a doubly-linked list over a basic linked list?,Extra space required to store the back pointers.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
1256,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.,5,5,5,"# ::snt A data structure for storing items which are to be accessed in last-in first-out order that can be implemented in three ways.
(s / structure
      :mod (d / data)
      :purpose (s2 / store-01
            :ARG1 (ii / item
                  :ARG1-of (a / access-01
                        :manner (o / order
                              :mod (l / last-in
                                    :ord (o2 / ordinal-entity
                                          :value 1
                                          :range (o3 / out)))))))
      :ARG1-of (ii2 / implement-01
            :ARG1-of (p / possible-01)
            :manner (w / way
                  :quant 3)))"
1257,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.,5,5,5,"# ::snt A stack is an abstract data type that is based on the principle that the last element inserted into the stack will be the first element removed from the stack.
(t / type-03
      :ARG1 (s / stack)
      :ARG2 (d / data
            :mod (a / abstract))
      :ARG1-of (b / base-02
            :ARG2 (p / principle
                  :topic (e / element
                        :ord (o / ordinal-entity
                              :value ""-1"")
                        :ARG1-of (ii / insert-01
                              :ARG2 (s2 / stack))
                        :domain (e2 / element
                              :ord (o2 / ordinal-entity
                                    :value 1)
                              :ARG1-of (r / remove-01
                                    :ARG2 s2))))))"
1258,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order.,0,4,2,"# ::snt Stores a set of elements in a particular order.
(s / store-01
      :ARG1 (s2 / set
            :consist-of (e / element))
      :manner (o / order-02
            :mod (p / particular)))"
1259,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.",5,5,5,"# ::snt An ADT whose most recently inserted item is the first item removed or retrieved. This property is called last in, first out (LIFO). Items enter and leave a stack at its top.
(m / multi-sentence
      :snt1 (p / product
            :name (n / name
                  :op1 ""ADT"")
            :ARG0-of (ii / insert-01
                  :ARG1 (ii2 / item
                        :ord (o / ordinal-entity
                              :value 1)
                        :ARG1-of (r / remove-01)
                        :ARG1-of (r2 / retrieve-01))
                  :time (r3 / recent
                        :ARG2-of (h / have-degree-91
                              :ARG1 ii
                              :ARG3 (m2 / most)))))
      :snt2 (c / call-01
            :ARG1 (p2 / property
                  :mod (t / this))
            :ARG2 (a / and
                  :op1 (e / enter-01
                        :ARG0 (ii3 / item))
                  :op2 (l / leave-11
                        :ARG0 ii3
                        :ARG1 (s / stack)
                        :location (t2 / top
                              :poss s)))))"
1260,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list in which only the top (or last item added) can be modified.,4,5,4.5,"# ::snt A list in which only the top (or last item added) can be modified.
(l / list
      :location-of (p / possible-01
            :ARG1 (m / modify-01
                  :ARG1 (o / or
                        :op1 (t / top)
                        :op2 (ii / item
                              :mod (l2 / last)
                              :ARG1-of (a / add-02))
                        :mod (o2 / only)))))"
1261,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.,5,5,5,"# ::snt a stack is a data structure that uses push to insert an item and pop to remove ad item. The stack use a last in first out structure for inserting and removing items.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :domain (s2 / stack)
            :ARG0-of (u / use-01
                  :ARG1 (a / and
                        :op1 (p / push-01
                              :ARG1 (ii / insert-01
                                    :ARG1 (ii2 / item)))
                        :op2 (p2 / pop-01
                              :ARG1 (r / remove-01
                                    :ARG1 (ii3 / item
                                          :mod (a2 / advertise-01)))))))
      :snt2 (u2 / use-01
            :ARG0 (s3 / stack)
            :ARG1 (s4 / structure
                  :mod (l / last
                        :ord (o / ordinal-entity
                              :value 1))
                  :mod (o2 / out))
            :purpose (a3 / and
                  :op1 (ii4 / insert-01
                        :ARG1 (ii5 / item))
                  :op2 (r2 / remove-01
                        :ARG1 ii5))))"
1262,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that stores data using LIFO.,5,5,5,"# ::snt A data structure that stores data using LIFO.
(s / structure-01
      :ARG1 (d / data)
      :ARG0-of (s2 / store-01
            :ARG1 (d2 / data)
            :instrument (p / product
                  :name (n / name
                        :op1 ""LIFO""))))"
1263,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.",5,5,5,"# ::snt A stack is similar to an array, but does not allow for random access. Stacks only allow a user to retrieve the last item put into the stack. Last in, fist out.
(m / multi-sentence
      :snt1 (r / resemble-01
            :ARG1 (s / stack)
            :ARG2 (a / array)
            :concession-of (a2 / allow-01
                  :polarity -
                  :ARG0 s
                  :ARG1 (a3 / access-01
                        :ARG1-of (r2 / random-02))))
      :snt2 (a4 / allow-01
            :ARG0 (s2 / stack)
            :ARG1 (r3 / retrieve-01
                  :ARG0 (p / person
                        :ARG0-of (u / use-01))
                  :ARG1 (ii / item
                        :ord (o / ordinal-entity
                              :value ""-1"")
                        :ARG1-of (p2 / put-01
                              :ARG2 s2)))
            :mod (o2 / only))
      :snt3 (a5 / and
            :op1 (b / be-located-at-91
                  :ARG1 (s3 / stack)
                  :ARG2 (ii2 / in))
            :op2 (f / fist
                  :direction (o3 / out))))"
1264,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.,5,5,5,"# ::snt Stores a set of elements in a particular order. Stack principle: LAST  IN  FIRST  OUT. It means: the last element inserted is the first one to be removed.
(m / multi-sentence
      :snt1 (s / store-01
            :ARG1 (s2 / set
                  :consist-of (e / element))
            :manner (o / order
                  :mod (p / particular)))
      :snt2 (p2 / principle
            :mod (s3 / stack-01)
            :ARG1-of (m2 / mean-01
                  :ARG2 (b / be-located-at-91
                        :ARG1 (e2 / element
                              :ord (o2 / ordinal-entity
                                    :value 1)
                              :ARG1-of (ii / insert-01))
                        :ARG2 (e3 / element
                              :ord (o3 / ordinal-entity
                                    :value 1)
                              :ARG1-of (r / remove-01))))))"
1265,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A stack is an ADT that stores a set of elements in a particular order.,1,4,2.5,"# ::snt A stack is an ADT that stores a set of elements in a particular order.
(t / thing
      :ARG1-of (s / stack-01)
      :ARG0-of (s2 / store-01
            :ARG1 (s3 / set
                  :consist-of (e / element))
            :manner (o / order-02
                  :ARG1 t
                  :mod (p / particular)))
      :mod (ii / instrument
            :ARG0-of (a / analyze-01)))"
1266,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a data type that stores a set of elements in a certain order, last in, first out.",5,5,5,"# ::snt a data type that stores a set of elements in a certain order, last in, first out.
(t / type
      :mod (d / data)
      :ARG0-of (s / store-01
            :ARG1 (s2 / set
                  :consist-of (e / element))
            :manner (o / order
                  :mod (c / certain)
                  :ARG1-of (m / mean-01
                        :ARG2 (a / and
                              :op1 (ii / in
                                    :ord (o2 / ordinal-entity
                                          :value ""-1""))
                              :op2 (o3 / out
                                    :ord (o4 / ordinal-entity
                                          :value 1)))))))"
1267,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a data structure that moves elements in last in first out,5,5,5,"# ::snt a data structure that moves elements in last in first out
(s / structure-01
      :ARG1 (d / data)
      :ARG0-of (m / move-01
            :ARG1 (e / element)
            :ARG2 (ii / in
                  :op1 (l / last)
                  :op2 (o / out
                        :ord (o2 / ordinal-entity
                              :value 1)))))"
1268,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a last in first out order.,5,5,5,"# ::snt Stores a set of elements in a last in first out order.
(s / store-01
      :ARG1 (s2 / set
            :consist-of (e / element))
      :manner (o / order
            :mod (l / last)
            :mod (o2 / out)
            :ord (o3 / ordinal-entity
                  :value 1)))"
1269,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A list that can be added to or removed from only from the top.,5,5,5,"# ::snt A list that can be added to or removed from only from the top.
(l / list
      :ARG1-of (a / add-02
            :ARG2 (t / top
                  :mod (o / only))
            :ARG1-of (p / possible-01))
      :ARG1-of (r / remove-01
            :ARG2 t))"
1270,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.",5,5,5,"# ::snt a stack is an Abstract data type which operates on a last in first out basis for storing a list of objects, and does not support ( at least in the pure stack) peeking at a element without removing the rest of the stack first.
(a / and
      :op1 (t / type
            :mod (d / data
                  :mod (a2 / abstract))
            :domain (s / stack)
            :ARG0-of (o / operate-01
                  :ARG1 (b / base-02
                        :ARG1 (s2 / store-01
                              :ARG1 (l / list
                                    :consist-of (o2 / object)))
                        :ARG2 (f / first
                              :ord (o3 / ordinal-entity
                                    :value ""-1""
                                    :value ""in"")))))
      :op2 (s3 / support-01
            :polarity -
            :ARG0 t
            :ARG1 (p / peek-01
                  :ARG0 t
                  :ARG1 (e / element)
                  :manner (r / remove-01
                        :polarity -
                        :ARG0 t
                        :ARG1 (r2 / rest
                              :part-of (s4 / stack))
                        :ord (o4 / ordinal-entity
                              :value 1)))
            :location (s5 / stack
                  :ARG1-of (p2 / pure-02)
                  :mod (a3 / at-least))))"
1271,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).,5,5,5,"# ::snt Stores a set of elements in a particular order based on the principle of Last In First Out (LIFO).
(s / store-01
      :ARG1 (s2 / set
            :consist-of (e / element))
      :manner (o / order
            :mod (p / particular)
            :ARG1-of (b / base-02
                  :ARG2 (p2 / principle
                        :name (n / name
                              :op1 ""Last""
                              :op2 ""In""
                              :op3 ""First""
                              :op4 ""Out"")))))"
1272,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.",5,5,5,"# ::snt an object list that stores elements in a particular order, the first object inserted is at the bottom with the last object at the top so the first object in is the last object out.
(m / multi-sentence
      :snt1 (l / list-01
            :ARG1 (o / object)
            :ARG0-of (s / store-01
                  :ARG1 (e / element)
                  :manner (o2 / order
                        :mod (p / particular))))
      :snt2 (a / and
            :op1 (b / be-located-at-91
                  :ARG1 (o3 / object
                        :ord (o4 / ordinal-entity
                              :value 1))
                  :ARG2 (b2 / bottom))
            :op2 (b3 / be-located-at-91
                  :ARG1 (o5 / object
                        :ord (o6 / ordinal-entity
                              :value ""-1"")
                        :ARG1-of (ii / insert-01))
                  :ARG2 (t / top))
            :ARG0-of (c / cause-01
                  :ARG1 (b4 / be-located-at-91
                        :ARG1 (o7 / object
                              :ord (o8 / ordinal-entity
                                    :value 1))
                        :ARG2 (o9 / out-06
                              :ARG1 o7)))))"
1273,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.,5,5,5,"# ::snt An ADT that stores a set of elements in a particular order. The stack principles are LIFO. The last item inserted in the list is the first out.
(m / multi-sentence
      :snt1 (t / thing
            :name (n / name
                  :op1 ""ADT"")
            :ARG0-of (s / store-01
                  :ARG1 (s2 / set
                        :consist-of (e / element))
                  :manner (o / order
                        :mod (p / particular))))
      :snt2 (p2 / principle
            :mod (s3 / stack-01)
            :domain (t2 / thing
                  :name (n2 / name
                        :op1 ""LIFO"")))
      :snt3 (ii / item
            :ord (o2 / ordinal-entity
                  :value 1)
            :ARG1-of (ii2 / insert-01
                  :ARG2 (l / list))
            :ord o2
            :value -1))"
1274,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",An abstract data type that stores a set of elements in a particular order.,1,4,2.5,"# ::snt An abstract data type that stores a set of elements in a particular order.
(t / type
      :mod (d / data)
      :mod (a / abstract)
      :ARG0-of (s / store-01
            :ARG1 (s2 / set
                  :consist-of (e / element))
            :manner (o / order
                  :mod (p / particular))))"
1275,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a collection of data to be executed in the order of last in first out,5,5,5,"# ::snt a collection of data to be executed in the order of last in first out
(c / collect-01
      :ARG1 (d / data)
      :ARG1-of (e / execute-01
            :manner (o / order-91
                  :ARG2 (a / and
                        :op1 (l / last)
                        :op2 (o2 / out
                              :ord (o3 / ordinal-entity
                                    :value 1))))))"
1276,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.",5,5,5,"# ::snt A stack is a data structure that allows data members to be added or removed one at a time, and in order. They are a ""Last in First Out"" structure.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :domain (s2 / stack)
            :ARG0-of (a / allow-01
                  :ARG1 (o / or
                        :op1 (a2 / add-02
                              :ARG1 (p / person
                                    :ARG0-of (h / have-org-role-91
                                          :ARG1 (d2 / data)
                                          :ARG2 (m2 / member))))
                        :op2 (r / remove-01
                              :ARG1 p
                              :ARG2 p)
                        :manner (o2 / order))))
      :snt2 (s3 / structure
            :domain (t / they)
            :ARG1-of (m3 / mean-01
                  :ARG2 (s4 / structure
                        :mod (l / last)
                        :ARG1-of (o3 / out-06
                              :ord (o4 / ordinal-entity
                                    :value 1))))))"
1277,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",Stores a set of element in a particular order,0,4,2,"# ::snt Stores a set of element in a particular order
(s / store-01
      :ARG1 (s2 / set
            :consist-of (e / element))
      :manner (o / order
            :mod (p / particular)))"
1278,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",is a list of element where the first one to be removed is the last one inserted,5,5,5,"# ::snt is a list of element where the first one to be removed is the last one inserted
(t / thing
      :ARG2-of (l / list-01
            :ARG1 (e / element))
      :domain (e2 / element
            :ARG2-of (ii / include-91
                  :ARG1 (e3 / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :ARG1-of (r / remove-01))
                  :ARG2 (e4 / element
                        :ord (o2 / ordinal-entity
                              :value ""-1"")
                        :ARG1-of (ii2 / insert-01)))))"
1279,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",A data structure that puts elements in a list and only allows the user  access to the last element.,4,5,4.5,"# ::snt A data structure that puts elements in a list and only allows the user  access to the last element.
(s / structure-01
      :ARG1 (d / data)
      :ARG0-of (p / put-01
            :ARG1 (e / element)
            :ARG2 (l / list))
      :ARG0-of (a / allow-01
            :ARG1 (a2 / access-01
                  :ARG0 (p2 / person
                        :ARG0-of (u / use-01))
                  :ARG1 (e2 / element
                        :mod (l2 / last)))
            :mod (o / only)))"
1280,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)",a finite ordered list with zero or more elements,0,4,2,"# ::snt a finite ordered list with zero or more elements
(l / list
      :ARG1-of (o / order-02
            :mod (f / finite))
      :consist-of (e / element
            :quant (o2 / or
                  :op1 0
                  :op2 (m / more-than
                        :op1 0))))"
1281,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","A storage container that holds objects in a certain order, which has a LIFO priority",5,5,5,"# ::snt A storage container that holds objects in a certain order, which has a LIFO priority
(c / container
      :ARG0-of (s / store-01)
      :ARG0-of (h / hold-01
            :ARG1 (o / object)
            :manner (o2 / order
                  :mod (c2 / certain)))
      :ARG0-of (h2 / have-03
            :ARG1 (p / priority
                  :mod (s2 / spaceship
                        :name (n / name
                              :op1 ""LIFO"")))))"
1282,8.1,What is a stack?,"A data structure that can store elements, which has the property that the last item added will be the first to be removed (or last-in-first-out)","Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.",5,5,5,"# ::snt Stacks are a type of container adaptors, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from the end of the container.
(t / type
      :mod (a / adaptor
            :mod (c / container))
      :domain (s / stack)
      :ARG1-of (d / design-01
            :ARG2 (o / operate-01
                  :ARG1 s
                  :location (c2 / context
                        :mod (p / product
                              :name (n / name
                                    :op1 ""LIFO""))
                        :ARG1-of (m / mean-01
                              :ARG2 (a2 / and
                                    :op1 (ii / insert-01
                                          :ARG1 (e / element)
                                          :ARG2 (e2 / end
                                                :part-of (c3 / container)))
                                    :op2 (e3 / extract-01
                                          :ARG1 e
                                          :ARG2 e2)
                                    :mod (o2 / only)))))
            :ARG1-of (s2 / specific-02)))"
1283,8.2,What are the two main functions defined by a stack?,push and pop,Push and pop are two main functions defined in a stack,5,5,5,"# ::snt Push and pop are two main functions defined in a stack
(f / function-01
      :quant 2
      :ARG1 (a / and
            :op1 (p / push-01)
            :op2 (p2 / pop-01))
      :mod (m / main)
      :ARG1-of (d / define-01
            :location (s / stack)))"
1284,8.2,What are the two main functions defined by a stack?,push and pop,Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.,5,5,5,"# ::snt Push which inserts an element on the top of the stack and pop which removes the last inserted element from the stack.
(a / and
      :op1 (p / push-01
            :ARG0-of (ii / insert-01
                  :ARG1 (e / element)
                  :ARG2 (t / top
                        :part-of (s / stack))))
      :op2 (p2 / pop-01
            :ARG0-of (r / remove-01
                  :ARG1 (e2 / element
                        :ARG1-of (ii2 / insert-01
                              :mod (l / last)))
                  :ARG2 s)))"
1285,8.2,What are the two main functions defined by a stack?,push and pop,Push and pop.,5,5,5,"# ::snt Push and pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1286,8.2,What are the two main functions defined by a stack?,push and pop,Pop function and Push function,5,5,5,"# ::snt Pop function and Push function
(a / and
      :op1 (f / function-01
            :ARG1 (p / pop-01))
      :op2 (f2 / function-01
            :ARG1 (p2 / push-01)))"
1287,8.2,What are the two main functions defined by a stack?,push and pop,push and pop.,5,5,5,"# ::snt push and pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1288,8.2,What are the two main functions defined by a stack?,push and pop,push (insert an item) pop (remove an item),5,5,5,"# ::snt push (insert an item) pop (remove an item)
(a / and
      :op1 (p / push-01
            :ARG1 (ii / insert-01
                  :ARG1 (ii2 / item)))
      :op2 (p2 / pop-01
            :ARG1 (r / remove-01
                  :ARG1 (ii3 / item))))"
1289,8.2,What are the two main functions defined by a stack?,push and pop,Adding a new item and removing the item,5,5,5,"# ::snt Adding a new item and removing the item
(a / and
      :op1 (a2 / add-02
            :ARG1 (ii / item
                  :ARG1-of (n / new-01)))
      :op2 (r / remove-01
            :ARG1 ii))"
1290,8.2,What are the two main functions defined by a stack?,push and pop,Push (insert) and pop (retrieve).,5,5,5,"# ::snt Push (insert) and pop (retrieve).
(a / and
      :op1 (p / push-01
            :ARG1-of (ii / insert-01))
      :op2 (p2 / pop-01
            :ARG1-of (r / retrieve-01)))"
1291,8.2,What are the two main functions defined by a stack?,push and pop,push and pop.,5,5,5,"# ::snt push and pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1292,8.2,What are the two main functions defined by a stack?,push and pop,Push and Pop.,5,5,5,"# ::snt Push and Pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1293,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5,5,5,"# ::snt pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
1294,8.2,What are the two main functions defined by a stack?,push and pop,push (add an element) pop (remove an element),5,5,5,"# ::snt push (add an element) pop (remove an element)
(a / and
      :op1 (p / push-01
            :ARG1 (a2 / add-01
                  :ARG1 (e / element)))
      :op2 (p2 / pop-01
            :ARG1 (r / remove-01
                  :ARG1 (e2 / element))))"
1295,8.2,What are the two main functions defined by a stack?,push and pop,Push and pop.,5,5,5,"# ::snt Push and pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1296,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5,5,5,"# ::snt pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
1297,8.2,What are the two main functions defined by a stack?,push and pop,push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. ),5,5,5,"# ::snt push ( to add to a item the Stack) Pop  ( to pull the last item added from an array. )
(a / and
      :op1 (p / push-01
            :purpose (a2 / add-02
                  :ARG1 (ii / item)
                  :ARG2 (s / stack)))
      :op2 (p2 / pop-01
            :purpose (p3 / pull-01
                  :ARG1 (ii2 / item
                        :mod (l / last)
                        :ARG1-of (a3 / add-02
                              :ARG2 (a4 / array))))))"
1298,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5,5,5,"# ::snt pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
1299,8.2,What are the two main functions defined by a stack?,push and pop,"push and pop, push puts an object into the list, and pop takes the last object off.",5,5,5,"# ::snt push and pop, push puts an object into the list, and pop takes the last object off.
(a / and
      :op1 (a2 / and
            :op1 (p / push-01)
            :op2 (p2 / pop-01))
      :op2 (a3 / and
            :op1 (p3 / put-01
                  :ARG0 (p4 / push-01)
                  :ARG1 (o / object)
                  :ARG2 (l / list))
            :op2 (t / take-off-07
                  :ARG0 (p5 / pop-01)
                  :ARG1 (o2 / object
                        :mod (l2 / last)))))"
1300,8.2,What are the two main functions defined by a stack?,push and pop,Push and Pop are the two main functions of a stack,5,5,5,"# ::snt Push and Pop are the two main functions of a stack
(f / function-01
      :ARG0 (s / stack)
      :ARG1 (a / and
            :op1 (p / push-01)
            :op2 (p2 / pop-01))
      :mod (m / main))"
1301,8.2,What are the two main functions defined by a stack?,push and pop,Push and Pop,5,5,5,"# ::snt Push and Pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1302,8.2,What are the two main functions defined by a stack?,push and pop,"push, which adds an element to the stack... and pop which takes an element off the stack",5,5,5,"# ::snt push, which adds an element to the stack... and pop which takes an element off the stack
(a / and
      :op1 (p / push-01
            :ARG0-of (a2 / add-02
                  :ARG1 (e / element)
                  :ARG2 (s / stack)))
      :op2 (p2 / pop-01
            :ARG0-of (t / take-01
                  :ARG1 (e2 / element)
                  :ARG2 s)))"
1303,8.2,What are the two main functions defined by a stack?,push and pop,"Push and Pop, which add and remove data from the stack, respectively.",5,5,5,"# ::snt Push and Pop, which add and remove data from the stack, respectively.
(a / and
      :op1 (t / thing
            :name (n / name
                  :op1 ""Push""))
      :op2 (t2 / thing
            :name (n2 / name
                  :op1 ""Pop""))
      :ARG0-of (a2 / add-02
            :ARG1 (d / data)
            :ARG2 (s / stack))
      :op3 (r / remove-01
            :ARG1 d
            :ARG2 s))"
1304,8.2,What are the two main functions defined by a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
1305,8.2,What are the two main functions defined by a stack?,push and pop,pop - to remove item push - to insert an element,5,5,5,"# ::snt pop - to remove item push - to insert an element
(a / and
      :op1 (p / pop-01)
      :op2 (r / remove-01
            :ARG1 (ii / item))
      :op3 (p2 / push-01)
      :op4 (ii2 / insert-01
            :ARG1 (e / element)))"
1306,8.2,What are the two main functions defined by a stack?,push and pop,Pop and push,5,5,5,"# ::snt Pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
1307,8.2,What are the two main functions defined by a stack?,push and pop,pop and push,5,5,5,"# ::snt pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
1308,8.2,What are the two main functions defined by a stack?,push and pop,push - adds an item to the top of the stack pop - removes the top item from the stack,5,5,5,"# ::snt push - adds an item to the top of the stack pop - removes the top item from the stack
(m / multi-sentence
      :snt1 (p / push-01)
      :snt2 (a / add-02
            :ARG1 (ii / item)
            :ARG2 (t / top
                  :part-of (s / stack)))
      :snt3 (r / remove-01
            :ARG1 (ii2 / item
                  :mod (t2 / top))
            :ARG2 (s2 / stack)))"
1309,8.2,What are the two main functions defined by a stack?,push and pop,push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack,5,5,5,"# ::snt push and pop. Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack
(m / multi-sentence
      :snt1 (a / and
            :op1 (p / push-01)
            :op2 (p2 / pop-01))
      :snt2 (a2 / and
            :op1 (a3 / add-02
                  :ARG0 (p3 / push-01)
                  :ARG1 (n / node
                        :ARG1-of (g / give-01))
                  :ARG2 (t / top
                        :part-of (s / stack)))
            :op2 (l / leave-13
                  :ARG0 p3
                  :ARG1 (n2 / node
                        :mod (p4 / previous)
                        :location (b / below))))
      :snt2 (a4 / and
            :op1 (r / remove-01
                  :ARG0 (p5 / pop-01)
                  :ARG1 (n3 / node
                        :mod (t2 / top)
                        :time (c / current)
                        :part-of (s2 / stack)))
            :op2 (r2 / return-02
                  :ARG0 p5
                  :ARG1 n3)))"
1310,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.,5,5,5,"# ::snt An array has a fixed size.  You can add and delete elements to the end of the array and you use a pointer to keep track of the last element added.  Each time you add or delete an element you update the pointer and check if it is equal to the max size of the array.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (a / array)
            :ARG1 (s / size
                  :ARG1-of (f / fix-03)))
      :snt2 (a2 / and
            :op1 (p / possible-01
                  :ARG1 (a3 / and
                        :op1 (a4 / add-02
                              :ARG0 (y / you)
                              :ARG1 (e / element)
                              :location (e2 / end
                                    :part-of (a5 / array)))
                        :op2 (d / delete-01
                              :ARG0 y
                              :ARG1 e)))
            :op2 (u / use-01
                  :ARG0 y
                  :ARG1 (p2 / pointer)
                  :ARG2 (t / track-01
                        :ARG0 y
                        :ARG1 (e3 / element
                              :mod (l / last)
                              :ARG1-of (a6 / add-01)))))
      :snt2 (a7 / and
            :op1 (u2 / update-01
                  :ARG0 (y2 / you)
                  :ARG1 (p3 / pointer))
            :op2 (c / check-01
                  :ARG0 y2
                  :ARG1 (e4 / equal-01
                        :ARG1 p3
                        :ARG2 (s2 / size
                              :mod (m2 / max)
                              :poss a5))))
      :frequency (r / rate-entity-91
            :ARG4 (o / or
                  :op1 a6
                  :ARG0 y2
                  :ARG1 (e5 / element))
            :op2 (d2 / delete-01
                  :ARG0 y2
                  :ARG1 e5)))"
1311,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.,5,5,5,"# ::snt By implementing an array of a pre-defined size with the bottom stack element stored at element 0 and the last element stored in the array is the top. You increment top when an element is pushed and you decrement it when an item is popped.
(m / multi-sentence
      :snt1 (ii / implement-01
            :ARG0 (y / you)
            :ARG1 (a / array
                  :ARG1-of (s / size-01
                        :ARG1-of (d / define-01
                              :ARG0 y
                              :ARG1-of (p / predetermine-01)))
                  :consist-of (a2 / and
                        :op1 (e / element
                              :mod (s2 / stack)
                              :mod (b / bottom)
                              :ARG1-of (s3 / store-01
                                    :location (e2 / element
                                          :mod 0)))
                        :op2 (t / top
                              :ARG1-of (s4 / store-01
                                    :location (a3 / array)
                                    :mod (l / last)))))
            :snt2 (a4 / and
                  :op1 (ii2 / increment-01
                        :ARG0 (y2 / you)
                        :ARG1 (t2 / top)
                        :time (p2 / push-01
                              :ARG1 (e3 / element)))
                  :op2 (d2 / decrement-01
                        :ARG0 y2
                        :ARG1 t2
                        :time (p3 / pop-01
                              :ARG1 (ii3 / item))))))"
1312,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","If you use a dynamically allocated array, you must provide a destructor and copy constructor.",2,4,3,"# ::snt If you use a dynamically allocated array, you must provide a destructor and copy constructor.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (p / provide-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG0-of (d / destruct-01))
                  :op2 (t2 / thing
                        :ARG0-of (c / construct-01
                              :ARG1 (c2 / copy-01)))))
      :condition (u / use-01
            :ARG0 y
            :ARG1 (a2 / array
                  :ARG1-of (a3 / allocate-01
                        :manner (d2 / dynamic)))))"
1313,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create a int value that stores the ""head"" of the stack. Increment the top when one element is pushed and decrement after it is popped.",5,5,5,"# ::snt Create a int value that stores the ""head"" of the stack. Increment the top when one element is pushed and decrement after it is popped.
(m / multi-sentence
      :snt1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (v / value
                  :mod (ii / int)
                  :ARG0-of (s / store-01
                        :ARG1 (h / head
                              :part-of (s2 / stack)))))
      :snt2 (a / and
            :op1 (ii2 / increment-01
                  :ARG1 (t / top)
                  :time (p / push-01
                        :ARG1 (e / element
                              :quant 1)))
            :op2 (d / decrease-01
                  :ARG1 t
                  :time (a2 / after
                        :op1 (p2 / pop-01
                              :ARG1 e)))))"
1314,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use a pointer that always points to the end of the array list for push/pop modifications.,5,4,4.5,"# ::snt Use a pointer that always points to the end of the array list for push/pop modifications.
(u / use-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / pointer
            :ARG0-of (p2 / point-01
                  :ARG2 (e / end
                        :part-of (l / list
                              :mod (a / array)))
                  :time (a2 / always)))
      :purpose (m / modify-01
            :ARG1 (s / slash
                  :op1 (p3 / push-01)
                  :op2 (p4 / pop-01))))"
1315,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.,5,4,4.5,"# ::snt if you used an array to implement a stack when you add an element just add it to the end of an array and remove items from end of array also.
(a / and
      :op1 (a2 / add-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element)
            :ARG2 (e2 / end
                  :part-of (a3 / array))
            :mod (j / just))
      :op2 (r / remove-01
            :mode imperative
            :ARG0 y
            :ARG1 (ii / item)
            :ARG2 e2
            :mod (a4 / also))
      :condition (u / use-01
            :ARG0 y
            :ARG1 (a5 / array)
            :ARG2 (ii2 / implement-01
                  :ARG0 y
                  :ARG1 (s / stack))
            :time (a6 / add-02
                  :ARG0 y
                  :ARG1 e)))"
1316,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You predetermine the size of the stack as you would an array.  This type can not grow.,1,4,2.5,"# ::snt You predetermine the size of the stack as you would an array.  This type can not grow.
(m / multi-sentence
      :snt1 (p / predetermine-01
            :ARG0 (y / you)
            :ARG1 (s / size
                  :poss (s2 / stack))
            :ARG1-of (r / resemble-01
                  :ARG2 (p2 / predetermine-01
                        :ARG0 y
                        :ARG1 (s3 / size
                              :poss (a / array)))))
      :snt2 (p3 / possible-01
            :polarity -
            :ARG1 (g / grow-01
                  :ARG1 (t / type
                        :mod (t2 / this)))))"
1317,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.",5,5,5,"# ::snt Declare a variable that points the last item in the array, which increases (++) when items are pushed onto the stack, and decreases (--) when an item is popped off the top.
(d / declare-02
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (v / variable
            :ARG0-of (p / point-01
                  :ARG1 (ii / item
                        :ord (o / ordinal-entity
                              :value ""-1"")
                        :part-of (a / array)))
            :ARG0-of (ii2 / increase-01
                  :ARG1 (v2 / value
                        :value ""++"")
                  :time (p2 / push-01
                        :ARG1 (ii3 / item)
                        :ARG2 (s / stack)))
            :ARG0-of (d2 / decrease-01
                  :ARG1 (v3 / value
                        :value ""--"")
                  :time (p3 / pop-01
                        :ARG1 ii3
                        :ARG2 (t / top)))))"
1318,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. ",5,4,4.5,"# ::snt Allocate an array of some size. The bottom stack element is stored at some element. Last index in the array is the top. Increment top when one element is pushed, decrement after pop. 
(m / multi-sentence
      :snt1 (a / allocate-01
            :ARG1 (a2 / array
                  :ARG1-of (s / size-01
                        :ARG2 (s2 / some))))
      :snt2 (s3 / store-01
            :ARG1 (e / element
                  :ARG1-of (s4 / stack-01)
                  :mod (b / bottom))
            :location (e2 / element
                  :mod (s5 / some)))
      :snt3 (t / top
            :mod (ii / index
                  :mod (l / last)
                  :location (a3 / array)))
      :snt4 (a4 / and
            :op1 (t2 / top
                  :mod (ii2 / increment-01)
                  :time (p / push-01
                        :ARG1 (e3 / element
                              :quant 1)))
            :op2 (d / decrease-01
                  :time (a5 / after
                        :op1 (p2 / pop-01)))))"
1319,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.",5,3,4,"# ::snt You allocate an pre-defined array, the bottom element is stored at element 0, and the last index is the head.
(a / and
      :op1 (a2 / allocate-01
            :ARG0 (y / you)
            :ARG1 (a3 / array
                  :ARG1-of (d / define-01
                        :ARG1-of (p / pre-exist-01))))
      :op2 (s / store-01
            :ARG1 (e / element
                  :mod (b / bottom))
            :location (e2 / element
                  :mod 0))
      :op3 (h / head
            :domain (ii / index
                  :ord (o / ordinal-entity
                        :value -1))))"
1320,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad",5,4,4.5,"# ::snt Make an array, make the bottom at spot 0, make the last spot in the array the top, and increment top when you ad
(a / and
      :op1 (m / make-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / array))
      :op2 (m2 / make-01
            :mode imperative
            :ARG0 y
            :ARG1 (b / bottom
                  :location (s / spot
                        :mod 0)))
      :op3 (m3 / make-01
            :mode imperative
            :ARG0 y
            :ARG1 (t / top
                  :location (s2 / spot
                        :mod (l / last)
                        :location a2)))
      :op4 (ii / increment-01
            :mode imperative
            :ARG0 y
            :ARG1 t
            :time (a3 / advertise-01
                  :ARG0 y)))"
1321,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",treat the beginning of the array as the beginning of the stack,4,4,4,"# ::snt treat the beginning of the array as the beginning of the stack
(t / treat-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (b / begin-01
            :ARG1 (a / array))
      :ARG2 (b2 / begin-01
            :ARG1 (s / stack)))"
1322,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Use an index value called top to keep track of the last element in the array.,5,4,4.5,"# ::snt Use an index value called top to keep track of the last element in the array.
(u / use-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (v / value
            :mod (ii / index)
            :ARG1-of (c / call-01
                  :ARG2 (t / top)))
      :ARG2 (k / keep-02
            :ARG0 y
            :ARG1 (t2 / track-01
                  :ARG0 y
                  :ARG1 (e / element
                        :mod (l / last)
                        :part-of (a / array)))))"
1323,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",create an array and implement pointers that point to the next list item down and stack them up.,1,3,2,"# ::snt create an array and implement pointers that point to the next list item down and stack them up.
(a / and
      :op1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / array))
      :op2 (ii / implement-01
            :mode imperative
            :ARG0 y
            :ARG1 (p / pointer
                  :ARG0-of (p2 / point-01
                        :ARG2 (ii2 / item
                              :mod (l / list)
                              :mod (n / next)
                              :direction (d / down)))))
      :op3 (s / stack-01
            :mode imperative
            :ARG0 y
            :ARG1 p
            :direction (u / up)))"
1324,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.",3,4,3.5,"# ::snt for efficiency it is easiest to implement the left to right method, with the right most item being the one that is retrieved when a pop is performed, and a push places an object on the furthest element.
(a / and
      :op1 (h / have-degree-91
            :ARG1 (ii / implement-01
                  :ARG1 (m / method
                        :mod (b / between
                              :op1 (l / left-19)
                              :op2 (r / right-08))))
            :ARG2 (e / easy-05
                  :ARG1 ii)
            :ARG3 (m2 / most))
      :op2 (r2 / retrieve-01
            :ARG1 (ii2 / item
                  :ARG1-of (h2 / have-quant-91
                        :ARG2 (m3 / most)
                        :ARG3 (m4 / most)))
            :time (p / perform-02
                  :ARG1 (p2 / pop-01)))
      :op3 (p3 / place-01
            :ARG0 (p4 / push-01)
            :ARG1 (o / object)
            :ARG2 (e2 / element
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (f / far)
                        :ARG3 (m5 / most))))
      :purpose (e3 / efficient-01))"
1325,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop",5,4,4.5,"# ::snt Create an array based on a pre-defined size N There can't be more elements than N.  Bottom stack element stored at element 0 last index in the array is the top  Increment top when one element is pushed, decrement after pop
(m / multi-sentence
      :snt1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a / array)
            :ARG1-of (b / base-02
                  :ARG2 (s / size
                        :quant (m2 / more)
                        :ARG1-of (d / define-01
                              :ARG0 y
                              :ARG1-of (p / pre-exist-01)))))
      :snt2 (p2 / possible-01
            :polarity -
            :ARG1 (h / have-quant-91
                  :ARG1 (e / element
                        :quant m2)
                  :ARG3 (e2 / equal)))
      :snt3 (a2 / and
            :op1 (t / top
                  :mod (ii / increment-01)
                  :time (p3 / push-01
                        :ARG1 (e3 / element
                              :quant 1)))
            :op2 (d2 / decrement
                  :time (a3 / after
                        :op1 (p4 / pop-01)))
            :domain (e4 / element
                  :quant 0
                  :mod (s2 / stack
                        :mod (b2 / bottom))
                  :location a)))"
1326,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array",4,4,4,"# ::snt with the element added to the array, so that the last element added is at the end, and when the element is popped it takes the last element off the array
(c / cause-01
      :ARG0 (a / add-02
            :ARG1 (e / element)
            :ARG2 (a2 / array))
      :ARG1 (a3 / and
            :op1 (e2 / end-01
                  :ARG1 (e3 / element
                        :mod (l / last)
                        :ARG1-of (a4 / add-02)))
            :op2 (t / take-off-07
                  :ARG0 e3
                  :ARG1 e3
                  :time (p / pop-01
                        :ARG1 e3))))"
1327,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.,5,4,4.5,"# ::snt Allocate an array of some pre-defined size. Bottom stack element stored at element 0. The last index in the array is the top. Increment top when one element is pushed.
(m / multi-sentence
      :snt1 (a / allocate-01
            :ARG1 (a2 / array
                  :ARG1-of (s / size-01
                        :ARG1-of (d / define-01
                              :ARG1-of (p / predetermine-01))
                        :mod (s2 / some))))
      :snt2 (s3 / stack-01
            :ARG1 (e / element
                  :mod (b / bottom))
            :ARG1-of (s4 / store-01
                  :location (e2 / element
                        :quant 1)))
      :snt3 (t / top
            :domain (ii / index
                  :mod (l / last)
                  :part-of (a3 / array)))
      :snt4 (t2 / top
            :mod (ii2 / increment)
            :time (p2 / push-01
                  :ARG1 (e3 / element
                        :quant 1))))"
1328,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.",4,4,4,"# ::snt Create an array, size N.  N++ when one element is pushed.  N-- when one element is popped.
(m / multi-sentence
      :snt1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a / array
                  :ARG1-of (s / size-01
                        :ARG2 (s2 / string-entity
                              :value ""N""))))
      :snt2 (s3 / string-entity
            :value ""N++""
            :time (p / push-01
                  :ARG1 (e / element
                        :quant 1)))
      :snt3 (s4 / string-entity
            :value ""N++""
            :time (p2 / pop-01
                  :ARG1 (e2 / element
                        :quant 1))))"
1329,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",define an array and keep track of a pointer to the last element as items are added,5,3,4,"# ::snt define an array and keep track of a pointer to the last element as items are added
(a / and
      :op1 (d / define-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / array))
      :op2 (k / keep-02
            :mode imperative
            :ARG0 y
            :ARG1 (t / track-01
                  :ARG0 y
                  :ARG1 (p / pointer
                        :destination (e / element
                              :mod (l / last))))
            :time (a3 / add-02
                  :ARG1 (ii / item))))"
1330,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.",5,4,4.5,"# ::snt By allocating an array of predetermined size, and an integer to track the top element of the stack. The bottom member of the stack will go in element 0 of the array, and for each element pushed the ""top"" tracking integer is incremented.
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / allocate-01
                  :ARG1 (a3 / and
                        :op1 (a4 / array
                              :ARG1-of (s / size-01
                                    :ARG1-of (p / predetermine-01)))
                        :op2 (ii / integer))
                  :purpose (t / track-01
                        :ARG1 (e / element
                              :mod (t2 / top)
                              :part-of (s2 / stack)))))
      :snt2 (a5 / and
            :op1 (g / go-01
                  :ARG1 (m2 / member
                        :mod (b / bottom)
                        :part-of (s3 / stack))
                  :ARG4 (e2 / element
                        :mod 0
                        :part-of (a6 / array)))
            :op2 (ii2 / increment-01
                  :ARG1 ii
                  :ARG0-of (t3 / track-01)
                  :mod (t4 / top))
            :ARG1-of (c / cause-01
                  :ARG0 (p2 / push-01
                        :ARG1 (e3 / element
                              :quant (e4 / each))))))"
1331,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Allocate an array of some size, bottom stack element stored at element 0",4,4,4,"# ::snt Allocate an array of some size, bottom stack element stored at element 0
(a / allocate-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (a2 / array
            :mod (s / stack
                  :mod (b / bottom))
            :ARG1-of (s2 / store-01
                  :location (e / element
                        :mod 0))
            :ARG1-of (s3 / size-01
                  :ARG2 (s4 / some))))"
1332,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",you store the stack in the array but you have to keep in mind the first element,3,3,3,"# ::snt you store the stack in the array but you have to keep in mind the first element
(c / contrast-01
      :ARG1 (s / store-01
            :ARG0 (y / you)
            :ARG1 (s2 / stack)
            :location (a / array))
      :ARG2 (o / obligate-01
            :ARG1 y
            :ARG2 (k / keep-in-mind-08
                  :ARG0 y
                  :ARG1 (e / element
                        :ord (o2 / ordinal-entity
                              :value 1)))))"
1333,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.",You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.,5,3,4,"# ::snt You keep track of the last item entered into the array and do not  allow the user access to the other parts of the array.
(a / and
      :op1 (k / keep-02
            :ARG0 (y / you)
            :ARG1 (t / track-01
                  :ARG0 y
                  :ARG1 (ii / item
                        :mod (l / last)
                        :ARG1-of (e / enter-02
                              :ARG2 (a2 / array)))))
      :op2 (a3 / allow-01
            :polarity -
            :ARG0 y
            :ARG1 (a4 / access-01
                  :ARG0 (p / person
                        :ARG0-of (u / use-01))
                  :ARG1 (p2 / part
                        :mod (o / other)
                        :part-of (a5 / array)))))"
1334,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","using arrays, you are pushing one int at a time into the stack until you get to the end of your array",4,4,4,"# ::snt using arrays, you are pushing one int at a time into the stack until you get to the end of your array
(p / push-01
      :ARG0 (y / you)
      :ARG1 (ii / int
            :quant 1
            :mod (a / at-a-time))
      :ARG2 (s / stack)
      :time (u / until
            :op1 (g / get-05
                  :ARG1 y
                  :ARG2 (e / end-01
                        :ARG1 (a2 / array
                              :poss y))))
      :manner (u2 / use-01
            :ARG0 y
            :ARG1 (a3 / array)))"
1335,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list",5,3,4,"# ::snt by having a max number of elements, allocating an array with that number of elements, storing the elements starting at 0, and keeping track of how many elements are currently in the list
(a / and
      :op1 (h / have-03
            :ARG1 (e / element
                  :quant (n / number
                        :mod (m / max))))
      :op2 (a2 / allocate-01
            :ARG1 (a3 / array
                  :consist-of (e2 / element
                        :quant (n2 / number
                              :mod (t / that)))))
      :op3 (s / store-01
            :ARG1 (e3 / element
                  :ARG1-of (s2 / start-01
                        :ARG2 0)))
      :op4 (k / keep-track-02
            :ARG1 (n3 / number
                  :quant-of (e4 / element
                        :ARG1-of (l / list-01)
                        :time (c / current)))))"
1336,8.3,How can you implement a stack with an array?,"Keep the top of the stack toward the end of the array, so the push and pop operations will add or remove elements from the right side of the array.","Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. ",2,4,3,"# ::snt Stack usually holds a bunch of items with the same type, therefore u can use an array, to hold the content of the stack and an integer top that holds the index of the element at the top of the stack. u Choose an array size. Then the sequence of operations used. u have to decide what data types are needed for this stack data structure. 
(m / multi-sentence
      :snt1 (h / hold-01
            :ARG0 (s / stack)
            :ARG1 (ii / item
                  :quant (b / bunch)
                  :ARG0-of (h2 / have-03
                        :ARG1 (t / type
                              :ARG1-of (s2 / same-01))))
            :mod (u / usual)
            :ARG0-of (c / cause-01
                  :ARG1 (p / possible-01
                        :ARG1 (u2 / use-01
                              :ARG0 (y / you)
                              :ARG1 (a / and
                                    :op1 (a2 / array
                                          :ARG0-of (h3 / hold-01
                                                :ARG1 (c2 / content
                                                      :poss (s3 / stack))))
                                    :op2 (t2 / top
                                          :mod (ii2 / integer)
                                          :ARG0-of (h4 / hold-01
                                                :ARG1 (ii3 / index
                                                      :poss (e / element
                                                            :location (t3 / top
                                                                  :part-of (s4 / stack)))))))))))
      :snt2 (a3 / and
            :op1 (c3 / choose-01
                  :ARG0 (y2 / you
                        :ARG1 (s5 / size
                              :mod (a4 / array)))
                  :op2 (s6 / sequence
                        :mod (o / operation
                              :ARG1-of (u3 / use-01))))
            :snt3 (o2 / obligate-01
                  :ARG1 (y3 / you)
                  :ARG2 (d / decide-01
                        :ARG0 y3
                        :ARG1 (t4 / type
                              :mod (d2 / data)
                              :ARG1-of (n / need-01
                                    :purpose (s7 / structure-01
                                          :ARG1 (d3 / data)
                                          :mod s4)
                                    :mod (t5 / this)))))))"
1337,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You can add an element to the end of the linked list and update a pointer called top each time you modify the list.,2,4,3,"# ::snt You can add an element to the end of the linked list and update a pointer called top each time you modify the list.
(p / possible-01
      :ARG1 (a / and
            :op1 (a2 / add-02
                  :ARG0 (y / you)
                  :ARG1 (e / element)
                  :ARG2 (e2 / end-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01))))
            :op2 (u / update-02
                  :ARG0 y
                  :ARG1 (p2 / pointer
                        :ARG1-of (c / call-01
                              :ARG2 (t / top)))
                  :frequency (r / rate-entity-91
                        :ARG4 (m / modify-01
                              :ARG0 y
                              :ARG1 (l3 / list))))))"
1338,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.,5,5,5,"# ::snt You implement a list in which the head pointer points to the element most recently pushed onto the list and the pop function changes the head pointer to point to the next to last element in the list and removes the element head pointer previously pointed to.
(ii / implement-01
      :ARG0 (y / you)
      :ARG1 (l / list
            :location-of (a / and
                  :op1 (p / point-01
                        :ARG0 (p2 / pointer
                              :mod (h / head))
                        :ARG2 (e / element
                              :ARG1-of (p3 / push-01
                                    :ARG2 (l2 / list)
                                    :time (r / recent
                                          :ARG2-of (h2 / have-degree-91
                                                :ARG1 p3
                                                :ARG3 (m / most))))))
                  :op2 (a2 / and
                        :op1 (c / change-01
                              :ARG0 (f / function
                                    :mod (p4 / pop))
                              :ARG1 p2
                              :ARG2 (p5 / point-01
                                    :ARG0 p2
                                    :ARG1 (e2 / element
                                          :mod (l3 / last)
                                          :mod (n / next)
                                          :part-of l2))))
                  :op2 (r2 / remove-01
                        :ARG0 f
                        :ARG1 (p6 / point-01
                              :ARG0 p2
                              :ARG1 e2
                              :time (p7 / previous))))))"
1339,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack,3,5,4,"# ::snt This is the implementation of the stack using single linked list.   The operations performed on a stack are    1)push(): This is the function which is for insertion(pushing)of an element into stack                      It is similar to the insertion of an element at the end of a single linked list                   see  the function insert_end() in the program for operations of single linked list    2)pop(): This is the function which is for deletion(popping up) of an element from the stack             It is similar to the deletion of an element at the end of a single linked list       see  the function delete_end() in the program for operations of single linked list    3)stack_display():This is the function which is for displaying the elements of a stack
(m / multi-sentence
      :snt1 (ii / implement-01
            :ARG1 (s / stack
                  :ARG0-of (u / use-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01
                                    :ARG1-of (s2 / single-02)))))
            :mod (t / this))
      :snt2 (o / operate-01
            :ARG1-of (p / perform-02
                  :location (s3 / stack))
            :ARG1-of (r / resemble-01
                  :ARG2 (ii2 / insert-01
                        :ARG1 (e / element)
                        :time (e2 / end-01
                              :ARG1 l
                              :ARG1-of (l3 / link-01
                                    :ARG1-of (s4 / single-02))))))
      :snt2 (s5 / see-01
            :mode imperative
            :li 2
            :ARG0 (y / you)
            :ARG1 (f / function
                  :name (n / name
                        :op1 ""insert_end()"")
                  :part-of (p2 / program
                        :purpose (o2 / operate-01
                              :ARG1 l
                              :ARG1-of l3
                              :ARG1-of s4))))
      :ARG2 (f2 / function
            :name (n2 / name
                  :op1 ""pop()"")
            :purpose (d / delete-01
                  :ARG1 e)))"
1340,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.,4,4,4,"# ::snt Using nodes to keep track of the head of the stack. Then using Push( ) and Pop ( ) to create the stack as needed.
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (n / node)
            :ARG2 (k / keep-02
                  :ARG1 (t / track-01
                        :ARG1 (h / head
                              :part-of (s / stack)))))
      :snt2 (u2 / use-01
            :ARG1 (a / and
                  :op1 (p / push-01)
                  :op2 (p2 / pop-01))
            :time (t2 / then)
            :purpose (c / create-01
                  :ARG1 (s2 / stack)
                  :ARG1-of (n2 / need-01))))"
1341,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.",5,4,4.5,"# ::snt Use the head as the top of the stack, only modify the head when you push/pop... push would add a new item to the head, pop would remove the item from the head.
(m / multi-sentence
      :snt1 (u / use-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (h / head)
            :ARG2 (t / top
                  :part-of (s / stack)))
      :snt2 (m2 / modify-01
            :mode imperative
            :ARG0 (y2 / you)
            :ARG1 (h2 / head)
            :mod (o / only)
            :time (s2 / slash
                  :op1 (p / push-01)
                  :op2 (p2 / pop-01)))
      :snt3 (a / and
            :op1 (a2 / add-02
                  :ARG0 (p3 / push-01)
                  :ARG1 (ii / item
                        :ARG1-of (n / new-01))
                  :ARG2 h2)
            :op2 (r / remove-01
                  :ARG0 (p4 / pop-01)
                  :ARG1 ii
                  :ARG2 h2)))"
1342,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.,5,4,4.5,"# ::snt you implement a stack with a list by changing the pointer to the first element of the list to the new item and move the pointer from the top of the stack to the next item when removing an item.
(ii / implement-01
      :ARG0 (y / you)
      :ARG1 (s / stack
            :accompanier (l / list))
      :manner (a / and
            :op1 (c / change-01
                  :ARG0 y
                  :ARG1 (p / pointer)
                  :ARG2 (e / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of l))
            :ARG3 (ii2 / item
                  :ARG1-of (n / new-01)))
      :op2 (m / move-01
            :ARG0 y
            :ARG1 p
            :ARG2 (ii3 / item
                  :mod (n2 / next))
            :source (t / top
                  :part-of s))
      :time (r / remove-01
            :ARG0 y
            :ARG1 (ii4 / item)))"
1343,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",You dynamicly create space as the stack grows.  The stack can be as long as you need.,1,4,2.5,"# ::snt You dynamicly create space as the stack grows.  The stack can be as long as you need.
(m / multi-sentence
      :snt1 (c / create-01
            :ARG0 (y / you)
            :ARG1 (s / space)
            :manner (d / dynamic)
            :time (g / grow-01
                  :ARG1 (s2 / stack)))
      :snt2 (p / possible-01
            :ARG1 (l / long-03
                  :ARG1 (s3 / stack)
                  :ARG2-of (h / have-degree-91
                        :ARG1 s3
                        :ARG3 (e / equal)
                        :ARG4 (n / need-01
                              :ARG0 (y2 / you))))))"
1344,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.",5,5,5,"# ::snt Declare a pointer that points to the head of the linked list, only add and remove nodes from the beginning of the list.
(a / and
      :op1 (d / declare-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / pointer
                  :ARG0-of (p2 / point-01
                        :ARG2 (h / head
                              :part-of (l / list
                                    :ARG1-of (l2 / link-01))))))
      :op2 (a2 / and
            :op1 (a3 / add-01
                  :ARG0 y
                  :ARG1 (n / node)
                  :ARG2 (b / begin-01
                        :ARG1 (l3 / list)))
            :op2 (r / remove-01
                  :ARG0 y
                  :ARG1 n)
            :mod (o / only)))"
1345,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.,4,4,4,"# ::snt Creating a linked list. Add an element to the top of the stack when pushing and deleting an element when popping.
(m / multi-sentence
      :snt1 (c / create-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)))
      :snt2 (a / and
            :op1 (a2 / add-01
                  :ARG1 (e / element)
                  :ARG2 (t / top
                        :part-of (s / stack))
                  :time (p / push-01
                        :ARG1 (e2 / element)))
            :op2 (d / delete-01
                  :ARG1 e2
                  :time (p2 / pop-01
                        :ARG1 e2))))"
1346,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.",4,3,3.5,"# ::snt A singly-linked list is already a lot like a stack, it just depends on the way you address moving the head.
(m / multi-sentence
      :snt1 (r / resemble-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01
                        :manner (s / singly)))
            :ARG2 (s2 / stack)
            :time (a / already)
            :degree (l3 / lot))
      :snt2 (d / depend-01
            :ARG0 (ii / it)
            :ARG1 (w / way
                  :manner-of (a2 / address-02
                        :ARG0 (y / you)
                        :ARG1 (m2 / move-01
                              :ARG1 (h / head))))
            :mod (j / just)))"
1347,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","make a list, make the bottom the head, add on the end and make the end top",3,4,3.5,"# ::snt make a list, make the bottom the head, add on the end and make the end top
(a / and
      :op1 (m / make-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / list))
      :op2 (m2 / make-01
            :mode imperative
            :ARG0 y
            :ARG1 (h / head
                  :mod (b / bottom)))
      :op3 (a2 / add-on-02
            :mode imperative
            :ARG0 y
            :ARG1 (e / end))
      :op4 (m3 / make-01
            :mode imperative
            :ARG0 y
            :ARG1 (t / top)
            :ARG2 (e2 / end)))"
1348,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use the add function with a list as the beginning of the stack and remove for pop,5,4,4.5,"# ::snt use the add function with a list as the beginning of the stack and remove for pop
(a / and
      :op1 (u / use-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (f / function
                  :mod (a2 / add-02)
                  :accompanier (l / list
                        :ARG0-of (b / begin-01
                              :ARG1 (s / stack)))))
      :op2 (r / remove-01
            :purpose (p / pop-01)))"
1349,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Use head as the top and push and pop nodes from the head.,5,4,4.5,"# ::snt Use head as the top and push and pop nodes from the head.
(a / and
      :op1 (u / use-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (h / head)
            :ARG2 (t / top))
      :op2 (a2 / and
            :op1 (p / push-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (n / node)
                  :source h)
            :op2 (p2 / pop-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 n)))"
1350,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",create a node based list that points to the next list item down.,0,3,1.5,"# ::snt create a node based list that points to the next list item down.
(c / create-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / list
            :ARG1-of (b / base-02
                  :ARG2 (n / node))
            :ARG0-of (p / point-01
                  :ARG2 (ii / item
                        :mod (n2 / next)
                        :ARG1-of (l2 / list-01)
                        :direction (d / down)))))"
1351,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have the head of the list be the last item added, and a push just adds a new head.",5,4,4.5,"# ::snt have the head of the list be the last item added, and a push just adds a new head.
(a / and
      :op1 (h / have-04
            :ARG1 (a2 / add-02
                  :ARG1 (h2 / head
                        :part-of (l / list))
                  :ARG2 (ii / item
                        :mod (l2 / last))))
      :op2 (a3 / add-02
            :ARG0 (p / push-01)
            :ARG1 (h3 / head
                  :ARG1-of (n / new-01))
            :mod (j / just)))"
1352,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.",5,4,4.5,"# ::snt Create a new list.  Pop elements in the stack as needed.  Push the stack to remove items, unless the stack is empty.  The top item is at the head of the list. The last item is at the end.
(m / multi-sentence
      :snt1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / list
                  :ARG1-of (n / new-01)))
      :snt2 (p / pop-01
            :mode imperative
            :ARG0 y
            :ARG1 (e / element)
            :location (s / stack)
            :ARG1-of (n2 / need-01))
      :snt3 (p2 / push-01
            :mode imperative
            :ARG0 y
            :ARG1 (s2 / stack)
            :purpose (r / remove-01
                  :ARG0 y
                  :ARG1 (ii / item))
            :condition (e2 / empty-02
                  :polarity -
                  :ARG1 (s3 / stack)))
      :snt4 (a / and
            :op1 (b / be-located-at-91
                  :ARG1 (ii2 / item
                        :mod (t / top))
                  :ARG2 (h / head
                        :part-of (l2 / list)))
            :op2 (b2 / be-located-at-91
                  :ARG1 (ii3 / item
                        :mod (l3 / last))
                  :ARG2 (e3 / end))))"
1353,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.,3,4,3.5,"# ::snt adding the element to the end of the list so that it links to the element before it. when popping the element it takes the last element in the list and sets the previous one as the end of the list.
(m / multi-sentence
      :snt1 (a / add-02
            :ARG1 (e / element)
            :ARG2 (e2 / end-01
                  :ARG1 (l / list))
            :purpose (l2 / link-01
                  :ARG1 e
                  :ARG2 (e3 / element
                        :time (b / before
                              :op1 e2))))
      :snt2 (a2 / and
            :op1 (t / take-01
                  :ARG0 (ii / it)
                  :ARG1 (e4 / element
                        :ord (o / ordinal-entity
                              :value ""-1"")
                        :part-of (l3 / list)))
            :op2 (s / set-03
                  :ARG0 ii
                  :ARG1 (e5 / element
                        :mod (p / previous))
                  :ARG2 (e6 / end-01
                        :ARG1 (l4 / list))
                  :time (p2 / pop-01
                        :ARG1 e4))))"
1354,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.",1,4,2.5,"# ::snt You can implement a stack using arrays or and linked list. By the use of pointers, that point element(node) to the next element in the stack. By the use of pointers, the stack becomes a linked list.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (ii / implement-01
                  :ARG0 (y / you)
                  :ARG1 (s / stack)
                  :manner (u / use-01
                        :ARG0 y
                        :ARG1 (o / or
                              :op1 (a / array)
                              :op2 (l / list
                                    :ARG1-of (l2 / link-01))))))
      :snt2 (p2 / point-01
            :ARG0 (p3 / point-01
                  :ARG0 y
                  :ARG1 (e / element
                        :mod (t / that))
                  :ARG2 (e2 / element
                        :mod (n / next)
                        :part-of (s2 / stack))))
      :snt3 (b / become-01
            :ARG1 (s3 / stack)
            :ARG2 (l3 / list
                  :ARG1-of (l4 / link-01))
            :manner (u2 / use-01
                  :ARG0 y
                  :ARG1 (p4 / pointer))))"
1355,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.,5,4,4.5,"# ::snt Elements are only inserted and removed from the head of the list.  There is no header node or current pointer.
(m / multi-sentence
      :snt1 (a / and
            :op1 (ii / insert-01
                  :ARG1 (e / element)
                  :ARG2 (h / head
                        :part-of (l / list))
                  :mod (o / only))
            :op2 (r / remove-01
                  :ARG1 e
                  :ARG2 h))
      :snt2 (o2 / or
            :polarity -
            :op1 (n / node
                  :mod (h2 / header))
            :op2 (p / pointer
                  :time (c / current))))"
1356,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",use a linked list and keep track of a pointer that points to the first item,4,4,4,"# ::snt use a linked list and keep track of a pointer that points to the first item
(a / and
      :op1 (u / use-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)))
      :op2 (k / keep-02
            :mode imperative
            :ARG0 y
            :ARG1 (t / track-01
                  :ARG0 y
                  :ARG1 (p / pointer
                        :ARG0-of (p2 / point-01
                              :ARG2 (ii / item
                                    :ord (o / ordinal-entity
                                          :value 1)))))))"
1357,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.",5,4,4.5,"# ::snt A singly linked list can already be easily used for LIFO data storage. Members of a stack can simply be pushed and popped from a list, the first item in will be the last out.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01
                              :manner (s / singly)))
                  :ARG2 (s2 / store-01
                        :ARG1 (d / data
                              :mod (p2 / product
                                    :name (n / name
                                          :op1 ""LIFO""))))
                  :ARG1-of (e / easy-05))
            :time (a / already))
      :snt2 (p3 / possible-01
            :ARG1 (a2 / and
                  :op1 (p4 / push-01
                        :ARG1 (p5 / person
                              :ARG0-of (h / have-org-role-91
                                    :ARG1 (s3 / stack))
                              :ARG2 (m2 / member)))
                  :op2 (p6 / pop-01
                        :ARG1 p5
                        :ARG2 (l3 / list))
                  :ARG1-of (s4 / simple-02)))
      :snt2 (h2 / have-mod-91
            :ARG1 (ii / item
                  :ord (o / ordinal-entity
                        :value 1))
            :ARG2 (ii2 / item
                  :ord (o2 / ordinal-entity
                        :value ""last""
                        :value ""out""))))"
1358,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",using pointer,0,3,1.5,"# ::snt using pointer
(u / use-01
      :ARG1 (p / pointer))"
1359,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.",the top is the first pointer.,3,3,3,"# ::snt the top is the first pointer.
(p / pointer
      :ord (o / ordinal-entity
            :value 1)
      :domain (t / top))"
1360,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.",2,3,2.5,"# ::snt Keep a pointer pointing to the last element entered at the front of  the array and move the pointer ""back"" when you delete an element.
(a / and
      :op1 (k / keep-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / pointer
                  :ARG0-of (p2 / point-01
                        :ARG2 (e / element
                              :mod (l / last)
                              :ARG1-of (e2 / enter-01
                                    :location (f / front
                                          :part-of (a2 / array)))))))
      :op2 (m / move-01
            :mode imperative
            :ARG0 y
            :ARG1 p
            :ARG2 (b / back)
            :time (d / delete-01
                  :ARG0 y
                  :ARG1 (e3 / element))))"
1361,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list",1,4,2.5,"# ::snt using linked list, you are pushing the node that contains each int to the stack until you get to the end of your linked list
(p / push-01
      :ARG0 (y / you)
      :ARG1 (n / node
            :ARG0-of (c / contain-01
                  :ARG1 (ii / int
                        :mod (e / each))))
      :ARG2 (s / stack)
      :time (u / until
            :op1 (g / get-05
                  :ARG1 y
                  :ARG2 (e2 / end-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01)
                              :poss y))))
      :ARG1-of (c2 / cause-01
            :ARG0 (u2 / use-01
                  :ARG0 y
                  :ARG1 l)))"
1362,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.",5,5,5,"# ::snt have a linked list, and for each push, add an item onto beginning of the list, and for each pop remove the first element in the list.
(a / and
      :op1 (h / have-03
            :ARG0 (y / you)
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)))
      :op2 (a2 / and
            :op1 (a3 / add-01
                  :ARG0 y
                  :ARG1 (ii / item)
                  :ARG2 (b / begin-01
                        :ARG1 (l3 / list))
                  :purpose (p / push-01
                        :mod (e / each)))
            :op2 (r / remove-01
                  :ARG0 y
                  :ARG1 (e2 / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (l4 / list))
                  :purpose (p2 / pop-01
                        :mod (e3 / each)))))"
1363,8.4,How can you implement a stack with a list?,"Keep the top of the stack pointing to the head of the linked list, so the push and pop operations will add or remove elements at the beginning of the list.","Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c",0,4,2,"# ::snt Using a linked list is one way to implement a stack so that it can handle essentially any number of elements. It is usually convenient to put a data structure in its own module, thus, you'll want to create files stack.h and a stack.c
(m / multi-sentence
      :snt1 (w / way
            :quant 1
            :manner-of (ii / implement-01
                  :ARG1 (s / stack)
                  :purpose (p / possible-01
                        :ARG1 (h / handle-01
                              :ARG0 s
                              :ARG1 (e / element
                                    :quant (n / number
                                          :mod (a / any))
                                    :mod (e2 / essential)))))
            :domain (u / use-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))))
      :snt2 (c / convenient
            :domain (p2 / put-01
                  :ARG1 (s2 / structure-01
                        :ARG1 (d / data))
                  :ARG2 (m2 / module
                        :poss s2))
            :mod (u2 / usual)
            :ARG0-of (c2 / cause-01
                  :ARG1 (w2 / want-01
                        :ARG0 (y / you)
                        :ARG1 (c3 / create-01
                              :ARG0 y
                              :ARG1 (a2 / and
                                    :op1 (f / file
                                          :name (n2 / name
                                                :op1 ""Stack.h""))
                                    :op2 (f2 / file
                                          :name (n3 / name
                                                :op1 ""Stack.c""))))))))"
1364,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are converted to post fix expressions.  It still follow the order of precedence for the operators.,5,5,5,"# ::snt They are converted to post fix expressions.  It still follow the order of precedence for the operators.
(m / multi-sentence
      :snt1 (c / convert-01
            :ARG1 (t / they)
            :ARG2 (e / express-01
                  :ARG1 (f / fix-02
                        :mod (p / post))))
      :snt2 (f2 / follow-02
            :ARG0 (ii / it)
            :ARG1 (o / order
                  :mod (p2 / precedence)
                  :beneficiary (p3 / person
                        :ARG0-of (o2 / operate-01)))
            :mod (s / still)))"
1365,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are first converted to postfix expressions and then evaluated.,5,5,5,"# ::snt They are first converted to postfix expressions and then evaluated.
(a / and
      :op1 (c / convert-01
            :ARG1 (t / they)
            :ARG2 (e / expression
                  :mod (p / postfix))
            :ord (o / ordinal-entity
                  :value 1))
      :op2 (e2 / evaluate-01
            :ARG1 t
            :time (t2 / then)))"
1366,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.",5,5,5,"# ::snt Computers cannot evaulate infix expressions, it must first convert infix to postfix expression then it can evaluate.
(a / and
      :op1 (p / possible-01
            :polarity -
            :ARG1 (e / evaulate-01
                  :ARG0 (c / computer)
                  :ARG1 (e2 / expression
                        :mod (ii / infix))))
      :op2 (o / obligate-01
            :ARG1 c
            :ARG2 (c2 / convert-01
                  :ARG0 c
                  :ARG1 (e3 / expression
                        :mod (ii2 / infix))
                  :ARG2 (e4 / expression
                        :mod (p2 / postfix))
                  :time (f / first))
            :time (t / then
                  :op1 (p3 / possible-01
                        :ARG1 (e5 / evaluate-01
                              :ARG0 c
                              :ARG1 e3)))))"
1367,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",By using parentheses to have order in the expression.,2,3,2.5,"# ::snt By using parentheses to have order in the expression.
(u / use-01
      :ARG1 (p / parentheses)
      :ARG2 (h / have-03
            :ARG1 (o / order)
            :location (e / expression)))"
1368,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",In postfix notation.,3,5,4,"# ::snt In postfix notation.
(b / be-located-at-91
      :ARG2 (n / note-01
            :time (a / after
                  :op1 (f / fix-02))))"
1369,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers usually convert infix expressions to post fix expression and evaluate them using a stack.,5,5,5,"# ::snt computers usually convert infix expressions to post fix expression and evaluate them using a stack.
(a / and
      :op1 (c / convert-01
            :ARG0 (c2 / computer)
            :ARG1 (e / express-01
                  :ARG1 (f / fix-02))
            :ARG2 (e2 / express-01
                  :ARG1 (f2 / fix-02)
                  :ARG1-of (p / post-01))
            :mod (u / usual))
      :op2 (e3 / evaluate-01
            :ARG0 c2
            :ARG1 e
            :instrument (s / stack)))"
1370,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they are converted to postfix,5,5,5,"# ::snt they are converted to postfix
(c / convert-01
      :ARG1 (t / they)
      :ARG2 (p / postfix))"
1371,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Infix expressions are interpreted as postfix expressions by implementing stacks.,5,5,5,"# ::snt Infix expressions are interpreted as postfix expressions by implementing stacks.
(ii / interpret-01
      :ARG1 (e / express-01
            :mod (ii2 / infix))
      :ARG2 (e2 / express-01
            :mod (p / postfix))
      :manner (ii3 / implement-01
            :ARG1 (s / stack)))"
1372,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",They are first converted into an equivalent postfix expression so it can be read by the computer.,5,5,5,"# ::snt They are first converted into an equivalent postfix expression so it can be read by the computer.
(c / convert-01
      :ARG1 (t / they)
      :ARG2 (e / express-01
            :ARG1-of (e2 / equivalent-01)
            :mod (p / postfix))
      :ord (o / ordinal-entity
            :value 1)
      :purpose (p2 / possible-01
            :ARG1 (r / read-01
                  :ARG0 (c2 / computer)
                  :ARG1 e)))"
1373,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","The computer translates the infix expression to a postfix expression, then solves.",5,5,5,"# ::snt The computer translates the infix expression to a postfix expression, then solves.
(a / and
      :op1 (t / translate-01
            :ARG0 (c / computer)
            :ARG1 (e / express
                  :mod (ii / infix))
            :ARG2 (e2 / express
                  :mod (p / postfix)))
      :op2 (s / solve-01
            :ARG0 c
            :time (t2 / then)))"
1374,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",in postfix format,3,5,4,"# ::snt in postfix format
(f / format
      :mod (p / postfix))"
1375,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",they use parenthisis and a stack to determine which evaluations need to be made first,3,3,3,"# ::snt they use parenthisis and a stack to determine which evaluations need to be made first
(u / use-01
      :ARG0 (t / they)
      :ARG1 (a / and
            :op1 (p / parenthisis)
            :op2 (s / stack))
      :ARG2 (d / determine-01
            :ARG0 t
            :ARG1 (t2 / thing
                  :ARG2-of (e / evaluate-01)
                  :ARG1-of (n / need-01
                        :ord (o / ordinal-entity
                              :value 1)))))"
1376,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.,4,5,4.5,"# ::snt By throwing variables into a postfix expression and operands onto a parentheses regulated stack until end parentheses and enough variables to operate on are encountered.
(c / cause-01
      :ARG0 (t / throw-01
            :ARG1 (v / variable)
            :ARG2 (a / and
                  :op1 (e / expression
                        :mod (p / postfix))
                  :op2 (o / operand
                        :location (s / stack
                              :ARG1-of (r / regulate-01)
                              :mod (p2 / parentheses))))
            :time (u / until
                  :op1 (e2 / encounter-01
                        :ARG1 (a2 / and
                              :op1 (p3 / parentheses
                                    :mod (e3 / end))
                              :op2 (v2 / variable
                                    :ARG1-of (h / have-quant-91
                                          :ARG3 (e4 / enough)
                                          :ARG6 (o2 / operate-01))))))))"
1377,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",by being passed to the function by a leading term,0,3,1.5,"# ::snt by being passed to the function by a leading term
(p / pass-05
      :ARG1 (t / term
            :ARG0-of (l / lead-02))
      :ARG2 (f / function-01))"
1378,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.",1,4,2.5,"# ::snt i have an hard time explaining this so i'll show how infix is evaluated instead. Start with an infix expression, like,  (((5+2)*5)+(400/(2+3))), and  push items until you get a "")"" and once that happens, perform the operations until you reach an ""(""... with that complete, you will now have  ((7*5)+(400/(2+3))) as now the expression that will be evaluated... perform last step again... (35+(400/(2+3))) is now the stack.... repeat agian... (35+(400/5)) is now the stack after that.... repeat... (35+80) is now the stack, repeat again... 115 is now the stack, and is returned.
(m / multi-sentence
      :snt1 (c / cause-01
            :ARG0 (h / have-03
                  :ARG0 (ii / i)
                  :ARG1 (t / time
                        :ARG1-of (h2 / hard-02))
                  :ARG0-of (c2 / cause-01
                        :ARG1 (s / show-01
                              :ARG0 ii
                              :ARG1 (e / evaluate-01
                                    :ARG1 (ii2 / infix)))
                        :ARG1-of (ii3 / instead-of-91))))
      :snt2 (a / and
            :op1 (s2 / start-01
                  :ARG0 (y / you)
                  :ARG2 (e2 / express-01
                        :ARG1 (ii4 / infix)
                        :example (a2 / and
                              :op1 (s3 / slash
                                    :op1 (s4 / slash
                                          :op2 (s5 / slash
                                                :op1 (s6 / slash
                                                      :op2 5)
                                                :op3 (s7 / slash
                                                      :op1 (s8 / slash
                                                            :op1 (s9 / slash
                                                                  :op1 (s10 / slash
                                                                        :op2 5
                                                                        :op2-of s8))
                                                            :op1 s9
                                                            :op1 s10
                                                            :op2 3)))))))))
      :snt2 (a3 / and
            :op1 s2
            :mode imperative
            :ARG0 (y2 / you)
            :ARG1 (e3 / expression
                  :mod (ii5 / infix)))
      :op2 (p / push-01
            :mode imperative
            :ARG0 y2
            :ARG1 (ii6 / item)
            :time (u / until
                  :op1 (g / get-01
                        :ARG0 y2
                        :ARG1 (s11 / string-entity
                              :value ""(""))))
      :time (u2 / until))"
1379,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The infix expression is converted to postfix form,5,5,5,"# ::snt The infix expression is converted to postfix form
(c / convert-01
      :ARG1 (e / expression
            :mod (ii / infix))
      :ARG2 (f / form
            :mod (p / postfix)))"
1380,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",by converting them to postfix expressions and putting the operations in a stack,5,5,5,"# ::snt by converting them to postfix expressions and putting the operations in a stack
(a / and
      :op1 (c / convert-01
            :ARG1 (t / they)
            :ARG2 (e / expression
                  :mod (p / postfix)))
      :op2 (p2 / put-01
            :ARG1 (o / operate-01)
            :ARG2 (s / stack)))"
1381,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",The computer converts the infix expression to postfix form. Then evaluates the postfix expression.,5,5,5,"# ::snt The computer converts the infix expression to postfix form. Then evaluates the postfix expression.
(m / multi-sentence
      :snt1 (c / convert-01
            :ARG0 (c2 / computer)
            :ARG1 (e / expression
                  :mod (ii / infix))
            :ARG2 (f / form
                  :mod (p / postfix)))
      :snt2 (e2 / evaluate-01
            :ARG0 c2
            :ARG1 (e3 / express
                  :mod (p2 / postfix))
            :time (t / then)))"
1382,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.,5,5,5,"# ::snt infix expressions are converted to postfix expressions before they can be evaluated by a computer.  Operands stay in the same order.  Operators always follow the operands.
(m / multi-sentence
      :snt1 (c / convert-01
            :ARG1 (e / expression
                  :mod (ii / infix))
            :ARG2 (e2 / expression
                  :mod (p / postfix))
            :time (b / before
                  :op1 (p2 / possible-01
                        :ARG1 (e3 / evaluate-01
                              :ARG0 (c2 / computer)
                              :ARG1 e))))
      :snt2 (s / stay-01
            :ARG1 (o / operation)
            :ARG3 (o2 / order
                  :ARG1-of (s2 / same-01)))
      :snt3 (f / follow-02
            :ARG0 (p3 / person
                  :ARG0-of (o3 / operate-01))
            :ARG1 (o4 / operation)
            :time (a / always)))"
1383,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",infix expressions are pointers evaluated by reference to the memory location,0,3,1.5,"# ::snt infix expressions are pointers evaluated by reference to the memory location
(p / pointer
      :ARG1-of (e / evaluate-01
            :manner (r / refer-01
                  :ARG2 (l / location
                        :mod (m / memory))))
      :domain (e2 / expression
            :mod (ii / infix)))"
1384,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",computers convert infix expressions to postfix form before evaluation,5,5,5,"# ::snt computers convert infix expressions to postfix form before evaluation
(c / convert-01
      :ARG0 (c2 / computer)
      :ARG1 (e / expression
            :mod (ii / infix))
      :ARG2 (f / form
            :mod (p / postfix))
      :time (b / before
            :op1 (e2 / evaluate-01)))"
1385,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",convert infix expressions to postfix expression and evaluate the postfix expression,5,5,5,"# ::snt convert infix expressions to postfix expression and evaluate the postfix expression
(a / and
      :op1 (c / convert-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / express-01
                  :mod (ii / infix))
            :ARG2 (e2 / express-01
                  :mod (p / postfix)))
      :op2 (e3 / evaluate-01
            :mode imperative
            :ARG0 y
            :ARG1 e))"
1386,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack",4,4,4,"# ::snt When an operand is entered, the computer Pushes it onto a stack When an operator is entered, the computer Applies it to the top two operands of the stack Pops the operands from the stack Pushes the result of the operation onto the stack
(p / push-01
      :ARG0 (c / computer)
      :ARG1 (o / operand)
      :ARG2 (s / stack)
      :time (e / enter-01
            :ARG0 c
            :ARG1 o)
      :time (e2 / enter-01
            :ARG0 c
            :ARG1 (o2 / operand
                  :quant 2
                  :mod (t / top)
                  :part-of (s2 / stack)))
      :time (a / apply-02
            :ARG0 c
            :ARG1 o2
            :ARG2 s2)
      :time (e3 / enter-01
            :ARG0 c
            :ARG1 o2)
      :ARG1-of (p2 / pop-01
            :ARG0 c
            :ARG1 (o3 / operand
                  :source s2))
      :ARG0-of (p3 / push-01
            :ARG1 (t2 / thing
                  :ARG2-of (r / result-01
                        :ARG1 (o4 / operate-01)))
            :ARG2 (s3 / stack)))"
1387,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.",Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.,5,5,5,"# ::snt Computers convert an infix expression into a postfix expression. They then push the numbers onto a stack and pop them out as they are needed.
(m / multi-sentence
      :snt1 (c / convert-01
            :ARG0 (c2 / computer)
            :ARG1 (e / express-01
                  :mod (ii / infix))
            :ARG2 (e2 / express-01
                  :mod (p / postfix)))
      :snt2 (a / and
            :op1 (p2 / push-01
                  :ARG0 (t / they)
                  :ARG1 (n / number)
                  :ARG2 (s / stack)
                  :time (t2 / then))
            :op2 (p3 / pop-01
                  :ARG0 t
                  :ARG1 n
                  :direction (o / out)
                  :time (n2 / need-01
                        :ARG1 n))))"
1388,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)",5,5,5,"# ::snt infix expressions are converted to postfix, (i.e. 3+2 is changed to 32+)
(c / convert-01
      :ARG1 (e / expression
            :mod (ii / infix))
      :ARG2 (p / postfix)
      :ARG1-of (m / mean-01
            :ARG2 (c2 / change-01
                  :ARG1 (s / string-entity
                        :value ""3+2"")
                  :ARG2 (s2 / string-entity
                        :value ""32+""))))"
1389,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","they are transformed into post-fix expressions, then evaluated with a stack.",5,5,5,"# ::snt they are transformed into post-fix expressions, then evaluated with a stack.
(a / and
      :op1 (t / transform-01
            :ARG1 (t2 / they)
            :ARG2 (e / expression
                  :time (a2 / after
                        :op1 (f / fix-02))))
      :op2 (e2 / evaluate-01
            :ARG1 t2
            :instrument (s / stack)
            :time (t3 / then)))"
1390,8.6,How are infix expressions evaluated by computers?,"First, they are converted into postfix form, followed by an evaluation of the postfix expression.","Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. ",5,5,5,"# ::snt Writing arithmetic expressions is called infix notation.  This is because a binary operator (like '+') is written in between its two operands (as in ""a + b"").  There are two alternative forms of notation used in certain situations.  One is prefix notation, in which an operator is written before its operands.  In prefix notation, the sum of a and b is written ""+ a b"".  This is the notation used to write function calls in mathematics and computer science.  It is also used in the Lisp and Scheme programming languages.  In postfix notation, an operator is written after its operands.  The sum of a and b is written ""a b +"".  (You may have seen this as ""reverse Polish notation"".)  Postfix notation forms the conceptual basis for the way that arithmetic expressions are evaluated by a computer.  One important characteristic of both postfix and prefix notations is that they are unambiguous; no parentheses are needed to indicate the order of operations. 
(m / multi-sentence
      :snt1 (c / call-01
            :ARG1 (w / write-01
                  :ARG1 (e / expression
                        :mod (a / arithmetic)))
            :ARG2 (n / notation
                  :mod (ii / infix)))
      :snt2 (c2 / cause-01
            :ARG0 (w2 / write-01
                  :ARG1 (o / operator
                        :mod (b / binary)
                        :ARG1-of (r / resemble-01
                              :ARG2 (o2 / operator
                                    :quant 2)))
                  :location (b2 / between
                        :op1 (o3 / operand
                              :quant 2
                              :poss o2)))
            :snt3 (f / form
                  :quant 2
                  :mod (a2 / alternative)
                  :ARG1-of (u / use-01
                        :ARG2 (s / situation
                              :mod (c3 / certain)))))
      :snt4 (a3 / and
            :op1 (p / prefix)
            :op2 w2
            :ARG1 (o4 / operator)
            :time (b3 / before
                  :op1 (o5 / operand
                        :poss o4)))
      :snt3 (w3 / write-01
            :ARG1 (s2 / sum-01
                  :ARG1 (a4 / and
                        :op1 (s3 / string
                              :value ""a"")
                        :op2 (s4 / string
                              :value ""b"")))
            :ARG2 (s5 / string
                  :value ""+"")))"
1391,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.,2,4,3,"# ::snt isEmptry()//determines if the stack is full or not pop()//to remove the top element if it is not the on you are looking for search()//you compare each element of the stack to the data you are looking for.
(a / and
      :op1 (d / determine-01
            :ARG0 (f / function
                  :name (n / name
                        :op1 ""isEmptry()""))
            :ARG1 (t / truth-value
                  :polarity-of (o / or
                        :op1 (f2 / full-09
                              :ARG1 (s / stack))
                        :op2 (f3 / full-09
                              :polarity -
                              :ARG1 s))))
      :op2 (r / remove-01
            :ARG0 (f4 / function
                  :name n
                  :op1 ""pop()""))
      :ARG1 (e / element
            :mod (t2 / top))
      :condition (l / look-01
            :polarity -
            :ARG0 (y / you)
            :ARG1 (s2 / search))
      :op3 (c / compare-01
            :ARG0 y
            :ARG1 (e2 / element
                  :mod (e3 / each)
                  :part-of s))
      :ARG2 (d2 / data
            :ARG1-of (l2 / look-01
                  :ARG0 y)))"
1392,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.,2,4,3,"# ::snt You would have to keep using peek or getTop to see what the top element is then popping the top element until peek or getTop provides the element you are looking for.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (k / keep-02
            :ARG0 y
            :ARG1 (u / use-01
                  :ARG0 y
                  :ARG1 (o2 / or
                        :op1 (t / thing
                              :name (n / name
                                    :op1 ""Peek""
                                    :op2 ""or""
                                    :op3 ""GetTop""))
                        :op2 (t2 / thing
                              :name (n2 / name
                                    :op1 ""GetTop"")))
                  :purpose (s / see-01
                        :ARG0 y
                        :ARG1 (e / element
                              :mod (t3 / top))))
            :time (t4 / then)
            :time (u2 / until
                  :op1 (p / provide-01
                        :ARG0 o2
                        :ARG1 (e2 / element
                              :ARG1-of (l / look-01
                                    :ARG0 y))))))"
1393,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.,2,4,3,"# ::snt Push adds a given node to the top of the stack leaving previous nodes below. Pop removes and returns the current top node of the stack.
(m / multi-sentence
      :snt1 (a / add-02
            :ARG0 (p / push-01)
            :ARG1 (n / node
                  :ARG1-of (g / give-01))
            :ARG2 (t / top
                  :part-of (s / stack))
            :manner (l / leave-14
                  :ARG0 p
                  :ARG1 (n2 / node
                        :mod (p2 / previous)
                        :location (b / below))))
      :snt2 (a2 / and
            :op1 (r / remove-01
                  :ARG0 (p3 / program
                        :name (n3 / name
                              :op1 ""Pop""))
                  :ARG1 (n4 / node
                        :mod (t2 / top)
                        :time (c / current)
                        :part-of (s2 / stack)))
            :op2 (r2 / return-02
                  :ARG0 p3
                  :ARG1 n4)))"
1394,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.",5,5,5,"# ::snt Using linked lists and stacks, you would need a temp stack to retain the values. Then you would use the Pop( ) function to pop off each element and then compare it. If its not the element your looking for, Push ( ) it to the temp stack. Repeat until the element is found. When you find it,  Pop ( ) off the temp stack back onto the regular stack to have a complete stack again.
(m / multi-sentence
      :snt1 (n / need-01
            :ARG0 (y / you)
            :ARG1 (s / stack
                  :mod (t / temporal))
            :purpose (r / retain-01
                  :ARG0 y
                  :ARG1 (v / value))
            :manner (u / use-01
                  :ARG0 y
                  :ARG1 (a / and
                        :op1 (l / list
                              :ARG1-of (l2 / link-01))
                        :op2 (s2 / stack
                              :ARG1-of l2))))
      :snt2 (a2 / and
            :op1 (u2 / use-01
                  :ARG0 y
                  :ARG1 (f / function
                        :name (n2 / name
                              :op1 ""Pop("")))
            :ARG2 (a3 / and
                  :op1 (p / pop-01
                        :ARG0 y
                        :ARG1 (e / element
                              :mod (e2 / each)))
                  :op2 (c / compare-01
                        :ARG0 y
                        :ARG1 e
                        :time (t2 / then))))
      :snt2 (p2 / push-01
            :mode imperative
            :ARG0 (y2 / you)
            :ARG1 e
            :ARG2 (s3 / stack
                  :mod (t3 / temp))
            :condition (l3 / look-01
                  :polarity -
                  :ARG0 y2
                  :ARG1 e))
      :snt3 (r2 / repeat-01
            :mode imperative
            :ARG0 y2
            :time (u3 / until
                  :op1 (f2 / find-01
                        :ARG0 y2
                        :ARG1 (e3 / element))))
      :snt4 (h / have-03
            :mode imperative
            :ARG0 y2
            :ARG1 s3
            :ARG1-of (r3 / regular-03))
      :time (f3 / find-01
            :ARG0 y2
            :ARG1 e)
      :mod (a4 / again))"
1395,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.",5,5,5,"# ::snt Pop each item off the top until you find what you are looking for. If the stack ends up empty and you never found the item, then it does not exist in the stack. It may also be necessary to save the popped values in case you want to recreate the stack.
(m / multi-sentence
      :snt1 (p / pop-01
            :ARG0 (y / you)
            :ARG1 (ii / item
                  :mod (e / each))
            :ARG2 (t / top)
            :time (u / until
                  :op1 (f / find-01
                        :ARG0 y
                        :ARG1 (t2 / thing
                              :ARG1-of (l / look-01
                                    :ARG0 y)))))
      :snt2 (e2 / exist-01
            :polarity -
            :ARG1 (ii2 / item)
            :location (s / stack)
            :condition (a / and
                  :op1 (e3 / end-up-03
                        :ARG1 (s2 / stack)
                        :ARG2 (e4 / empty))
                  :op2 (f2 / find-01
                        :polarity -
                        :ARG0 (y2 / you
                              :ARG1 ii2
                              :time (e5 / ever))))
            :snt2 (p2 / possible-01
                  :ARG1 (n / need-01
                        :ARG1 (s3 / save-01
                              :ARG1 (v / value
                                    :ARG1-of (p3 / pop-01)))
                        :mod (a2 / also)
                        :condition (w / want-01
                              :ARG0 y2)
                        :ARG1 (r / recreate-01
                              :ARG0 y2
                              :ARG1 s2)))))"
1396,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.",4,5,4.5,"# ::snt if the stack is implemented using an array you could simply search the array for the item. If the stack is implemented using a linked list you would have to pop the values off of the stack until either the value is found or the stack is empty, you would then have to have the items put back into the list.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (s / search-01
                  :ARG0 (y / you)
                  :ARG1 (a / array)
                  :ARG2 (ii / item)
                  :ARG1-of (s2 / simple-02))
            :condition (ii2 / implement-01
                  :ARG1 (s3 / stack)
                  :manner (u / use-01
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01)))))
      :snt2 (o / obligate-01
            :ARG1 (y2 / you)
            :ARG2 (p2 / pop-01
                  :ARG0 y2
                  :ARG1 (v / value)
                  :ARG2 (o2 / off
                        :op1 (s4 / stack))
                  :time (u2 / until
                        :op1 (o3 / or
                              :op1 (f / find-01
                                    :ARG1 (v2 / value))
                              :op2 (e / empty-02
                                    :ARG1 s4)))))
      :snt3 (o4 / obligate-01
            :ARG1 y2)
      :ARG2 (p3 / put-01
            :ARG1 (ii3 / item)
            :ARG2 (l3 / list)
            :direction (b / back))
      :time (t / then))"
1397,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.",3,4,3.5,"# ::snt You need to pop each item on the stack and compare the item.  Once the item is found, no more items need to be removed.
(m / multi-sentence
      :snt1 (n / need-01
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (p / pop-01
                        :ARG0 y
                        :ARG1 (ii / item
                              :mod (e / each))
                        :ARG2 (s / stack))
                  :op2 (c / compare-01
                        :ARG0 y
                        :ARG1 ii)))
      :snt2 (o / obligate-01
            :polarity -
            :ARG1 (r / remove-01
                  :ARG1 (ii2 / item
                        :mod (m2 / more)))
            :time (o2 / once
                  :op1 (f / find-01
                        :ARG1 (ii3 / item)))))"
1398,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).",5,5,5,"# ::snt Pop an element from one stack, check to see if it is the desired element, if not push it onto another stack. When finished, pop the items from the second stack and push them back onto the first stack (this will ensure the order of the elements is maintained).
(m / multi-sentence
      :snt1 (a / and
            :op1 (p / pop-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (e / element)
                  :source (s / stack
                        :quant 1))
            :op2 (c / check-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (s2 / see-01
                        :ARG0 y
                        :ARG1 (t / truth-value
                              :polarity-of (d / desire-01
                                    :ARG0 (e2 / element)))))
            :op3 (p2 / push-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 e2
                  :ARG2 (s3 / stack
                        :mod (a2 / another))
                  :condition d
                  :polarity -
                  :ARG0 e2))
      :snt2 (a3 / and
            :op1 (p3 / pop-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 (ii / item
                        :source (s4 / stack
                              :ord (o / ordinal-entity
                                    :value 2))))
            :op2 (p4 / push-01
                  :mode imperative
                  :ARG0 y2
                  :ARG1 ii
                  :ARG2 (s5 / stack
                        :ord (o2 / ordinal-entity
                              :value 1))
                  :direction (b / back))
            :time (f / finish-01)
            :ARG0-of (e3 / ensure-01
                  :ARG1 (m2 / maintain-01
                        :ARG1 (o3 / order
                              :poss e2)))))"
1399,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Basically pop the stack until you find the given element.,3,4,3.5,"# ::snt Basically pop the stack until you find the given element.
(p / pop-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / stack)
      :mod (b / basic)
      :time (u / until
            :op1 (f / find-01
                  :ARG0 y
                  :ARG1 (e / element
                        :ARG1-of (g / give-01)))))"
1400,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Iterate through the stack, checking the number against the current element.",0,3,1.5,"# ::snt Iterate through the stack, checking the number against the current element.
(ii / iterate-01
      :ARG0 (y / you)
      :path (s / stack)
      :manner (c / check-01
            :ARG0 y
            :ARG1 (n / number)
            :ARG2 (e / element
                  :time (c2 / current))))"
1401,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop and push,2,4,3,"# ::snt pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
1402,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop all elements off stack until you find that element and then push the popped elements back on the stack,5,5,5,"# ::snt pop all elements off stack until you find that element and then push the popped elements back on the stack
(a / and
      :op1 (p / pop-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element
                  :mod (a2 / all))
            :ARG2 (s / stack)
            :time (u / until
                  :op1 (f / find-01
                        :ARG0 y
                        :ARG1 (e2 / element
                              :mod (t / that)))))
      :op2 (p2 / push-01
            :mode imperative
            :ARG0 y
            :ARG1 (e3 / element
                  :ARG1-of (p3 / pop-01))
            :ARG2 s
            :direction (b / back)
            :time (t2 / then)))"
1403,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.",5,5,5,"# ::snt Keep popping nodes and storing them in an alternate stack until the given element is found, then pop the given element and push the previously popped nodes back onto the stack.
(a / and
      :op1 (k / keep-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / and
                  :op1 (p / pop-01
                        :ARG0 y
                        :ARG1 (n / node))
                  :op2 (s / store-01
                        :ARG0 y
                        :ARG1 n
                        :ARG2 (s2 / stack
                              :ARG1-of (a3 / alternate-01)))
                  :time (u / until
                        :op1 (f / find-01
                              :ARG1 (e / element
                                    :ARG1-of (g / give-01))))))
      :op2 (a4 / and
            :op1 (p2 / pop-01
                  :ARG0 y
                  :ARG1 e)
            :op2 (p3 / push-01
                  :ARG0 y
                  :ARG1 (n2 / node
                        :ARG1-of (p4 / pop-01
                              :time (p5 / previous)))
                  :ARG2 s2)
            :direction (b / back)))"
1404,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",either traverse the entire list and pop the given part or create a pointer system that automatically points to it.,2,4,3,"# ::snt either traverse the entire list and pop the given part or create a pointer system that automatically points to it.
(o / or
      :op1 (a / and
            :op1 (t / traverse-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (l / list
                        :mod (e / entire)))
            :op2 (p / pop-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (p2 / part
                        :ARG1-of (g / give-01))))
      :op2 (c / create-01
            :mode imperative
            :ARG0 y
            :ARG1 (s / system
                  :mod (p3 / pointer)
                  :ARG0-of (p4 / point-01
                        :ARG1 p2
                        :manner (a2 / automatic)))))"
1405,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.",5,5,5,"# ::snt Depends on the type of stack, on a true stack you will haft to pop all of the elements of the stack until you find the element you want, and then after that you will need to push all the elements that where removed back in to the stack in the order that they where removed.  With a Java style stack, where there is a peek function, it will return the element you wanted instead of requiring you to perform all the excessive actions that are required from a true stack.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG1 (t / type
                  :mod (s / stack)))
      :snt2 (a / and
            :op1 (h / haft-01
                  :ARG0 (y / you)
                  :ARG1 (p / pop-01
                        :ARG0 y
                        :ARG1 (e / element
                              :mod (a2 / all)
                              :part-of (s2 / stack
                                    :ARG1-of (t2 / true-01)))
                        :time (u / until
                              :op1 (f / find-01
                                    :ARG0 y
                                    :ARG1 (e2 / element
                                          :ARG1-of (w / want-01
                                                :ARG0 y)))))
                  :op2 (n / need-01
                        :ARG0 y
                        :ARG1 (p2 / push-01
                              :ARG0 y
                              :ARG1 (e3 / element
                                    :ARG1-of (r / remove-01)
                                    :mod (a3 / all))
                              :ARG2 (s3 / stack)
                              :direction (b / back)
                              :time (a4 / after
                                    :op1 f))
                        :manner (o / order
                              :mod (r2 / remove-01
                                    :ARG1 e3)))))
      :snt2 (r3 / return-02
            :ARG0 (s4 / stack
                  :mod (s5 / style
                        :mod (l / language
                              :name (n2 / name
                                    :op1 ""Java""))
                        :location-of (f2 / function
                              :mod (p3 / peek-01))))
            :ARG1 (e4 / element
                  :ARG1-of (w2 / want-01
                        :ARG0 (y2 / you))
                  :ARG1-of (ii / instead-of-91
                        :ARG2 (r4 / require-01
                              :ARG0 (p4 / perform-02
                                    :ARG0 y2
                                    :ARG1 (a5 / act-02
                                          :mod (e5 / excessive)
                                          :mod a3))
                              :ARG1-of (r5 / require-01
                                    :ARG0 (y3 / you)))))))"
1406,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",if top item != given element pop the stack. Repeat until item is found or stack is empty,3,4,3.5,"# ::snt if top item != given element pop the stack. Repeat until item is found or stack is empty
(m / multi-sentence
      :snt1 (p / pop-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s / stack)
            :condition (e / equal-01
                  :ARG1 (ii / item
                        :mod (t / top))
                  :ARG2 (e2 / element
                        :ARG1-of (g / give-01))))
      :snt2 (r / repeat-01
            :mode imperative
            :ARG0 (y2 / you)
            :time (u / until
                  :op1 (o / or
                        :op1 (f / find-01
                              :ARG1 (ii2 / item))
                        :op2 (e3 / empty-02
                              :ARG1 (s2 / stack))))))"
1407,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",could traverse through the list/array to find the element.,1,3,2,"# ::snt could traverse through the list/array to find the element.
(p / possible-01
      :ARG1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (s / slash
                  :op1 (l / list)
                  :op2 (a / array))
            :purpose (f / find-01
                  :ARG0 y
                  :ARG1 (e / element))))"
1408,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you need the pop opertation to go throught the stack and find the element.,3,4,3.5,"# ::snt you need the pop opertation to go throught the stack and find the element.
(n / need-01
      :ARG0 (y / you)
      :ARG1 (o / operation
            :mod (p / pop))
      :purpose (a / and
            :op1 (g / go-02
                  :ARG0 o
                  :ARG4 (s / stack))
            :op2 (f / find-01
                  :ARG0 o
                  :ARG1 (e / element))))"
1409,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.","createStack, push, isEmpty, pop, and a boolean return value.",2,4,3,"# ::snt createStack, push, isEmpty, pop, and a boolean return value.
(a / and
      :op1 (c / createStack)
      :op2 (p / push-01)
      :op3 (e / empty)
      :op4 (p2 / pop-01)
      :op5 (v / value
            :mod (r / return-02)
            :mod (b / boolean)))"
1410,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would have to traverse the stack popping each element to search it,3,4,3.5,"# ::snt you would have to traverse the stack popping each element to search it
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (t / traverse-01
            :ARG0 y
            :ARG1 (s / stack)
            :manner (p / pop-01
                  :ARG0 y
                  :ARG1 (e / element
                        :mod (e2 / each))
                  :purpose (s2 / search-01
                        :ARG0 y
                        :ARG1 s))))"
1411,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",Pop each element off the stack (and into another stack for storage) until the desired element is found.,4,4,4,"# ::snt Pop each element off the stack (and into another stack for storage) until the desired element is found.
(p / pop-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (e / element
            :mod (e2 / each))
      :ARG2 (s / stack)
      :destination (s2 / stack
            :mod (a / another))
      :purpose (s3 / store-01
            :ARG1 e)
      :time (u / until
            :op1 (f / find-01
                  :ARG1 (e3 / element
                        :ARG1-of (d / desire-01)))))"
1412,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",pop operation,1,4,2.5,"# ::snt pop operation
(o / operate-01
      :mod (p / pop))"
1413,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",to pop elements then push them back,4,5,4.5,"# ::snt to pop elements then push them back
(t / then
      :op1 (p / pop-01
            :ARG1 (e / element))
      :op2 (p2 / push-01
            :ARG1 e
            :direction (b / back)))"
1414,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",A function to keep track of the elements popped and a function to put  the popped elements backinto the function.,4,5,4.5,"# ::snt A function to keep track of the elements popped and a function to put  the popped elements backinto the function.
(a / and
      :op1 (f / function
            :purpose (k / keep-02
                  :ARG1 (t / track-01
                        :ARG1 (e / element
                              :ARG1-of (p / pop-01)))))
      :op2 (f2 / function
            :purpose (p2 / put-01
                  :ARG1 (e2 / element
                        :ARG1-of (p3 / pop-01))
                  :ARG2 (f3 / function)
                  :direction (b / back))))"
1415,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost,4,5,4.5,"# ::snt you would pop each element and compare it to what you are looking for and then push it back on the stack so that it is not lost
(a / and
      :op1 (a2 / and
            :op1 (p / pop-01
                  :ARG0 (y / you)
                  :ARG1 (e / element
                        :mod (e2 / each)))
            :op2 (c / compare-01
                  :ARG0 y
                  :ARG1 e
                  :ARG2 (t / thing
                        :ARG1-of (l / look-01
                              :ARG0 y))))
      :op2 (p2 / push-01
            :ARG0 y
            :ARG1 e
            :ARG2 (s / stack)
            :direction (b / back)
            :purpose (l2 / lose-02
                  :polarity -
                  :ARG1 e)
            :time (t2 / then)))"
1416,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?),0,3,1.5,"# ::snt you would need to perform a search through the list of elements (i dont really understand what this question is asking....its not very clear?)
(m / multi-sentence
      :snt1 (n / need-01
            :ARG0 (y / you)
            :ARG1 (s / search-01
                  :ARG0 y
                  :ARG1 (l / list
                        :consist-of (e / element))))
      :snt2 (u / understand-01
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG1-of (a / ask-01
                        :ARG0 (q / question-01
                              :mod (t2 / this))))
            :ARG1-of (r / real-04))
      :snt3 (c / clear-06
            :polarity -
            :ARG1 (ii2 / it)
            :degree (v / very))
      :polarity (a2 / amr-unknown))"
1417,8.7,What operations would you need to perform to find a given element on a stack?,"Pop all the elements and store them on another stack until the element is found, then push back all the elements on the original stack.",StackPush() StackPop() StackIsEmpty(),2,4,3,"# ::snt StackPush() StackPop() StackIsEmpty()
(a / and
      :op1 (f / function
            :name (n / name
                  :op1 ""StackPush""))
      :op2 (f2 / function
            :name (n2 / name
                  :op1 ""StackPop""))
      :op3 (f3 / function
            :name (n3 / name
                  :op1 ""StackIsEmpty"")))"
1418,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure in c++ which is a collection of data that is kept in order.  First in first out.,5,5,5,"# ::snt A data structure in c++ which is a collection of data that is kept in order.  First in first out.
(m / multi-sentence
      :snt1 (s / structure-01
            :ARG1 (d / data)
            :mod (l / language
                  :name (n / name
                        :op1 ""C++""))
            :ARG1-of (m2 / mean-01
                  :ARG2 (c / collect-01
                        :ARG1 (d2 / data
                              :ARG1-of (k / keep-02
                                    :manner (ii / in-order))))))
      :snt2 (f / first-in
            :ord (o / ordinal-entity
                  :value 1)
            :mod (o2 / out)))"
1419,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.,4,4,4,"# ::snt a queue is a list of objects in a particular order that is read one at a time starting at the first followed by the second and so on.
(q / queue
      :domain (l / list
            :consist-of (o / object
                  :ARG1-of (o2 / order-02
                        :mod (p / particular))
                  :ARG1-of (r / read-01
                        :manner (o3 / one-at-a-time)
                        :ARG1-of (s / start-01
                              :ARG2 (o4 / object
                                    :ord (o5 / ordinal-entity
                                          :value 1))
                              :ARG1-of (f / follow-01
                                    :ARG2 (o6 / object
                                          :ord (o7 / ordinal-entity
                                                :value 2)))
                              :op3 (e / et-cetera))))))"
1420,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.,5,5,5,"# ::snt A queue is an abstract data structure in which operations are performed at both ends giving the queue first in first out behavior.
(s / structure
      :mod (a / abstract)
      :mod (d / data)
      :domain (q / queue)
      :location-of (p / perform-02
            :ARG1 (o / operate-01)
            :location (e / end
                  :mod (b / both))
            :ARG0-of (g / give-01
                  :ARG1 (b2 / behave-01
                        :ARG0 q
                        :ARG1 (f / first-in-first-out)))))"
1421,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.",5,5,5,"# ::snt A queue stores a set of elements in a particular order.  Its principle of operation is FIFO(first in first out), which means the first element inserted is the first one to be removed.
(m / multi-sentence
      :snt1 (s / store-01
            :ARG0 (q / queue)
            :ARG1 (s2 / set
                  :consist-of (e / element))
            :manner (o / order
                  :mod (p / particular)))
      :snt2 (p2 / principle
            :mod (o2 / operate-01
                  :ARG1 q)
            :domain (s3 / string-entity
                  :value ""FIFO""
                  :ARG1-of (m2 / mean-01
                        :ARG2 (e2 / element
                              :ord (o3 / ordinal-entity
                                    :value 1)
                              :ARG1-of (ii / insert-01))
                        :ARG1-of (r / remove-01)
                        :ord (o4 / ordinal-entity
                              :value 1)))))"
1422,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.,5,5,5,"# ::snt An ADT whose first inserted item is the first item removed. This uses the FIFO idea where items enter a queue at its back and leave at its front.
(m / multi-sentence
      :snt1 (p / product
            :name (n / name
                  :op1 ""ADT"")
            :poss-of (ii / item
                  :ord (o / ordinal-entity
                        :value 1)
                  :ARG1-of (ii2 / insert-01)
                  :ARG1-of (r / remove-01)))
      :snt2 (u / use-01
            :ARG0 (t / this)
            :ARG1 (ii3 / idea
                  :mod (l / law
                        :name (n2 / name
                              :op1 ""FIFO""))
                  :topic (a / and
                        :op1 (e / enter-01
                              :ARG0 (ii4 / item)
                              :ARG1 (q / queue
                                    :location (b / back)))
                        :op2 (l2 / leave-11
                              :ARG0 ii4
                              :location (f / front
                                    :poss q))))))"
1423,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.",5,5,5,"# ::snt Last in, last out architecture. It works the same way a line at the bank would work, the person that's been waiting the longest gets served first.
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / architecture
                  :mod (l / last
                        :mod (ii / in)))
            :op2 (a3 / architecture
                  :mod (l2 / last
                        :mod (o / out))))
      :snt2 (w / work-09
            :ARG1 (ii2 / it)
            :manner (w2 / way
                  :ARG1-of (s / same-01)
                  :manner-of (w3 / work-09
                        :ARG1 (l3 / line
                              :location (b / bank)))))
      :snt3 (s2 / serve-02
            :ARG1 (p / person
                  :ARG0-of (w4 / wait-01
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l4 / long-03
                                    :ARG1 s2)
                              :ARG3 (m2 / most))))
            :ord (o2 / ordinal-entity
                  :value 1)))"
1424,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a data structure that stores elements in a First in First out order.,5,5,5,"# ::snt a queue is a data structure that stores elements in a First in First out order.
(s / structure-01
      :ARG1 (d / data)
      :ARG2 (q / queue)
      :ARG0-of (s2 / store-01
            :ARG1 (e / element)
            :ARG2 (o / order-03
                  :ARG1 (ii / in-order-91
                        :ARG2 (o2 / out)
                        :ord (o3 / ordinal-entity
                              :value 1)))))"
1425,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A waiting list of items that operation in a FIFO (first in first out) order.,5,5,5,"# ::snt A waiting list of items that operation in a FIFO (first in first out) order.
(l / list
      :ARG0-of (w / wait-01)
      :consist-of (ii / item
            :ARG1-of (o / operate-01
                  :manner (o2 / order-02
                        :ARG1-of (m / mean-01
                              :ARG2 (f / first
                                    :ord (o3 / ordinal-entity
                                          :value 1)
                                    :ARG2 (o4 / out)))))))"
1426,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.",5,5,5,"# ::snt A queue is similar to an array, except that the data can only be accessed sequentially rather than at random. Unlike a stack, a queue follows FIFO. First in, First out.
(m / multi-sentence
      :snt1 (r / resemble-01
            :ARG1 (q / queue)
            :ARG2 (a / array)
            :ARG2-of (e / except-01
                  :ARG1 (p / possible-01
                        :ARG1 (a2 / access-01
                              :ARG1 (d / data)
                              :manner (s / sequential)
                              :ARG1-of (ii / instead-of-91
                                    :ARG2 (r2 / random-02
                                          :ARG1 a2))
                              :mod (o / only)))))
      :snt2 (f / follow-02
            :ARG0 (q2 / queue)
            :ARG1 (t / thing
                  :name (n / name
                        :op1 ""FIFO""))
            :ARG1-of (r3 / resemble-01
                  :polarity -
                  :ARG2 (s2 / stack)))
      :snt3 (a3 / and
            :op1 (f2 / first
                  :ord (o2 / ordinal-entity
                        :value 1))
            :op2 (o3 / out-06
                  :ARG1 q2
                  :ord (o4 / ordinal-entity
                        :value 1))))"
1427,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).,5,5,5,"# ::snt is a particular kind of collection in which the entities in the collection are kept in order and the principal (or only) operations on the collection are the addition of entities to the rear terminal position and removal of entities from the front terminal position. First in First Out (FIFO Method).
(m / multi-sentence
      :snt1 (c / collect-01
            :mod (k / kind
                  :mod (p / particular))
            :domain (a / and
                  :op1 (k2 / keep-01
                        :ARG1 (o / order
                              :domain (e / entity
                                    :location (c2 / collect-01))))
                  :op2 (o2 / operation
                        :mod (p2 / principal)
                        :domain (o3 / or
                              :op1 (a2 / add-02
                                    :ARG1 (e2 / entity)
                                    :ARG2 (p3 / position-01
                                          :ARG1 e2
                                          :ARG2 (t / terminal
                                                :mod (r / rear))))
                              :op2 (r2 / remove-01
                                    :ARG1 e2
                                    :ARG2 (p4 / position-01
                                          :ARG1 e2
                                          :ARG2 (t2 / terminal
                                                :mod (f / front))))))))
      :snt2 (m2 / method
            :name (n / name
                  :op1 ""First""
                  :op2 ""in""
                  :op3 ""First""
                  :op4 ""Out"")))"
1428,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",Like a linked list but first in first out,4,5,4.5,"# ::snt Like a linked list but first in first out
(r / resemble-01
      :ARG2 (c / contrast-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG2 (o / out-03
                  :ord (o2 / ordinal-entity
                        :value 1)
                  :ord (o3 / ordinal-entity
                        :value 1))))"
1429,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is a FIFO data structure.,5,5,5,"# ::snt A queue is a FIFO data structure.
(s / structure-01
      :ARG1 (d / data)
      :ARG2 (q / queue)
      :mod (p / product
            :name (n / name
                  :op1 ""FIFO"")))"
1430,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A queue is a first in first out data structure.,5,5,5,"# ::snt A queue is a first in first out data structure.
(s / structure-01
      :ARG1 (d / data)
      :ARG2 (q / queue)
      :ord (o / ordinal-entity
            :value 1
            :range (ii / in)
            :range (o2 / out)))"
1431,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued",5,5,5,"# ::snt Its like a stack, but uses the linked list to stack a little differently. It's FIFO so the first thing enqueued is the first thing dequeued
(m / multi-sentence
      :snt1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (s / stack)
            :concession-of (u / use-01
                  :ARG0 ii
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :ARG2 (s2 / stack
                        :ARG1-of (d / differ-02
                              :degree (l3 / little)))))
      :snt2 (c / cause-01
            :ARG0 (p / product
                  :name (n / name
                        :op1 ""FIFO"")
                  :domain (ii2 / it))
            :ARG1 (t / thing
                  :ord (o / ordinal-entity
                        :value 1)
                  :ARG1-of (e / enqueue-01))
            :ARG2 (t2 / thing
                  :ord (o2 / ordinal-entity
                        :value 1)
                  :ARG1-of (d2 / dequeue-01))))"
1432,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A first in, first out Abstract Data type that can be used to store values.",5,5,5,"# ::snt A first in, first out Abstract Data type that can be used to store values.
(t / type
      :mod (d / data
            :mod (a / abstract)
            :ord (o / ordinal-entity
                  :value 1))
      :ARG1-of (u / use-01
            :ARG2 (s / store-01
                  :ARG1 (v / value))
            :ARG1-of (p / possible-01))
      :ord (o2 / ordinal-entity
            :value 1))"
1433,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Stores a set of elements in a particular order with a First In, First Out principle",5,5,5,"# ::snt Stores a set of elements in a particular order with a First In, First Out principle
(s / store-01
      :ARG1 (s2 / set
            :consist-of (e / element))
      :manner (o / order-02
            :mod (p / particular))
      :manner (p2 / principle
            :mod (a / and
                  :op1 (ii / in
                        :ord (o2 / ordinal-entity
                              :value 1))
                  :op2 (o3 / out
                        :ord (o4 / ordinal-entity
                              :value 1)))))"
1434,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",object that stores elements in order that follows first in first out.  the first element added is the first one to come off.,5,5,5,"# ::snt object that stores elements in order that follows first in first out.  the first element added is the first one to come off.
(m / multi-sentence
      :snt1 (o / object
            :ARG0-of (s / store-01
                  :ARG1 (e / element)
                  :manner (o2 / order
                        :ARG1-of (f / follow-01
                              :ARG2 (f2 / first
                                    :mod (ii / in)
                                    :mod (o3 / out))))))
      :snt2 (e2 / element
            :ord (o4 / ordinal-entity
                  :value 1)
            :ARG1-of (a / add-01)
            :ord (o5 / ordinal-entity
                  :value 1)
            :ARG1-of (c / come-off-09)))"
1435,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its ""First In, First Out"". The first element inserted is the first element to be removed.",5,5,5,"# ::snt A quese is an list that stores a set of elements in a particular order. It has Stack principle, but in this case, its ""First In, First Out"". The first element inserted is the first element to be removed.
(m / multi-sentence
      :snt1 (m2 / mean-01
            :ARG1 (q / quese)
            :ARG2 (l / list
                  :ARG0-of (s / store-01
                        :ARG1 (s2 / set
                              :consist-of (e / element))
                        :manner (o / order
                              :mod (p / particular)))))
      :snt2 (c / contrast-01
            :ARG1 (h / have-03
                  :ARG0 (ii / it)
                  :ARG1 (p2 / principle
                        :mod (s3 / stack)))
            :ARG2 (h2 / have-03
                  :ARG0 ii
                  :ARG1 (a / and
                        :op1 (ii2 / in
                              :ord (o2 / ordinal-entity
                                    :value 1))
                        :op2 (o3 / out
                              :ord (o4 / ordinal-entity
                                    :value 1)))
                  :prep-in (c2 / case-04
                        :ARG1 (t / this))))
      :snt2 (e2 / element
            :ord (o5 / ordinal-entity
                  :value 1)
            :ARG1-of (ii3 / insert-01)
            :domain (e3 / element
                  :ord (o6 / ordinal-entity
                        :value 1)
                  :ARG1-of (r / remove-01))))"
1436,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a finite ordered list with zero or more elements, based upon First In First Out",5,5,5,"# ::snt a finite ordered list with zero or more elements, based upon First In First Out
(l / list
      :ARG1-of (o / order-02
            :mod (f / finite))
      :consist-of (e / element
            :quant (o2 / or
                  :op1 0
                  :op2 (m / more-than
                        :op1 0)))
      :ARG1-of (b / base-02
            :ARG2 (t / thing
                  :name (n / name
                        :op1 ""First""
                        :op2 ""In""
                        :op3 ""First""
                        :op4 ""Out""))))"
1437,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a data structure that performs operations in the order of first in first out FIFO,5,5,5,"# ::snt a data structure that performs operations in the order of first in first out FIFO
(s / structure
      :mod (d / data)
      :ARG0-of (p / perform-02
            :ARG1 (o / operate-01
                  :ARG1-of (o2 / order-03
                        :ARG2 (f / FIFO
                              :ord (o3 / ordinal-entity
                                    :value 1)
                              :mod (ii / in
                                    :op1 (o4 / out)
                                    :op2 (f2 / first)))))))"
1438,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.",5,5,5,"# ::snt A Queue is a ""first in first out"" data structure, such that the first element added is also the first removed.
(s / structure-01
      :ARG1 (d / data)
      :ARG2 (q / queue)
      :ARG0-of (c / cause-01
            :ARG1 (r / remove-01
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :ARG1-of (a / add-02))
                  :mod (a2 / also)
                  :ord (o2 / ordinal-entity
                        :value 1)))
      :mod (f / first
            :ord (o3 / ordinal-entity
                  :value 1)))"
1439,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","Queue is a buffer, which store element in a particular order",2,5,3.5,"# ::snt Queue is a buffer, which store element in a particular order
(b / buffer
      :domain (q / queue)
      :ARG0-of (s / store-01
            :ARG1 (e / element)
            :ARG2 (o / order
                  :mod (p / particular))))"
1440,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","stores a set of elements where the first element in, is the first element to be removed",5,5,5,"# ::snt stores a set of elements where the first element in, is the first element to be removed
(s / store-01
      :ARG1 (s2 / set
            :consist-of (e / element))
      :location-of (e2 / element
            :ord (o / ordinal-entity
                  :value 1)
            :ARG1-of (r / remove-01)
            :ord (o2 / ordinal-entity
                  :value 1)))"
1441,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",A data structure that removes nodes from the head and adds nodes at the tail.,5,5,5,"# ::snt A data structure that removes nodes from the head and adds nodes at the tail.
(s / structure
      :mod (d / data)
      :ARG0-of (r / remove-01
            :ARG1 (n / node)
            :ARG2 (h / head))
      :ARG0-of (a / add-02
            :ARG1 (n2 / node
                  :location (t / tail))))"
1442,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).",a queue is a list of things that follows the first in first out behavior,5,5,5,"# ::snt a queue is a list of things that follows the first in first out behavior
(t / thing
      :ARG1-of (l / list-01)
      :domain (q / queue)
      :ARG1-of (f / follow-01
            :ARG2 (t2 / thing
                  :ARG1-of (b / behave-01
                        :ARG2 (t3 / thing
                              :ord (o / ordinal-entity
                                    :value 1)
                              :mod (ii / in)
                              :mod (o2 / out))))))"
1443,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","a queue is a storage container that holds its objects in a first in, first out priority",5,5,5,"# ::snt a queue is a storage container that holds its objects in a first in, first out priority
(c / container
      :ARG0-of (s / store-01)
      :domain (q / queue)
      :ARG0-of (h / hold-01
            :ARG1 (o / object
                  :poss q)
            :manner (p / priority
                  :ord (o2 / ordinal-entity
                        :value 1_0))
            :manner (p2 / priority
                  :ord (o3 / ordinal-entity
                        :value 1_0))))"
1444,9.1,What is a queue?,"A data structure that can store elements, which has the property that the last item added will be the last to be removed (or first-in-first-out).","The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.",5,5,5,"# ::snt The queue is another data structure. A physical analogy for a queue is a line at a bank. When you go to the bank, customers go to the rear (end) of the line and customers come off of the line (i.e., are serviced) from the front of the line.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :domain (q / queue)
            :mod (a / another))
      :snt2 (a2 / analogy
            :mod (p / physical)
            :domain (l / line
                  :location (b / bank)))
      :snt3 (a3 / and
            :op1 (g / go-01
                  :ARG1 (c / customer)
                  :ARG4 (r / rear
                        :part-of (l2 / line)))
            :op2 (c2 / come-01
                  :ARG1 (c3 / customer)
                  :ARG4 (o / off
                        :op1 (l3 / line))
                  :ARG1-of (m2 / mean-01
                        :ARG2 (s2 / serve-01
                              :ARG1 c3))
                  :source (f / front
                        :part-of (l4 / line)))
            :time (g2 / go-02
                  :ARG0 (y / you)
                  :ARG4 (b2 / bank))))"
1445,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue which adds data to the queue and dequeue which deletes data from the queue,5,5,5,"# ::snt enqueue which adds data to the queue and dequeue which deletes data from the queue
(a / and
      :op1 (e / enqueue
            :ARG0-of (a2 / add-02
                  :ARG1 (d / data)
                  :ARG2 (q / queue)))
      :op2 (d2 / dequeue
            :ARG0-of (d3 / delete-01
                  :ARG1 (d4 / data)
                  :ARG2 (q2 / queue))))"
1446,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.",5,5,5,"# ::snt enqueue , which inserts a specified element at the head of the specified queue, and dequeue , which removes the specified element from the queue.
(a / and
      :op1 (e / enqueue
            :ARG0-of (ii / insert-01
                  :ARG1 (e2 / element
                        :ARG1-of (s / specify-01))
                  :ARG2 (h / head
                        :part-of (q / queue
                              :ARG1-of (s2 / specify-01)))))
      :op2 (d / dequeue
            :ARG0-of (r / remove-01
                  :ARG1 (e3 / element
                        :ARG1-of (s3 / specify-01))
                  :ARG2 q)))"
1447,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.,5,5,5,"# ::snt The two main functions are enqueue which inserts an item at the back of the queue and dequeue which removes an item from the front of the queue.
(a / and
      :op1 (e / enqueue
            :ARG0-of (ii / insert-01
                  :ARG1 (ii2 / item)
                  :ARG2 (b / back
                        :part-of (q / queue))))
      :op2 (d / dequeue
            :ARG0-of (r / remove-01
                  :ARG1 (ii3 / item)
                  :ARG2 (f / front
                        :part-of (q2 / queue))))
      :domain (f2 / function
            :quant 2
            :mod (m / main)))"
1448,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,The two main functions are enqueue and dequeue.,5,5,5,"# ::snt The two main functions are enqueue and dequeue.
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01)
      :domain (f / function-01
            :quant 2
            :mod (m / main)))"
1449,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5,5,5,"# ::snt Enqueue and Dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1450,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5,5,5,"# ::snt Enqueue and Dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1451,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue - insert into queue dequeue - remove element,5,5,5,"# ::snt enqueue - insert into queue dequeue - remove element
(a / and
      :op1 (e / enqueue)
      :op2 (ii / insert-01
            :ARG1 (q / queue)
            :ARG2 (q2 / queue))
      :op3 (r / remove-01
            :ARG1 (e2 / element)))"
1452,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"Remove the item added first, add items to the back.",5,5,5,"# ::snt Remove the item added first, add items to the back.
(a / and
      :op1 (r / remove-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / item
                  :ARG1-of (a2 / add-02
                        :ord (o / ordinal-entity
                              :value 1))))
      :op2 (a3 / add-02
            :mode imperative
            :ARG0 y
            :ARG1 (ii2 / item)
            :ARG2 (b / back)))"
1453,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,The two main functions of a queue are enqueue and dequeue.,5,5,5,"# ::snt The two main functions of a queue are enqueue and dequeue.
(f / function-01
      :ARG0 (q / queue)
      :ARG1 (a / and
            :op1 (e / enqueue-01)
            :op2 (d / dequeue-01))
      :mod (m / main)
      :quant 2)"
1454,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue.,5,5,5,"# ::snt enqueue and dequeue.
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1455,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1456,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5,5,5,"# ::snt Enqueue and Dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1457,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1458,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1459,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enque ( Data ),  Deque ( )",5,5,5,"# ::snt enque ( Data ),  Deque ( )
(a / and
      :op1 (e / enque)
      :op2 (d / deque))"
1460,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1461,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1462,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"The two functions are, Enqueue and Dequeue",5,5,5,"# ::snt The two functions are, Enqueue and Dequeue
(f / function-01
      :quant 2
      :ARG1 (a / and
            :op1 (e / enqueue-01)
            :op2 (d / dequeue-01)))"
1463,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enqueue, dequeue",5,5,5,"# ::snt enqueue, dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1464,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue",5,5,5,"# ::snt enqueue, that adds an item to the queue dequeue, that takes the first item out of the queue
(a / add-02
      :ARG0 (e / enqueue)
      :ARG1 (ii / item)
      :ARG2 (q / queue)
      :ARG0-of (t / take-out-11
            :ARG1 (ii2 / item
                  :ord (o / ordinal-entity
                        :value 1))
            :ARG2 (q2 / queue)))"
1465,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,"Enqueue and dequeue, which add and remove elements from the queue",5,5,5,"# ::snt Enqueue and dequeue, which add and remove elements from the queue
(a / and
      :op1 (a2 / and
            :op1 (q / queue)
            :op2 (d / dequeue)
            :ARG0-of (a3 / add-02
                  :ARG1 (e / element)
                  :ARG2 (q2 / queue))
            :ARG0-of (r / remove-01
                  :ARG1 e)))"
1466,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,Enqueue and Dequeue,5,5,5,"# ::snt Enqueue and Dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1467,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,dequeue and enqueue,5,5,5,"# ::snt dequeue and enqueue
(a / and
      :op1 (d / dequeue-01)
      :op2 (e / enqueue-01))"
1468,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1469,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue and dequeue,5,5,5,"# ::snt enqueue and dequeue
(a / and
      :op1 (e / enqueue-01)
      :op2 (d / dequeue-01))"
1470,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,enqueue dequeue,5,5,5,"# ::snt enqueue dequeue
(d / dequeue
      :mod (e / enqueue))"
1471,9.2,What are the two main functions defined by a queue?,enqueue and dequeue,rear and front,2,3,2.5,"# ::snt rear and front
(a / and
      :op1 (r / rear)
      :op2 (f / front))"
1472,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.,5,4,4.5,"# ::snt Make use of a front pointer and a tail pointer.  When the tail pointer reaches the end of an array it gets reset to the front of the array.  If the two pointers are equal then the queue is either full or just has one element.
(m / multi-sentence
      :snt1 (u / use-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a / and
                  :op1 (p / pointer
                        :mod (f / front))
                  :op2 (p2 / pointer
                        :mod (t / tail))))
      :snt2 (r / reset-01
            :ARG1 (p3 / pointer
                  :mod t))
      :ARG2 f
      :part-of (a2 / array)
      :time (r2 / reach-01
            :ARG0 p3
            :ARG1 (e / end-01
                  :ARG1 a2))
      :snt3 (o / or
            :op1 (f2 / full-09
                  :ARG1 (q / queue))
            :op2 (h / have-03
                  :ARG0 q
                  :ARG1 (e2 / element
                        :quant 1)
                  :mod (j / just))
            :condition (e3 / equal-01
                  :ARG1 (p4 / pointer
                        :quant 2))))"
1473,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.,2,4,3,"# ::snt you create an array with the max size of your queue and adjust the items to make them follow FIFO procedure.
(a / and
      :op1 (c / create-01
            :ARG0 (y / you)
            :ARG1 (a2 / array
                  :ARG0-of (h / have-03
                        :ARG1 (s / size
                              :mod (m / max)
                              :poss (q / queue
                                    :poss y)))))
      :op2 (a3 / adjust-01
            :ARG0 y
            :ARG1 (ii / item)
            :purpose (m2 / make-02
                  :ARG0 y
                  :ARG1 (f / follow-02
                        :ARG0 ii
                        :ARG1 (p / procedure
                              :name (n / name
                                    :op1 ""FIFO""))))))"
1474,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.,2,4,3,"# ::snt By implementing an array and only adding items to the end of the array and only removing items from the beginning of the array.
(a / and
      :op1 (ii / implement-01
            :ARG1 (a2 / array))
      :op2 (a3 / and
            :op1 (a4 / add-01
                  :ARG1 (ii2 / item)
                  :ARG2 (e / end-01
                        :ARG1 (a5 / array))
                  :mod (o / only))
            :op2 (r / remove-01
                  :ARG1 (ii3 / item)
                  :ARG2 (b / begin-01
                        :ARG1 a5)
                  :mod (o2 / only))))"
1475,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. ",1,4,2.5,"# ::snt For applications in which a fixed-sized queue does not present a problem, you can use an array to represent a queue. 
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (a / array)
            :ARG2 (r / represent-01
                  :ARG0 a
                  :ARG1 (q / queue)))
      :condition (a2 / application
            :location-of (p2 / present-01
                  :polarity -
                  :ARG0 (q2 / queue
                        :ARG1-of (s / size-01
                              :ARG1-of (f / fix-03)))
                  :ARG1 (p3 / problem))))"
1476,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and the back of the array as you increase and decrease the elements inside the array.,4,4,4,"# ::snt Keep track of the front and the back of the array as you increase and decrease the elements inside the array.
(k / keep-02
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / track-01
            :ARG0 y
            :ARG1 (a / and
                  :op1 (f / front)
                  :op2 (b / back)
                  :part-of (a2 / array)))
      :time (a3 / and
            :op1 (ii / increase-01
                  :ARG0 y
                  :ARG1 (e / element
                        :location (ii2 / inside
                              :op1 (a4 / array))))
            :op2 (d / decrease-01
                  :ARG0 y
                  :ARG1 e)))"
1477,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.",5,4,4.5,"# ::snt Declare the size of an array, and have special conditional statements (pointers) to make sure you re-use ALL of the array. Say, you have an array of 20 elements, you load up 18, then dequeue 3, when you enqueue 4 more elements, you want to loop back to index 0 and continue from there... this process saves resources.
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / declare-01
                  :ARG0 (y / you)
                  :ARG1 (s / size
                        :poss (a2 / array)))
            :op2 (h / have-03
                  :ARG0 y
                  :ARG1 (s2 / state-01
                        :ARG1 (p / pointer)
                        :ARG1-of (c / condition-01)
                        :ARG1-of (s3 / special-02))
                  :purpose (e / ensure-01
                        :ARG0 y
                        :ARG1 (r / reuse-01
                              :ARG0 y
                              :ARG1 (a3 / array
                                    :mod (a4 / all))))))
      :snt2 (s4 / say-01
            :ARG0 (y2 / you)
            :ARG1 (a5 / and
                  :op1 (h2 / have-03
                        :ARG0 y2
                        :ARG1 (a6 / array
                              :consist-of (e2 / element
                                    :quant 20)))
                  :op2 (l / load-up-02
                        :ARG0 y2
                        :ARG1 (e3 / element
                              :quant 18))
                  :op3 (d2 / dequeue-01
                        :ARG0 y2
                        :ARG1 (e4 / element
                              :quant 3
                              :mod (m2 / more)))
                  :op4 (w / want-01
                        :ARG0 y2
                        :ARG1 (a7 / and
                              :op1 (l2 / loop-01
                                    :ARG0 y2
                                    :ARG2 (ii / index
                                          :mod 0)
                                    :direction (b / back))
                              :op2 (c2 / continue-01
                                    :ARG0 y2
                                    :source (ii2 / index)))))))"
1478,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.,3,5,4,"# ::snt you could use the first element of the list as the remove point and insert at the end f you do this you would have to shift the elements down each time you remove an item unless you make the array circular.
(p / possible-01
      :ARG1 (a / and
            :op1 (u / use-01
                  :ARG0 (y / you)
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (l / list))
                  :ARG2 (p2 / point
                        :purpose (r / remove-01)))
            :op2 (ii / insert-01
                  :ARG0 y
                  :ARG1 e
                  :time (e2 / end-01)))
      :condition (d / do-02
            :ARG0 y
            :ARG1 a)
      :condition (o2 / obligate-01
            :ARG1 y
            :ARG2 (s / shift-01
                  :ARG0 y
                  :ARG1 (e3 / element)
                  :ARG2 (d2 / down)
                  :frequency (t / time
                        :mod (e4 / each)
                        :time-of (r2 / remove-01
                              :ARG0 y
                              :ARG1 (ii2 / item)))
                  :condition (m / make-02
                        :polarity -
                        :ARG0 y
                        :ARG1 (c / circle
                              :mod (a2 / array))))))"
1479,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.,4,4,4,"# ::snt Utilizing indexes for the front and the back.  Front is 0 and as you add items the back index is incremented.
(m / multi-sentence
      :snt1 (u / utilize-01
            :ARG1 (ii / index
                  :mod (a / and
                        :op1 (f / front)
                        :op2 (b / back))))
      :snt2 (a2 / and
            :op1 (e / equal-01
                  :ARG1 (ii2 / index
                        :mod (f2 / front))
                  :ARG2 0)
            :op2 (ii3 / increment-01
                  :ARG1 (ii4 / index
                        :mod (b2 / back))
                  :time (a3 / add-02
                        :ARG0 (y / you)
                        :ARG1 (ii5 / item)))))"
1480,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Declare two variables, “front” and “rear”, to be used to denote which elements in the array can be accessed. Increment “rear” whenever data is enqueued to the end and increment “front” whenever data is dequeued.",5,4,4.5,"# ::snt Declare two variables, “front” and “rear”, to be used to denote which elements in the array can be accessed. Increment “rear” whenever data is enqueued to the end and increment “front” whenever data is dequeued.
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (v / variable
                  :quant 2
                  :ARG1-of (m2 / mean-01
                        :ARG2 (a / and
                              :op1 (v2 / variable
                                    :name (n / name
                                          :op1 ""front""))
                              :op2 (v3 / variable
                                    :name n
                                    :op1 ""rear"")))))
      :purpose (u / use-01
            :ARG1 v
            :ARG2 (d2 / denote-01
                  :ARG0 v
                  :ARG1 (e / element
                        :part-of (a2 / array)
                        :ARG1-of (a3 / access-01
                              :ARG1-of (p / possible-01)))))
      :snt2 (a4 / and
            :op1 (ii / increment-01
                  :ARG1 v2
                  :name n
                  :op1 ""front""))
      :time (e2 / enqueue-01
            :ARG1 (d3 / data)
            :time (e3 / end-01))
      :op2 (ii2 / increment-01
            :ARG1 v3
            :name n
            :op1 ""front"")
      :time (d4 / dequeue-01
            :ARG1 (d5 / data)))"
1481,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",It is an array of fixed size. A queue of maximum N elements.,1,4,2.5,"# ::snt It is an array of fixed size. A queue of maximum N elements.
(m / multi-sentence
      :snt1 (a / array
            :ARG1-of (s / size-01
                  :ARG1-of (f / fix-03))
            :domain (ii / it))
      :snt2 (q / queue
            :consist-of (e / element
                  :quant (m2 / maximum)
                  :quant (n / nucleus))))"
1482,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from",4,4,4,"# ::snt make an array of a size, and add on to the front and delete from the back, keep track of the two so that you know when it is full and where to add or subtract from
(a / and
      :op1 (a2 / and
            :op1 (m / make-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (a3 / array
                        :mod (s / size)))
            :op2 (a4 / add-on-02
                  :mode imperative
                  :ARG0 y
                  :ARG2 (f / front))
            :op3 (d / delete-01
                  :mode imperative
                  :ARG0 y
                  :ARG2 (b / back))
            :op4 (k / keep-02
                  :mode imperative
                  :ARG0 y
                  :ARG1 (t / track-01
                        :ARG0 y
                        :ARG1 a3)
                  :purpose (k2 / know-01
                        :ARG0 y
                        :ARG1 (a5 / and
                              :op1 (f2 / full-09
                                    :ARG1 a3)
                              :op2 (l / location
                                    :location-of (o / or
                                          :op1 (a6 / add-02
                                                :ARG0 y)
                                          :op2 (s2 / subtract-01
                                                :ARG0 y
                                                :ARG1 a3))))))))"
1483,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.,3,4,3.5,"# ::snt By using the beginning of the array as the removal point of the queue (or beginning of the queue) and the ith element as the end of the queue.
(u / use-01
      :ARG1 (a / and
            :op1 (b / begin-01
                  :ARG1 (a2 / array))
            :op2 (p / point
                  :location-of (r / remove-01
                        :ARG1 (q / queue)))
            :op3 (b2 / begin-01
                  :ARG1 q)
            :op4 (e / end-01
                  :ARG1 q
                  :ARG2 (e2 / element
                        :mod (ii / it)))))"
1484,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","add in data from the first element to the last, take out data from the first element to the last.",2,4,3,"# ::snt add in data from the first element to the last, take out data from the first element to the last.
(a / and
      :op1 (a2 / add-in-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (d / data
                  :source (e / element
                        :ord (o / ordinal-entity
                              :value 1)))
            :destination (e2 / element
                  :ord (o2 / ordinal-entity
                        :value ""-1"")))
      :op2 (t / take-out-11
            :mode imperative
            :ARG0 y
            :ARG1 (d2 / data
                  :source (e3 / element
                        :ord (o3 / ordinal-entity
                              :value ""-1""))
                  :destination (e4 / element
                        :ord (o4 / ordinal-entity
                              :value ""-1"")))))"
1485,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom,3,4,3.5,"# ::snt you can take the array and put it in a queue stack or you can just traverse the list and keep track of top and bottom
(o / or
      :op1 (p / possible-01
            :ARG1 (a / and
                  :op1 (t / take-01
                        :ARG0 (y / you)
                        :ARG1 (a2 / array))
                  :op2 (p2 / put-01
                        :ARG0 y
                        :ARG1 a2
                        :ARG2 (s / stack
                              :mod (q / queue)))))
      :op2 (p3 / possible-01
            :ARG1 (a3 / and
                  :op1 (t2 / traverse-01
                        :ARG0 y
                        :ARG1 (l / list)
                        :mod (j / just))
                  :op2 (k / keep-track-02
                        :ARG0 y
                        :ARG1 (a4 / and
                              :op1 (t3 / top)
                              :op2 (b / bottom))))))"
1486,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.",4,4,4,"# ::snt create a fixed array size, with with 2 integers to point to the beginning and the end of the que, and special cases to know when the que is empty or full.
(c / create-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / size
            :mod (a / array)
            :ARG1-of (f / fix-03)
            :consist-of (a2 / and
                  :op1 (ii / integer
                        :quant 2
                        :ARG0-of (p / point-01
                              :ARG2 (a3 / and
                                    :op1 (b / begin-01
                                          :ARG1 (q / que))
                                    :op2 (e / end-01
                                          :ARG1 (q2 / que)))))
                  :op2 (c2 / case-04
                        :ARG1-of (s2 / special-02)
                        :purpose (k / know-01
                              :ARG1 (o / or
                                    :op1 (e2 / empty-02
                                          :ARG1 (q3 / que))
                                    :op2 (f2 / full-09
                                          :ARG1 q3)))))))"
1487,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration,4,4,4,"# ::snt Keep track of the front and rear indexes. Either: 1)Dequeue items by shifting the array left 2)Use wrapped configuration
(m / multi-sentence
      :snt1 (k / keep-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (t / track-01
                  :ARG0 y
                  :ARG1 (a / and
                        :op1 (ii / index
                              :mod (f / front))
                        :op2 (ii2 / index
                              :mod (r / rear)))))
      :snt2 (e / either
            :op1 (d / dequeue-01
                  :li 1
                  :ARG0 y
                  :ARG1 (ii3 / item)
                  :manner (s / shift-01
                        :ARG0 y
                        :ARG1 (a2 / array
                              :ARG1-of (l / left-19))))
            :op2 (u / use-01
                  :li 2
                  :ARG0 y
                  :ARG1 (c / configure-01
                        :ARG1-of (w / wrap-01)))))"
1488,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.",3,4,3.5,"# ::snt add items into a fixed size array, pull the items out by calling on them with the starting index, increase starting index so when it calls again its now the next index element in the array.
(a / and
      :op1 (a2 / add-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / item)
            :ARG2 (a3 / array
                  :ARG1-of (s / size-01
                        :ARG1-of (f / fix-03))))
      :op2 (p / pull-01
            :mode imperative
            :ARG0 y
            :ARG1 ii
            :ARG2 (o / out)
            :manner (c / call-02
                  :ARG0 y
                  :ARG1 ii
                  :instrument (ii2 / index
                        :ARG0-of (s2 / start-01))))
      :op3 (ii3 / increase-01
            :mode imperative
            :ARG0 y
            :ARG1 (ii4 / index
                  :ARG0-of (s3 / start-01))
            :purpose (h / have-mod-91
                  :ARG1 (e / element
                        :mod (ii5 / index)
                        :mod (n / next)
                        :part-of a3))
            :time (n2 / now)
            :time (c2 / call-02
                  :ARG0 ii4
                  :mod (a4 / again))))"
1489,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.",2,4,3,"# ::snt To use and array to implement a Queue, element or item 0, should be the top element in the array. Every time an element is inserted, all the items in the array are pushed back one space. The top element is always removed first.
(m / multi-sentence
      :snt1 (r / recommend-01
            :ARG1 (e / element
                  :mod (t / top)
                  :part-of (a / array)
                  :domain (o / or
                        :op1 (e2 / element
                              :mod (e3 / element))
                        :op2 (ii / item
                              :mod 0)))
            :purpose (u / use-01
                  :ARG1 (a2 / array)
                  :ARG2 (ii2 / implement-01
                        :ARG0 a2
                        :ARG1 (q / queue))))
      :snt2 (p / push-01
            :ARG1 (ii3 / item
                  :mod (a3 / all)
                  :location (a4 / array))
            :ARG2 (s / space
                  :quant 1)
            :direction (b / back)
            :frequency (r2 / rate-entity-91
                  :ARG4 (ii4 / insert-01
                        :ARG1 (e4 / element))))
      :snt3 (r3 / remove-01
            :ARG1 (e5 / element
                  :mod (t2 / top))
            :time (a5 / always)
            :ord (o2 / ordinal-entity
                  :value 1)))"
1490,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",fixed size array with max N elements.  Need to keep track of front and rear of array.,4,4,4,"# ::snt fixed size array with max N elements.  Need to keep track of front and rear of array.
(m / multi-sentence
      :snt1 (a / array
            :mod (s / size
                  :ARG1-of (f / fix-03))
            :accompanier (e / element
                  :quant (m2 / max
                        :op1 ""N"")))
      :snt2 (n / need-01
            :ARG1 (k / keep-01
                  :ARG1 (t / track-01
                        :ARG1 (a2 / and
                              :op1 (f2 / front
                                    :part-of (a3 / array))
                              :op2 (r / rear
                                    :part-of a3))))))"
1491,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","by keeping track of a front item and a rear item, or with a circular array that uses the modulo function",5,5,5,"# ::snt by keeping track of a front item and a rear item, or with a circular array that uses the modulo function
(o / or
      :op1 (k / keep-02
            :ARG1 (t / track-01
                  :ARG1 (a / and
                        :op1 (ii / item
                              :mod (f / front))
                        :op2 (ii2 / item
                              :mod (r / rear)))))
      :op2 (a2 / array
            :mod (c / circular)
            :ARG0-of (u / use-01
                  :ARG1 (f2 / function-01
                        :ARG1 (m / modulo)))))"
1492,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.",5,5,5,"# ::snt Using an array for a queue, the size of the array allocated limits the size of the queue. An array based queue class must keep track of both the front and back of the queue, which may need to wrap around the array.
(m / multi-sentence
      :snt1 (l / limit-01
            :ARG0 (s / size
                  :poss (a / array
                        :ARG1-of (a2 / allocate-01)))
            :ARG1 (s2 / size
                  :poss (q / queue))
            :condition (u / use-01
                  :ARG1 (a3 / array)
                  :ARG2 (q2 / queue)))
      :snt2 (o / obligate-01
            :ARG1 (c / class
                  :mod (q3 / queue)
                  :ARG1-of (b / base-02
                        :ARG2 (a4 / array)))
            :ARG2 (k / keep-02
                  :ARG0 c
                  :ARG1 (t / track-01
                        :ARG0 c
                        :ARG1 (a5 / and
                              :op1 (f / front
                                    :part-of (q4 / queue))
                              :op2 (b2 / back
                                    :part-of q4)
                              :ARG1-of (n / need-01
                                    :ARG0 c
                                    :ARG1-of (p / possible-01)
                                    :ARG1-of (w / wrap-01
                                          :ARG2 (a6 / array))))))))"
1493,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back",0,4,2,"# ::snt A pointer based implementation of a queue could use a linear linked list with two external pointers, one to the front and one to the back
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (ii / implement-01
                  :ARG1 (q / queue)
                  :ARG1-of (b / base-02
                        :ARG2 (p2 / pointer)))
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)
                  :mod (l3 / linear)
                  :consist-of (a / and
                        :op1 (p3 / pointer
                              :quant 1
                              :location (f / front))
                        :op2 (p4 / pointer
                              :quant 1
                              :location (b2 / back))))))"
1494,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",remove the element then shift the elements one space back,2,4,3,"# ::snt remove the element then shift the elements one space back
(t / then
      :op1 (r / remove-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element))
      :op2 (s / shift-01
            :mode imperative
            :ARG0 y
            :ARG1 e
            :direction (b / back)
            :quant (s2 / space
                  :quant 1)))"
1495,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.,5,5,5,"# ::snt By having the head pointer point to the first or least current data entered and having the tail point to the most current data entered. A method must be created so that the tail pointer doesn't leave the array.
(m / multi-sentence
      :snt1 (c / cause-01
            :ARG0 (a / and
                  :op1 (p / point-01
                        :ARG0 (h / head)
                        :ARG2 (d / data
                              :ARG1-of (e / enter-02)
                              :ord (o / ordinal-entity
                                    :value 1)))
                  :op2 (p2 / point-01
                        :ARG0 (t / tail)
                        :ARG2 (d2 / data
                              :ARG1-of (e2 / enter-02)
                              :time (c2 / current
                                    :ARG1-of (h2 / have-quant-91
                                          :ARG3 (l / least)))))))
      :snt2 (o2 / obligate-01
            :ARG2 (c3 / create-01
                  :ARG1 (m2 / method)
                  :purpose (l2 / leave-11
                        :polarity -
                        :ARG0 (p3 / pointer
                              :mod (t2 / tail))
                        :ARG1 (a2 / array)))))"
1496,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",an array is a type of queue with a fixed length,0,3,1.5,"# ::snt an array is a type of queue with a fixed length
(q / queue
      :domain (a / array)
      :mod (t / type)
      :ARG0-of (h / have-03
            :ARG1 (l / length
                  :ARG1-of (f / fix-03))))"
1497,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.","your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full",5,5,5,"# ::snt your storage class has an array, and you keep track of the index of the first and last item in the array, and wrap around when end of the array is full
(a / and
      :op1 (h / have-03
            :ARG0 (c / class
                  :mod (s / store-01)
                  :poss (y / you))
            :ARG1 (a2 / array))
      :op2 (a3 / and
            :op1 (k / keep-01
                  :ARG0 y
                  :ARG1 (t / track-01
                        :ARG0 y
                        :ARG1 (ii / index
                              :poss (a4 / and
                                    :op1 (ii2 / item
                                          :ord (o / ordinal-entity
                                                :value 1))
                                    :op2 (ii3 / item
                                          :ord (o2 / ordinal-entity
                                                :value -1))
                                    :part-of (a5 / array)))))
            :op2 (w / wrap-01
                  :ARG1 y
                  :ARG2 (a6 / around)
                  :time (f / full-09
                        :ARG1 (e / end
                              :part-of (a7 / array))))))"
1498,9.3,How can you implement a queue with an array?,"Use a circular array. Keep the rear of the queue toward the end of the array, and the front toward the beginning, and allow the rear pointer to wrap around.",Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1,5,5,5,"# ::snt Boolean isFullQ(queue) ::= rear == MAX_QUEUE_SIZE-1
(s / string-entity)"
1499,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.,5,5,5,"# ::snt A list can have unlimited elements in it.  You can push a node onto the end of the list and pop the one in the front.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (h / have-03
                  :ARG0 (l / list)
                  :ARG1 (e / element
                        :ARG1-of (l2 / limit-01
                              :polarity -))))
      :snt2 (p2 / possible-01
            :ARG1 (a / and
                  :op1 (p3 / push-01
                        :ARG0 (y / you)
                        :ARG1 (n / node)
                        :ARG2 (e2 / end
                              :part-of (l3 / list)))
                  :op2 (p4 / pop-01
                        :ARG0 y
                        :ARG1 (n2 / node
                              :location (f / front))))))"
1500,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows,0,4,2,"# ::snt theoretically you could do it two ways one of which uses more processing power and memory no larger than the queue is ever at when full and the other which uses almost infinite memory. The more practical method would be two place the items in an array and remove the item in position one of the array after which you can shift the array and add another element if required. The other option which can use infinite memory when used for long term queues such as job scheduling that goes nonstop for extended periods. that is to implement an array and add the items read item one raise your counter value to two ecetera and continue adding more elements to the array. the downside to this method is after you use element one it is still in memory. or im crazy who knows
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (d / do-02
                  :ARG0 (y / you)
                  :ARG1 (ii / it)
                  :manner (w / way
                        :quant 2)
                  :ARG1-of (ii2 / include-91
                        :ARG2 (a / and
                              :op1 (w2 / way
                                    :ARG0-of (u / use-01
                                          :ARG1 (a2 / and
                                                :op1 (p2 / power
                                                      :ARG0-of (p3 / process-01)
                                                      :ARG1-of (h / have-quant-91
                                                            :ARG3 (m2 / more)))
                                                :op2 (m3 / memory
                                                      :ARG1-of (h2 / have-degree-91
                                                            :polarity -
                                                            :ARG2 (l / large)
                                                            :ARG3 (m4 / more)
                                                            :ARG4 (q / queue
                                                                  :time (e / ever)
                                                                  :time (f / full-09))))))))))
            :snt2 (m5 / method
                  :ARG1-of (p4 / practical-02
                        :ARG2-of (h3 / have-degree-91
                              :ARG1 m5
                              :ARG3 (m6 / more))))
            :snt3 (a3 / and
                  :op1 (p5 / place-01
                        :ARG1 (ii3 / item)
                        :ARG2 (a4 / array))
                  :op2 (r / remove-01
                        :ARG0 y
                        :ARG1 ii3
                        :ARG2 (p6 / position
                              :part-of (a5 / array)))
                  :time (a6 / after
                        :op1 (p7 / possible-01
                              :ARG1 (a7 / and
                                    :op1 (s / shift-01
                                          :ARG0 y
                                          :ARG1 a4)
                                    :op2 (a8 / add-02
                                          :ARG0 y
                                          :ARG1 (e2 / element
                                                :mod (a9 / another))
                                          :condition (r2 / require-01
                                                :ARG1 y)))))))
      :snt2 (o / option))"
1501,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.",5,5,5,"# ::snt By implementing a list in which a tail pointer points to the item most recently inserted onto the back of the list and a head pointer which points to the item least recently inserted onto the list. Also, items can only be removed from the front of the list and can only be added to the back of the list.
(m / multi-sentence
      :snt1 (ii / implement-01
            :ARG1 (l / list
                  :consist-of (a / and
                        :op1 (p / pointer
                              :mod (t / tail))
                        :op2 (p2 / pointer
                              :mod (h / head)
                              :ARG0-of (p3 / point-01
                                    :ARG1 (ii2 / item
                                          :ARG1-of (ii3 / insert-01
                                                :ARG2 (b / back
                                                      :part-of (l2 / list))
                                                :time (r / recent
                                                      :ARG2-of (h2 / have-degree-91
                                                            :ARG1 ii3
                                                            :ARG3 (m2 / most)))))))))
            :op2 (p4 / possible-01
                  :ARG1 (a2 / and
                        :op1 (r2 / remove-01
                              :ARG1 (ii4 / item)
                              :ARG2 (f / front
                                    :part-of l2))
                        :mod (o / only))
                  :op2 (p5 / possible-01
                        :ARG1 (a3 / add-01
                              :ARG1 ii4
                              :ARG2 (b2 / back
                                    :part-of (l3 / list)))
                        :mod (o2 / only)))))"
1502,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",You can use list to represent the items in a queue.,0,3,1.5,"# ::snt You can use list to represent the items in a queue.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (l / list)
            :ARG2 (r / represent-01
                  :ARG0 y
                  :ARG1 (ii / item
                        :location (q / queue)))))"
1503,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.,3,4,3.5,"# ::snt Have a pointer to the last element in the list and then use enqueue to insert items there. Link the first and last elements together to dequeue the list.
(m / multi-sentence
      :snt1 (a / and
            :op1 (h / have-03
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (p / pointer
                        :destination (e / element
                              :ord (o / ordinal-entity
                                    :value ""-1"")
                              :part-of (l / list))))
            :op2 (u / use-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (e2 / enqueue)
                  :ARG2 (ii / insert-01
                        :ARG0 y
                        :ARG1 (ii2 / item)
                        :ARG2 (t / there))
                  :time (t2 / then)))
      :snt2 (l2 / link-01
            :mode imperative
            :ARG0 y)
      :ARG1 (a2 / and
            :op1 (e3 / element
                  :ord (o2 / ordinal-entity
                        :value 1))
            :op2 (e4 / element
                  :ord (o3 / ordinal-entity
                        :value ""-1"")))
      :ARG2 (t3 / together)
      :purpose (d / dequeue-01
            :ARG0 y
            :ARG1 (l3 / list)))"
1504,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.,5,5,5,"# ::snt Enqueue to the end of the linked list... dequeue items from the beginning (head) of the list.
(a / and
      :op1 (e / enqueue-01
            :ARG1 (e2 / end-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))))
      :op2 (d / dequeue-01
            :ARG1 (ii / item
                  :source (b / begin-01
                        :ARG1 (l3 / list))
                  :ARG1-of (m / mean-01
                        :ARG2 (p / person
                              :ARG0-of (h / head-01))))))"
1505,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you use the first element in the list as the remove point for the queue and insert items at the end of the list.,5,5,5,"# ::snt you use the first element in the list as the remove point for the queue and insert items at the end of the list.
(a / and
      :op1 (u / use-01
            :ARG0 (y / you)
            :ARG1 (e / element
                  :ord (o / ordinal-entity
                        :value 1)
                  :part-of (l / list))
            :ARG2 (p / point
                  :location-of (r / remove-01
                        :ARG1 (q / queue))))
      :op2 (ii / insert-01
            :ARG0 y
            :ARG1 (ii2 / item)
            :time (e2 / end-01
                  :ARG1 l)))"
1506,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.",5,4,4.5,"# ::snt Utilizing a front pointer and a back pointer.  The front poiner and back pointer points to the first item into the queue.  As you add items, the front remains the same but the back poiner 'next' points to the new item and the new item is assigned to become the 'new' back pointer.
(m / multi-sentence
      :snt1 (u / utilize-01
            :ARG1 (a / and
                  :op1 (p / pointer
                        :mod (f / front))
                  :op2 (p2 / pointer
                        :mod (b / back))))
      :snt2 (p3 / point-01
            :ARG0 (a2 / and
                  :op1 (p4 / poiner
                        :mod (f2 / front))
                  :op2 (p5 / pointer
                        :mod (b2 / back)))
            :ARG2 (ii / item
                  :ord (o / ordinal-entity
                        :value 1)
                  :location (q / queue)))
      :snt3 (c / contrast-01
            :ARG1 (r / remain-01
                  :ARG1 (f3 / front)
                  :ARG2 (s / same-01)
                  :time (a3 / add-01
                        :ARG0 (y / you)
                        :ARG1 (ii2 / item)))
            :ARG2 (a4 / and
                  :op1 p3
                  :ARG0 (p6 / poiner
                        :mod b))
            :ARG1 (ii3 / item
                  :ARG1-of (n / new-01))
            :mod (n2 / next))
      :op2 (a5 / assign-01
            :ARG1 (b3 / become-01
                  :ARG1 ii3
                  :ARG2 p5
                  :mod b2)
            :ARG1-of (n3 / new-01)))"
1507,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.,5,4,4.5,"# ::snt Implement a linked list that only allows nodes to be added to the tail and can only be retrieved from the head.
(ii / implement-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (l / list
            :ARG1-of (l2 / link-01)
            :ARG0-of (a / allow-01
                  :ARG1 (a2 / and
                        :op1 (a3 / add-02
                              :ARG1 (n / node)
                              :ARG2 (t / tail))
                        :op2 (p / possible-01
                              :ARG1 (r / retrieve-01
                                    :ARG1 n
                                    :ARG2 (h / head))
                              :mod (o / only))))))"
1508,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",Check if list is empty and add elements to the list.,1,4,2.5,"# ::snt Check if list is empty and add elements to the list.
(a / and
      :op1 (c / check-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / empty-02
                  :ARG1 (l / list)))
      :op2 (a2 / add-02
            :mode imperative
            :ARG0 y
            :ARG1 (e2 / element)
            :ARG2 l))"
1509,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","make a linked list and add on to the front and delete from the back, keep track of both to do so.",5,4,4.5,"# ::snt make a linked list and add on to the front and delete from the back, keep track of both to do so.
(a / and
      :op1 (a2 / and
            :op1 (m / make-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01)))
            :op2 (a3 / add-on-02
                  :mode imperative
                  :ARG0 y
                  :ARG2 (f / front))
            :op3 (d / delete-01
                  :mode imperative
                  :ARG0 y
                  :ARG2 (b / back)))
      :op2 (k / keep-02
            :mode imperative
            :ARG0 y
            :ARG1 (t / track-01
                  :ARG0 y
                  :ARG1 l)
            :purpose (d2 / do-02
                  :ARG0 y
                  :ARG1 a2)))"
1510,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue,5,4,4.5,"# ::snt by making the head of the list the beginning of the queue and the last listed item the insertion point of the queue
(m / make-02
      :ARG1 (a / and
            :op1 (b / begin-01
                  :ARG1 (q / queue)
                  :ARG2 (p / person
                        :ARG0-of (h / head-01
                              :ARG1 (l / list-01))))
            :op2 (p2 / point
                  :location-of (ii / insert-01
                        :ARG1 q)
                  :domain (ii2 / item
                        :mod (l2 / last)
                        :ARG1-of (l3 / list-01)))))"
1511,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",throw in data at the head and take it out at the tail,4,5,4.5,"# ::snt throw in data at the head and take it out at the tail
(a / and
      :op1 (t / throw-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (d / data)
            :ARG2 (h / head))
      :op2 (t2 / take-out-11
            :mode imperative
            :ARG0 y
            :ARG1 d
            :location (t3 / tail)))"
1512,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue",2,4,3,"# ::snt You create a list of nodes that had a head and a top pointer, and the functions are basically the same substituting pop and push with enqueue and dequeue
(a / and
      :op1 (c / create-01
            :ARG0 (y / you)
            :ARG1 (l / list
                  :consist-of (n / node
                        :ARG0-of (h / have-03
                              :ARG1 (a2 / and
                                    :op1 (h2 / head)
                                    :op2 (p / pointer
                                          :mod (t / top)))))))
      :op2 (s / same-01
            :ARG1 (f / function-01)
            :ARG2 (s2 / substitute-01
                  :ARG1 (a3 / and
                        :op1 (p2 / pop)
                        :op2 (p3 / push-01))
                  :ARG2 (a4 / and
                        :op1 (e / enqueue)
                        :op2 (d / dequeue)))
            :mod (b / basic)))"
1513,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.",5,4,4.5,"# ::snt fairly easy... singly linked list with a pointer to the head and tail of hte list.  deque first item in que, create temp pointer to next element, delete head, and then make head the temporary pointer.  enque new item, use pointer to end of list, add a new item to the next item of the tail, and make the tail the next item of the current tail.
(m / multi-sentence
      :snt1 (e / easy-05
            :degree (f / fairly))
      :snt2 (a / and
            :op1 (l / link-01
                  :ARG1 (l2 / list)
                  :ARG2 (p / pointer
                        :ARG2 (a2 / and
                              :op1 (h / head
                                    :part-of (l3 / list))
                              :op2 (t / tail
                                    :part-of (t2 / tail
                                          :time (c / current)))))
                  :manner (s / singly))
            :snt2 (a3 / and
                  :op1 (c2 / create-01
                        :ARG0 (y / you)
                        :ARG1 (p2 / pointer
                              :mod (t3 / temporal-quantity))
                        :ARG2 (e2 / element
                              :mod (n / next)))
                  :op2 (d / delete-01
                        :ARG0 y
                        :ARG1 (h2 / head))
                  :op3 (m2 / make-02
                        :ARG0 y
                        :ARG1 h2
                        :ARG2 (p3 / pointer
                              :mod (t4 / temporary))
                        :time (t5 / then))))
      :snt2 a3
      :op1 (d2 / deque
            :op1 (ii / item
                  :ord (o / ordinal-entity
                        :value 1)
                  :part-of l3))
      :op2 (u / use-01
            :ARG1 (p4 / pointer)
            :ARG2 (e3 / end
                  :part-of (l4 / list)))
      :op3 (a4 / add-02
            :ARG1 (ii2 / item
                  :ARG1-of (n2 / new-01))
            :ARG2 (ii3 / item
                  :mod (n3 / next)
                  :part-of t))
      :op4 (m3 / make-01
            :ARG1 t2
            :mod c)
      :ARG2 (ii4 / item))"
1514,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.",5,4,4.5,"# ::snt Use a linked list with 2 pointers, one to the front and one to the back. As long as back != front, the queue is not empty.
(m / multi-sentence
      :snt1 (u / use-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)
                  :consist-of (p / pointer
                        :quant 2
                        :ARG1-of (m2 / mean-01
                              :ARG2 (a / and
                                    :op1 (p2 / pointer
                                          :quant 1
                                          :destination (f / front))
                                    :op2 (p3 / pointer
                                          :quant 1
                                          :destination (b / back)))))))
      :snt2 (e / empty
            :polarity -
            :domain (q / queue)
            :condition (a2 / as-long-as
                  :op1 (e2 / equal-01
                        :ARG1 b)
                  :ARG2 (f2 / front))))"
1515,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element",4,4,4,"# ::snt create a node with the input data, continue to add to the list.  when dequeueing - get the first elements data and set the next element in the list as the new first element
(m / multi-sentence
      :snt1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / node)
            :accompanier (d / data
                  :ARG1-of (ii / input-01)))
      :snt2 (c2 / continue-01
            :mode imperative
            :ARG0 y
            :ARG1 (a / add-02
                  :ARG0 y
                  :ARG2 (l / list)))
      :snt3 (a2 / and
            :op1 (g / get-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 (d2 / data
                        :mod (e / element
                              :ord (o / ordinal-entity
                                    :value 1))))
            :op2 (s / set-02
                  :mode imperative
                  :ARG0 y2
                  :ARG1 (e2 / element
                        :mod (n2 / next)
                        :location (l2 / list))
                  :ARG2 (e3 / element
                        :ord o
                        :value 1)
                  :ARG1-of (n3 / new-01)))
      :time (d3 / dequeue-00))"
1516,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.",2,4,3,"# ::snt A linked list with Stack principles. The Queue's top element is the element that is always being removed first. Must use nodes to contain each element, with a pointer to the top element, which also could  be called the head pointer.
(m / multi-sentence
      :snt1 (l / list
            :ARG1-of (l2 / link-01)
            :ARG0-of (h / have-03
                  :ARG1 (p / principle
                        :mod (s / stack))))
      :snt2 (e / element
            :ARG1-of (r / remove-01
                  :time (a / always)
                  :ord (o / ordinal-entity
                        :value 1))
            :domain (e2 / element
                  :mod (t / top)
                  :poss (q / queue)))
      :snt3 (o2 / obligate-01
            :ARG2 (u / use-01
                  :ARG1 (n / node)
                  :ARG2 (c / contain-01
                        :ARG0 n
                        :ARG1 (e3 / element
                              :mod (e4 / each))
                        :accompanier (p2 / pointer
                              :destination e3
                              :ARG1-of (c2 / call-01
                                    :ARG2 (p3 / pointer
                                          :mod (h2 / head))
                                    :ARG1-of (p4 / possible-01)
                                    :mod (a2 / also)))))))"
1517,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.,3,4,3.5,"# ::snt linked list checking for front and rear.  Keep enqueueing elements until front equal to rear -1.
(m / multi-sentence
      :snt1 (c / check-01
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (a / and
                  :op1 (f / front)
                  :op2 (r / rear)))
      :snt2 (k / keep-02
            :ARG0 (y / you)
            :ARG1 (e / enqueue-01
                  :ARG0 y
                  :ARG1 (e2 / element)
                  :time (u / until
                        :op1 (e3 / equal-01
                              :ARG1 (f2 / front)
                              :ARG2 (r2 / ratio-of
                                    :op1 1
                                    :op2 (r3 / rear)))))))"
1518,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","a queue can be implemented in a list by keeping track of two pointers, a head and a tail",5,4,4.5,"# ::snt a queue can be implemented in a list by keeping track of two pointers, a head and a tail
(p / possible-01
      :ARG1 (ii / implement-01
            :ARG1 (q / queue)
            :ARG2 (l / list)
            :manner (k / keep-01
                  :ARG1 (t / track-01
                        :ARG1 (a / and
                              :op1 (p2 / pointer
                                    :quant 2)
                              :op2 (p3 / pointer
                                    :quant 1)
                              :op3 (t2 / tail))))))"
1519,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.",5,5,5,"# ::snt each element of a queue can be allocated in the nodes of an linked list. New elements should be added to the head of the list, with each dequeued element coming off the tail.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / allocate-01
                  :ARG1 (e / element
                        :mod (e2 / each)
                        :part-of (q / queue))
                  :location (n / node
                        :part-of (l / list
                              :ARG1-of (l2 / link-01)))))
      :snt2 (r / recommend-01
            :ARG1 (a2 / add-02
                  :ARG1 (e3 / element
                        :ARG1-of (n2 / new-01))
                  :ARG2 (h / head
                        :part-of (l3 / list))
                  :manner (c / come-01
                        :ARG1 (e4 / element
                              :ARG1-of (d / dequeue-01)
                              :mod (e5 / each))
                        :ARG3 (t / tail)))))"
1520,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)",3,5,4,"# ::snt Implement the operation dequeue() as the list operation remove(1) and the operation getFront(queueFront) as the list operation retrieve(1, queueFront)
(ii / implement-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (a / and
            :op1 (o / operation
                  :name (n / name
                        :op1 ""dequeue()"")
                  :ARG1-of (r / resemble-01
                        :ARG2 (o2 / operate-01
                              :ARG1 (l / list)
                              :ARG2 (r2 / remove-01
                                    :ARG1 (l2 / list)))))
            :op2 (o3 / operation
                  :name (n2 / name
                        :op1 ""getFront"")
                  :ARG1-of (r3 / resemble-01
                        :ARG2 (o4 / operate-01
                              :ARG1 (r4 / retrieve-01
                                    :ARG1 (l3 / list)
                                    :ARG2 (s / string-entity
                                          :value 1)))))))"
1521,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",remove the first element and reference the second element as the new head of the list.,3,4,3.5,"# ::snt remove the first element and reference the second element as the new head of the list.
(a / and
      :op1 (r / remove-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element
                  :ord (o / ordinal-entity
                        :value 1)))
      :op2 (r2 / reference-01
            :mode imperative
            :ARG0 y
            :ARG1 (e2 / element
                  :ord (o2 / ordinal-entity
                        :value 2))
            :ARG2 (h / head-01
                  :ARG1 (l / list)
                  :ARG1-of (n / new-01))))"
1522,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.,5,5,5,"# ::snt By creating and adding nodes at the end of the list and removing the nodes from the beginning of the list.
(a / and
      :op1 (c / create-01
            :ARG1 (n / node))
      :op2 (a2 / add-02
            :ARG1 n)
      :op3 (r / remove-01
            :ARG1 (n2 / node)
            :ARG2 (b / begin-01
                  :ARG1 (l / list))))"
1523,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",you would have your list and add a back pointer so that your program knows where the end is,4,4,4,"# ::snt you would have your list and add a back pointer so that your program knows where the end is
(a / and
      :op1 (h / have-03
            :ARG0 (y / you)
            :ARG1 (l / list
                  :poss y))
      :op2 (a2 / add-02
            :ARG0 y
            :ARG1 (p / pointer
                  :mod (b / back))
            :purpose (k / know-01
                  :ARG0 (p2 / program
                        :poss y)
                  :ARG1 (l2 / location
                        :location-of (e / end-01)))))"
1524,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.","your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list",4,5,4.5,"# ::snt your queue storage class has a list, and for enqueue, you add the item to the end of the list, and for dequeue you return the first item in the list
(a / and
      :op1 (h / have-03
            :ARG0 (c / class
                  :mod (s / store-01
                        :ARG1 (q / queue))
                  :poss (y / you))
            :ARG1 (l / list))
      :op2 (a2 / and
            :op1 (a3 / add-01
                  :ARG0 y
                  :ARG1 (ii / item)
                  :ARG2 (e / end-01
                        :ARG1 (l2 / list)))
            :op2 (r / return-02
                  :ARG0 y
                  :ARG1 (ii2 / item
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (l3 / list))
                  :purpose (d / dequeue-01))))"
1525,9.4,How can you implement a queue with a list?,"Keep the rear of the queue pointing to the tail of the linked list, so the enqueue operation is done at the end of the list, and keep the front of the queue pointing to the head of the linked list, so the dequeue operation is done at the beginning of the list.",temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   },3,4,3.5,"# ::snt temp-&gt;next= NULL;       if (front)  { (rear) -&gt; next= temp;}       else front = temp;       rear = temp;   }
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / string-entity
                  :value ""temp-&gt""
                  :op2 ""next""
                  :ARG1-of (e / equal-01
                        :ARG2 (n / null)))
            :op2 (s2 / string-entity
                  :value ""if""
                  :op3 (a2 / and
                        :op1 (f / front)
                        :op2 (r / rear))
                  :op3 (s3 / string-entity
                        :value ""next""
                        :value ""temp"")))
      :snt2 (a3 / and
            :op1 (e2 / equal-01
                  :ARG1 f)
            :ARG2 (t / temp))
      :op2 (e3 / equal-01
            :ARG1 r)
      :ARG2 (t2 / temp)
      :mod (e4 / else))"
1526,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Push.,5,5,5,"# ::snt Push.
(p / push-01)"
1527,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"push, which inserts something at the top of the stack.",5,5,5,"# ::snt push, which inserts something at the top of the stack.
(p / push-01
      :ARG0-of (ii / insert-01
            :ARG1 (s / something)
            :ARG2 (t / top
                  :part-of (s2 / stack))))"
1528,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,The stack operation corresponding to enqueue in queues is the push operation.,5,5,5,"# ::snt The stack operation corresponding to enqueue in queues is the push operation.
(o / operate-01
      :ARG1 (s / stack)
      :ARG1-of (c / correspond-02
            :ARG2 (q / queue))
      :domain (o2 / operate-01
            :ARG1 (p / push-01)))"
1529,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.",5,5,5,"# ::snt Push in a stack operation corresponds to the enqueue operation in queues.  These operations insert a new item into one end(the top and back, respectively) of the ADT.
(m / multi-sentence
      :snt1 (c / correspond-01
            :ARG1 (o / operate-01
                  :ARG1 (p / push-01
                        :ARG1 (s / stack)))
            :ARG2 (o2 / operate-01
                  :ARG1 (q / queue)
                  :mod (e / enqueue)))
      :snt2 (ii / insert-01
            :ARG0 (o3 / operate-01
                  :mod (t / this))
            :ARG1 (ii2 / item
                  :ARG1-of (n / new-01))
            :ARG2 (a / and
                  :op1 (e2 / end
                        :mod (t2 / top))
                  :op2 (e3 / end
                        :mod (b / back))
                  :part-of (p2 / product
                        :name (n2 / name
                              :op1 ""ADT"")))))"
1530,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,The stack operation is almost the opposite of the enqueue operation.,0,5,2.5,"# ::snt The stack operation is almost the opposite of the enqueue operation.
(o / opposite-01
      :ARG1 (o2 / operate-01
            :ARG1 (s / stack-01))
      :ARG2 (o3 / operate-01
            :ARG1 (e / enqueue-01))
      :mod (a / almost))"
1531,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push = enqueue pop = dequeue,5,4,4.5,"# ::snt push = enqueue pop = dequeue
(e / equal-01
      :ARG1 (p / push-01)
      :ARG2 (e2 / enqueue-01)
      :ARG3 (e3 / equal-01
            :ARG1 (p2 / pop)
            :ARG2 (d / dequeue-01)))"
1532,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1533,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.,5,5,5,"# ::snt Not sure what this question means.  You can use the stack 'push' operation and the enqueue operation to detect palindromes.
(m / multi-sentence
      :snt1 (s / sure-02
            :polarity -
            :ARG0 (ii / i)
            :ARG1 (t / thing
                  :ARG2-of (m2 / mean-01
                        :ARG1 (q / question-01
                              :mod (t2 / this)))))
      :snt2 (p / possible-01
            :ARG1 (u / use-01
                  :ARG0 (y / you)
                  :ARG1 (a / and
                        :op1 (o / operate-01
                              :ARG1 (p2 / push-01
                                    :ARG1 (s2 / stack)))
                        :op2 (o2 / operate-01
                              :ARG1 (e / enqueue-01)))
                  :ARG2 (d / detect-01
                        :ARG0 y
                        :ARG1 (p3 / palindrome)))))"
1534,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.",5,5,5,"# ::snt Enqueue is the queue equivalent of push, and dequeue is the queue equivalent to pop.
(a / and
      :op1 (e / equal-01
            :ARG1 (q / queue)
            :ARG2 (p / push-01))
      :op2 (e2 / equal-01
            :ARG1 (q2 / queue)
            :ARG2 (p2 / pop-01)
            :domain (q3 / queue)))"
1535,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Push operation.,5,5,5,"# ::snt Push operation.
(o / operate-01
      :manner (p / push-01))"
1536,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1537,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1538,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1539,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1540,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"that would be the push operation, if it put the item at the end of the list.",5,5,5,"# ::snt that would be the push operation, if it put the item at the end of the list.
(o / operation
      :mod (p / push-01)
      :domain (t / that)
      :condition (p2 / put-01
            :ARG1 (ii / item)
            :ARG2 (e / end-01
                  :ARG1 (l / list)))
      :ARG0-of p2)"
1541,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1542,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1543,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,the Push method in the stack operations.,5,5,5,"# ::snt the Push method in the stack operations.
(m / method
      :name (n / name
            :op1 ""Push"")
      :location (o / operate-01
            :ARG1 (s / stack)))"
1544,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1545,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,enqueue corresponds with push dequeue corresponds with pop,5,4,4.5,"# ::snt enqueue corresponds with push dequeue corresponds with pop
(c / correspond-01
      :ARG1 (e / enqueue)
      :ARG2 (d / dequeue
            :ARG1-of (p / push-01))
      :ARG1-of (c2 / correspond-01
            :ARG2 (p2 / pop)))"
1546,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,"Push corresponds with enqueue, both very similarly place new elements into their stack or queue",5,5,5,"# ::snt Push corresponds with enqueue, both very similarly place new elements into their stack or queue
(a / and
      :op1 (c / correspond-01
            :ARG1 (p / push-01)
            :ARG2 (e / enqueue))
      :op2 (p2 / place-01
            :ARG0 (b / both)
            :ARG1 (e2 / element
                  :ARG1-of (n / new-01))
            :ARG2 (o / or
                  :op1 (s / stack)
                  :op2 (q / queue)
                  :poss e2)
            :ARG1-of (r / resemble-01
                  :degree (v / very))))"
1547,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,FIFO: First in First out,0,3,1.5,"# ::snt FIFO: First in First out
(m / multi-sentence
      :snt1 (f / fucking
            :mode expressive)
      :snt2 (ii / in
            :ord (o / ordinal-entity
                  :value 1))
      :snt3 (o2 / out
            :ord o
            :value 1))"
1548,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1549,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,Push,5,5,5,"# ::snt Push
(p / push-01)"
1550,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1551,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1552,9.6,What is the stack operation corresponding to the enqueue operation in queues?,push,push,5,5,5,"# ::snt push
(p / push-01)"
1553,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).,3,5,4,"# ::snt A hierarchy of nodes that are sorted in a particular order.  Each node has a ancestor (except for the root) and children (except for the leaves).
(m / multi-sentence
      :snt1 (h / hierarchy
            :consist-of (n / node)
            :ARG1-of (s / sort-01
                  :manner (o / order
                        :mod (p / particular))))
      :snt2 (h2 / have-03
            :ARG0 (n2 / node
                  :mod (e / each))
            :ARG1 (a / and
                  :op1 (a2 / ancestor
                        :ARG2-of (e2 / except-01
                              :ARG1 (r / root)))
                  :op2 (c / child
                        :ARG2-of (e3 / except-01
                              :ARG1 (l / leaf))))))"
1554,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.,5,5,5,"# ::snt A tree is a finite set of one or more nodes with a specially designated node called the root and the remaining nodes are partitioned into disjoint sets where each of these sets is a tree.
(a / and
      :op1 (s / set
            :mod (f / finite)
            :consist-of (o / or
                  :op1 (n / node
                        :quant (o2 / one))
                  :op2 (n2 / node
                        :quant (m / more))
                  :ARG0-of (h / have-03
                        :ARG1 (n3 / node
                              :ARG1-of (d / designate-01
                                    :ARG1-of (s2 / special-02))
                              :ARG1-of (c / call-01
                                    :ARG2 (r / root))))))
      :op2 (p / partition-01
            :ARG1 (n4 / node
                  :ARG1-of (r2 / remain-01))
            :ARG2 (s3 / set
                  :ARG1-of (j / join-01
                        :polarity -)
                  :domain (t / tree
                        :domain (e / each
                              :ARG1-of (ii / include-91
                                    :ARG2 (s4 / set
                                          :mod (t2 / this))))))))"
1555,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.,4,5,4.5,"# ::snt A tree is a finite set of one or more nodes such that: there is a specially designated node called the root.
(s / set
      :mod (f / finite)
      :consist-of (o / or
            :op1 (n / node
                  :quant 1)
            :op2 (n2 / node
                  :quant (m / more)))
      :ARG0-of (c / cause-01
            :ARG1 (c2 / call-01
                  :ARG1 (n3 / node
                        :ARG1-of (d / designate-01
                              :ARG1-of (s2 / special-02)))
                  :ARG2 (r / root)))
      :domain (t / tree))"
1556,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A connected, undirected graph without cycles.",4,5,4.5,"# ::snt A connected, undirected graph without cycles.
(g / graph
      :ARG1-of (c / connect-01)
      :ARG1-of (d / direct-01
            :polarity -)
      :ARG1-of (c2 / cycle-02
            :polarity -))"
1557,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.",5,5,5,"# ::snt A data structure that contains a root, internal nodes and external nodes. Each node references another node by means of pointers (pass-by-reference). The root is the ""base"" of the tree, it has no parents. A ""leaf"" is a node at the end of the tree which points to NULL.
(m / multi-sentence
      :snt1 (s / structure-01
            :ARG1 (d / data)
            :ARG0-of (c / contain-01
                  :ARG1 (a / and
                        :op1 (r / root)
                        :op2 (n / node
                              :ARG1-of (ii / internal-02))
                        :op3 (n2 / node
                              :mod (e / external)))))
      :snt2 (r2 / reference-01
            :ARG0 (n3 / node
                  :mod (e2 / each))
            :ARG1 (n4 / node
                  :mod (a2 / another))
            :manner (p / pointer
                  :ARG1-of (m2 / mean-01
                        :ARG2 (p2 / pass-by-reference))))
      :snt3 (a3 / and
            :op1 (b / base
                  :poss (t / tree))
            :op2 (h / have-03
                  :polarity -
                  :ARG0 (r3 / root)
                  :ARG1 (p3 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 t
                              :ARG2 (p4 / parent))))
            :op2 (l / leaf
                  :domain n2
                  :location (e3 / end
                        :part-of (t2 / tree))
                  :ARG0-of (p5 / point-01
                        :ARG1 (n5 / null)))))"
1558,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a tree is a series of nodes where each node has links to other nodes.,1,5,3,"# ::snt a tree is a series of nodes where each node has links to other nodes.
(t / tree
      :domain (s / series
            :consist-of (n / node)
            :location-of (h / have-03
                  :ARG0 (n2 / node
                        :mod (e / each))
                  :ARG1 (l / link-01
                        :ARG1 n2
                        :ARG2 (n3 / node
                              :mod (o / other))))))"
1559,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","an infinite set of nodes that have a root and descendants, and each addition is a leaf.",2,5,3.5,"# ::snt an infinite set of nodes that have a root and descendants, and each addition is a leaf.
(a / and
      :op1 (s / set
            :consist-of (n / node)
            :ARG1-of (ii / infinite-02)
            :ARG0-of (h / have-03
                  :ARG1 (a2 / and
                        :op1 (r / root)
                        :op2 (d / descendant))))
      :op2 (l / leaf
            :domain (a3 / add-02
                  :mod (e / each))))"
1560,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A set of one or more nodes that are hierarchically organized, with one special “root” node.",3,5,4,"# ::snt A set of one or more nodes that are hierarchically organized, with one special “root” node.
(s / set
      :consist-of (o / or
            :op1 (n / node
                  :quant 1)
            :op2 (n2 / node
                  :quant (m / more))
            :ARG1-of (o2 / organize-01
                  :manner (h / hierarchy)))
      :accompanier (n3 / node
            :quant 1
            :ARG1-of (s2 / special-02)
            :mod (r / root)))"
1561,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a finite set of one or more nodes such that there is a specially designated node called the root.,2,5,3.5,"# ::snt A tree is a finite set of one or more nodes such that there is a specially designated node called the root.
(s / set
      :mod (f / finite)
      :consist-of (n / node
            :quant (o / or
                  :op1 1
                  :op2 (m / more)))
      :domain (t / tree)
      :ARG0-of (c / cause-01
            :ARG1 (n2 / node
                  :ARG1-of (d / designate-01
                        :ARG1-of (s2 / special-02))
                  :ARG1-of (c2 / call-01
                        :ARG2 (r / root)))))"
1562,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees,5,5,5,"# ::snt one or more nodes in a hierarchy starting with the root and branching off like a tree to subtrees
(a / and
      :op1 (s / start-01
            :ARG1 (n / node
                  :quant (o / or
                        :op1 1
                        :op2 (m / more)))
            :ARG2 (r / root))
      :op2 (b / branch-off-02
            :ARG1 n
            :ARG2 (s2 / subtree)
            :ARG1-of (r2 / resemble-01
                  :ARG2 (t / tree)))
      :part-of (h / hierarchy))"
1563,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A tree is a data structure where nodes are linked to each other in a hierarchical manner.,2,5,3.5,"# ::snt A tree is a data structure where nodes are linked to each other in a hierarchical manner.
(s / structure
      :mod (d / data)
      :domain (t / tree)
      :location-of (l / link-01
            :ARG1 (n / node)
            :ARG2 n
            :manner (h / hierarchy)))"
1564,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a grouping of data in a parent to child structure,2,4,3,"# ::snt a grouping of data in a parent to child structure
(g / group-01
      :ARG1 (d / data)
      :location (s / structure-01
            :ARG1 (p / parent
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (c / child)))))"
1565,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.,1,5,3,"# ::snt It is a list of numbers in a list made by comparing values of nodes already in the tree and adding to the appropriate spot. Its a list made up of nodes with left and right pointers.
(m / multi-sentence
      :snt1 (l / list
            :consist-of (n / number)
            :part-of (l2 / list
                  :ARG1-of (m2 / make-01
                        :manner (a / and
                              :op1 (c / compare-01
                                    :ARG1 (v / value
                                          :poss (n2 / node
                                                :location (t / tree)
                                                :time (a2 / already))))
                              :op2 (a3 / add-02
                                    :ARG1 v
                                    :ARG2 (s / spot
                                          :ARG1-of (a4 / appropriate-02)))))))
      :snt2 l2
      :domain (ii / it)
      :ARG1-of (m3 / make-up-10
            :ARG2 (a5 / and
                  :op1 (p / pointer
                        :ARG1-of (l3 / left-19))
                  :op2 (p2 / pointer
                        :ARG1-of (r / right-04)))))"
1566,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.",4,5,4.5,"# ::snt A tree is a branched data structure with nodes, and leaves... a special node called root has no parent node, but however like all other nodes can and does have 2 nodes that it links to, namely one on the right, and one on the left.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :ARG1-of (b / branch-01)
            :ARG0-of (h / have-03
                  :ARG1 (a / and
                        :op1 (n / node)
                        :op2 (l / leaf))))
      :snt2 (c / contrast-01
            :ARG1 (h2 / have-03
                  :polarity -
                  :ARG0 (n2 / node
                        :ARG1-of (s2 / special-02)
                        :ARG1-of (c2 / call-01
                              :ARG2 (r / root)))
                  :ARG1 (n3 / node
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG2 (p / parent))))
            :ARG2 (a2 / and
                  :op1 (p2 / possible-01
                        :ARG1 (h4 / have-03
                              :ARG0 (n4 / node
                                    :quant 2
                                    :ARG1-of (l2 / link-01)
                                    :ARG2-of l2))
                        :op2 (h5 / have-03
                              :ARG0 n4
                              :ARG1 (a3 / and
                                    :op1 (o / one
                                          :location (r2 / right-08))
                                    :op2 (o2 / one
                                          :location (l3 / left-19))))))))"
1567,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. ",5,5,5,"# ::snt It organizes data in a nonlinear, hierarchical form, where items can have more than one successor.  Partitioned into a root node and subsets are general subtrees of the root. 
(m / multi-sentence
      :snt1 (o / organize-01
            :ARG0 (ii / it)
            :ARG1 (d / data)
            :manner (f / form
                  :mod (h / hierarchy)
                  :mod (l / linear
                        :polarity -)
                  :location-of (p / possible-01
                        :ARG1 (h2 / have-03
                              :ARG0 (ii2 / item)
                              :ARG1 (s / successor
                                    :quant (m2 / more-than
                                          :op1 1))))))
      :snt2 (s2 / subtree
            :ARG1-of (g / general-02)
            :part-of (r / root-02)
            :ARG1-of (p2 / partition-01
                  :ARG2 (a / and
                        :op1 (n / node
                              :mod r)
                        :op2 (s3 / subset)))))"
1568,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.",5,5,5,"# ::snt A tree is a finite set of one or more nodes such that there is a specially designated node called the root. The remaining nodes are partitioned into n&gt;=0 disjoint sets T the n plus 1, where each element set is a tree.
(m / multi-sentence
      :snt1 (s / set
            :mod (f / finite)
            :consist-of (o / or
                  :op1 (n / node)
                  :op2 (n2 / node
                        :quant (m2 / more-than
                              :op1 1)))
            :ARG0-of (c / cause-01
                  :ARG1 (c2 / call-01
                        :ARG1 (n3 / node
                              :ARG1-of (r / remain-01))
                        :ARG2 (r2 / root)
                        :ARG1-of (d / designate-01
                              :ARG1-of (s2 / special-02)))))
      :snt2 (p / partition-01
            :ARG1 (n4 / node
                  :ARG1-of r))
      :ARG2 s
      :mod (d2 / disjoint)
      :ARG1-of (m3 / mean-01
            :ARG2 (a / and
                  :op1 (s3 / set
                        :mod (e / element
                              :mod (e2 / each)))
                  :op2 (s4 / set
                        :mod (p2 / plus
                              :op1 1)))))"
1569,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A finite set of nodes that starts with the root and terminates with leaves.,3,5,4,"# ::snt A finite set of nodes that starts with the root and terminates with leaves.
(s / set
      :mod (f / finite)
      :consist-of (n / node)
      :ARG1-of (s2 / start-01
            :ARG2 (r / root))
      :ARG1-of (t / terminate-01
            :ARG2 (l / leaf)))"
1570,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element",1,4,2.5,"# ::snt a set of data arranged with pointers. each element can have many pointers, but no two pointers point to the same element
(m / multi-sentence
      :snt1 (a / arrange-01
            :ARG1 (s / set
                  :consist-of (d / data))
            :ARG2 (p / pointer))
      :snt2 (c / contrast-01
            :ARG1 (p2 / possible-01
                  :ARG1 (h / have-03
                        :ARG0 (e / element
                              :mod (e2 / each))
                        :ARG1 (p3 / pointer
                              :quant (m2 / many))))
            :ARG2 (p4 / pointer
                  :polarity -
                  :quant 2
                  :ARG1 (e3 / element
                        :ARG1-of (s2 / same-01)))))"
1571,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.",4,5,4.5,"# ::snt A Tree is a data structure with one or more data nodes, each of which contains some data. Each node itself can have a number of attached child nodes, creating the branched structure Trees are named for.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :consist-of (n / node
                  :quant (o / or
                        :op1 1
                        :op2 (m2 / more))
                  :ARG0-of (c / contain-01
                        :ARG1 (d2 / data
                              :quant (s2 / some)))))
      :snt2 (p / possible-01
            :ARG1 (h / have-03
                  :ARG0 (n2 / node
                        :mod (e / each))
                  :ARG1 (n3 / number
                        :quant-of (n4 / node
                              :ARG1-of (a / attach-01)
                              :mod (c2 / child))
                        :ARG0-of (c3 / create-01
                              :ARG1 (s3 / structure
                                    :ARG1-of (b / branch-01)
                                    :ARG2-of (n5 / name-01
                                          :ARG1 (t / tree))))))))"
1572,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children",4,5,4.5,"# ::snt a finite collection of nodes, where it starts with an element called the root, which has children, and its children have children until you get to the leaves which are the last elements and have to children
(c / collect-01
      :ARG1 (n / node)
      :mod (f / finite)
      :location-of (a / and
            :op1 (s / start-01
                  :ARG0 (c2 / collection
                        :ARG2 (e / element
                              :ARG1-of (c3 / call-01
                                    :ARG2 (r / root))
                              :ARG0-of (h / have-03
                                    :ARG1 (c4 / child))))
                  :op2 (h2 / have-03
                        :ARG0 (p / person
                              :ARG0-of (h3 / have-rel-role-91
                                    :ARG1 e
                                    :ARG2 (c5 / child)))
                        :ARG1 (c6 / child)
                        :time (u / until
                              :op1 (g / get-05
                                    :ARG0 (y / you)
                                    :ARG1 (l / leaf
                                          :ARG1-of (m / mean-01
                                                :ARG2 (e2 / element
                                                      :mod (l2 / last))
                                                :ARG1-of h2
                                                :ARG0 e2
                                                :ARG1 (c7 / child)))))))))"
1573,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A nonlinear, two-dimensional data structure.",0,4,2,"# ::snt A nonlinear, two-dimensional data structure.
(s / structure-01
      :ARG1 (d / data)
      :mod (l / linear
            :polarity -)
      :mod (d2 / dimension
            :quant 2))"
1574,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root,3,5,4,"# ::snt a finite set of one or more nodes such that there is a root node and all other nodes are split into trees of lesser value than the root
(s / set
      :mod (f / finite)
      :consist-of (o / or
            :op1 (n / node
                  :quant 1)
            :op2 (n2 / node
                  :quant (m / more)))
      :ARG0-of (c / cause-01
            :ARG1 (a / and
                  :op1 (n3 / node
                        :mod (r / root))
                  :op2 (s2 / split-01
                        :ARG1 (n4 / node
                              :mod (o2 / other)
                              :mod (a2 / all))
                        :ARG2 (t / tree
                              :ARG1-of (v / value-01
                                    :ARG2-of (h / have-degree-91
                                          :ARG3 (l / less)
                                          :ARG4 r)
                                    :ARG1-of h))))))"
1575,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.","A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree",5,5,5,"# ::snt A finite number of nodes such that there is one root node, each node has a certain number of children nodes, and each child is also a tree
(n / number
      :quant-of (n2 / node)
      :mod (f / finite)
      :ARG0-of (c / cause-01
            :ARG1 (a / and
                  :op1 (n3 / node
                        :quant 1
                        :mod (r / root))
                  :op2 (h / have-03
                        :ARG0 (n4 / node
                              :mod (e / each))
                        :ARG1 (n5 / number
                              :quant-of (n6 / node
                                    :mod (c2 / child))
                              :mod (c3 / certain)))
                  :op3 (t / tree
                        :domain c2
                        :mod e)
                  :mod (a2 / also))))"
1576,10.1,What is a tree?,"A collection of nodes, which has a special node called root, and the rest of the nodes are partitioned into one or more disjoint sets, each set being a tree.",A type of data structure in which each element is attached to one or more elements directly beneath it.,3,5,4,"# ::snt A type of data structure in which each element is attached to one or more elements directly beneath it.
(s / structure-01
      :ARG1 (d / data)
      :mod (t / type)
      :manner-of (a / attach-01
            :ARG1 (e / element
                  :mod (e2 / each))
            :ARG2 (e3 / element
                  :quant (o / or
                        :op1 1
                        :op2 (m / more)))
            :location (b / beneath
                  :op1 e
                  :ARG1-of (d2 / direct-02))))"
1577,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"Each level of a generation in the tree, some people do not count the root as a generation",4,4,4,"# ::snt Each level of a generation in the tree, some people do not count the root as a generation
(c / count-01
      :polarity -
      :ARG0 (p / person
            :mod (s / some))
      :ARG1 (r / root)
      :ARG2 (g / generation)
      :mod (l / level
            :mod (e / each)
            :part-of (g2 / generation
                  :location (t / tree))))"
1578,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.",4,5,4.5,"# ::snt The height of a tree is in terms of the levels of its nodes such that, if  the tree is empty its height is 0 otherwise its height is equal to the maximum level of its nodes.
(h / have-condition-91
      :ARG1 (e / equal-01
            :ARG1 (h2 / height
                  :poss (t / tree))
            :ARG2 (l / level
                  :mod (n / node
                        :poss t)))
      :ARG2 e
      :ARG1 (h3 / height
            :poss t)
      :ARG2 (l2 / level
            :mod (m / maximum)
            :poss t)
      :condition (e2 / empty
            :domain t))"
1579,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longest path from the root to a leaf.,5,5,5,"# ::snt The height of a tree is the number of nodes on the longest path from the root to a leaf.
(m / mean-01
      :ARG1 (h / high-02
            :ARG1 (t / tree))
      :ARG2 (n / number
            :quant-of (n2 / node
                  :location (p / path
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l / long-03
                                    :ARG1 p)
                              :ARG3 (m2 / most))
                        :source (r / root)
                        :destination (l2 / leaf)))))"
1580,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root of the tree to a leaf.,5,5,5,"# ::snt The number of nodes on the longest path from the root of the tree to a leaf.
(n / number
      :quant-of (n2 / node
            :location (p / path
                  :source (r / root
                        :part-of (t / tree))
                  :destination (l / leaf)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l2 / long-03
                              :ARG1 p)
                        :ARG3 (m / most)))))"
1581,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.,5,5,5,"# ::snt Height = the number of times you must progress down the levels of a tree to reach a leaf of the greatest distance from the root.
(e / equal-01
      :ARG1 (h / height)
      :ARG2 (n / number
            :frequency-of (o / obligate-01
                  :ARG1 (p / progress-01
                        :ARG0 (y / you)
                        :ARG2 (r / reach-01
                              :ARG0 y
                              :ARG1 (l / leaf
                                    :ARG1-of (d / distance-01
                                          :ARG2 (r2 / root)
                                          :ARG1-of (h2 / have-degree-91
                                                :ARG2 (g / great)
                                                :ARG3 (m / most)))))
                        :direction (d2 / down
                              :op1 (l2 / level
                                    :poss (t / tree)))))))"
1582,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the height of a tree is the length from the root to the furthest leaf,5,5,5,"# ::snt the height of a tree is the length from the root to the furthest leaf
(m / mean-01
      :ARG1 (h / high-02
            :ARG1 (t / tree))
      :ARG2 (d / distance-quantity
            :ARG3-of (r / range-01
                  :ARG4 (r2 / root)
                  :ARG5 (l / leaf
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (f / furthest)
                              :ARG3 (m2 / most))))))"
1583,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height is the number of generations (levels) from the root.,4,5,4.5,"# ::snt The height is the number of generations (levels) from the root.
(e / equal-01
      :ARG1 (h / height)
      :ARG2 (n / number
            :quant-of (g / generation
                  :source (r / root))
            :ARG1-of (m / mean-01
                  :ARG2 (l / level))))"
1584,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of levels between the root and the leaf farthest away from it.,5,5,5,"# ::snt The height of a tree is the number of levels between the root and the leaf farthest away from it.
(m / mean-01
      :ARG1 (h / high-02
            :ARG1 (t / tree))
      :ARG2 (n / number
            :quant-of (l / level
                  :location (b / between
                        :op1 (r / root)
                        :op2 (l2 / leaf))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (f / far)
                        :ARG3 (m2 / most)
                        :ARG5 (r2 / relative-position
                              :op1 t)))))"
1585,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,is the depth of its furthest leaf,4,5,4.5,"# ::snt is the depth of its furthest leaf
(d / depth
      :domain (l / leaf
            :poss (ii / it)
            :ARG1-of (h / have-degree-91
                  :ARG2 (f / furthest)
                  :ARG3 (m / most))))"
1586,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of nodes from root to leaf,3,4,3.5,"# ::snt the number of nodes from root to leaf
(n / number
      :quant-of (n2 / node)
      :source (r / root)
      :destination (l / leaf))"
1587,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the distance from the deepest leaf to the root,5,5,5,"# ::snt the distance from the deepest leaf to the root
(d / distance-quantity
      :quant-of (d2 / distance-01
            :ARG2 (r / root)
            :ARG3 (l / leaf
                  :ARG1-of (h / have-degree-91
                        :ARG2 (d3 / deep-02
                              :ARG1 r)
                        :ARG3 (m / most)))))"
1588,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of generations or levels of a tree,4,5,4.5,"# ::snt the number of generations or levels of a tree
(o / or
      :op1 (n / number
            :quant-of (g / generation))
      :op2 (l / level
            :poss (t / tree)))"
1589,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.",2,4,3,"# ::snt The intensity of the children. Say you begin with one node, Thats one height. Then you add two children to that node and then two children to each of those nodes and two children to each of THOSE nodes. Youre current height would be 4.
(m / multi-sentence
      :snt1 (ii / intensity
            :poss (c / child))
      :snt2 (s / say-01
            :ARG0 (y / you)
            :ARG1 (b / begin-01
                  :ARG0 y
                  :ARG2 (n / node
                        :quant 1)
                  :ARG1-of (m2 / mean-01
                        :ARG2 (h / height
                              :quant 1))))
      :snt3 (a / and
            :op1 (a2 / add-02
                  :ARG0 (y2 / you)
                  :ARG1 (c2 / child
                        :quant 2)
                  :ARG2 (n2 / node
                        :mod (t / that))
                  :time (t2 / then))
            :op2 (a3 / and
                  :op1 (a4 / add-02
                        :ARG0 y2
                        :ARG1 (c3 / child
                              :quant 2)
                        :ARG2 (n3 / node
                              :mod (e / each)
                              :mod (t3 / that))
                        :time (t4 / then))
                  :op2 (a5 / add-02
                        :ARG0 y2
                        :ARG1 (c4 / child
                              :quant 2)
                        :ARG2 (n4 / node
                              :mod (e2 / each)
                              :mod (e3 / each)))
                  :time (t5 / then)))
      :snt3 (h2 / height
            :quant 4
            :time (c5 / current)
            :poss y2))"
1590,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.",3,4,3.5,"# ::snt the number of levels of a tree, like a tree can have at minimum a depth of 3 and at most a height of 8 for 8 nodes.
(n / number
      :quant-of (l / level
            :poss (t / tree)
            :example (p / possible-01
                  :ARG1 (a / and
                        :op1 (h / have-03
                              :ARG0 t
                              :ARG1 (d / depth
                                    :quant 3
                                    :mod (m / minimum)))
                        :op2 (h2 / have-03
                              :ARG0 t
                              :ARG1 (h3 / height
                                    :quant 8
                                    :mod (a2 / at-most))
                              :beneficiary (n2 / node
                                    :quant 8))))))"
1591,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to the leaf.,5,5,5,"# ::snt The number of nodes on the longest path from the root to the leaf.
(n / number
      :quant-of (n2 / node
            :location (p / path
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 p)
                        :ARG3 (m / most))
                  :source (r / root)
                  :destination (l2 / leaf))))"
1592,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The height of a tree is the number of nodes on the longes path from the root to a leaf.,5,5,5,"# ::snt The height of a tree is the number of nodes on the longes path from the root to a leaf.
(h / high-02
      :ARG1 (t / tree)
      :ARG1-of (m / mean-01
            :ARG2 (n / number
                  :quant-of (n2 / node
                        :location (p / path
                              :mod (l / longes)
                              :source (r / root)
                              :destination (l2 / leaf))))))"
1593,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,is equal to the number of levels.  levels between the root node and the terminal nodes.,4,5,4.5,"# ::snt is equal to the number of levels.  levels between the root node and the terminal nodes.
(e / equal-01
      :ARG2 (n / number
            :quant-of (l / level))
      :ARG3 (l2 / level
            :location (b / between
                  :op1 (n2 / node
                        :mod (r / root))
                  :op2 (n3 / node
                        :mod (t / terminal)))))"
1594,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of generations or levels the tree has,4,5,4.5,"# ::snt the number of generations or levels the tree has
(o / or
      :op1 (n / number
            :quant-of (g / generation))
      :op2 (l / level)
      :domain (t / tree))"
1595,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,"The height of a tree is the depth of its subtrees, that is, how many layers deep it is.",4,5,4.5,"# ::snt The height of a tree is the depth of its subtrees, that is, how many layers deep it is.
(m / mean-01
      :ARG1 (h / height
            :poss (t / tree))
      :ARG2 (d / depth
            :poss (s / subtree
                  :poss t)
            :ARG1-of m
            :ARG2 (d2 / depth
                  :quant-of (l / layer
                        :ARG1-of (d3 / deep-02)))))"
1596,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,is the number of generations in the tree,4,5,4.5,"# ::snt is the number of generations in the tree
(n / number
      :quant-of (g / generation
            :location (t / tree)))"
1597,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The number of nodes on the longest path from the root to a leaf.,5,5,5,"# ::snt The number of nodes on the longest path from the root to a leaf.
(n / number
      :quant-of (n2 / node
            :location (p / path
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 p)
                        :ARG3 (m / most))
                  :source (r / root)
                  :destination (l2 / leaf))))"
1598,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the number of distinct levels of separation,3,5,4,"# ::snt the number of distinct levels of separation
(n / number
      :quant-of (l / level
            :mod (s / separate-01)
            :ARG1-of (d / distinct-02)))"
1599,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,the height of a tree is how many levels of nodes that it has,4,5,4.5,"# ::snt the height of a tree is how many levels of nodes that it has
(e / equal-01
      :ARG1 (h / high-02
            :ARG1 (t / tree))
      :ARG2 (n / number
            :quant-of (l / level
                  :consist-of (n2 / node)
                  :ARG1-of (h2 / have-03
                        :ARG0 t))))"
1600,10.2,What is the height of a tree?,The length of the longest path from the root to any of its leaves.,The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.,0,3,1.5,"# ::snt The connections between elements are called branches. Trees are often called inverted trees because they are normally drawn with the root at the top.
(m / multi-sentence
      :snt1 (c / call-01
            :ARG1 (c2 / connect-01
                  :ARG1 (e / element))
            :ARG2 (b / branch))
      :snt2 (c3 / call-01
            :ARG1 (t / tree)
            :ARG2 (t2 / tree
                  :mod (ii / inverted))
            :frequency (o / often)
            :ARG1-of (c4 / cause-01
                  :ARG0 (d / draw-02
                        :ARG1 t
                        :accompanier (r / root
                              :location (t3 / top))
                        :ARG1-of (n / normal-02)))))"
1601,10.3,What is a leaf?,A node that has no children.,A leaf is a child of a parent node that has no children nodes of its own.,5,5,5,"# ::snt A leaf is a child of a parent node that has no children nodes of its own.
(h / have-rel-role-91
      :ARG0 (l / leaf)
      :ARG1 (n / node
            :ARG0-of (h2 / have-rel-role-91
                  :ARG1 l
                  :ARG2 (p / parent))
            :ARG0-of (h3 / have-rel-role-91
                  :polarity -
                  :ARG1 n
                  :ARG2 (c / child))))"
1602,10.3,What is a leaf?,A node that has no children.,A leaf is a node with no children.,5,5,5,"# ::snt A leaf is a node with no children.
(n / node
      :domain (l / leaf)
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1603,10.3,What is a leaf?,A node that has no children.,A node with no children.,5,5,5,"# ::snt A node with no children.
(n / node
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1604,10.3,What is a leaf?,A node that has no children.,A tree node with no children.,5,5,5,"# ::snt A tree node with no children.
(h / have-03
      :polarity -
      :ARG0 (n / node
            :mod (t / tree))
      :ARG1 (c / child))"
1605,10.3,What is a leaf?,A node that has no children.,And end point of the tree... a node that does not have any children.,5,5,5,"# ::snt And end point of the tree... a node that does not have any children.
(a / and
      :op2 (p / point
            :mod (e / end)
            :part-of (t / tree)
            :domain (n / node
                  :ARG0-of (h / have-03
                        :polarity -
                        :ARG1 (c / child)))))"
1606,10.3,What is a leaf?,A node that has no children.,a node with no children.,5,5,5,"# ::snt a node with no children.
(n / node
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1607,10.3,What is a leaf?,A node that has no children.,A new item to the tree--a child,2,4,3,"# ::snt A new item to the tree--a child
(ii / item
      :ARG1-of (n / new-01)
      :location (t / tree)
      :domain (c / child))"
1608,10.3,What is a leaf?,A node that has no children.,"A leaf is a node with children, it is a terminating node.",0,4,2,"# ::snt A leaf is a node with children, it is a terminating node.
(c / contrast-01
      :ARG1 (n / node
            :domain (l / leaf)
            :consist-of (c2 / child))
      :ARG2 (n2 / node
            :ARG0-of (t / terminate-01)
            :domain l))"
1609,10.3,What is a leaf?,A node that has no children.,The node with degree 0.,3,5,4,"# ::snt The node with degree 0.
(n / node
      :ARG0-of (h / have-03
            :ARG1 (d / degree
                  :mod 0)))"
1610,10.3,What is a leaf?,A node that has no children.,the node with degree 0,3,5,4,"# ::snt the node with degree 0
(n / node
      :ARG0-of (h / have-03
            :ARG1 (d / degree
                  :mod 0)))"
1611,10.3,What is a leaf?,A node that has no children.,a leaf is a node with no children,5,5,5,"# ::snt a leaf is a node with no children
(n / node
      :domain (l / leaf)
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1612,10.3,What is a leaf?,A node that has no children.,the last child on any branch,4,5,4.5,"# ::snt the last child on any branch
(c / child
      :ord (o / ordinal-entity
            :value ""-1"")
      :location (b / branch
            :mod (a / any)))"
1613,10.3,What is a leaf?,A node that has no children.,The last value in the tree. A value with no children attatched.,5,5,5,"# ::snt The last value in the tree. A value with no children attatched.
(m / multi-sentence
      :snt1 (v / value
            :ord (o / ordinal-entity
                  :value -1)
            :location (t / tree))
      :snt2 (v2 / value
            :ARG1-of (a / attatch-01
                  :polarity -
                  :ARG2 (c / child))))"
1614,10.3,What is a leaf?,A node that has no children.,a node with no children.,5,5,5,"# ::snt a node with no children.
(n / node
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1615,10.3,What is a leaf?,A node that has no children.,A node with no children.,5,5,5,"# ::snt A node with no children.
(n / node
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1616,10.3,What is a leaf?,A node that has no children.,A leaf is a node with no children,5,5,5,"# ::snt A leaf is a node with no children
(n / node
      :domain (l / leaf)
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1617,10.3,What is a leaf?,A node that has no children.,a node with degree 0.  last node in the tree and furtherest away from the root.,3,5,4,"# ::snt a node with degree 0.  last node in the tree and furtherest away from the root.
(a / and
      :op1 (n / node
            :mod (d / degree
                  :value 0)
            :mod (l / last)
            :location (t / tree))
      :op2 (b / be-located-at-91
            :ARG1 n
            :ARG2 (a2 / away
                  :op1 (r / root)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f / far)
                        :ARG3 (m / most)))))"
1618,10.3,What is a leaf?,A node that has no children.,an endpoint on a tree that contains no pointers or pointers that are set to null,4,5,4.5,"# ::snt an endpoint on a tree that contains no pointers or pointers that are set to null
(o / or
      :op1 (e / endpoint
            :location (t / tree)
            :ARG0-of (c / contain-01
                  :ARG1 (p / pointer
                        :polarity -)))
      :op2 (p2 / pointer
            :ARG1-of (s / set-03
                  :ARG2 (n / null))))"
1619,10.3,What is a leaf?,A node that has no children.,A leaf is a node with no children.,5,5,5,"# ::snt A leaf is a node with no children.
(n / node
      :domain (l / leaf)
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1620,10.3,What is a leaf?,A node that has no children.,an element in a tree that has no children,5,5,5,"# ::snt an element in a tree that has no children
(e / element
      :part-of (t / tree
            :ARG0-of (h / have-03
                  :polarity -
                  :ARG1 (c / child))))"
1621,10.3,What is a leaf?,A node that has no children.,A node with no children.,5,5,5,"# ::snt A node with no children.
(n / node
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1622,10.3,What is a leaf?,A node that has no children.,a leaf is a node that has no children nodes,5,5,5,"# ::snt a leaf is a node that has no children nodes
(n / node
      :domain (l / leaf)
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (n2 / node
                  :mod (c / child))))"
1623,10.3,What is a leaf?,A node that has no children.,a leaf is a node with no children,5,5,5,"# ::snt a leaf is a node with no children
(n / node
      :domain (l / leaf)
      :ARG0-of (h / have-03
            :polarity -
            :ARG1 (c / child)))"
1624,10.3,What is a leaf?,A node that has no children.,"The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.",5,5,5,"# ::snt The elements at the very bottom of an inverted tree (that is, those that have no elements below them) are called leaves.
(c / call-01
      :ARG1 (e / element
            :location (b / bottom
                  :mod (v / very)
                  :part-of (t / tree
                        :ARG1-of (ii / invert-01)
                        :ARG1-of (m / mean-01
                              :ARG2 (t2 / that
                                    :ARG0-of (h / have-03
                                          :polarity -
                                          :ARG1 (e2 / element
                                                :location (b2 / below
                                                      :op1 t))))))))
      :ARG2 (l / leaf))"
1625,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.",4,5,4.5,"# ::snt A tree data structure in which each done has at most two children, typical called left and right nodes.  The right node is usually greater than the left node and the parent node.
(m / multi-sentence
      :snt1 (s / structure-01
            :ARG1 (d / data
                  :mod (t / tree))
            :consist-of (h / have-03
                  :ARG0 (d2 / do-02
                        :mod (e / each))
                  :ARG1 (c / child
                        :quant 2
                        :ARG1-of (c2 / call-01
                              :ARG2 (a / and
                                    :op1 (n / node
                                          :ARG1-of (l / left-19))
                                    :op2 (n2 / node
                                          :ARG1-of (r / right-08))))
                        :mod (a2 / at-most))))
      :snt2 (h2 / have-degree-91
            :ARG1 (n3 / node
                  :ARG1-of r))
      :ARG2 (g / great)
      :ARG3 (m2 / more)
      :ARG4 (a3 / and
            :op1 (n4 / node
                  :mod l))
      :op2 (n5 / node
            :mod (p / parent))
      :mod (u / usual))"
1626,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.",5,5,5,"# ::snt A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node can have no more than two children, a right and a left child.
(m / multi-sentence
      :snt1 (t / tree
            :mod (b / binary)
            :domain (s / set
                  :consist-of (n / node)
                  :ARG1-of (e / empty-02)
                  :ARG1-of (p / partition-01
                        :ARG2 (a / and
                              :op1 (n2 / node
                                    :mod (r / root))
                              :op2 (s2 / subset
                                    :quant (o / or
                                          :op1 1
                                          :op2 2)
                                    :ARG1-of (ii / include-91
                                          :ARG2 s))))))
      :snt2 (p2 / possible-01
            :ARG1 (h / have-03
                  :ARG0 (n3 / node
                        :mod (e2 / each))
                  :ARG1 (c / child
                        :quant (a2 / at-least
                              :op1 2)
                        :ARG1-of (m2 / mean-01
                              :ARG2 (a3 / and
                                    :op1 (c2 / child
                                          :ARG1-of (r2 / right-08))
                                    :op2 (c3 / child
                                          :ARG1-of (l / left-19))))))))"
1627,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5,5,5,"# ::snt A set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.
(m / multi-sentence
      :snt1 (o / or
            :op1 (s / set
                  :consist-of (n / node)
                  :ARG1-of (e / empty-02))
            :op2 (p / partition-01
                  :ARG1 s
                  :ARG2 (a / and
                        :op1 (n2 / node
                              :mod (r / root))
                        :op2 (s2 / subset
                              :quant (o2 / or
                                    :op1 1
                                    :op2 2))
                        :ARG1-of (s3 / subtree
                              :mod (b / binary)
                              :poss r))))
      :snt2 (h / have-03
            :ARG0 (n3 / node
                  :mod (e2 / each))
            :ARG1 (c / child
                  :quant 2
                  :mod (a2 / at-most))
            :ARG1-of (m2 / mean-01
                  :ARG2 (a3 / and
                        :op1 (c2 / child
                              :ARG1-of (l / left-19))
                        :op2 (c3 / child
                              :ARG1-of (r2 / right-08))))))"
1628,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.",5,5,5,"# ::snt A set of zero or more nodes, partitioned into a root node and two possibly empty sets that are binary trees. Thus, each node in a binary tree has at most two children, the left child and the right child.
(m / multi-sentence
      :snt1 (s / set
            :consist-of (o / or
                  :op1 (n / node
                        :quant (a / at-most
                              :op1 0))
                  :op2 (n2 / node
                        :quant (m2 / more)))
            :ARG1-of (p / partition-01
                  :ARG2 (a2 / and
                        :op1 (n3 / node
                              :mod (r / root))
                        :op2 (s2 / set
                              :quant 2
                              :ARG1-of (e / empty-02
                                    :ARG1-of (p2 / possible-01))))
                  :domain (t / tree
                        :mod (b / binary))))
      :snt2 (c / cause-01
            :ARG1 (h / have-03
                  :ARG0 (n4 / node
                        :mod (e2 / each)
                        :part-of (t2 / tree
                              :mod (b2 / binary)))
                  :ARG1 (a3 / and
                        :op1 (c2 / child
                              :ARG1-of (l / left-19))
                        :op2 (c3 / child
                              :ARG1-of (r2 / right-08)))
                  :quant (a4 / at-most
                        :op1 2))))"
1629,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A tree in which each parent has a maximum of 2 children.,5,5,5,"# ::snt A tree in which each parent has a maximum of 2 children.
(t / tree
      :location-of (h / have-03
            :ARG0 (p / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG2 (p2 / parent))
                  :mod (e / each))
            :ARG1 (p3 / person
                  :quant 2
                  :ARG0-of (h3 / have-rel-role-91
                        :ARG1 p
                        :ARG2 (c / child))
                  :ARG1-of (m / maximum-01))))"
1630,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where each node has at most 2 children.,5,5,5,"# ::snt a tree where each node has at most 2 children.
(t / tree
      :location-of (h / have-03
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (c / child
                  :quant (a / at-most
                        :op1 2))))"
1631,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree with up to two children or a right subtree and/or a left subtree,5,5,5,"# ::snt a tree with up to two children or a right subtree and/or a left subtree
(o / or
      :op1 (t / tree
            :ARG0-of (h / have-03
                  :ARG1 (c / child
                        :quant (u / up-to
                              :op1 2))))
      :op2 (a / and-or
            :op1 (s / subtree
                  :ARG1-of (r / right-04))
            :op2 (s2 / subtree
                  :ARG1-of (l / left-19))))"
1632,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.",5,5,5,"# ::snt A binary tree is a tree in which all nodes have a maximum of two degrees, or can only have two children each.
(t / tree
      :mod (b / binary)
      :domain (t2 / tree
            :location-of (o / or
                  :op1 (h / have-03
                        :ARG0 (n / node
                              :mod (a / all))
                        :ARG1 (m / maximum
                              :quant-of (t3 / temperature-quantity
                                    :quant 2
                                    :unit (d / degree))))
                  :op2 (p / possible-01
                        :ARG1 (h2 / have-03
                              :ARG0 n
                              :ARG1 (p2 / person
                                    :quant 2
                                    :ARG0-of (h3 / have-rel-role-91
                                          :ARG1 n
                                          :ARG2 (c / child))
                                    :mod (e / each)
                                    :mod (o2 / only)))))))"
1633,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a binary tree is a tree data structure in which each node has at most two children.,5,5,5,"# ::snt a binary tree is a tree data structure in which each node has at most two children.
(s / structure-01
      :ARG1 (t / tree
            :mod (b / binary))
      :ARG2 (d / data
            :mod t)
      :location-of (h / have-03
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (c / child
                  :quant (a / at-most
                        :op1 2))))"
1634,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"a tree with only 2 joints, left and right",4,5,4.5,"# ::snt a tree with only 2 joints, left and right
(t / tree
      :ARG0-of (h / have-03
            :ARG1 (a / and
                  :op1 (j / joint
                        :quant 2
                        :ARG1-of (l / left-19))
                  :op2 (j2 / joint
                        :quant 2
                        :mod (r / right))
                  :mod (o / only))))"
1635,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A binary search tree is a tree that also has the condition that each node may have at maximum 2 children,4,5,4.5,"# ::snt A binary search tree is a tree that also has the condition that each node may have at maximum 2 children
(t / tree
      :domain (t2 / tree
            :ARG0-of (s / search-01
                  :mod (b / binary)))
      :ARG0-of (h / have-03
            :ARG1 (c / condition-01
                  :ARG1 (p / possible-01
                        :ARG1 (h2 / have-03
                              :ARG0 (n / node
                                    :mod (e / each))
                              :ARG1 (c2 / child
                                    :quant 2
                                    :mod (m / maximum))))
                  :mod (a / also))))"
1636,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where each parent can have at max two children.,5,5,5,"# ::snt a tree where each parent can have at max two children.
(t / tree
      :location-of (p / possible-01
            :ARG1 (h / have-03
                  :ARG0 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG2 (p3 / parent))
                        :mod (e / each))
                  :ARG1 (p4 / person
                        :quant 2
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 p2
                              :ARG2 (c / child))
                        :mod (m / max)))))"
1637,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree,1,3,2,"# ::snt a list of numbers that are ordered compared to how they compare to the other numbers already added in the tree
(l / list
      :consist-of (n / number
            :ARG1-of (o / order-02)
            :ARG1-of (c / compare-01
                  :ARG2 (t / thing
                        :manner-of (c2 / compare-01
                              :ARG1 n
                              :ARG2 (n2 / number
                                    :mod (o2 / other)
                                    :ARG1-of (a / add-02
                                          :ARG2 (t2 / tree)
                                          :time (a2 / already))))))))"
1638,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where each node can have at most 2 children.,5,5,5,"# ::snt a tree where each node can have at most 2 children.
(t / tree
      :location-of (p / possible-01
            :ARG1 (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (c / child
                        :quant (a / at-most
                              :op1 2)))))"
1639,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.",5,5,5,"# ::snt Starting at the root node, it branches off into one or two subsets that are binary subtrees of the root.  Each node has at most two children, the left child and the right child.
(m / multi-sentence
      :snt1 (b / branch-off-02
            :ARG1 (ii / it)
            :ARG2 (s / subset
                  :quant (o / or
                        :op1 1
                        :op2 2)
                  :ARG1-of (m2 / mean-01
                        :ARG2 (s2 / subtree
                              :mod (b2 / binary)
                              :part-of (r / root))))
            :ARG1-of (s3 / start-01
                  :location r))
      :snt2 (h / have-03
            :ARG0 (n / node
                  :mod (e / each))
            :ARG1 (c / child
                  :quant 2
                  :mod (a / at-most))
            :ARG1-of (m3 / mean-01
                  :ARG2 (a2 / and
                        :op1 (c2 / child
                              :ARG1-of (l / left-19))
                        :op2 (c3 / child
                              :ARG1-of (r2 / right-08))))))"
1640,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.",5,5,5,"# ::snt A binary tree is a set of nodes that is either empty or partitioned into a root node and one or two subsets that are binary subtrees of the root. Each node has at most two children, the left child and the right child.
(m / multi-sentence
      :snt1 (t / tree
            :mod (b / binary)
            :domain (s / set
                  :consist-of (n / node)
                  :ARG1-of (e / empty-02)
                  :ARG1-of (p / partition-01
                        :ARG2 (a / and
                              :op1 (n2 / node
                                    :mod (r / root))
                              :op2 (s2 / subset
                                    :quant (o / or
                                          :op1 1
                                          :op2 2))
                              :ARG1-of (ii / include-91
                                    :ARG2 s)))))
      :snt2 (h / have-03
            :ARG0 (n3 / node
                  :mod (e2 / each))
            :ARG1 (a2 / and
                  :op1 (c / child
                        :ARG1-of (l / left-19))
                  :op2 (c2 / child
                        :ARG1-of (r2 / right-08)))
            :quant (a3 / at-most
                  :op1 2)))"
1641,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree that has a maximum of 2 children per node,5,5,5,"# ::snt a tree that has a maximum of 2 children per node
(t / tree
      :ARG0-of (h / have-03
            :ARG1 (c / child
                  :quant 2
                  :ARG1-of (m / maximum-01)
                  :ARG1-of (r / rate-entity-91
                        :ARG2 (n / node)))))"
1642,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree with elements that can contain at most two pointers,5,5,5,"# ::snt a tree with elements that can contain at most two pointers
(t / tree
      :consist-of (e / element
            :ARG0-of (c / contain-01
                  :ARG1 (p / pointer
                        :quant (a / at-most
                              :op1 2))
                  :ARG1-of (p2 / possible-01))))"
1643,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A binary tree can have only two children for each node.,5,5,5,"# ::snt A binary tree can have only two children for each node.
(p / possible-01
      :ARG1 (h / have-03
            :ARG0 (t / tree
                  :mod (b / binary))
            :ARG1 (c / child
                  :quant 2
                  :mod (o / only)
                  :beneficiary (n / node
                        :mod (e / each)))))"
1644,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a tree where every parent has only two children,4,5,4.5,"# ::snt a tree where every parent has only two children
(t / tree
      :location-of (h / have-03
            :ARG0 (p / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG2 (p2 / parent))
                  :mod (e / every))
            :ARG1 (p3 / person
                  :quant 2
                  :ARG0-of (h3 / have-rel-role-91
                        :ARG1 p
                        :ARG2 (c / child))
                  :mod (o / only))))"
1645,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A tree where every node has no more than two children,5,5,5,"# ::snt A tree where every node has no more than two children
(t / tree
      :location-of (h / have-03
            :ARG0 (n / node
                  :mod (e / every))
            :ARG1 (c / child
                  :quant (a / at-least
                        :op1 2))))"
1646,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,"a binary tree is a special search tree where each node has either 2, 1, or 0 children",4,5,4.5,"# ::snt a binary tree is a special search tree where each node has either 2, 1, or 0 children
(t / tree
      :mod (b / binary)
      :domain (t2 / tree
            :purpose (s / search-01)
            :ARG1-of (s2 / special-02)
            :location-of (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (o / or
                        :op1 (c / child
                              :quant 2)
                        :op2 (c2 / child
                              :quant 1)))))"
1647,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,a binary tree is a special type of tree where each node can only have at maximum 2 children,5,5,5,"# ::snt a binary tree is a special type of tree where each node can only have at maximum 2 children
(t / tree
      :mod (b / binary)
      :mod (t2 / type
            :ARG1-of (s / special-02))
      :location-of (p / possible-01
            :ARG1 (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (c / child
                        :quant 2
                        :mod (m / maximum))
                  :mod (o / only))))"
1648,10.4,What is a binary tree?,A tree for which the maximum number of children per node is two.,A binary tree is a special type of inverted tree in which each element has only two branches below it.,4,5,4.5,"# ::snt A binary tree is a special type of inverted tree in which each element has only two branches below it.
(t / tree
      :mod (b / binary)
      :mod (t2 / type
            :ARG1-of (s / special-02)
            :mod (t3 / tree
                  :ARG1-of (ii / invert-01)
                  :consist-of (h / have-03
                        :ARG0 (e / element
                              :mod (e2 / each))
                        :ARG1 (b2 / branch
                              :quant 2
                              :mod (o / only)
                              :location (b3 / below
                                    :op1 e))))))"
1649,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.",5,5,5,"# ::snt A tree data structure where each node has a value, where the total order is defined on these values.  the left subtree contains only values less than the parent node, and vice versa for the right subtree.
(m / multi-sentence
      :snt1 (s / structure-01
            :ARG1 (d / data
                  :mod (t / tree))
            :location-of (a / and
                  :op1 (h / have-03
                        :ARG0 (n / node
                              :mod (e / each))
                        :ARG1 (v / value))
                  :op2 (d2 / define-01
                        :ARG1 (o / order
                              :mod (t2 / total))
                        :ARG2 (v2 / value
                              :mod (t3 / this)))))
      :snt2 (a2 / and
            :op1 (c / contain-01
                  :ARG0 (s2 / subtree
                        :ARG1-of (l / left-19))
                  :ARG1 (v3 / value
                        :ARG1-of (h2 / have-quant-91
                              :ARG3 (l2 / less)
                              :ARG4 (n2 / node
                                    :ARG0-of (h3 / have-rel-role-91
                                          :ARG2 (p / parent))))
                        :mod (o2 / only)))
            :op2 (a3 / and
                  :op1 (ii / inverse)
                  :op2 (c2 / contain-01
                        :ARG0 (s3 / subtree
                              :ARG1-of (r / right-08))
                        :ARG1 v2))))"
1650,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.,5,5,5,"# ::snt A binary search tree is a binary tree where the value in any node 'n' is greater than the value in every node in n's left subtree but less than every node in n's right subtree.
(t / tree
      :mod (s / search-01
            :mod (b / binary))
      :domain (t2 / tree
            :mod (b2 / binary)
            :location-of (c / contrast-01
                  :ARG1 (h / have-degree-91
                        :ARG1 (v / value
                              :location (n / node
                                    :mod (a / any)
                                    :mod (s2 / string-entity
                                          :value ""n"")))
                        :ARG2 (g / great)
                        :ARG3 (m / more)
                        :ARG4 (v2 / value
                              :location (n2 / node
                                    :mod (e / every)
                                    :part-of (s3 / subtree
                                          :ARG1-of (l / left-19)
                                          :poss (s4 / string-entity
                                                :value ""n"")))))
                  :ARG2 (h2 / have-quant-91
                        :ARG1 v2
                        :ARG3 (l2 / less)
                        :ARG4 (v3 / value
                              :location (e2 / every)
                              :part-of (s5 / subtree
                                    :ARG1-of (r / right-04)
                                    :poss (s6 / string-entity)))))))"
1651,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.",5,5,5,"# ::snt A binary tree where the value in any node n is greater than the value in every node in n's left subtree, but less than the value of every node in n's right subtree.
(t / tree
      :mod (b / binary)
      :location-of (c / contrast-01
            :ARG1 (h / have-degree-91
                  :ARG1 (v / value
                        :location (n / node
                              :mod (a / any)
                              :mod (s / string-entity
                                    :value ""n"")))
                  :ARG2 (g / great)
                  :ARG3 (m / more)
                  :ARG4 (v2 / value
                        :location (n2 / node
                              :mod (e / every)
                              :part-of (s2 / subtree
                                    :ARG1-of (l / left-19)
                                    :poss s))))
            :ARG2 (l2 / less-than
                  :op1 (v3 / value
                        :location (n3 / node
                              :mod e
                              :part-of (s3 / subtree
                                    :ARG1-of (r / right-04)
                                    :poss (s4 / string-entity)))))))"
1652,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.",5,5,5,"# ::snt A binary tree where the search key in any node n is greater than the search key in any node in n's left subtree, but less than the search key in any node in n's right subtree.
(t / tree
      :mod (b / binary)
      :location-of (c / contrast-01
            :ARG1 (h / have-degree-91
                  :ARG1 (k / key
                        :purpose (s / search-01)
                        :location (n / node
                              :mod (a / any)
                              :part-of (s2 / subtree
                                    :ARG1-of (l / left-19))))
                  :ARG2 (g / great)
                  :ARG3 (m / more)
                  :ARG4 (k2 / key
                        :purpose (s3 / search-01)
                        :location (n2 / node
                              :mod (a2 / any)
                              :part-of (s4 / subtree
                                    :ARG1-of (r / right-08)
                                    :poss (n3 / node
                                          :mod (a3 / any))))))
            :ARG2 (l2 / less
                  :domain k2)))"
1653,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. ",5,5,5,"# ::snt A tree which is split based on values. This makes it very easy to search. One can compare the desired value to the root, and if the root is greater than, we search the left side of the tree, if it is less than, we search the right side... and do the same thing recursively. 
(m / multi-sentence
      :snt1 (t / tree
            :ARG1-of (s / split-01
                  :ARG1-of (b / base-02
                        :ARG2 (v / value))))
      :snt2 (m2 / make-02
            :ARG0 (t2 / this)
            :ARG1 (e / easy-05
                  :ARG1 (s2 / search-01)
                  :degree (v2 / very)))
      :snt3 (a / and
            :op1 (p / possible-01
                  :ARG1 (c / compare-01
                        :ARG0 (o / one)
                        :ARG1 (v3 / value
                              :ARG1-of (d / desire-01))
                        :ARG2 (r / root)))
            :op2 (a2 / and
                  :op1 (s3 / search-01
                        :ARG0 (w / we)
                        :ARG1 (s4 / side
                              :ARG1-of (l / left-19)
                              :part-of (t3 / tree))
                        :condition (h / have-degree-91
                              :ARG1 v3
                              :ARG2 (g / great)
                              :ARG3 (m3 / more)
                              :ARG4 r)))
            :op2 (s5 / search-01
                  :ARG0 w
                  :ARG1 (s6 / side
                        :ARG1-of (r2 / right-04))
                  :condition (h2 / have-degree-91
                        :ARG1 v3
                        :ARG2 (l2 / less)
                        :ARG3 (e2 / equal))))
      :op3 (d2 / do-02
            :ARG0 w
            :ARG1 (t4 / thing
                  :ARG1-of (s7 / same-01))
            :manner (r3 / recursive)))"
1654,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.,4,5,4.5,"# ::snt a tree where each node has at most two nodes and the node on the left is less than the root and the node on the right is greater than the root.
(t / tree
      :location-of (a / and
            :op1 (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (n2 / node
                        :quant 2
                        :mod (a2 / at-most)))
            :op2 (h2 / have-degree-91
                  :ARG1 (n3 / node
                        :location (l / left-19))
                  :ARG2 (l2 / less)
                  :ARG3 (r / root))
            :op3 (h3 / have-degree-91
                  :ARG1 (n4 / node
                        :location (r2 / right))
                  :ARG2 (g / great)
                  :ARG3 (m / more)
                  :ARG4 r)))"
1655,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value,5,3,4,"# ::snt a special binary tree that has a rule that all the subtrees on the right are smaller than the node value and all the subtrees on the left are larger than the node value
(t / tree
      :mod (b / binary)
      :ARG1-of (s / special-02)
      :ARG0-of (h / have-03
            :ARG1 (r / rule
                  :topic (a / and
                        :op1 (h2 / have-degree-91
                              :ARG1 (s2 / subtree
                                    :mod (a2 / all)
                                    :location (r2 / right-08))
                              :ARG2 (s3 / small)
                              :ARG3 (m / more)
                              :ARG4 (v / value
                                    :mod (n / node)))
                        :op2 (h3 / have-degree-91
                              :ARG1 (s4 / subtree
                                    :mod (a3 / all)
                                    :location (l / left-19))
                              :ARG2 (l2 / large)
                              :ARG3 (m2 / more)
                              :ARG4 (v2 / value
                                    :mod (n2 / node)))))))"
1656,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.",3,4,3.5,"# ::snt Binary search trees are similar to binary trees, but have been implemented to organize data in a specific way for later searching.
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (t / tree
                  :purpose (s / search-01
                        :mod (b / binary)))
            :ARG2 (t2 / tree
                  :purpose (s2 / search-01
                        :mod (b2 / binary))))
      :ARG2 (ii / implement-01
            :ARG1 t
            :purpose (o / organize-01
                  :ARG0 t
                  :ARG1 (d / data)
                  :manner (w / way
                        :ARG1-of (s3 / specific-02))
                  :purpose (s4 / search-01
                        :time (a / after
                              :op1 t2)))))"
1657,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.",5,5,5,"# ::snt it is a binary tree where each node has a value, a total order is defined on these values, the left subtree of a node contains only values less than the node's value, and the right subtree of a node contains only values greater than or equal to the node's value.
(t / tree
      :mod (b / binary)
      :domain (ii / it)
      :location-of (a / and
            :op1 (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (v / value))
            :op2 (d / define-01
                  :ARG1 (o / order
                        :mod (t2 / total))
                  :ARG2 (v2 / value
                        :mod (t3 / this)))
            :op3 a
            :op1 (c / contain-01
                  :ARG0 (s / subtree
                        :ARG1-of (l / left-19)
                        :poss n))
            :ARG1 (v3 / value
                  :mod (o2 / only)
                  :ARG1-of (h2 / have-quant-91
                        :ARG3 (l2 / less)
                        :ARG4 (v4 / value
                              :poss (n2 / node)))))
      :op2 (c2 / contain-01
            :ARG0 (s2 / subtree
                  :ARG1-of (r / right-08)
                  :poss (n3 / node))
            :ARG1 (v5 / value
                  :mod (o3 / only)
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (g / great)
                        :ARG3 (m / more)
                        :ARG4 (v6 / value
                              :ARG1-of (e2 / equal-01)
                              :ARG2-of e2)))))"
1658,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary tree with the data organized in a specific arangment,2,3,2.5,"# ::snt A binary tree with the data organized in a specific arangment
(t / tree
      :mod (b / binary)
      :ARG0-of (o / organize-01
            :ARG1 (d / data)
            :manner (a / arrangement
                  :ARG1-of (s / specific-02))))"
1659,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.",4,5,4.5,"# ::snt A binary search tree is a tree that also has the condition that each node may have at maximum 2 children and where the input data is compared to the data in the tree starting with the root. If the value is smaller than the root it traverses left, if it is larger it traverses right until it becomes a leaf.
(m / multi-sentence
      :snt1 (t / tree
            :domain (t2 / tree
                  :ARG0-of (s / search-01
                        :mod (b / binary)))
            :ARG0-of (h / have-03
                  :ARG1 (a / and
                        :op1 (c / condition-01
                              :ARG1 (p / possible-01
                                    :ARG1 (h2 / have-03
                                          :ARG0 (n / node
                                                :mod (e / each))
                                          :ARG1 (c2 / child
                                                :quant 2
                                                :mod (m2 / maximum)))))
                        :op2 (c3 / compare-01
                              :ARG1 (d / data
                                    :mod (ii / input))
                              :ARG2 (d2 / data
                                    :location t2
                                    :ARG0-of (s2 / start-01
                                          :ARG1 (r / root))))))
            :mod (a2 / also))
      :snt2 (a3 / and
            :op1 (t3 / traverse-01
                  :ARG0 (v / value)
                  :direction (l / left))
            :op2 (t4 / traverse-01
                  :ARG0 v
                  :direction (r2 / right)
                  :condition (h3 / have-degree-91
                        :ARG1 v
                        :ARG2 (l2 / large)
                        :ARG3 (m3 / more)
                        :ARG4 r)
                  :time (u / until
                        :op1 (b2 / become-01
                              :ARG1 v
                              :ARG2 (l3 / leaf))))))"
1660,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a binary tree in which the data is in order from left to right.,4,4,4,"# ::snt a binary tree in which the data is in order from left to right.
(t / tree
      :mod (b / binary)
      :location-of (o / order-03
            :ARG1 (d / data)
            :ARG2 (f / from
                  :op1 (l / left-19)
                  :op2 (r / right-19))))"
1661,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.,3,4,3.5,"# ::snt a tree that is set up so that it can be easily searched for numbers based on the location compared to the previous nodes.
(t / tree
      :ARG1-of (s / set-up-03
            :purpose (p / possible-01
                  :ARG1 (s2 / search-01
                        :ARG1 t
                        :ARG2 (n / number)
                        :ARG1-of (e / easy-05)
                        :ARG1-of (b / base-02
                              :ARG2 (l / location
                                    :ARG1-of (c / compare-01
                                          :ARG2 (n2 / node
                                                :time (p2 / previous)))))))))"
1662,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.",5,5,5,"# ::snt a binary tree where the children are ordered such that the right side is greater than the current node, and the left is less than or equal the current node.
(t / tree
      :mod (b / binary)
      :location-of (o / order-02
            :ARG1 (c / child)
            :ARG2 (a / and
                  :op1 (h / have-degree-91
                        :ARG1 (s / side
                              :ARG1-of (r / right-04))
                        :ARG2 (g / great)
                        :ARG3 (m / more)
                        :ARG4 (n / node
                              :time (c2 / current)))
                  :op2 (h2 / have-degree-91
                        :ARG1 (s2 / side
                              :ARG1-of (l / left-19))
                        :ARG2 (o2 / or
                              :op1 (l2 / less)
                              :op2 (e / equal-01
                                    :ARG1 s2
                                    :ARG2 (n2 / node)))))))"
1663,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.",5,5,5,"# ::snt A binary tree where the value in any node n is greater than the value in every node n's left subtree, but less than every value in n's right subtree.
(t / tree
      :mod (b / binary)
      :location-of (c / contrast-01
            :ARG1 (h / have-degree-91
                  :ARG1 (v / value
                        :location (n / node
                              :quant (a / any)))
                  :ARG2 (g / great)
                  :ARG3 (m / more)
                  :ARG4 (v2 / value
                        :location (s / subtree
                              :ARG1-of (l / left-19)
                              :poss (n2 / node
                                    :quant (e / every)))))
            :ARG2 (h2 / have-quant-91
                  :ARG1 v2
                  :ARG3 (l2 / less)
                  :ARG4 (v3 / value
                        :location (s2 / subtree
                              :ARG1-of (r / right-04)
                              :poss n2)))))"
1664,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.,1,4,2.5,"# ::snt A binary search tree is a finite set of nodes that is either empty or consits of a root and two disjoint binary trees call the left and right subtrees.
(a / and
      :op1 (s / set
            :mod (f / finite)
            :consist-of (n / node)
            :ARG1-of (e / empty-02)
            :ARG1-of (c / consist-01
                  :ARG2 (r / root))
            :domain (t / tree
                  :mod (s2 / search-01)
                  :mod (b / binary)))
      :op2 (c2 / call-01
            :ARG0 (t2 / tree
                  :quant 2
                  :mod (b2 / binary)
                  :ARG1-of (j / join-01
                        :polarity -))
            :ARG1 (a2 / and
                  :op1 (s3 / subtree
                        :ARG1-of (l / left-19))
                  :op2 (s4 / subtree
                        :ARG1-of (r2 / right-04)))))"
1665,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values,5,5,5,"# ::snt it is similar to a binary tree.  The keys in a nonempty left subtree (right subtree) are smaller (larger) than the key in the root of subtree.  the values in all nodes in the left subtree of a node are less than             the node value  the values in all nodes in the right subtree of a node are greater    than the node values
(m / multi-sentence
      :snt1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (t / tree
                  :mod (b / binary)))
      :snt2 (a / and
            :op1 (h / have-degree-91
                  :ARG1 (k / key
                        :location (s / subtree
                              :ARG1-of (e / empty-02
                                    :polarity -)
                              :mod (r2 / right)))
                  :ARG2 (s2 / small)
                  :ARG3 (m2 / more)
                  :ARG4 (k2 / key
                        :location (r3 / root
                              :part-of (s3 / subtree))))
            :op2 (h2 / have-degree-91
                  :ARG1 k
                  :ARG2 (l / large)
                  :ARG3 (m3 / more)
                  :ARG4 (k3 / key
                        :location r3)))
      :snt2 (a2 / and
            :op1 (l2 / less)
            :ARG2 (v / value
                  :location (n / node
                        :mod (a3 / all)
                        :location s3
                        :mod (r4 / right))))
      :op2 h2
      :ARG1 (v2 / value
            :location (n2 / node
                  :mod (a4 / all)))
      :ARG2 (g / great)
      :ARG3 (m4 / more)
      :ARG4 (v3 / value
            :location (n3 / node)))"
1666,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted",5,4,4.5,"# ::snt a set of numbers arranged by links. each node can contain two pointers to other elements. each node to the left of the parent is smaller and each node to the right is larger. recursive implementation implies that if traversed in order, the output would be sorted
(m / multi-sentence
      :snt1 (s / set
            :consist-of (n / number)
            :ARG1-of (a / arrange-01
                  :manner (l / link)))
      :snt2 (p / possible-01
            :ARG1 (c / contain-01
                  :ARG0 (n2 / node
                        :mod (e / each))
                  :ARG1 (p2 / pointer
                        :quant 2
                        :destination (e2 / element
                              :mod (o / other)))))
      :snt3 (a2 / and
            :op1 (h / have-degree-91
                  :ARG1 (n3 / node
                        :mod (e3 / each)
                        :location (l2 / left-19
                              :ARG1 (p3 / parent)))
                  :ARG2 (s2 / small)
                  :ARG3 (m2 / more))
            :op2 (h2 / have-degree-91
                  :ARG1 (n4 / node
                        :mod (e4 / each)
                        :location (r / right-08))
                  :ARG2 (l3 / large)
                  :ARG3 (m3 / more)))
      :snt3 (ii / imply-01
            :ARG0 (ii2 / implement-01
                  :manner (r2 / recursive))
            :ARG1 (s3 / sort-01
                  :ARG1 (o2 / output)
                  :condition (t / traverse-01
                        :manner (o3 / order)))))"
1667,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.",5,5,5,"# ::snt A binary search tree is a special binary tree arranged such that every left child node contains a value less than its parent, and every right child node contains a value greater its parent.
(t / tree
      :ARG1-of (s / special-02)
      :mod (b / binary)
      :ARG1-of (a / arrange-01
            :ARG2 (a2 / and
                  :op1 (c / contain-01
                        :ARG0 (n / node
                              :mod (c2 / child
                                    :ARG1-of (l / left-19))
                              :mod (e / every))
                        :ARG1 (v / value
                              :ARG1-of (h / have-quant-91
                                    :ARG3 (l2 / less)
                                    :ARG4 (v2 / value
                                          :ARG1-of (h2 / have-degree-91
                                                :ARG2 (g / great)
                                                :ARG3 (m / more)
                                                :ARG4 (v3 / value
                                                      :poss (p / person
                                                            :ARG0-of (h3 / have-rel-role-91
                                                                  :ARG1 c2
                                                                  :ARG2 (p2 / parent)))))))))
                  :op2 (c3 / contain-01
                        :ARG0 (n2 / node
                              :mod (c4 / child
                                    :ARG1-of (r / right-08))
                              :mod (e2 / every)
                              :ARG1-of c3)))))"
1668,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.",5,5,5,"# ::snt a binary tree with a special organization of data. where the left child of the element is less than it, and the right child is larger than it.
(m / multi-sentence
      :snt1 (t / tree
            :mod (b / binary)
            :ARG0-of (o / organize-01
                  :ARG1 (d / data)
                  :ARG1-of (s / special-02)))
      :snt2 (a / and
            :op1 (h / have-quant-91
                  :ARG1 (c / child
                        :ARG1-of (l / left-19)
                        :part-of (e / element))
                  :ARG3 (l2 / less)
                  :ARG4 e)
            :op2 (h2 / have-quant-91
                  :ARG1 (c2 / child
                        :ARG1-of (r / right-08))
                  :ARG2 (l3 / large)
                  :ARG3 (m2 / more)
                  :ARG4 e)))"
1669,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.,5,5,5,"# ::snt A tree in which the smaller values are located on the left of a parent node and the larger values are located on the right of the parent node.
(t / tree
      :location-of (a / and
            :op1 (b / be-located-at-91
                  :ARG1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m / more)))
                  :ARG2 (l / left-19
                        :ARG1 (n / node
                              :mod (p / parent))))
            :op2 (b2 / be-located-at-91
                  :ARG1 (v2 / value
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l2 / large)
                              :ARG3 (m2 / more)))
                  :ARG2 (r / right-04
                        :ARG1 v2))))"
1670,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"a binary search tree is a special tree in which each node has at most two children, labeled left child and right child",1,4,2.5,"# ::snt a binary search tree is a special tree in which each node has at most two children, labeled left child and right child
(t / tree
      :ARG1-of (s / special-02)
      :domain (t2 / tree
            :ARG0-of (s2 / search-01
                  :mod (b / binary))
            :location-of (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (c / child
                        :quant 2
                        :mod (a / at-most)
                        :ARG1-of (l / label-01
                              :ARG2 (a2 / and
                                    :op1 (c2 / child
                                          :ARG1-of (l2 / left-19))
                                    :op2 (c3 / child
                                          :ARG1-of (r / right-04))))))))"
1671,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.",5,5,5,"# ::snt it is a binary tree where each node has a unique key, the left child of a node has only values less than that node, and the right child of each node has higher values than that node.
(t / tree
      :mod (b / binary)
      :location-of (a / and
            :op1 (h / have-03
                  :ARG0 (n / node
                        :mod (e / each))
                  :ARG1 (k / key
                        :ARG1-of (u / unique-01)))
            :op2 (h2 / have-03
                  :ARG0 (c / child
                        :ARG1-of (l / left-19)
                        :poss (n2 / node))
                  :ARG1 (v / value
                        :ARG1-of (h3 / have-quant-91
                              :ARG3 (l2 / less)
                              :ARG4 (v2 / value
                                    :poss (n3 / node
                                          :mod (t2 / that)))
                              :mod (o / only))))
            :op3 h2
            :ARG0 (c2 / child
                  :ARG1-of (r / right-08)
                  :poss (n4 / node))
            :ARG1 (v3 / value
                  :ARG1-of (h4 / have-degree-91
                        :ARG2 (h5 / high-02)
                        :ARG3 (m / more)
                        :ARG4 n4))))"
1672,10.5,What is a binary search tree?,A binary tree that has the property that for any node the left child is smaller than the parent which in turn is smaller than the right child.,"Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.",2,3,2.5,"# ::snt Binary search trees are a fundamental data structure used to construct more abstract data structures such as sets, multisets, and associative arrays.
(s / structure
      :mod (f / fundamental)
      :domain (t / tree
            :mod (s2 / search-01)
            :mod (b / binary))
      :ARG1-of (u / use-01
            :ARG2 (c / construct-01
                  :ARG1 (s3 / structure
                        :mod (d / data)
                        :example (a / and
                              :op1 (s4 / set)
                              :op2 (m / multiset)
                              :op3 (a2 / array
                                    :ARG1-of (a3 / associate-01)))
                        :ARG1-of (h / have-degree-91
                              :ARG2 (a4 / abstract)
                              :ARG3 (m2 / more))))))"
1673,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).",5,5,5,"# ::snt For every node in the binary tree we first visit its left sub-tree (if its there) and then visit the parent node itself, and then the right sub-tree (if its there).
(v / visit-01
      :ARG0 (w / we)
      :ARG1 (a / and
            :op1 (n / node
                  :ARG1-of (l / left-19)
                  :part-of (t / tree
                        :mod (b / binary)))
            :op2 (v2 / visit-01
                  :ARG0 w
                  :ARG1 (n2 / node
                        :ARG0-of (h / have-rel-role-91
                              :ARG2 (p / parent)))
                  :time (t2 / then))
            :op3 (v3 / visit-01
                  :ARG0 w
                  :ARG1 (s / sub-tree
                        :ARG1-of (r / right-08))
                  :time (t3 / then)
                  :condition (t4 / there
                        :domain n2))
            :ord (o / ordinal-entity
                  :value 1)))"
1674,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.,2,3,2.5,"# ::snt The inorder traversal of a binary tree visits the node of a binary tree in order according to their data values.
(v / visit-01
      :ARG0 (t / traverse-01
            :ARG1 (t2 / tree
                  :mod (b / binary))
            :manner (o / order
                  :polarity -))
      :ARG1 (n / node
            :part-of (t3 / tree
                  :mod (b2 / binary)))
      :ARG1-of (c / conform-01
            :ARG2 (v2 / value
                  :mod (d / data)
                  :poss t2)))"
1675,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.,2,4,3,"# ::snt Traverses the binary tree in inorder.  It lets you visit the nodes in order according to their data values.
(m / multi-sentence
      :snt1 (t / traverse-01
            :ARG1 (t2 / tree
                  :mod (b / binary))
            :manner (o / order
                  :polarity -))
      :snt2 (l / let-01
            :ARG0 (ii / it)
            :ARG1 (v / visit-01
                  :ARG0 (y / you)
                  :ARG1 (n / node)
                  :manner (o2 / order
                        :ARG1-of (c / conform-01
                              :ARG2 (v2 / value
                                    :mod (d / data)
                                    :poss n))))))"
1676,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",Its used to visit nodes of a binary search tree in a search key order.,3,4,3.5,"# ::snt Its used to visit nodes of a binary search tree in a search key order.
(u / use-01
      :ARG1 (ii / it)
      :ARG2 (v / visit-01
            :ARG0 ii
            :ARG1 (n / node
                  :part-of (t / tree
                        :mod (s / search-01)
                        :mod (b / binary)))
            :manner (o / order
                  :mod (k / key
                        :mod (s2 / search-01)))))"
1677,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",(Left side of tree) (Root) (Right side of tree),5,5,5,"# ::snt (Left side of tree) (Root) (Right side of tree)
(a / and
      :op1 (s / side
            :mod (l / left)
            :part-of (t / tree))
      :op2 (r / root)
      :op3 (s2 / side
            :mod (r2 / right)
            :part-of t))"
1678,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.,5,5,5,"# ::snt printing a tree in order from least to greatest. This done by going as far left down the tree as possible and printing the parent and then right tree. Then move up the tree.
(m / multi-sentence
      :snt1 (d / do-02
            :ARG1 (t / this)
            :manner (a / and
                  :op1 (g / go-01
                        :ARG1 (l / left-19
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (f / far)
                                    :ARG3 (e / equal)
                                    :ARG4 (p / possible-01)))
                        :direction (d2 / down
                              :op1 (t2 / tree)))
                  :op2 (p2 / print-01
                        :ARG1 (a2 / and
                              :op1 (t3 / tree
                                    :ARG0-of (h2 / have-rel-role-91
                                          :ARG2 (p3 / parent)))
                              :op2 (t4 / tree
                                    :ARG1-of (r / right-08))
                              :time (t5 / then)))))
      :snt2 (m2 / move-01
            :mode imperative
            :ARG0 (y / you)
            :ARG2 (u / up
                  :op1 (t6 / tree))
            :time t5))"
1679,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","The in order is to go from left,root,right",5,5,5,"# ::snt The in order is to go from left,root,right
(o / order
      :domain (g / go-01
            :ARG2 (a / and
                  :op1 (l / left-19)
                  :op2 (r / root)
                  :op3 (r2 / right-08))))"
1680,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it’s parent, and it’s right side sibling, then it goes up a level and repeats until it gets to the root.",4,5,4.5,"# ::snt Inorder traversal of a binary tree will retrieve start at the furthest left hand leaf and checks it, it’s parent, and it’s right side sibling, then it goes up a level and repeats until it gets to the root.
(a / and
      :op1 (r / retrieve-01
            :ARG0 (t / traverse-01
                  :ARG1 (t2 / tree
                        :mod (b / binary))
                  :manner (o / order
                        :polarity -))
            :ARG1 (s / start-01)
            :location (l / leaf
                  :mod (h / hand
                        :ARG1-of (l2 / left-19))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (f / far)
                        :ARG3 (m / most))))
      :op2 (c / check-01
            :ARG0 t
            :ARG1 s
            :ARG2 (a2 / and
                  :op1 l
                  :op2 (p / person
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 t2
                              :ARG2 (p2 / parent)))
                  :op3 (p3 / person
                        :ARG0-of (h4 / have-rel-role-91
                              :ARG1 t2
                              :ARG2 (s2 / sibling)
                              :mod (s3 / side
                                    :ARG1-of (r2 / right-04))))))
      :op2 (a3 / and
            :op1 (g / go-01
                  :ARG1 t2
                  :ARG4 (l3 / level)
                  :direction (u / up))
            :op2 (r3 / repeat-01
                  :ARG1 t2
                  :time (u2 / until
                        :op1 (g2 / get-05
                              :ARG1 t2
                              :ARG2 (r4 / root))))))"
1681,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",traverse the left subtree. visit the root. traverse the right subtree.,5,5,5,"# ::snt traverse the left subtree. visit the root. traverse the right subtree.
(m / multi-sentence
      :snt1 (t / traverse-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s / subtree
                  :ARG1-of (l / left-19)))
      :snt2 (v / visit-01
            :mode imperative
            :ARG0 y
            :ARG1 (r / root))
      :snt3 (t2 / traverse-01
            :mode imperative
            :ARG0 y
            :ARG1 (s2 / subtree
                  :ARG1-of (r2 / right-04))))"
1682,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",postorder,0,3,1.5,"# ::snt postorder
(o / order-02
      :mod (p / post))"
1683,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",in order starts with the root then does right child then left child recursively,0,3,1.5,"# ::snt in order starts with the root then does right child then left child recursively
(t / then
      :op1 (s / start-01
            :ARG1 (o / order)
            :ARG2 (r / root))
      :op2 (d / do-02
            :ARG1 (a / and
                  :op1 (c / child
                        :ARG1-of (r2 / right-08))
                  :op2 (c2 / child
                        :ARG1-of (l / left-19)))
            :manner (r3 / recursive)))"
1684,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",Left Child -&gt; Parent -&gt; Right Child,5,5,5,"# ::snt Left Child -&gt; Parent -&gt; Right Child
(a / and
      :op1 (c / child
            :ARG1-of (l / left-19))
      :op2 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG2 (p2 / parent)))
      :op3 (c2 / child
            :ARG1-of (r / right-08)))"
1685,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",it goes from lowest to highest inside of the tree,1,3,2,"# ::snt it goes from lowest to highest inside of the tree
(g / go-01
      :ARG1 (ii / it)
      :ARG4 (h / high-02
            :ARG2-of (h2 / have-degree-91
                  :ARG1 ii
                  :ARG3 (m / most)))
      :location (ii2 / inside
            :op1 (t / tree)))"
1686,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.",3,5,4,"# ::snt starting by displaying the node furthest to the right, then  the node, then the node on the right, in recursive order.
(s / start-01
      :ARG2 (d / display-01
            :ARG1 (a / and
                  :op1 (n / node
                        :ARG1-of (h / have-degree-91
                              :ARG2 (f / far)
                              :ARG3 (m / most)
                              :ARG5 (r / right-08)))
                  :op2 (n2 / node
                        :time (t / then))
                  :op3 (n3 / node
                        :time (t2 / then)
                        :location r))
            :manner (o / order
                  :ARG1-of (r2 / repeat-01))))"
1687,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",It travels left to right,3,4,3.5,"# ::snt It travels left to right
(t / travel-01
      :ARG0 (ii / it)
      :ARG1 (f / from
            :op1 (l / left-19)
            :op2 (r / right-19)))"
1688,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } },5,5,5,"# ::snt void inorder(ptNode ptr) { if (ptr) { inorder (ptr-&gt;left); cout&lt;&lt;ptr-&gt;data; inorder(ptr-&gt;right); } }
(m / multi-sentence
      :snt1 (ii / inorder-01
            :ARG1 (s / string-entity
                  :value ""ptNode""))
      :snt2 (ii2 / inorder-01
            :ARG1 (s2 / string-entity
                  :value ""ptr""))
      :snt3 (ii3 / inorder-01
            :ARG1 (s3 / string-entity
                  :value ""ptr-&gt;left""))
      :snt4 (s4 / string-entity
            :value ""cout&lt;&lt;ptr-&gt;data"")
      :snt5 (s5 / string-entity
            :value ""inorder""
            :value ""ptr-&gt;right""))"
1689,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.",5,5,5,"# ::snt the root is in the middle.  The left subtree is traversed first, then the root, and finally the right subtree.
(m / multi-sentence
      :snt1 (r / root
            :location (m2 / middle))
      :snt2 (a / and
            :op1 (t / traverse-01
                  :ARG1 (s / subtree
                        :ARG1-of (l / left-19))
                  :ord (o / ordinal-entity
                        :value 1))
            :op2 (t2 / traverse-01
                  :ARG1 (r2 / root)
                  :time (t3 / then))
            :op3 (t4 / traverse-01
                  :ARG1 (s2 / subtree
                        :ARG1-of (r3 / right-08))
                  :time (f / final))))"
1690,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","a traversal that visits the left branch first, then the parent node, then the right branch, recursively.",5,5,5,"# ::snt a traversal that visits the left branch first, then the parent node, then the right branch, recursively.
(t / traverse-01
      :ARG0-of (v / visit-01
            :ARG1 (a / and
                  :op1 (b / branch
                        :ARG1-of (l / left-19))
                  :op2 (n / node
                        :ARG0-of (h / have-rel-role-91
                              :ARG2 (p / parent)))
                  :op3 (b2 / branch
                        :ARG1-of (r / right-08))
                  :time (t2 / then))
            :manner (r2 / recursive)))"
1691,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.",5,5,5,"# ::snt Inorder traversal visits the left branch of a node (all the way to it's deepest left-most leaf) before visiting the node itself. After visiting the entire left branch and the node, it visits the node's right branch following the same pattern of left child, node, right child.
(m / multi-sentence
      :snt1 (v / visit-01
            :ARG0 (t / traversal
                  :mod (o / order
                        :polarity -))
            :ARG1 (b / branch
                  :ARG1-of (l / left-19)
                  :part-of (n / node))
            :ARG1-of (m2 / mean-01
                  :ARG2 (g / go-02
                        :ARG0 t
                        :ARG4 (l2 / leaf
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (d / deep-02
                                          :ARG1 l2)
                                    :ARG3 (m3 / most)
                                    :ARG5 (l3 / left-19)))
                        :extent (a / all-the-way)))
            :time (b2 / before
                  :op1 (v2 / visit-01
                        :ARG0 t
                        :ARG1 (n2 / node))))
      :snt2 (v3 / visit-01
            :ARG0 t
            :ARG1 (b3 / branch
                  :ARG1-of (r / right-08)
                  :poss (n3 / node))
            :manner (f / follow-01
                  :ARG0 t
                  :ARG1 (p / pattern
                        :consist-of (c / child
                              :ARG1-of (l4 / left-19))
                        :consist-of (n4 / node))
                  :ARG1-of (s / same-01))))"
1692,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.",left middle right,5,5,5,"# ::snt left middle right
(l / left-19
      :ARG2 (r / right-08
            :mod (m / middle)))"
1693,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.",5,5,5,"# ::snt You traverse all the nodes to the left, then visit the root, then traverse all the nodes on the right.
(a / and
      :op1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (n / node
                  :mod (a2 / all)
                  :location (l / left-19)))
      :op2 (v / visit-01
            :ARG0 y
            :ARG1 (r / root)
            :time (t2 / then))
      :op3 (t3 / traverse-01
            :ARG0 y
            :ARG1 (n2 / node
                  :mod (a3 / all)
                  :location (r2 / right-08))
            :time (t4 / then)))"
1694,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process",5,5,5,"# ::snt you would go to the furthest down left most node, then to the root then to the right (if left and right exist) then you would return one node previous and do the same until you reached the root, then go to the furthest down left most node on the right side of the root and continue this process
(m / multi-sentence
      :snt1 (a / and
            :op1 (g / go-01
                  :ARG1 (y / you)
                  :ARG4 (n / node
                        :quant (m2 / most)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (f / far)
                              :ARG3 (m3 / most)
                              :ARG5 (l / left-19))))
            :op2 (g2 / go-01
                  :ARG1 y
                  :ARG4 (r / root)
                  :condition (e / exist-01
                        :ARG1 (a2 / and
                              :op1 (l2 / left-19)
                              :op2 (r2 / right-08))))
            :snt2 (a3 / and
                  :op1 (r3 / return-02
                        :ARG0 (y2 / you)
                        :ARG1 (n2 / node
                              :quant 1
                              :time (p / previous)))
                  :op2 (d / do-02
                        :ARG0 y2
                        :ARG1 (s / same-01)
                        :time (u / until
                              :op1 (r4 / reach-01
                                    :ARG0 y2
                                    :ARG1 (r5 / root)))))
            :snt2 a3
            :op1 (g3 / go-02
                  :ARG0 y2
                  :ARG4 (n3 / node
                        :ARG1-of (h2 / have-quant-91
                              :ARG3 m3)
                        :ARG5 (n4 / node
                              :ARG1-of (h3 / have-quant-91
                                    :ARG3 (m4 / most)
                                    :ARG5 (n5 / node
                                          :ARG1-of l2)))
                        :ARG5 (s2 / side
                              :ARG1-of (r6 / right-08)))))
      :op2 (c / continue-01
            :ARG0 (y3 / you
                  :ARG1 (p2 / process-02
                        :mod (t / this)))))"
1695,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node",4,4,4,"# ::snt it means that you traverse one subtree of a node, then look at the node itself before traversing the other subtree of the node
(m / mean-01
      :ARG1 (ii / it)
      :ARG2 (a / and
            :op1 (t / traverse-01
                  :ARG0 (y / you)
                  :ARG1 (s / subtree
                        :quant 1
                        :part-of (n / node)))
            :op2 (l / look-01
                  :ARG0 y
                  :ARG1 (n2 / node)
                  :time (t2 / then)
                  :time (b / before
                        :op1 (t3 / traverse-01
                              :ARG0 y
                              :ARG1 (s2 / subtree
                                    :mod (o / other)
                                    :part-of (n3 / node)))))))"
1696,10.6,What is the inorder traversal of a binary tree?,"Traverse the left subtree, then the root, then the right subtree.","Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. ",0,4,2,"# ::snt Level order traversal is a traversal method by which levels are visited successively starting with level 0 (the root node), and nodes are visited from left to right on each level, with Push and Pop methods. 
(m / method
      :mod (t / traverse-01
            :ARG1 (o / order
                  :mod (l / level)))
      :manner-of (a / and
            :op1 (v / visit-01
                  :ARG1 (l2 / level)
                  :manner (s / successive)
                  :ARG1-of (s2 / start-01
                        :ARG2 (l3 / level
                              :mod 0
                              :ARG1-of (m2 / mean-01
                                    :ARG2 (n / node
                                          :mod (r / root))))))
            :op2 (v2 / visit-01
                  :ARG1 (n2 / node)
                  :manner (a2 / and
                        :op1 (p / push-01)
                        :op2 (p2 / pop-01))
                  :location (l4 / level
                        :mod (e / each)))))"
1697,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,This is on the runtime order of log(n) where n is the number of nodes in the binary tree.,5,5,5,"# ::snt This is on the runtime order of log(n) where n is the number of nodes in the binary tree.
(b / be-located-at-91
      :ARG1 (t / this)
      :ARG2 (o / order
            :mod (r / runtime)
            :mod (s / string-entity
                  :value ""log(n"")
            :ARG2-of (m / mean-01
                  :ARG1 (n / number
                        :quant-of (n2 / node
                              :location (t2 / tree
                                    :mod (b2 / binary)))
                        :domain s))))"
1698,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.,5,5,5,"# ::snt In a binary search tree of size 'n' it takes log(n) comparisons to find a specified element.
(t / take-10
      :ARG0 (f / find-01
            :ARG1 (e / element
                  :ARG1-of (s / specify-01)))
      :ARG1 (c / compare-01
            :ARG1 (s2 / string-entity
                  :value ""n""))
      :location (t2 / tree
            :mod (s3 / search-01)
            :mod (b / binary)
            :mod (s4 / size)))"
1699,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,n-1/2 is the algorithm to compare and find an element.,0,4,2,"# ::snt n-1/2 is the algorithm to compare and find an element.
(a / algorithm
      :domain (s / string-entity
            :value ""n-1/2"")
      :purpose (a2 / and
            :op1 (c / compare-01
                  :ARG1 (e / element))
            :op2 (f / find-01
                  :ARG1 e)))"
1700,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,At most its equivalent to the height of the tree.,5,5,5,"# ::snt At most its equivalent to the height of the tree.
(e / equal-01
      :ARG1 (ii / it)
      :ARG2 (h / high-02
            :ARG1 (t / tree))
      :mod (a / at-most))"
1701,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,Log(n),5,5,5,"# ::snt Log(n)
(l / log-01
      :mod (s / string-entity
            :value ""n""))"
1702,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(log n),5,5,5,"# ::snt O(log n)
(s / string-entity
      :value ""o(log n"")"
1703,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,Depends on what half of the tree and the levels you have.,3,4,3.5,"# ::snt Depends on what half of the tree and the levels you have.
(d / depend-01
      :ARG1 (a / and
            :op1 (h / half
                  :part-of (t / tree))
            :op2 (l / level
                  :ARG1-of (h2 / have-03
                        :ARG0 (y / you)))))"
1704,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(log n) in balanced trees,5,5,5,"# ::snt O(log n) in balanced trees
(s / string-entity)"
1705,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,n-1,2,3,2.5,"# ::snt n-1
(s / string-entity
      :value ""n-1"")"
1706,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,log(n),5,5,5,"# ::snt log(n)
(l / log
      :mod (s / string-entity
            :value ""n""))"
1707,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(nlog(n)),0,5,2.5,"# ::snt O(nlog(n))
(o / opine-01
      :ARG0 (ii / i))"
1708,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,nLog(n),0,4,2,"# ::snt nLog(n)
(s / string-entity
      :value ""nLog(n"")"
1709,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,logn,5,5,5,"# ::snt logn
(l / log-01)"
1710,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,"at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.",4,5,4.5,"# ::snt at the minimum log(n)/log(2), at the maximum N searches, where N is the number of nodes.
(a / and
      :op1 (s / slash
            :op1 (m / minimum)
            :op2 s
            :op1 (l / log)
            :op2 (l2 / log)
            :op3 s
            :op1 (l3 / log)
            :op2 (l4 / log))
      :op2 (s2 / search-01
            :ARG1 (n / number
                  :quant-of (n2 / node)
                  :domain (s3 / string-entity
                        :value ""n""))
            :ARG1-of (h / have-quant-91
                  :ARG3 (m2 / maximum))))"
1711,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(n),2,4,3,"# ::snt O(n)
(p / person
      :name (n / name
            :op1 ""O(n""))"
1712,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,It takes at most 3 comparisons to find and element in a binary search tree,0,3,1.5,"# ::snt It takes at most 3 comparisons to find and element in a binary search tree
(t / take-10
      :ARG0 (f / find-01
            :ARG1 (e / element)
            :location (t2 / tree
                  :mod (s / search-01
                        :mod (b / binary))))
      :ARG1 (c / compare-01
            :quant (a / at-most
                  :op1 3)))"
1713,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,log (n)   where n equals the number of nodes.,5,5,5,"# ::snt log (n)   where n equals the number of nodes.
(e / equal-01
      :ARG1 (s / string-entity
            :value ""n"")
      :ARG2 (n / number
            :quant-of (n2 / node)))"
1714,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level,5,5,5,"# ::snt it takes as many comparisons as the number of levels of the binary search tree. it only compares one number at each level
(m / multi-sentence
      :snt1 (t / take-10
            :ARG0 (ii / it)
            :ARG1 (c / compare-01
                  :ARG1-of (h / have-quant-91
                        :ARG3 (e / equal)
                        :ARG4 (n / number
                              :quant-of (l / level
                                    :part-of (t2 / tree
                                          :mod (s / search-01
                                                :ARG1 (b / binary))))))))
      :snt2 (c2 / compare-01
            :ARG0 (ii2 / it)
            :ARG1 (n2 / number
                  :quant 1
                  :mod (o / only)
                  :location (l2 / level
                        :mod (e2 / each)))))"
1715,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.,5,5,5,"# ::snt At most it takes one less comparisons than the tree's height. In big-O notation it takes O(log n) comparisons if the tree is balanced.
(m / multi-sentence
      :snt1 (t / take-10
            :ARG0 (ii / it)
            :ARG1 (c / compare-01
                  :quant (l / less-than
                        :op1 (h / height
                              :poss (t2 / tree))))
            :mod (a / at-most))
      :snt2 (t3 / take-10
            :ARG0 (ii2 / it)
            :ARG1 (c2 / compare-01
                  :ARG1 (s / string-entity
                        :value ""O(log n""))
            :condition (b / balance-01
                  :ARG1 (t4 / tree))
            :manner (n / notation
                  :mod (b2 / big)
                  :mod s
                  :value ""O"")))"
1716,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,O(log n),5,5,5,"# ::snt O(log n)
(s / string-entity
      :value ""o(log n"")"
1717,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,log n comparisons,5,5,5,"# ::snt log n comparisons
(a / and
      :op1 (l / log-01)
      :op2 (c / compare-01))"
1718,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,(n^k)-1   where k is the height of the tree,0,3,1.5,"# ::snt (n^k)-1   where k is the height of the tree
(m / multi-sentence
      :snt1 (s / string-entity
            :value ""nk"")
      :snt2 (h / height
            :poss (t / tree)
            :domain s
            :value ""k""))"
1719,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,"it takes h comparisons, where h is the height of the tree",5,5,5,"# ::snt it takes h comparisons, where h is the height of the tree
(t / take-10
      :ARG0 (ii / it)
      :ARG1 (c / compare-01
            :ARG2 (s / string-entity
                  :value ""h"")
            :ARG2-of (m / mean-01
                  :ARG1 (h / height
                        :poss (t2 / tree)
                        :domain s))))"
1720,10.7,How many comparisons does it take to find an element in a binary search tree?,The height of the tree (or log of the number of elements in the tree).,2 way key comparison,0,2,1,"# ::snt 2 way key comparison
(c / compare-01
      :ARG1-of (k / key-02)
      :mod (w / way
            :quant 2))"
1721,11.1,What are the elements typically included in a class definition?,Function members and data members.,"The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.",1.5,3.75,2.625,"# ::snt The name of the class file, the parameters it must take to perform its function.  Also a brief description of what the class does.
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / file
                              :mod (c / class))))
            :op2 (t2 / thing
                  :ARG2-of (p / parameter-01)
                  :ARG1-of (t3 / take-01
                        :ARG0 (ii / it)
                        :ARG1-of (o / obligate-01)
                        :purpose (p2 / perform-02
                              :ARG0 ii
                              :ARG1 (f2 / function-01
                                    :ARG0 ii)))))
      :snt2 (d / describe-01
            :ARG1 (t4 / thing
                  :ARG1-of (d2 / do-02
                        :ARG0 (c2 / class)))
            :mod (b / brief)
            :mod (a2 / also)))"
1722,11.1,What are the elements typically included in a class definition?,Function members and data members.,"access specifiers and functions, oftentimes a constructor.",3,3,3,"# ::snt access specifiers and functions, oftentimes a constructor.
(a / and
      :op1 (p / person
            :ARG0-of (s / specify-01
                  :ARG1 (a2 / access-01)))
      :op2 (f / function-01
            :ARG1 a2)
      :op3 (p2 / person
            :ARG0-of (c / construct-01)
            :frequency (o / often)))"
1723,11.1,What are the elements typically included in a class definition?,Function members and data members.,"The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.",5,5,5,"# ::snt The elements typically included in a class definition are the function prototypes, usually declared public, and the data members used in the class, which are usually declared private.
(ii / include-01
      :ARG1 (a / and
            :op1 (p / prototype
                  :mod (f / function-01)
                  :ARG1-of (d / declare-02
                        :ARG2 (p2 / public)
                        :mod (u / usual)))
            :op2 (m / member
                  :mod (d2 / data)
                  :ARG1-of (u2 / use-01
                        :ARG2 (c / class))
                  :ARG1-of (d3 / declare-02
                        :ARG2 (p3 / private-02
                              :ARG1 m)
                        :mod (u3 / usual))))
      :ARG2 (d4 / define-01
            :ARG1 c)
      :ARG1-of (t / typical-02))"
1724,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})",2.5,5,3.75,"# ::snt Class is user defined.  It contains members, data and functions.  The keyword class is used and includes brackets ({})
(m / multi-sentence
      :snt1 (d / define-01
            :ARG0 (p / person
                  :ARG0-of (u / use-01))
            :ARG1 (c / class))
      :snt2 (a / and
            :op1 (c2 / contain-01
                  :ARG0 (ii / it)
                  :ARG1 (a2 / and
                        :op1 (m2 / member)
                        :op2 (d2 / data)
                        :op3 (f / function-01))))
      :snt3 (a3 / and
            :op1 (u2 / use-01
                  :ARG1 (c3 / class
                        :mod (k / keyword)))
            :op2 (ii2 / include-01
                  :ARG0 c3
                  :ARG1 (b / bracket))))"
1725,11.1,What are the elements typically included in a class definition?,Function members and data members.,Member functions and data members.,5,5,5,"# ::snt Member functions and data members.
(a / and
      :op1 (f / function-01
            :ARG0 (p / person
                  :ARG0-of (h / have-org-role-91
                        :ARG2 (m / member))))
      :op2 (p2 / person
            :ARG0-of (h2 / have-org-role-91
                  :ARG2 (m2 / member
                        :mod (d / data)))))"
1726,11.1,What are the elements typically included in a class definition?,Function members and data members.,the functions and variables used when the object is defined for the class.,5,3,4,"# ::snt the functions and variables used when the object is defined for the class.
(a / and
      :op1 (f / function-01)
      :op2 (v / variable)
      :ARG1-of (u / use-01
            :time (d / define-01
                  :ARG1 (o / object)
                  :purpose (c / class))))"
1727,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Data members, functions and function definitions, variables.",5,5,5,"# ::snt Data members, functions and function definitions, variables.
(a / and
      :op1 (p / person
            :ARG0-of (h / have-org-role-91
                  :ARG1 (d / data)
                  :ARG2 (m / member)))
      :op2 (f / function-01)
      :op3 (f2 / function-01
            :ARG1-of (d2 / define-01))
      :op4 (v / variable))"
1728,11.1,What are the elements typically included in a class definition?,Function members and data members.,return type and input parameters,1.5,2.5,2,"# ::snt return type and input parameters
(a / and
      :op1 (t / type
            :mod (r / return-01))
      :op2 (p / parameter
            :mod (ii / input)))"
1729,11.1,What are the elements typically included in a class definition?,Function members and data members.,Constructor Data members Methods,5,4,4.5,"# ::snt Constructor Data members Methods
(m / method
      :mod (p / person
            :ARG0-of (c / construct-01)
            :ARG0-of (h / have-org-role-91
                  :ARG1 (d / data)
                  :ARG2 (m2 / member))))"
1730,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Function members and member attributes, or in other words, the class variables and functions.",5,5,5,"# ::snt Function members and member attributes, or in other words, the class variables and functions.
(o / or
      :op1 (a / and
            :op1 (m / member
                  :mod (f / function))
            :op2 (a2 / attribute
                  :mod f))
      :op2 (a3 / and
            :op1 (v / variable
                  :mod (c / class))
            :op2 (f2 / function))
      :ARG1-of (w / word-01
            :mod (o2 / other)))"
1731,11.1,What are the elements typically included in a class definition?,Function members and data members.,"The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.",4,4,4,"# ::snt The elements that are included in a class definition is the access-modifier, data types, variables, and function signatures.
(ii / include-01
      :ARG1 (a / and
            :op1 (p / person
                  :ARG0-of (m / modify-01
                        :ARG1 (a2 / access-01)))
            :op2 (t / type
                  :mod (d / data))
            :op3 (v / variable)
            :op4 (s / signature
                  :mod (f / function-01)))
      :ARG2 (d2 / define-01
            :ARG1 (c / class)))"
1732,11.1,What are the elements typically included in a class definition?,Function members and data members.,The variables and function prototypes.,5,3,4,"# ::snt The variables and function prototypes.
(a / and
      :op1 (v / variable)
      :op2 (p / prototype
            :mod (f / function-01)))"
1733,11.1,What are the elements typically included in a class definition?,Function members and data members.,public and private variables and initiations of functions included in the class.,4.5,2.5,3.5,"# ::snt public and private variables and initiations of functions included in the class.
(a / and
      :op1 (a2 / and
            :op1 (v / variable
                  :ARG1-of (p / public-02))
            :op2 (v2 / variable
                  :ARG1-of (p2 / private-03)))
      :op2 (ii / initiate-01
            :ARG1 (f / function-01
                  :ARG1-of (ii2 / include-01
                        :ARG2 (c / class)))))"
1734,11.1,What are the elements typically included in a class definition?,Function members and data members.,The return value and the accepted value.,1.5,1.25,1.375,"# ::snt The return value and the accepted value.
(a / and
      :op1 (v / value
            :ARG1-of (r / return-02))
      :op2 (v2 / value
            :ARG1-of (a2 / accept-01)))"
1735,11.1,What are the elements typically included in a class definition?,Function members and data members.,"A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.",5,2.5,3.75,"# ::snt A class definition typically includes the class name, the classes constructor(s), and any extra functions and class variables.
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (c / class)))
            :op2 (t2 / thing
                  :ARG0-of (c2 / construct-01
                        :ARG1 (c3 / class)))
            :op3 (a2 / and
                  :op1 (f / function
                        :mod (e / extra)
                        :mod (a3 / any))
                  :op2 (v / variable
                        :mod c3)))
      :ARG2 (t3 / thing
            :ARG2-of (d / define-01
                  :ARG1 c3))
      :ARG1-of (t4 / typical-02))"
1736,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Parameters and their type, Class name, and return type, and the code to be executed in the class.",2,3.75,2.875,"# ::snt Parameters and their type, Class name, and return type, and the code to be executed in the class.
(a / and
      :op1 (a2 / and
            :op1 (p / parameter)
            :op2 (t / type
                  :poss p))
      :op2 (a3 / and
            :op1 (n / name
                  :mod (c / class))
            :op2 (t2 / type
                  :mod (r / return-02))
            :op3 (c2 / code
                  :ARG1-of (e / execute-01
                        :location c))))"
1737,11.1,What are the elements typically included in a class definition?,Function members and data members.,"data members, class variables, and functions",5,5,5,"# ::snt data members, class variables, and functions
(a / and
      :op1 (m / member
            :mod (d / data))
      :op2 (v / variable
            :mod (c / class))
      :op3 (f / function-01))"
1738,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Constructor, functions, and variables native to the class.",5,3,4,"# ::snt Constructor, functions, and variables native to the class.
(n / native-02
      :ARG1 (a / and
            :op1 (c / constructor)
            :op2 (f / function)
            :op3 (v / variable))
      :ARG2 (c2 / class))"
1739,11.1,What are the elements typically included in a class definition?,Function members and data members.,functions and data members,5,5,5,"# ::snt functions and data members
(a / and
      :op1 (f / function-01)
      :op2 (m / member
            :mod (d / data)))"
1740,11.1,What are the elements typically included in a class definition?,Function members and data members.,data members and function definitions,5,5,5,"# ::snt data members and function definitions
(a / and
      :op1 (m / member
            :mod (d / data))
      :op2 (d2 / define-01
            :ARG1 (f / function-01)))"
1741,11.1,What are the elements typically included in a class definition?,Function members and data members.,member functions and data members,5,5,5,"# ::snt member functions and data members
(a / and
      :op1 (f / function-01
            :ARG0 (m / member))
      :op2 (m2 / member
            :mod (d / data)))"
1742,11.1,What are the elements typically included in a class definition?,Function members and data members.,"constructor, and function definitions.",3.5,2.5,3,"# ::snt constructor, and function definitions.
(a / and
      :op1 (p / person
            :ARG0-of (c / construct-01))
      :op2 (t / thing
            :ARG2-of (d / define-01
                  :ARG1 (f / function-01))))"
1743,11.1,What are the elements typically included in a class definition?,Function members and data members.,class name data of class definition of functions and methods,5,3.75,4.375,"# ::snt class name data of class definition of functions and methods
(d / data
      :topic (n / name
            :mod (c / class))
      :topic (d2 / define-01
            :ARG0 (c2 / class)
            :ARG1 (a / and
                  :op1 (f / function-01)
                  :op2 (m / method))))"
1744,11.1,What are the elements typically included in a class definition?,Function members and data members.,"A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries",3,2.5,2.75,"# ::snt A class definition includes the definitions of the class' constructor(s) and any public or private functions. Of course, it also #includes the class header and any necessary C libraries
(m / multi-sentence
      :snt1 (ii / include-01
            :ARG0 (d / define-01
                  :ARG1 (c / class))
            :ARG1 (a / and
                  :op1 (d2 / define-01
                        :ARG1 (p / person
                              :ARG0-of (c2 / construct-01
                                    :ARG1 (c3 / class))))
                  :op2 (f / function-01
                        :ARG1-of (p2 / public-02)
                        :mod (a2 / any))
                  :op3 (f2 / function-01
                        :ARG1-of (p3 / private-02)
                        :mod (a3 / any))))
      :snt2 (ii2 / include-01
            :ARG0 (ii3 / it)
            :ARG1 (a4 / and
                  :op1 (h / header
                        :mod c3))
            :op2 (l / library
                  :mod (l2 / language
                        :name (n / name
                              :op1 ""C""))
                  :mod (a5 / any)
                  :ARG1-of (n2 / need-01)))
      :mod (o / of-course)
      :mod (a6 / also))"
1745,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Class name, {}, semicoln at the end of the defination, private and bublic followed by "": """,2.5,2.5,2.5,"# ::snt Class name, {}, semicoln at the end of the defination, private and bublic followed by "": ""
(a / and
      :op1 (n / name
            :mod (c / class))
      :op2 (s / semicoln
            :time (e / end-01
                  :ARG1 (d / define-01)))
      :op3 (p / private-02)
      :op4 (v / verbal)
      :ARG1-of (f / follow-01
            :ARG2 (s2 / string-entity
                  :value "":"")))"
1746,11.1,What are the elements typically included in a class definition?,Function members and data members.,"a constructor, private and public variables, and function prototypes",5,2.5,3.75,"# ::snt a constructor, private and public variables, and function prototypes
(a / and
      :op1 (p / person
            :ARG0-of (c / construct-01))
      :op2 (a2 / and
            :op1 (v / variable
                  :ARG1-of (p2 / private-03))
            :op2 (v2 / variable
                  :ARG1-of (p3 / public-02)))
      :op3 (p4 / prototype
            :mod (f / function-01)))"
1747,11.1,What are the elements typically included in a class definition?,Function members and data members.,"Data variables and Functions, Data members",5,5,5,"# ::snt Data variables and Functions, Data members
(a / and
      :op1 (a2 / and
            :op1 (v / variable
                  :mod (d / data))
            :op2 (f / function-01
                  :mod d))
      :op2 (m / member
            :mod (d2 / data)))"
1748,11.1,What are the elements typically included in a class definition?,Function members and data members.,class definitions include the name of the class and type of parameters,1.5,3.75,2.625,"# ::snt class definitions include the name of the class and type of parameters
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (c / class)))
            :op2 (t2 / thing
                  :ARG2-of (t3 / type-01
                        :ARG1 (p / parameter))))
      :ARG2 (t4 / thing
            :ARG2-of (d / define-01
                  :ARG1 c)))"
1749,11.1,What are the elements typically included in a class definition?,Function members and data members.,"class variables, class function prototypes",5,3.75,4.375,"# ::snt class variables, class function prototypes
(a / and
      :op1 (v / variable
            :mod (c / class))
      :op2 (p / prototype
            :mod (f / function-01
                  :mod (c2 / class))))"
1750,11.1,What are the elements typically included in a class definition?,Function members and data members.,input  & return type elements,1.5,3,2.25,"# ::snt input  & return type elements
(e / element
      :mod (t / type
            :mod (a / and
                  :op1 (ii / input)
                  :op2 (r / return-02))))"
1751,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public and private specifiers.,5,5,5,"# ::snt Public and private specifiers.
(a / and
      :op1 (p / person
            :ARG0-of (s / specify-01)
            :ARG1-of (p2 / public-02))
      :op2 (p3 / person
            :ARG0-of (s2 / specify-01)
            :ARG1-of (p4 / private-03)))"
1752,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Public, Private, Restricted",4.5,4.75,4.625,"# ::snt Public, Private, Restricted
(a / and
      :op1 (p / public-02)
      :op2 (p2 / private-02)
      :op3 (r / restrict-01))"
1753,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,The access specifiers are public and private.,5,5,5,"# ::snt The access specifiers are public and private.
(a / and
      :op1 (p / public-02
            :ARG1 (p2 / person
                  :ARG0-of (s / specify-01
                        :ARG1 (a2 / access-01))))
      :op2 (p3 / private-02
            :ARG1 p2))"
1754,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public private protected,5,4.75,4.875,"# ::snt public private protected
(p / private-03
      :ARG1-of (p2 / protect-01)
      :ARG1-of (p3 / public-02))"
1755,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public or Private.,5,5,5,"# ::snt Public or Private.
(o / or
      :op1 (p / public)
      :op2 (p2 / private))"
1756,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public: the function or variable can be used outside the class private: the function or variable can only be used with the class,5,5,5,"# ::snt public: the function or variable can be used outside the class private: the function or variable can only be used with the class
(m / multi-sentence
      :snt1 (p / public)
      :snt2 (p2 / possible-01
            :ARG1 (u / use-01
                  :ARG1 (o / or
                        :op1 (f / function-01)
                        :op2 (v / variable))
                  :location (o2 / outside
                        :op1 (c / class)))
            :ARG1-of (p3 / private-02))
      :snt3 (p4 / possible-01
            :ARG1 (u2 / use-01
                  :ARG1 o
                  :accompanier (c2 / class)
                  :mod (o3 / only))))"
1757,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public and Private,5,5,5,"# ::snt Public and Private
(a / and
      :op1 (p / public)
      :op2 (p2 / private))"
1758,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public private and protected,5,4.75,4.875,"# ::snt public private and protected
(a / and
      :op1 (p / public)
      :op2 (p2 / private-02)
      :op3 (p3 / protect-01))"
1759,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,Public Private,5,5,5,"# ::snt Public Private
(p / public-02
      :ARG1 (p2 / private-03))"
1760,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Private, public, protected",5,4.75,4.875,"# ::snt Private, public, protected
(a / and
      :op1 (p / private-02)
      :op2 (p2 / public-02)
      :op3 (p3 / protect-01))"
1761,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,The access-specifiers that can be used in a C++ class definition is private and public.,5,5,5,"# ::snt The access-specifiers that can be used in a C++ class definition is private and public.
(a / and
      :op1 (p / private-02
            :ARG1 (s / specification
                  :topic (a2 / access-01)
                  :ARG1-of (u / use-01
                        :ARG2 (d / define-01
                              :ARG1 (c / class
                                    :mod (l / language
                                          :name (n / name
                                                :op1 ""C++""))))
                        :ARG1-of (p2 / possible-01))))
      :op2 (p3 / public-02
            :ARG1 s))"
1762,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private.,5,5,5,"# ::snt public and private.
(a / and
      :op1 (p / public)
      :op2 (p2 / private))"
1763,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"static, long, unsigned",0,1.25,0.625,"# ::snt static, long, unsigned
(a / and
      :op1 (s / static)
      :op2 (l / long-03)
      :op3 (s2 / sign-01
            :polarity -))"
1764,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Private, Public, Protected, or Friend.",5,4.75,4.875,"# ::snt Private, Public, Protected, or Friend.
(o / or
      :op1 (p / private-02)
      :op2 (p2 / public-02)
      :op3 (p3 / protect-01)
      :op4 (p4 / person
            :ARG0-of (h / have-rel-role-91
                  :ARG2 (f / friend))))"
1765,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"A C++ class definition may include access-specifiers public, private, and static.",4,5,4.5,"# ::snt A C++ class definition may include access-specifiers public, private, and static.
(p / possible-01
      :ARG1 (ii / include-01
            :ARG1 (a / and
                  :op1 (s / specify-01
                        :ARG1 (a2 / access-01))
                  :op2 (s2 / specify-01
                        :ARG1 (a3 / access-01)
                        :mod (p2 / public))
                  :op3 (p3 / private-03)
                  :op4 (s3 / specify-01
                        :ARG1 (a4 / access-01)
                        :mod (s4 / static)))
            :ARG2 (d / define-01
                  :ARG1 (c / class
                        :mod (l / language
                              :name (n / name
                                    :op1 ""C++""))))))"
1766,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"local, global, local-variable, function specific",1.5,2.5,2,"# ::snt local, global, local-variable, function specific
(a / and
      :op1 (l / local-02)
      :op2 (g / global)
      :op3 (v / variable
            :ARG1-of (l2 / local-02))
      :op4 (s / specific-02
            :ARG1 (f / function-01)))"
1767,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public, private",5,5,5,"# ::snt public, private
(a / and
      :op1 (p / public-02)
      :op2 (p2 / private-02))"
1768,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"Public, protected, and private.",5,4.75,4.875,"# ::snt Public, protected, and private.
(a / and
      :op1 (p / public-02)
      :op2 (p2 / protect-01)
      :op3 (p3 / private-02))"
1769,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"private, public",5,5,5,"# ::snt private, public
(a / and
      :op1 (p / private-02)
      :op2 (p2 / public-02))"
1770,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls,5,5,5,"# ::snt public - can be accessed by any of the program  private - can only be accessed by the class functions themselves and no outside functions or calls
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / access-01
                  :ARG0 (p2 / program
                        :ARG1-of (p3 / private-02)
                        :mod (a2 / any))
                  :ARG1 (p4 / public)))
      :snt2 (p5 / possible-01
            :ARG1 (a3 / access-01
                  :ARG0 (a4 / and
                        :op1 (f / function-01
                              :ARG0 (c / class))
                        :op2 (o / or
                              :op1 (f2 / function-01
                                    :polarity -
                                    :mod (o2 / outside))
                              :op2 (c2 / call-03
                                    :polarity -
                                    :ARG0 f2)))
                  :mod (o3 / only))))"
1771,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public , private, protected",5,5,5,"# ::snt public , private, protected
(a / and
      :op1 (p / public)
      :op2 (p2 / private-03)
      :op3 (p3 / protect-01))"
1772,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private,5,5,5,"# ::snt public and private
(a / and
      :op1 (p / public)
      :op2 (p2 / private))"
1773,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public, private, protected",5,4.75,4.875,"# ::snt public, private, protected
(a / and
      :op1 (p / public)
      :op2 (p2 / private-03)
      :op3 (p3 / protect-01))"
1774,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.",5,4.75,4.875,"# ::snt functions and data members can be given access-specifications of public, private, and friend. public access is given to any functions or members not given specific access rights.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (g / give-01
                  :ARG1 (s / specific-02
                        :ARG1 (a / and
                              :op1 (f / function-01)
                              :op2 (p2 / person
                                    :ARG0-of (h / have-org-role-91
                                          :ARG1 (d / data)
                                          :ARG2 (m2 / member))))
                        :ARG2 (a2 / access-01)
                        :ARG3 (a3 / and
                              :op1 (p3 / public)
                              :op2 (p4 / private-03)
                              :op3 (f2 / friend)))))
      :snt2 (g2 / give-01
            :ARG1 (a4 / access-01
                  :ARG1 (o / or
                        :op1 (f3 / function
                              :mod (a5 / any))
                        :op2 (p5 / person
                              :ARG0-of (h2 / have-org-role-91
                                    :ARG1 (m3 / member))))
                  :ARG1-of (s2 / specific-02
                        :polarity -
                        :ARG2 (r / right-05
                              :ARG1 p5
                              :ARG2 a4)))))"
1775,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,data member or data functions are access specifiers,0,1.25,0.625,"# ::snt data member or data functions are access specifiers
(o / or
      :op1 (m / member
            :mod (d / data))
      :op2 (f / function
            :mod (d2 / data))
      :domain (t / thing
            :ARG0-of (s / specify-01
                  :ARG1 (a / access-01))))"
1776,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public or private,5,5,5,"# ::snt public or private
(o / or
      :op1 (p / public)
      :op2 (p2 / private))"
1777,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private,5,5,5,"# ::snt public and private
(a / and
      :op1 (p / public)
      :op2 (p2 / private))"
1778,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public and private,5,5,5,"# ::snt public and private
(a / and
      :op1 (p / public)
      :op2 (p2 / private))"
1779,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,"public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited",5,4.75,4.875,"# ::snt public - can be accessed from outside the class private - accessible only from inside the class, not inherited protected - accessible only from inside the class, inherited
(p / possible-01
      :ARG1 (a / access-01
            :ARG1 (p2 / public)
            :source (o / outside
                  :op1 (c / class))
            :ARG1-of (p3 / private-02)
            :ARG1-of (a2 / accessible-02
                  :source (ii / inside
                        :op1 (c2 / class))
                  :mod (o2 / only))
            :ARG1-of (c3 / contrast-01
                  :ARG2 (p4 / protect-01
                        :polarity -
                        :ARG1-of (ii2 / inherit-01))
                  :ARG1-of (a3 / accessible-02
                        :source ii
                        :op1 c2))))"
1780,11.2,What are the access-specifiers that can be used in a C++ class definition?,Private and public.,public private protected,5,5,5,"# ::snt public private protected
(p / private-03
      :ARG1-of (p2 / protect-01)
      :ARG1-of (p3 / public-02))"
1781,11.3,How are objects initialized when they are created?,By using constructors.,ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown,0,2.5,1.25,"# ::snt ie. GradeBook myGradeBook();  call upon the class and then give it a name like shown
(m / multi-sentence
      :snt1 (e / exemplify-01
            :ARG0 (f / function
                  :name (n / name
                        :op1 ""myGradeBook"")))
      :snt2 (a / and
            :op1 (c / call-01
                  :ARG1 (c2 / class))
            :op2 (g / give-01
                  :ARG1 (n2 / name
                        :ARG1-of (r / resemble-01
                              :ARG2 (t / thing
                                    :ARG1-of (s / show-01))))
                  :ARG2 c2
                  :time (t2 / then))))"
1782,11.3,How are objects initialized when they are created?,By using constructors.,They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.,3,3.75,3.375,"# ::snt They are initialized as a named instance of the template formed by the class. This named instance can then be modified to be different from the class that it was created from.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG1 (t / they)
            :ARG2 (ii2 / instance
                  :ARG1-of (n / name-01)
                  :part-of (t2 / template
                        :ARG1-of (f / form-01
                              :ARG0 (c / class)))))
      :snt2 (p / possible-01
            :ARG1 (m2 / modify-01
                  :ARG1 (ii3 / instance
                        :ARG1-of (n2 / name-01)
                        :mod (t3 / this))
                  :purpose (d / differ-02
                        :ARG1 ii3
                        :ARG2 (c2 / class
                              :ARG2-of (c3 / create-01
                                    :ARG1 ii3))))
            :time (t4 / then)))"
1783,11.3,How are objects initialized when they are created?,By using constructors.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
1784,11.3,How are objects initialized when they are created?,By using constructors.,Objects are initialized by a value given.  When an object is defined for a certain task.,2,2.5,2.25,"# ::snt Objects are initialized by a value given.  When an object is defined for a certain task.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG1 (o / object)
            :ARG2 (v / value
                  :ARG1-of (g / give-01)))
      :snt2 (b / be-temporally-at-91
            :ARG2 (d / define-01
                  :ARG1 (o2 / object)
                  :purpose (t / task
                        :mod (c / certain)))))"
1785,11.3,How are objects initialized when they are created?,By using constructors.,"They are initialized with a "" . "" (dot) between the constructor and the object being created.",0,4.5,2.25,"# ::snt They are initialized with a "" . "" (dot) between the constructor and the object being created.
(ii / initialize-01
      :ARG1 (t / they)
      :ARG2 (d / dot
            :location (b / between
                  :op1 (p / person
                        :ARG0-of (c / construct-01))
                  :op2 (o / object
                        :ARG1-of (c2 / create-01)))))"
1786,11.3,How are objects initialized when they are created?,By using constructors.,objectname classname();  to call a function from the class:  objectname.funciton();,0,2.5,1.25,"# ::snt objectname classname();  to call a function from the class:  objectname.funciton();
(a / and
      :op1 (c / classname
            :mod (n / name
                  :op1 ""objectname""
                  :op2 ""classname""))
      :op2 (c2 / call-01
            :ARG1 (f / function)
            :ARG2 (c3 / class
                  :name (n2 / name
                        :op1 ""objectname.funciton()""))))"
1787,11.3,How are objects initialized when they are created?,By using constructors.,"If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.",5,5,5,"# ::snt If the object refers to a class, the constructor(s) will initialize the objects based on return type and parameters passed. Compiler will auto-create one if one is not provided.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (p / person
                  :ARG0-of (c / construct-01))
            :ARG1 (o / object)
            :ARG1-of (b / base-02
                  :ARG2 (a / and
                        :op1 (t / type
                              :mod (r / return-01))
                        :op2 (p2 / parameter
                              :ARG1-of (p3 / pass-03))))
            :condition (r2 / refer-01
                  :ARG0 (o2 / object)
                  :ARG1 (c2 / class)))
      :snt2 (c3 / create-01
            :ARG0 (p4 / person
                  :ARG0-of (c4 / compile-01))
            :ARG1 o2
            :manner (a2 / auto)
            :condition (p5 / provide-01
                  :polarity -
                  :ARG1 o2)))"
1788,11.3,How are objects initialized when they are created?,By using constructors.,classname objectname(input parameters);,3,2.5,2.75,"# ::snt classname objectname(input parameters);
(a / and
      :op1 (c / classname)
      :op2 (n / name
            :mod (o / object))
      :op3 (p / parameter
            :mod (ii / input)))"
1789,11.3,How are objects initialized when they are created?,By using constructors.,When the class is called by the Constructor,2,5,3.5,"# ::snt When the class is called by the Constructor
(b / be-temporally-at-91
      :ARG2 (c / call-02
            :ARG0 (p / person
                  :ARG0-of (c2 / construct-01))
            :ARG1 (c3 / class)))"
1790,11.3,How are objects initialized when they are created?,By using constructors.,"Constructors; default when not provided by user, or programmer specified constructors.",5,5,5,"# ::snt Constructors; default when not provided by user, or programmer specified constructors.
(m / multi-sentence
      :snt1 (p / person
            :ARG0-of (c / construct-01))
      :snt2 (d / default-02
            :time (p2 / provide-01
                  :polarity -
                  :ARG0 (o / or
                        :op1 (p3 / person
                              :ARG0-of (u / use-01))
                        :op2 (p4 / person
                              :ARG0-of (p5 / program-01))
                        :ARG0-of (s / specify-01
                              :ARG1 (c2 / constructor))))))"
1791,11.3,How are objects initialized when they are created?,By using constructors.,Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.,1,3.75,2.375,"# ::snt Objects are usually initialized at the beginning of the program and are initialized usually in the main function. They are initialized after the class's name.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG1 (o / object)
            :time (b / begin-01
                  :ARG1 (p / program))
            :mod (u / usual))
      :snt2 (ii2 / initialize-01
            :ARG1 o
            :location (f / function
                  :mod (m2 / main))
            :mod (u2 / usual))
      :snt3 (ii3 / initialize-01
            :ARG1 o
            :time (a / after
                  :op1 (n / name
                        :poss (c / class)))))"
1792,11.3,How are objects initialized when they are created?,By using constructors.,"&lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;",1,3.75,2.375,"# ::snt &lt;variable type&gt; &lt;variable name&gt;; or, if you want to initialize a variable to a certain value, &lt;variable type&gt; &lt;variable name&gt; = &lt;value&gt;;
(o / or
      :op2 (e / equal-01
            :ARG1 (s / string-entity
                  :value ""&lt;variable-type&gt; &lt;variable-name&gt;"")
            :ARG2 (s2 / string-entity
                  :value ""&lt;value&gt;""))
      :condition (w / want-01
            :ARG0 (y / you)
            :ARG1 (ii / initialize-01
                  :ARG0 y
                  :ARG1 (v / variable)
                  :ARG2 (v2 / value
                        :mod (c / certain)))))"
1793,11.3,How are objects initialized when they are created?,By using constructors.,"variables are set to a given value, or 0 if none is given.",1,1.25,1.125,"# ::snt variables are set to a given value, or 0 if none is given.
(s / set-02
      :ARG1 (v / variable)
      :ARG2 (o / or
            :op1 (v2 / value
                  :ARG1-of (g / give-01))
            :op2 (v3 / value
                  :quant 0
                  :condition (g2 / give-01
                        :polarity -
                        :ARG1 v))))"
1794,11.3,How are objects initialized when they are created?,By using constructors.,"When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).",5,5,5,"# ::snt When the object is initialized, its constructor is called (whether one is provided or c++ assigns a default constructor).
(c / call-01
      :ARG1 (c2 / constructor
            :poss (o / object))
      :time (ii / initialize-01
            :ARG1 o)
      :ARG1-of (r / regardless-91
            :ARG2 (o2 / or
                  :op1 (p / provide-01
                        :ARG1 (c3 / constructor))
                  :op2 (a / assign-01
                        :ARG0 (l / language
                              :name (n / name
                                    :op1 ""C++""))
                        :ARG1 (c4 / constructor
                              :mod (d / default))))))"
1795,11.3,How are objects initialized when they are created?,By using constructors.,"Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.",2,3,2.5,"# ::snt Objects are initialized essentially as copies of the corresponding classes, complete with their own separate variables.
(ii / initialize-01
      :ARG1 (o / object)
      :manner (c / copy-01
            :ARG1 (c2 / class
                  :ARG1-of (c3 / correspond-01))
            :ARG1-of (c4 / complete-02
                  :ARG2 (v / variable
                        :ARG1-of (s / separate-02)
                        :poss o)))
      :mod (e / essential))"
1796,11.3,How are objects initialized when they are created?,By using constructors.,"If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.",5,5,5,"# ::snt If you had a class Gradebook, you would initialize it in your main function by use of a constructor in the Gradebook class.  If no constructor is specified or found, c++ will use a default one with no parameters.  Gradebook myGradebook;  In this bit of code, the class Gradebook has been initialized as object myGradebook.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG0 (y / you)
            :ARG1 (c / class
                  :name (n / name
                        :op1 ""Gradebook""))
            :ARG2 (f / function-01
                  :ARG0 y
                  :mod (m2 / main))
            :condition (h / have-03
                  :ARG0 y
                  :ARG1 c)
            :manner (u / use-01
                  :ARG0 y
                  :ARG1 (c2 / constructor
                        :location c)))
      :snt2 (u2 / use-01
            :ARG0 (p / program
                  :name (n2 / name
                        :op1 ""C++""))
            :ARG1 (c3 / constructor
                  :ARG1-of (d / default-01)
                  :ARG0-of h
                  :polarity -
                  :ARG1 (p2 / parameter)))
      :condition (o / or
            :op1 (s / specify-01
                  :polarity -
                  :ARG1 c3)
            :op2 (f2 / find-01
                  :polarity -
                  :ARG1 c3))
      :snt2 (ii2 / initialize-01
            :ARG1 (c4 / class
                  :name (n3 / name
                        :op1 ""MyGradebook""))
            :ARG2 (o2 / object
                  :name (n4 / name
                        :op1 ""myGradebook""))
            :location (b / bit
                  :mod (t / this)
                  :part-of (c5 / code))))"
1797,11.3,How are objects initialized when they are created?,By using constructors.,objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.,3,3.75,3.375,"# ::snt objects are initialized by stating the classname first then assigning a name to the object. Within the object's ( ) is a place where it can be initialized.
(m / multi-sentence
      :snt1 (ii / initialize-01
            :ARG1 (o / object)
            :manner (s / state-01
                  :ARG1 (c / classname)
                  :ord (o2 / ordinal-entity
                        :value 1)
                  :time (t / then)))
      :snt2 (p / place
            :location-of (ii2 / initialize-01
                  :ARG1 (o3 / object)
                  :ARG1-of (p2 / possible-01))
            :location (w / within
                  :op1 (o4 / object))))"
1798,11.3,How are objects initialized when they are created?,By using constructors.,They are initialized with a constructor.,5,5,5,"# ::snt They are initialized with a constructor.
(ii / initialize-01
      :ARG1 (t / they)
      :ARG2 (p / person
            :ARG0-of (c / construct-01)))"
1799,11.3,How are objects initialized when they are created?,By using constructors.,"The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.",1,3.75,2.375,"# ::snt The value is specified after declaration,  It can initialized anywhere between the declaration and the corresponding }.
(m / multi-sentence
      :snt1 (s / specify-01
            :ARG1 (v / value)
            :time (a / after
                  :op1 (d / declare-02)))
      :snt2 (p / possible-01
            :ARG1 (ii / initialize-01
                  :ARG1 (ii2 / it)
                  :location (b / between
                        :op1 (d2 / declare-02)
                        :op2 (s2 / string-entity
                              :value """")
                        :ARG1-of (c / correspond-01)))))"
1800,11.3,How are objects initialized when they are created?,By using constructors.,"with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.",4,5,4.5,"# ::snt with the default constructor for that object in its class.  if no constructor is specified, it uses the default system constructor.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (ii / it)
            :ARG1 (t / thing
                  :ARG0-of (c / construct-01
                        :ARG1 (o / object
                              :mod (t2 / that)
                              :location (c2 / class
                                    :poss ii)))
                  :mod (d / default)))
      :snt2 (u / use-01
            :ARG0 (ii2 / it)
            :ARG1 (t3 / thing
                  :ARG0-of (c3 / construct-01
                        :ARG1 (s / system))
                  :mod (d2 / default))
            :condition (s2 / specify-01
                  :polarity -
                  :ARG1 (t4 / thing
                        :ARG0-of (c4 / construct-01)))))"
1801,11.3,How are objects initialized when they are created?,By using constructors.,initialized using the same name as the class,1,4,2.5,"# ::snt initialized using the same name as the class
(ii / initialize-01
      :manner (u / use-01
            :ARG1 (n / name
                  :ARG1-of (s / same-01
                        :ARG2 (c / class)))))"
1802,11.3,How are objects initialized when they are created?,By using constructors.,they are initialized to a value dependent on the compiler,1,1.25,1.125,"# ::snt they are initialized to a value dependent on the compiler
(ii / initialize-01
      :ARG1 (t / they)
      :ARG2 (v / value
            :ARG0-of (d / depend-01
                  :ARG1 (p / person
                        :ARG0-of (c / compile-01)))))"
1803,11.3,How are objects initialized when they are created?,By using constructors.,memory is allocated in accordance with their type and initialization input.,1,2.5,1.75,"# ::snt memory is allocated in accordance with their type and initialization input.
(a / allocate-01
      :ARG1 (m / memory)
      :ARG1-of (a2 / accord-02
            :ARG2 (a3 / and
                  :op1 (t / type
                        :poss (t2 / they))
                  :op2 (ii / input
                        :mod (ii2 / initialize-01)
                        :poss t2))))"
1804,11.3,How are objects initialized when they are created?,By using constructors.,Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.,1,1.25,1.125,"# ::snt Objects are assigned a space in memory when they are created. the name given to the object points to the memory address where the objects data resides.
(m / multi-sentence
      :snt1 (a / assign-01
            :ARG1 (s / space
                  :location (m2 / memory))
            :ARG2 (o / object)
            :time (c / create-01
                  :ARG1 o))
      :snt2 (p / point-01
            :ARG0 (n / name
                  :ARG1-of (g / give-01
                        :ARG2 (o2 / object)))
            :ARG2 (a2 / address
                  :location (m3 / memory)
                  :location-of (r / reside-01
                        :ARG1 (d / data
                              :poss o2)))))"
1805,11.3,How are objects initialized when they are created?,By using constructors.,using constructor,5,5,5,"# ::snt using constructor
(u / use-01
      :ARG1 (p / program
            :name (n / name
                  :op1 ""Constructor"")))"
1806,11.3,How are objects initialized when they are created?,By using constructors.,by giving them a value,2,1.25,1.625,"# ::snt by giving them a value
(g / give-01
      :ARG1 (v / value)
      :ARG2 (t / they))"
1807,11.3,How are objects initialized when they are created?,By using constructors.,"By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)",5,5,5,"# ::snt By declaring the class first, the name of the variable, and then any variables that need to be put in the constructor.  Ex. Class myClass(x, y)
(m / multi-sentence
      :snt1 (d / declare-02
            :ARG1 (a / and
                  :op1 (c / class)
                  :op2 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (v / variable))))
            :ord (o / ordinal-entity
                  :value 1)
            :op3 (v2 / variable
                  :mod (a2 / any)
                  :ARG1-of (p / put-01
                        :ARG2 (c2 / constructor)
                        :ARG1-of (n2 / need-01))))
      :snt2 (e / exemplify-01
            :ARG0 (a3 / and
                  :op1 (c3 / class
                        :name (n3 / name
                              :op1 ""myClass""))
                  :op2 (v3 / variable
                        :name (n4 / name
                              :op1 ""y"")))))"
1808,11.3,How are objects initialized when they are created?,By using constructors.,"objects are initialized by giving the object a type, name, and initial value",1,3.75,2.375,"# ::snt objects are initialized by giving the object a type, name, and initial value
(ii / initialize-01
      :ARG1 (o / object)
      :manner (g / give-01
            :ARG1 (a / and
                  :op1 (t / type)
                  :op2 (n / name)
                  :op3 (v / value
                        :mod ii))
            :ARG2 o))"
1809,11.3,How are objects initialized when they are created?,By using constructors.,they are initialized to 0,1,1.25,1.125,"# ::snt they are initialized to 0
(ii / initialize-01
      :ARG1 (t / they)
      :ARG2 (v / value-interval
            :op1 0))"
1810,11.3,How are objects initialized when they are created?,By using constructors.,"obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. ",1,3.75,2.375,"# ::snt obj. are initialized by the variables that call them, when they are created within a class.   e.i. classname objectname etc. 
(ii / initialize-01
      :ARG0 (v / variable
            :ARG0-of (c / call-01
                  :ARG1 (o / object)))
      :ARG1 o
      :time (c2 / create-01
            :ARG1 o
            :location (c3 / class))
      :example (a / and
            :op1 (n / name
                  :mod c3)
            :op2 (n2 / name
                  :mod c3)))"
1811,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","Name of the function, parameters it must receive in order to perform and a return type.",5,5,5,"# ::snt Name of the function, parameters it must receive in order to perform and a return type.
(a / and
      :op1 (n / name
            :poss (f / function-01))
      :op2 (p / parameter
            :ARG1-of (r / receive-01
                  :ARG0 f
                  :ARG1-of (o / obligate-01)
                  :purpose (p2 / perform-02
                        :ARG0 f)))
      :op3 (t / type
            :mod (r2 / return-02)))"
1812,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.,3.5,4,3.75,"# ::snt a function signature is the elements that make it unique such as the variables it calls for and also I suppose this includes the program it is in.
(a / and
      :op1 (e / element
            :ARG0-of (m / make-02
                  :ARG1 (u / unique-01
                        :ARG1 (s / signature
                              :mod (f / function-01))))
            :example (v / variable
                  :ARG1-of (c / call-03
                        :ARG0 s)))
      :op2 (s2 / suppose-01
            :ARG0 (ii / i)
            :ARG1 (ii2 / include-01
                  :ARG0 s
                  :ARG1 (p / program
                        :location-of s))
            :mod (a2 / also)))"
1813,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","A function signature is the return type of a function, its name, and the number and type of its parameters.",5,5,5,"# ::snt A function signature is the return type of a function, its name, and the number and type of its parameters.
(s / signature
      :mod (f / function)
      :domain (a / and
            :op1 (t / type
                  :mod (r / return-01)
                  :poss (f2 / function))
            :op2 (n / name
                  :poss f2)
            :op3 (a2 / and
                  :op1 (n2 / number
                        :poss (p / parameter
                              :poss f2))
                  :op2 (t2 / type
                        :poss p))))"
1814,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",function prototype that contains functions and data members.,1,5,3,"# ::snt function prototype that contains functions and data members.
(p / prototype
      :mod (f / function)
      :ARG0-of (c / contain-01
            :ARG1 (a / and
                  :op1 (f2 / function)
                  :op2 (m / member
                        :mod (d / data)))))"
1815,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature is a declaration of the function that includes the parameter types and the number of parameters.,5,5,5,"# ::snt A function signature is a declaration of the function that includes the parameter types and the number of parameters.
(s / sign-01
      :ARG1 (f / function)
      :ARG0-of (ii / include-01
            :ARG1 (a / and
                  :op1 (t / type
                        :mod (p / parameter))
                  :op2 (n / number
                        :quant-of (p2 / parameter)))))"
1816,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the declaration of the function.,2,3,2.5,"# ::snt the declaration of the function.
(d / declare-02
      :ARG1 (f / function-01))"
1817,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","Includes the name, accepted parameters, and return type.",5,5,5,"# ::snt Includes the name, accepted parameters, and return type.
(ii / include-01
      :ARG1 (a / and
            :op1 (n / name)
            :op2 (p / parameter
                  :ARG1-of (a2 / accept-01))
            :op3 (t / type
                  :mod (r / return-02))))"
1818,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",its return type and its input parameters,5,5,5,"# ::snt its return type and its input parameters
(a / and
      :op1 (t / type
            :mod (r / return-01)
            :poss (ii / it))
      :op2 (p / parameter
            :mod (ii2 / input)
            :poss ii))"
1819,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",Contains the function name and its paramaters.  The return type is not included,5,5,5,"# ::snt Contains the function name and its paramaters.  The return type is not included
(m / multi-sentence
      :snt1 (c / contain-01
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f / function-01)))
                  :op2 (p / parameter
                        :poss f)))
      :snt2 (ii / include-01
            :polarity -
            :ARG1 (t2 / type
                  :mod (r / return-01))))"
1820,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","Return type, function name, and the parameter types",5,5,5,"# ::snt Return type, function name, and the parameter types
(a / and
      :op1 (t / type
            :mod (r / return-01))
      :op2 (t2 / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op3 (t3 / type
            :mod (p / parameter)))"
1821,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",The function signature tells what the function parameters and includes all the function calls,2.5,5,3.75,"# ::snt The function signature tells what the function parameters and includes all the function calls
(a / and
      :op1 (t / tell-01
            :ARG0 (s / signature
                  :mod (f / function))
            :ARG1 (t2 / thing
                  :ARG2-of (p / parameter-01
                        :ARG1 (f2 / function))))
      :op2 (ii / include-01
            :ARG0 s
            :ARG1 (c / call-03
                  :ARG1 f2
                  :mod (a2 / all))))"
1822,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","The function's name, as well as what it returns and what it accepts.",5,5,5,"# ::snt The function's name, as well as what it returns and what it accepts.
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (a2 / and
            :op1 (t2 / thing
                  :ARG1-of (r / return-02
                        :ARG0 f))
            :op2 (t3 / thing
                  :ARG1-of (a3 / accept-01
                        :ARG0 f))))"
1823,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the body of the function that holds all the actual code,1,2.5,1.75,"# ::snt the body of the function that holds all the actual code
(b / body
      :part-of (f / function-01)
      :ARG0-of (h / hold-01
            :ARG1 (c / code
                  :ARG1-of (a / actual-02)
                  :mod (a2 / all))))"
1824,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature is the return type and accepted pass value type it takes,3,4,3.5,"# ::snt A function signature is the return type and accepted pass value type it takes
(t / take-10
      :ARG0 (ii / it)
      :ARG1 (a / and
            :op1 (t2 / type
                  :mod (r / return-02)
                  :domain (s / signature
                        :mod (f / function-01)))
            :op2 (t3 / type
                  :mod (v / value
                        :mod (p / pass-03)
                        :ARG1-of (a2 / accept-01))
                  :domain s)))"
1825,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature specifies the name and input variables of a function.,5,5,5,"# ::snt A function signature specifies the name and input variables of a function.
(s / specify-01
      :ARG0 (s2 / signature
            :mod (f / function))
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f2 / function)))
            :op2 (v / variable
                  :mod (ii / input)
                  :poss f2)))"
1826,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.,5,5,5,"# ::snt A function signature is the function's parameters and their type and the name of the function.  The return type is not a part of the function signature.
(m / multi-sentence
      :snt1 (s / signature
            :mod (f / function)
            :domain (a / and
                  :op1 (p / parameter
                        :poss (f2 / function))
                  :op2 (t / type
                        :poss f2)
                  :op3 (n / name
                        :poss f2)))
      :snt2 (h / have-part-91
            :polarity -
            :ARG1 (s2 / signature
                  :mod (f3 / function))
            :ARG2 (t2 / type
                  :mod (r / return-01))))"
1827,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the name of the function and what it accepts/ returns,5,5,5,"# ::snt the name of the function and what it accepts/ returns
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 (t2 / thing
            :ARG1-of (a2 / accept-01
                  :ARG0 f)
            :ARG1-of (r / return-02
                  :ARG0 f)))"
1828,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.",5,4,4.5,"# ::snt the unique identifier of a function, which includes input variables along with the function name, but excludes the output type.
(ii / identifier
      :ARG1-of (u / unique-01)
      :poss (f / function)
      :ARG0-of (ii2 / include-01
            :ARG1 (a / and
                  :op1 (v / variable
                        :mod (ii3 / input))
                  :op2 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 f)))
            :concession-of (e / exclude-01
                  :ARG0 ii
                  :ARG1 (t2 / type
                        :mod (o / output)))))"
1829,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","The order, number, and type of data items included inside the function parameters.",4.5,5,4.75,"# ::snt The order, number, and type of data items included inside the function parameters.
(ii / include-01
      :ARG1 (a / and
            :op1 (o / order)
            :op2 (n / number)
            :op3 (t / type)
            :mod (ii2 / item
                  :mod (d / data)))
      :location (ii3 / inside
            :op1 (p / parameter
                  :mod (f / function-01))))"
1830,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.",5,5,5,"# ::snt its the scope, type, and parameters of that function that give it it's properties and defines it against other functions.
(a / and
      :op1 (g / give-01
            :ARG0 (a2 / and
                  :op1 (s / scope)
                  :op2 (t / type)
                  :op3 (p / parameter)
                  :poss (f / function-01
                        :mod (t2 / that)))
            :ARG1 (p2 / property
                  :poss f)
            :ARG2 f)
      :op2 (d / define-01
            :ARG0 a2
            :ARG1 f
            :prep-against (f2 / function-01
                  :mod (o / other))))"
1831,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","is the name of the fuction, return type, and parameters that are being used",5,5,5,"# ::snt is the name of the fuction, return type, and parameters that are being used
(n / name-01
      :ARG1 (a / and
            :op1 (f / fuction)
            :op2 (t / type
                  :mod (r / return-01))
            :op3 (p / parameter)
            :ARG1-of (u / use-01)))"
1832,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","a function signature should include the name of the function, parameters, and a body.",2.5,5,3.75,"# ::snt a function signature should include the name of the function, parameters, and a body.
(r / recommend-01
      :ARG1 (ii / include-01
            :ARG0 (s / signature
                  :mod (f / function))
            :ARG1 (a / and
                  :op1 (t / thing
                        :ARG2-of (n / name-01
                              :ARG1 (f2 / function)))
                  :op2 (p / parameter)
                  :op3 (b / body))))"
1833,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",the name of the function and the arguments passed to that function,5,5,5,"# ::snt the name of the function and the arguments passed to that function
(a / and
      :op1 (t / thing
            :ARG2-of (n / name-01
                  :ARG1 (f / function-01)))
      :op2 t
      :ARG2-of (a2 / argue-01)
      :ARG1-of (p / pass-03
            :ARG2 f))"
1834,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.",5,5,5,"# ::snt A function signature, used in a function's prototype, is the set of object types it take in as parameters, with or without names given for the objects.
(s / signature
      :mod (f / function-01)
      :ARG1-of (u / use-01
            :ARG2 (p / prototype
                  :poss (f2 / function-01)))
      :domain (s2 / set
            :consist-of (t / type
                  :mod (o / object)
                  :ARG1-of (t2 / take-01
                        :ARG0 (ii / it)
                        :ARG2 (p2 / parameter)
                        :manner (o2 / or
                              :op1 (n / name
                                    :ARG1-of (g / give-01
                                          :ARG2 (o3 / object)))
                              :op2 (n2 / name
                                    :polarity -
                                    :ARG1-of (g2 / give-01
                                          :ARG2 o3)))))))"
1835,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",function name and parameter are called function signature.,5,5,5,"# ::snt function name and parameter are called function signature.
(c / call-01
      :ARG1 (a / and
            :op1 (n / name
                  :mod (f / function))
            :op2 (p / parameter
                  :mod f))
      :ARG2 (s / signature
            :mod (f2 / function)))"
1836,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.",fuction name and parameters,5,5,5,"# ::snt fuction name and parameters
(a / and
      :op1 (n / name
            :mod (f / fuction))
      :op2 (p / parameter
            :mod f))"
1837,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","The parameters needed, the return type, and name of the function.",5,5,5,"# ::snt The parameters needed, the return type, and name of the function.
(a / and
      :op1 (p / parameter
            :ARG1-of (n / need-01))
      :op2 (t / type
            :mod (r / return-01))
      :op3 (n2 / name
            :poss (f / function)))"
1838,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","the signature of a function includes the name of the function, the number and types of parameters, and the return type",5,5,5,"# ::snt the signature of a function includes the name of the function, the number and types of parameters, and the return type
(ii / include-01
      :ARG1 (a / and
            :op1 (t / thing
                  :ARG2-of (n / name-01
                        :ARG1 (f / function-01)))
            :op2 (a2 / and
                  :op1 (n2 / number
                        :quant-of (p / parameter))
                  :op2 (t2 / thing
                        :ARG2-of (t3 / type-01
                              :ARG1 p)))
            :op3 (t4 / thing
                  :ARG2-of t3
                  :ARG1 (r / return-02)))
      :ARG2 (s / signature
            :poss f))"
1839,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.",4.5,5,4.75,"# ::snt It is what uniquely separates overloaded functions. It includes the return type, and the parameter list of the function.
(m / multi-sentence
      :snt1 (s / separate-01
            :ARG0 (ii / it)
            :ARG1 (f / function
                  :ARG1-of (o / overload-01))
            :manner (u / unique-01))
      :snt2 (ii2 / include-01
            :ARG0 (ii3 / it)
            :ARG1 (a / and
                  :op1 (t / type
                        :mod (r / return-01))
                  :op2 (l / list-01
                        :ARG1 (p / parameter)
                        :poss (f2 / function)))))"
1840,11.4,What is a function signature?,"The name of the function and the list of parameters, including their types.","function sig is, is what is the class recognizes as the main function, or rather its specification ",0,3.75,1.875,"# ::snt function sig is, is what is the class recognizes as the main function, or rather its specification 
(o / or
      :op1 (f / function
            :name (n / name
                  :op1 ""sig""))
      :op2 (r / recognize-02
            :ARG0 (c / class)
            :ARG1 f
            :ARG2 (f2 / function
                  :mod (m / main)))
      :op3 (s / specify-01
            :ARG1 f2)
      :mod (r2 / rather))"
1841,11.5,What is a recursive function?,A function that calls itself.,A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.,5,5,5,"# ::snt A function that calls upon it self to solve a problem.  Each time it calls upon it self it splits up a problem into a simplier form until it reaches a 'base case' which is the most simplest form of the problem.
(m / multi-sentence
      :snt1 (f / function
            :ARG0-of (c / call-up-03
                  :ARG2 (s / solve-01
                        :ARG0 f
                        :ARG1 (p / problem)))
            :ARG1-of c)
      :snt2 (s2 / split-up-03
            :ARG0 f
            :ARG1 (p2 / problem)
            :ARG2 (f2 / form
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s3 / simple-02)
                        :ARG3 (m2 / more)))
            :frequency (r / rate-entity-91
                  :ARG4 (c2 / call-up-03
                        :ARG0 f
                        :ARG1 (s4 / self
                              :ARG2 s
                              :ARG0 f
                              :ARG1 p2)))
            :time (u / until
                  :op1 (r2 / reach-01
                        :ARG0 f
                        :ARG1 (c3 / case-03
                              :mod (b / base)
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (s5 / simple-02
                                          :ARG1 (f3 / form)
                                          :ARG3 (m3 / most))))))))"
1842,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself to perform an opperation such as a factorial recursive function.,5,5,5,"# ::snt A function that calls itself to perform an opperation such as a factorial recursive function.
(f / function
      :ARG0-of (c / call-02
            :ARG2 (p / perform-02
                  :ARG0 f
                  :ARG1 (o / operation
                        :example (f2 / function
                              :mod (r / recursive
                                    :mod (f3 / factorial))))))
      :ARG1-of c)"
1843,11.5,What is a recursive function?,A function that calls itself.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
1844,11.5,What is a recursive function?,A function that calls itself.,A base case that calls upon itself until the problem becomes smaller and terminates.,2.5,5,3.75,"# ::snt A base case that calls upon itself until the problem becomes smaller and terminates.
(c / case-03
      :mod (b / base)
      :ARG0-of (c2 / call-upon-02
            :time (u / until
                  :op1 (a / and
                        :op1 (b2 / become-01
                              :ARG1 (p / problem)
                              :ARG2 (h / have-degree-91
                                    :ARG1 p
                                    :ARG2 (s / small)
                                    :ARG3 (m / more)))
                        :op2 (t / terminate-01
                              :ARG1 p)))))"
1845,11.5,What is a recursive function?,A function that calls itself.,It's a function that calls itself. It runs multiple times until the base case is reached.,5,5,5,"# ::snt It's a function that calls itself. It runs multiple times until the base case is reached.
(m / multi-sentence
      :snt1 (c / call-01
            :ARG0 (f / function)
            :ARG1 f)
      :snt2 (r / run-01
            :ARG1 (ii / it)
            :frequency (m2 / multiple)
            :time (u / until
                  :op1 (r2 / reach-01
                        :ARG1 (c2 / case-03
                              :mod (b / base))))))"
1846,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself untill it reaches a base case.,5,5,5,"# ::snt a function that calls itself untill it reaches a base case.
(f / function
      :ARG0-of (c / call-01
            :time (u / until
                  :op1 (r / reach-01
                        :ARG0 f
                        :ARG1 (c2 / case
                              :mod (b / base)))))
      :ARG1-of c)"
1847,11.5,What is a recursive function?,A function that calls itself.,"A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.",5,5,5,"# ::snt A function that calls itself. Each time it does, it must get smaller, and eventually MUST converge to a base case, otherwise you can start an infinite loop.
(m / multi-sentence
      :snt1 (f / function
            :ARG0-of (c / call-02)
            :ARG1-of c)
      :snt2 (a / and
            :op1 (o / obligate-01
                  :ARG2 (g / get-03
                        :ARG1 (ii / it)
                        :ARG2 (h / have-degree-91
                              :ARG1 ii
                              :ARG2 (s / small)
                              :ARG3 (m2 / more))))
            :op2 (o2 / obligate-01
                  :ARG2 (c2 / converge-01
                        :ARG1 ii
                        :ARG2 (c3 / case
                              :mod (b / base))
                        :time (e / eventual)))
            :condition (p / possible-01
                  :ARG1 (s2 / start-01
                        :ARG0 (y / you)
                        :ARG1 (l / loop
                              :mod (ii2 / infinite))))
            :frequency (r / rate-entity-91
                  :ARG4 (d / do-02
                        :ARG0 ii))))"
1848,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself until a base case is met,5,5,5,"# ::snt a function that calls itself until a base case is met
(f / function
      :ARG0-of (c / call-02
            :time (u / until
                  :op1 (m / meet-01
                        :ARG1 (c2 / case-03
                              :mod (b / base)))))
      :ARG1-of c)"
1849,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself. With each function call the problem is diminished.,5,5,5,"# ::snt A function that calls itself. With each function call the problem is diminished.
(m / multi-sentence
      :snt1 (c / call-02
            :ARG0 (f / function)
            :ARG1 f)
      :snt2 (d / diminish-01
            :ARG1 (p / problem)
            :ARG2 (c2 / call-02
                  :ARG0 (f2 / function)
                  :mod (e / each))))"
1850,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself to perform a certain task,5,5,5,"# ::snt A function that calls itself to perform a certain task
(f / function-01
      :ARG0-of (c / call-02
            :ARG2 (p / perform-02
                  :ARG0 f
                  :ARG1 (t / task
                        :mod (c2 / certain))))
      :ARG1-of c)"
1851,11.5,What is a recursive function?,A function that calls itself.,A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.,5,5,5,"# ::snt A recursive function is a function that calls itself. Usually called the base case. If the base case is not correct it causes a infinite loop.
(m / multi-sentence
      :snt1 (c / call-01
            :ARG0 (f / function
                  :mod (r / recursive)
                  :ARG1-of c))
      :snt2 (c2 / call-01
            :ARG0 f
            :ARG1 (c3 / case
                  :mod (b / base))
            :mod (u / usual))
      :snt3 (c4 / cause-01
            :ARG0 (c5 / correct-02
                  :polarity -
                  :ARG1 c3
                  :mod b))
      :ARG1 (l / loop
            :mod (ii / infinite)))"
1852,11.5,What is a recursive function?,A function that calls itself.,"A function that calls itself, in order to solve a problem.",5,5,5,"# ::snt A function that calls itself, in order to solve a problem.
(f / function
      :ARG0-of (c / call-01
            :purpose (s / solve-01
                  :ARG0 f
                  :ARG1 (p / problem)))
      :ARG1-of c)"
1853,11.5,What is a recursive function?,A function that calls itself.,"a function that calls itself over and over until it finds the simplest form of solution, or the base case.",5,5,5,"# ::snt a function that calls itself over and over until it finds the simplest form of solution, or the base case.
(c / call-01
      :ARG0 (f / function)
      :ARG1 f
      :frequency (o / over-and-over)
      :time (u / until
            :op1 (f2 / find-01
                  :ARG0 f
                  :ARG1 (o2 / or
                        :op1 (f3 / form
                              :mod (s / solve-01)
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (s2 / simple-02
                                          :ARG1 f3)
                                    :ARG3 (m / most)))
                        :op2 (c2 / case
                              :mod (b / base))))))"
1854,11.5,What is a recursive function?,A function that calls itself.,"A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.",5,5,5,"# ::snt A recursive function is a function that calls itself repeatedly until a base case is achieved. The fundamental idea is to break one large problem into a series of smaller, similar problems.
(m / multi-sentence
      :snt1 (f / function
            :mod (r / recursive)
            :domain (f2 / function
                  :ARG0-of (c / call-01
                        :frequency (u / until
                              :op1 (a / achieve-01
                                    :ARG1 (c2 / case-03
                                          :mod (b / base)))))
                  :ARG1-of c
                  :ARG1-of (r2 / repeat-01)))
      :snt2 (ii / idea
            :mod (f3 / fundamental)
            :domain (b2 / break-02
                  :ARG1 (p / problem
                        :quant 1
                        :mod (l / large))
                  :ARG2 (s / series
                        :consist-of (p2 / problem
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (s2 / small)
                                    :ARG3 (m2 / more))
                              :ARG1-of (r3 / resemble-01))))))"
1855,11.5,What is a recursive function?,A function that calls itself.,"A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.",5,5,5,"# ::snt A recursive function typically simplifies a problem by calling itself, until arriving at a base case, at which it recursively returns a solution.
(s / simplify-01
      :ARG0 (f / function
            :ARG1-of (r / recursive-02))
      :ARG1 (p / problem)
      :manner (c / call-02
            :ARG0 f
            :ARG1 f
            :time (u / until
                  :op1 (a / arrive-01
                        :ARG1 f
                        :ARG2 (c2 / case-03
                              :mod (b / base)
                              :time-of (r2 / return-02
                                    :ARG0 f
                                    :ARG1 (t / thing
                                          :ARG2-of (s2 / solve-01)))
                              :manner (r3 / recursive)))))
      :ARG1-of (t2 / typical-02))"
1856,11.5,What is a recursive function?,A function that calls itself.,"A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.",5,4,4.5,"# ::snt A recursive function is a function that breaks down a large problem into two or more smaller problems and calls itself to solve those smaller problems until a base case or terminating point is reached.  At the base case, a definite answer is called and the function no longer recurses, but unwinds itself back through function calls to determine the answer to the original large problem.
(m / multi-sentence
      :snt1 (f / function
            :ARG0-of (r / recursive-02)
            :domain (f2 / function
                  :ARG0-of (b / break-down-23
                        :ARG1 (p / problem
                              :mod (l / large))
                        :ARG2 (p2 / problem
                              :quant 2
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (s / small)
                                    :ARG3 (m2 / more)))))
            :ARG0-of (c / call-02
                  :ARG1 f2
                  :purpose (s2 / solve-01
                        :ARG0 f2
                        :ARG1 (p3 / problem
                              :mod (t / that)
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (s3 / small)
                                    :ARG3 (m3 / more)))
                        :time (u / until
                              :op1 (r2 / reach-01
                                    :ARG1 (o / or
                                          :op1 (c2 / case
                                                :mod (b2 / base))
                                          :op2 (p4 / point
                                                :ARG0-of (t2 / terminate-01))))))))
      :snt2 (c3 / contrast-01
            :ARG1 (a / and
                  :op1 (c4 / call-02
                        :ARG1 (a2 / answer-01
                              :mod (d / definite)))
                  :op2 (r3 / recurse-01
                        :ARG0 f2
                        :time (n / no-longer)))
            :ARG2 (u2 / unwind-01
                  :ARG0 f2
                  :ARG1 f2
                  :direction (b3 / back)
                  :manner (c5 / call-02
                        :ARG0 f2)
                  :purpose (d2 / determine-01
                        :ARG0 f2
                        :ARG1 (a3 / answer-01
                              :ARG1 p3
                              :mod (l2 / large)
                              :mod (o2 / original))))))"
1857,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself into a loop with a base case for a loop exit.,2.5,5,3.75,"# ::snt a function that calls itself into a loop with a base case for a loop exit.
(f / function
      :ARG0-of (c / call-02
            :ARG2 (l / loop)
            :prep-with (c2 / case-03
                  :ARG1 (e / exit-01
                        :ARG1 (l2 / loop))
                  :mod (b / base)))
      :ARG1-of c)"
1858,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself until the base cases are met.,5,5,5,"# ::snt a function that calls itself until the base cases are met.
(f / function
      :ARG0-of (c / call-01
            :time (u / until
                  :op1 (m / meet-01
                        :ARG1 (c2 / case-03
                              :mod (b / base)))))
      :ARG1-of c)"
1859,11.5,What is a recursive function?,A function that calls itself.,A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.,5,5,5,"# ::snt A recursive function only knows how to solve base cases  A recursive function calls itself directly or indirectly until a base case is reached.
(m / multi-sentence
      :snt1 (k / know-01
            :ARG0 (f / function
                  :ARG1-of (r / recursive-03))
            :ARG1 (t / thing
                  :manner-of (s / solve-01
                        :ARG0 f
                        :ARG1 (c / case-03
                              :mod (b / base))))
            :mod (o / only))
      :snt2 (c2 / call-01
            :ARG0 (f2 / function
                  :ARG1-of r
                  :ARG1-of m))
      :ARG2 (o2 / or
            :op1 (d / direct-02)
            :op2 (d2 / direct-02
                  :polarity -))
      :time (u / until
            :op1 (r2 / reach-01
                  :ARG1 (c3 / case
                        :mod (b2 / base)))))"
1860,11.5,What is a recursive function?,A function that calls itself.,a function that calls on itself and uses a base case to stop the recursion,5,5,5,"# ::snt a function that calls on itself and uses a base case to stop the recursion
(f / function
      :ARG0-of (c / call-03)
      :ARG1-of c
      :ARG0-of (u / use-01
            :ARG1 (c2 / case-03
                  :mod (b / base))
            :ARG2 (s / stop-01
                  :ARG0 f
                  :ARG1 (r / recur-01))))"
1861,11.5,What is a recursive function?,A function that calls itself.,"a function that calls itself, and which eaach calls get closer and close to the base case.",5,5,5,"# ::snt a function that calls itself, and which eaach calls get closer and close to the base case.
(f / function
      :ARG0-of (c / call-01)
      :ARG1-of c
      :ARG0-of (g / get-03
            :ARG1 (c2 / call-01
                  :ARG0 (e / each))
            :ARG2 (a / and
                  :op1 (c3 / close-10
                        :ARG1 f
                        :ARG2 (c4 / case-03
                              :mod (b / base)))
                  :op2 c3
                  :ARG1 f
                  :ARG2 c4)))"
1862,11.5,What is a recursive function?,A function that calls itself.,A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.,5,5,5,"# ::snt A function that divides and conquers a problem.  There is a base case that will eventually be reached.  The function calls itself over and over until the base case is satisfied.
(m / multi-sentence
      :snt1 (f / function
            :ARG0-of (d / divide-02
                  :ARG1 (p / problem))
            :ARG0-of (c / conquer-01
                  :ARG1 p))
      :snt2 (r / reach-01
            :ARG1 (c2 / case-03
                  :mod (b / base))
            :time (e / eventual))
      :snt3 (c3 / call-02
            :ARG0 (f2 / function)
            :ARG1 f2
            :frequency (o / over-and-over)
            :time (u / until
                  :op1 (s / satisfy-01
                        :ARG1 c2))))"
1863,11.5,What is a recursive function?,A function that calls itself.,a function that calls itself in the definition code,5,5,5,"# ::snt a function that calls itself in the definition code
(f / function
      :ARG0-of (c / call-01
            :location (c2 / code
                  :ARG0-of (d / define-01)))
      :ARG1-of c)"
1864,11.5,What is a recursive function?,A function that calls itself.,A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.,5,5,5,"# ::snt A recursive function solves a problem by repeatedly calling itself. the initial problem is broken into successively smaller parts until a much simpler base case is reached. the solutions to each piece of the problem are then returned a step at a time.
(m / multi-sentence
      :snt1 (s / solve-01
            :ARG0 (f / function
                  :mod (r / recursive))
            :ARG1 (p / problem)
            :manner (c / call-02
                  :ARG0 f
                  :ARG1 f
                  :ARG2 f
                  :ARG1-of (r2 / repeat-01)))
      :snt2 (b / break-01
            :ARG1 (p2 / problem
                  :mod (ii / initial))
            :ARG2 (p3 / part
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s2 / small)
                        :ARG3 (m2 / more)))
            :manner (s3 / successive)
            :time (u / until
                  :op1 (r3 / reach-01
                        :ARG1 (c2 / case-03
                              :ARG1 (b2 / base-02)
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (s4 / simple-02
                                          :ARG1 c2)
                                    :ARG3 (m3 / more
                                          :quant (m4 / much)))))))
      :snt2 (r4 / return-02
            :ARG1 (t / thing
                  :ARG2-of (s5 / solve-01
                        :ARG1 (p4 / piece
                              :mod (e / each)
                              :part-of p2))))
      :manner (s6 / step-at-a-time)
      :time (t2 / then))"
1865,11.5,What is a recursive function?,A function that calls itself.,"It invoke by itself again ana again, unless it reach bas case",4,5,4.5,"# ::snt It invoke by itself again ana again, unless it reach bas case
(ii / invoke-01
      :ARG0 (ii2 / it)
      :ARG1 (a / ana)
      :mod (a2 / again)
      :mod (b / by-oneself)
      :condition (r / reach-01
            :polarity -
            :ARG0 ii2
            :ARG1 (c / case
                  :mod (b2 / bas))))"
1866,11.5,What is a recursive function?,A function that calls itself.,"a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.",5,5,5,"# ::snt a function that solves a problem by dividing the problem into smaller problems, by calling its self again and again, until a base case is reached.
(f / function
      :ARG0-of (s / solve-01
            :ARG1 (p / problem)
            :manner (a / and
                  :op1 (d / divide-02
                        :ARG0 f
                        :ARG1 (p2 / problem)
                        :ARG2 (p3 / problem
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (s2 / small)
                                    :ARG3 (m / more))))
                  :op2 (c / call-01
                        :ARG0 f
                        :ARG1 f
                        :frequency (t / time-and-again)
                        :time (u / until
                              :op1 (r / reach-01
                                    :ARG1 (c2 / case
                                          :mod (b / base))))))))"
1867,11.5,What is a recursive function?,A function that calls itself.,"A function that calls itself over and over again till a base case is reached, then it returns back to the original function.",5,5,5,"# ::snt A function that calls itself over and over again till a base case is reached, then it returns back to the original function.
(r / return-01
      :ARG1 (f / function
            :ARG0-of (c / call-01
                  :mod (a / again
                        :mod (o / over-and-over))
                  :time (u / until
                        :op1 (r2 / reach-01
                              :ARG1 (c2 / case-03
                                    :mod (b / base)))))
            :ARG1-of c)
      :ARG4 (f2 / function
            :mod (o2 / original))
      :direction (b2 / back)
      :time (t / then))"
1868,11.5,What is a recursive function?,A function that calls itself.,"a recursive function is a function that during execution, calls itself over and over until a base case is reached",5,5,5,"# ::snt a recursive function is a function that during execution, calls itself over and over until a base case is reached
(f / function-01
      :ARG1-of (r / recursive-02)
      :ARG0-of (c / call-01
            :time (e / execute-01)
            :frequency (o / over-and-over)
            :time (u / until
                  :op1 (r2 / reach-01
                        :ARG1 (c2 / case-03
                              :mod (b / base)))))
      :ARG1-of c)"
1869,11.5,What is a recursive function?,A function that calls itself.,A function that calls itself. Usually used to split a problem into several smaller problems of the same type.,5,5,5,"# ::snt A function that calls itself. Usually used to split a problem into several smaller problems of the same type.
(m / multi-sentence
      :snt1 (c / call-01
            :ARG0 (f / function)
            :ARG1 f)
      :snt2 (u / use-01
            :ARG1 (s / split-01
                  :ARG1 (p / problem)
                  :ARG2 (p2 / problem
                        :quant (s2 / several)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s3 / small)
                              :ARG3 (m2 / more))
                        :mod (t / type
                              :ARG1-of (s4 / same-01))))
            :mod (u2 / usual)))"
1870,11.5,What is a recursive function?,A function that calls itself.,function that calls it self till the base case is met,5,5,5,"# ::snt function that calls it self till the base case is met
(f / function-01
      :ARG0-of (c / call-01
            :time (u / until
                  :op1 (m / meet-01
                        :ARG1 (c2 / case-03
                              :mod (b / base)))))
      :ARG1-of c)"
1871,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Iteration, performers  a series of checks and loops.",5,5,5,"# ::snt Iteration, performers  a series of checks and loops.
(a / and
      :op1 (ii / iterate-01)
      :op2 (s / series
            :consist-of (a2 / and
                  :op1 (c / check)
                  :op2 (l / loop)))
      :beneficiary (p / person
            :ARG0-of (p2 / perform-01)))"
1872,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,The alternative method is to use loops in the program instead of a function which calls itself.,5,2.5,3.75,"# ::snt The alternative method is to use loops in the program instead of a function which calls itself.
(m / method
      :mod (a / alternative)
      :domain (u / use-01
            :ARG1 (l / loop
                  :location (p / program)
                  :ARG1-of (ii / instead-of-91
                        :ARG2 (f / function
                              :ARG0-of (c / call-01)
                              :ARG1-of c)))))"
1873,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,An alternative to solving a problem using recursive functions is to solve the problem using iteration.,5,5,5,"# ::snt An alternative to solving a problem using recursive functions is to solve the problem using iteration.
(a / alternative
      :domain (s / solve-01
            :ARG1 (p / problem)
            :manner (u / use-01
                  :ARG1 (f / function
                        :mod (r / recursive))))
      :ARG2 (s2 / solve-01
            :ARG1 (p2 / problem)
            :manner (u2 / use-01
                  :ARG1 (ii / iterate-01))))"
1874,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Iteration, this would be more efficient and has repetition structure.",5,5,5,"# ::snt Iteration, this would be more efficient and has repetition structure.
(a / and
      :op1 (e / efficient-01
            :ARG1 (ii / iterate-01)
            :ARG2-of (h / have-degree-91
                  :ARG1 (t / this
                        :ARG3 (m / more)))
            :op2 (h2 / have-03
                  :ARG0 t
                  :ARG1 (s / structure-01
                        :ARG1 (r / repeat-01)))))"
1875,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,One can use iteration or by using a simple while/for loop.,5,5,5,"# ::snt One can use iteration or by using a simple while/for loop.
(p / possible-01
      :ARG1 (u / use-01
            :ARG0 (o / one)
            :ARG1 (o2 / or
                  :op1 (ii / iterate-01)
                  :op2 (u2 / use-01
                        :ARG1 (l / loop
                              :mod (w / while)
                              :mod (f / for))
                        :ARG1-of (s / simple-02)))))"
1876,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration,5,5,5,"# ::snt iteration
(ii / iterate-01)"
1877,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.",5,5,5,"# ::snt Iteration. A while loop or a for loop will be able to accomplish the same desired outcome... It may be faster than recursion, but could also be harder to understand.
(m / multi-sentence
      :snt1 (ii / iterate-01)
      :snt2 (p / possible-01
            :ARG1 (a / accomplish-01
                  :ARG0 (o / or
                        :op1 (l / loop
                              :mod (w / while))
                        :op2 (l2 / loop
                              :mod (f / for)))
                  :ARG1 (o2 / outcome
                        :ARG1-of (d / desire-01)
                        :ARG1-of (s / same-01))))
      :snt3 (c / contrast-01
            :ARG1 (p2 / possible-01
                  :ARG1 (h / have-degree-91
                        :ARG1 (ii2 / it)
                        :ARG2 (f2 / fast-02
                              :ARG1 ii2)
                        :ARG3 (m2 / more)
                        :ARG4 (r / recursion))
                  :ARG2 (h2 / have-degree-91
                        :ARG1 (u / understand-01
                              :ARG1 ii2)
                        :ARG2 (h3 / hard-02
                              :ARG1 u)
                        :ARG3 (m3 / more)
                        :mod (a2 / also)))))"
1878,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,you can also solve the problem iteratively,5,5,5,"# ::snt you can also solve the problem iteratively
(p / possible-01
      :ARG1 (s / solve-01
            :ARG0 (y / you)
            :ARG1 (p2 / problem)
            :manner (ii / iterative)
            :mod (a / also)))"
1879,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iterative,5,5,5,"# ::snt iterative
(ii / iterative)"
1880,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Using iteration loops.,5,5,5,"# ::snt Using iteration loops.
(u / use-01
      :ARG1 (l / loop
            :mod (ii / iterate-01)))"
1881,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Another alternative way to solve a problem instead of using recursive functions is by using iteration.,5,5,5,"# ::snt Another alternative way to solve a problem instead of using recursive functions is by using iteration.
(w / way
      :mod (a / another)
      :manner-of (s / solve-01
            :ARG1 (p / problem)
            :ARG1-of (ii / instead-of-91
                  :ARG2 (u / use-01
                        :ARG1 (f / function
                              :mod (r / recursive)))))
      :mod (a2 / alternative)
      :domain (u2 / use-01
            :ARG1 (ii2 / iterate-01)))"
1882,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.",5,5,5,"# ::snt A recursive function can often be solved using an iterative function, which runs faster, but is often more complicated.
(p / possible-01
      :ARG1 (s / solve-01
            :ARG1 (f / function
                  :mod (r / recursive))
            :manner (u / use-01
                  :ARG1 (f2 / function
                        :mod (ii / iterative)
                        :ARG1-of (r2 / run-01
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (f3 / fast-02
                                          :ARG1 r2)
                                    :ARG3 (m / more))
                              :ARG1-of (c / contrast-01
                                    :ARG2 (h2 / have-degree-91
                                          :ARG1 f2
                                          :ARG2 (c2 / complicate-01
                                                :ARG1 f2)
                                          :ARG3 (m2 / more)
                                          :frequency (o / often)))))))
      :frequency (o2 / often))"
1883,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration,5,5,5,"# ::snt iteration
(ii / iterate-01)"
1884,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Any recursive function can be solved using an iterative method.,5,5,5,"# ::snt Any recursive function can be solved using an iterative method.
(p / possible-01
      :ARG1 (s / solve-01
            :ARG1 (f / function
                  :mod (r / recursive)
                  :mod (a / any))
            :manner (m / method
                  :mod (ii / iterative))))"
1885,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.",5,3,4,"# ::snt Many recursive solutions may also be solved with looping control statements, such as while, for, do-while, etc.
(p / possible-01
      :ARG1 (s / solve-01
            :ARG1 s
            :ARG1 s
            :quant (m / many)
            :mod (r / recursive))
      :ARG2 (s2 / state-01
            :ARG1 (c / control-01)
            :ARG0-of (l / loop-01)
            :example (a / and
                  :op1 (w / while)
                  :op2 (f / for)
                  :op3 (d / do-02
                        :time (w2 / while))
                  :op4 (e / et-cetera)))
      :mod (a2 / also))"
1886,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  ",5,5,5,"# ::snt Using an iterative function, which repeats a specified operation or set of operations until a terminating point or base case is reached.  
(u / use-01
      :ARG1 (f / function
            :mod (ii / iterative)
            :ARG0-of (r / repeat-01
                  :ARG1 (o / or
                        :op1 (o2 / operate-01
                              :ARG1-of (s / specify-01))
                        :op2 (s2 / set
                              :consist-of (o3 / operate-01)))
                  :time (u2 / until
                        :op1 (r2 / reach-01
                              :ARG1 (o4 / or
                                    :op1 (p / point
                                          :ARG0-of (t / terminate-01))
                                    :op2 (c / case
                                          :mod (b / base))))))))"
1887,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteratively,5,5,5,"# ::snt iteratively
(ii / iterative)"
1888,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,using an Iterative calls,5,5,5,"# ::snt using an Iterative calls
(u / use-01
      :ARG1 (c / call-02
            :mod (ii / iterative)))"
1889,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Iteration.,5,5,5,"# ::snt Iteration.
(ii / iterate-01)"
1890,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration is the alternative way to solve a problem,5,5,5,"# ::snt iteration is the alternative way to solve a problem
(w / way
      :manner-of (s / solve-01
            :ARG1 (p / problem))
      :domain (ii / iterate-01)
      :mod (a / alternative))"
1891,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,using an iterative solution instead,5,5,5,"# ::snt using an iterative solution instead
(u / use-01
      :ARG1 (s / solve-01
            :mod (ii / iterative))
      :ARG1-of (ii2 / instead-of-91))"
1892,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Using an iterative solution.  For, while, or do while loop.",5,5,5,"# ::snt Using an iterative solution.  For, while, or do while loop.
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (s / solve-01
                  :mod (ii / iterative)))
      :snt2 (o / or
            :op1 (l / loop
                  :mod (w / while))
            :op2 (w2 / while)
            :op3 l
            :mod (d / do-02
                  :time (w3 / while))))"
1893,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,the alternative way to solve a problem that could be solved using recursion is iteration.,5,5,5,"# ::snt the alternative way to solve a problem that could be solved using recursion is iteration.
(w / way
      :manner-of (s / solve-01
            :ARG1 (p / problem
                  :ARG1-of (s2 / solve-01
                        :ARG1-of (p2 / possible-01)
                        :manner (u / use-01
                              :ARG1 (r / repeat-01)))))
      :mod (a / alternative)
      :domain (ii / iterate-01))"
1894,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. ",5,5,5,"# ::snt Any problem solved recursively could be solved with an iterative function. Iterative replacements for recursive functions may be more difficult to program, but often lead to more efficient solutions to a problem. 
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (s / solve-01
                  :ARG1 (p2 / problem
                        :mod (a / any)
                        :ARG1-of (s2 / solve-01
                              :manner (r / repetition)))
                  :instrument (f / function
                        :mod (ii / iterative))))
      :snt2 (c / contrast-01
            :ARG1 (p3 / possible-01
                  :ARG1 (d / difficult
                        :domain (p4 / program-01
                              :ARG1 (r2 / replace-01
                                    :ARG1 f
                                    :mod r))
                        :mod (ii2 / iterative))
                  :ARG2-of (h / have-degree-91
                        :ARG1 r2
                        :ARG3 (m2 / more))))
      :ARG2 (l / lead-03
            :ARG1 r2
            :ARG2 s2
            :ARG1 (p5 / problem)
            :ARG1-of (e / efficient-01
                  :ARG2-of (h2 / have-degree-91
                        :ARG1 s2
                        :ARG3 (m3 / more))))
      :frequency (o / often))"
1895,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,by iteration,5,5,5,"# ::snt by iteration
(ii / iterate-01)"
1896,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"itteration, like a for loop, a while loop, or a do while loop",5,5,5,"# ::snt itteration, like a for loop, a while loop, or a do while loop
(ii / iterate-01
      :example (o / or
            :op1 (l / loop
                  :mod (f / for))
            :op2 (l2 / loop
                  :mod (w / while))
            :op3 (l3 / loop
                  :mod (d / do-02
                        :time (w2 / while)))))"
1897,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,Iteration by using loops,5,5,5,"# ::snt Iteration by using loops
(ii / iterate-01
      :manner (u / use-01
            :ARG1 (l / loop)))"
1898,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iterative functions,5,5,5,"# ::snt iterative functions
(f / function-01
      :ARG1-of (ii / iterate-01))"
1899,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,iteration,5,5,5,"# ::snt iteration
(ii / iterate-01)"
1900,11.6,What is the alternative way to solve a problem that could be solved through recursive functions?,Through iteration.,"the alt, way is to use a functions parameter in a call ""to"" function. ",2.5,2.5,2.5,"# ::snt the alt, way is to use a functions parameter in a call ""to"" function. 
(w / way
      :mod (a / alt)
      :domain (u / use-01
            :ARG1 (p / parameter
                  :mod (f / function))
            :location (c / call-02
                  :ARG1 (f2 / function))))"
1901,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.,5,4.5,4.75,"# ::snt The array that is declared static retains its modified elements so once it is called upon again the latest elements are modified again.  An array that is not declared static will keep its original elements.
(m / multi-sentence
      :snt1 (r / retain-01
            :ARG0 (a / array
                  :ARG1-of (d / declare-02
                        :polarity -
                        :ARG2 (s / static)))
            :ARG1 (e / element
                  :ARG1-of (m2 / modify-01)
                  :poss a)
            :ARG0-of (c / cause-01
                  :ARG1 (m3 / modify-01
                        :ARG1 (e2 / element
                              :mod (l / last))
                        :mod (a2 / again)
                        :time (c2 / call-up-03
                              :ARG1 a
                              :mod (a3 / again)))))
      :snt2 (k / keep-01
            :ARG0 (a4 / array)
            :ARG1 (e3 / element
                  :mod (o / original)
                  :poss a4)))"
1902,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.,2,3.75,2.875,"# ::snt A static array only has a specific size and it cannot grow. Also static arrays cannot be accessed outside the program which created it.
(m / multi-sentence
      :snt1 (a / and
            :op1 (h / have-03
                  :ARG0 (a2 / array
                        :mod (s / static))
                  :ARG1 (s2 / size
                        :ARG1-of (s3 / specific-02))
                  :mod (o / only))
            :op2 (p / possible-01
                  :polarity -
                  :ARG1 (g / grow-01
                        :ARG1 a2)))
      :snt2 (p2 / possible-01
            :polarity -
            :ARG1 (a3 / access-01
                  :ARG1 (a4 / array
                        :mod (s4 / static))
                  :location (o2 / outside
                        :op1 (p3 / program
                              :ARG0-of (c / create-01
                                    :ARG1 a4))))
            :mod (a5 / also)))"
1903,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.,5,5,5,"# ::snt Arrays declared as static are not created and initialized when a function is called and destroyed when the function terminates.
(a / and
      :op1 (c / create-01
            :polarity -
            :ARG1 (a2 / array
                  :ARG1-of (d / declare-02
                        :ARG2 (s / static))))
      :op2 (ii / initialize-01
            :polarity -
            :ARG1 a2
            :time (c2 / call-02
                  :ARG1 (f / function)))
      :op3 (d2 / destroy-01
            :polarity -
            :ARG1 a2
            :time (t / terminate-01
                  :ARG1 f)))"
1904,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Static can be initialized and non-static cannot in C++.,1,4,2.5,"# ::snt Static can be initialized and non-static cannot in C++.
(a / and
      :op1 (p / possible-01
            :ARG1 (ii / initialize-01
                  :ARG1 (s / static)))
      :op2 (p2 / possible-01
            :polarity -
            :ARG1 (ii2 / initialize-01
                  :ARG1 (s2 / static
                        :polarity -))
            :location (l / language
                  :name (n / name
                        :op1 ""C++""))))"
1905,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array declared static remains the same throughout the execution of the program.,0.5,4,2.25,"# ::snt An array declared static remains the same throughout the execution of the program.
(r / remain-01
      :ARG1 (a / array
            :ARG1-of (d / declare-02
                  :ARG2 (s / static)))
      :ARG3 (s2 / same-01
            :ARG1 a)
      :duration (e / execute-01
            :ARG1 (p / program)))"
1906,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.,3.5,5,4.25,"# ::snt a static array will be called only once. once it has been declared the complier will ignore the static line if it comes to it again.
(m / multi-sentence
      :snt1 (c / call-01
            :frequency 1
            :ARG1 (a / array
                  :mod (s / static))
            :mod (o / only))
      :snt2 (ii / ignore-01
            :ARG0 (p / person
                  :ARG0-of (c2 / complier-01))
            :ARG1 (l / line
                  :mod (s2 / static))
            :condition (c3 / come-01
                  :ARG1 (ii2 / it)
                  :ARG4 (ii3 / it)
                  :mod (a2 / again))
            :time (d / declare-02
                  :ARG1 (ii4 / it))))"
1907,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???",3.5,3.75,3.625,"# ::snt The static array will be available to the whole of the program, whereas an array that is not static is only available within the scope in which it is declared.   //pass-by-reference???
(m / multi-sentence
      :snt1 (a / available-02
            :ARG2 (p / program
                  :mod (w / whole))
            :ARG3 (a2 / array
                  :ARG1-of (s / static-02
                        :polarity -)))
      :snt2 (c / contrast-01
            :ARG1 (a3 / available-02
                  :ARG2 (a4 / array
                        :ARG1-of (s2 / static-02
                              :polarity -))
                  :mod (o / only)
                  :location (s3 / scope
                        :location-of (d / declare-02
                              :ARG1 a4))))
      :snt3 (p2 / pass-by-reference-02
            :polarity (a5 / amr-unknown)))"
1908,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,a static array has a predetermined size and that size cannot be altered,2,3.75,2.875,"# ::snt a static array has a predetermined size and that size cannot be altered
(a / and
      :op1 (h / have-03
            :ARG0 (a2 / array
                  :mod (s / static))
            :ARG1 (s2 / size
                  :ARG1-of (d / determine-01
                        :ARG1-of (p / predetermine-01))))
      :op2 (p2 / possible-01
            :polarity -
            :ARG1 (a3 / alter-01
                  :ARG1 s2)))"
1909,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Arrays declared static can not be changed.  One not declared static can be altered.,0.5,3.75,2.125,"# ::snt Arrays declared static can not be changed.  One not declared static can be altered.
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (c / change-01
                  :ARG1 (a / array
                        :ARG1-of (d / declare-02
                              :ARG2 (s / static)))))
      :snt2 (p2 / possible-01
            :ARG1 (a2 / alter-01
                  :ARG1 (a3 / array
                        :ARG1-of (d2 / declare-02
                              :polarity -)))))"
1910,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.",5,4,4.5,"# ::snt an array that is declared as static will retain the values stored in it's elements between function calls, and will not reinitialize them to default values.
(a / and
      :op1 (r / retain-01
            :ARG0 (a2 / array
                  :ARG1-of (d / declare-02
                        :ARG2 (s / static)))
            :ARG1 (v / value
                  :ARG1-of (s2 / store-01
                        :ARG2 (e / element
                              :poss a2))
                  :time (b / between
                        :op1 (c / call-02
                              :ARG1 (f / function-01)))))
      :op2 (r2 / reinitialize-01
            :polarity -
            :ARG0 a2
            :ARG1 v
            :ARG2 (v2 / value
                  :ARG1-of (d2 / default-01))))"
1911,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array that is declared static causes anything that is not initialized to be set to 0.,1,3.75,2.375,"# ::snt An array that is declared static causes anything that is not initialized to be set to 0.
(c / cause-01
      :ARG0 (d / declare-01
            :ARG1 (a / array)
            :ARG2 (s / static))
      :ARG1 (s2 / set-02
            :ARG1 (a2 / anything
                  :ARG1-of (ii / initialize-01
                        :polarity -))
            :ARG2 0))"
1912,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array will have a null character at the end of the array.,2.5,2.5,2.5,"# ::snt A static array will have a null character at the end of the array.
(h / have-03
      :ARG0 (a / array
            :mod (s / static))
      :ARG1 (c / character
            :mod (n / null))
      :time (e / end-01
            :ARG1 (a2 / array)))"
1913,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,static arrays cannot be changed while normal arrays can be changed,0.5,3.75,2.125,"# ::snt static arrays cannot be changed while normal arrays can be changed
(c / contrast-01
      :ARG1 (p / possible-01
            :polarity -
            :ARG1 (c2 / change-01
                  :ARG1 (a / array
                        :mod (s / static))))
      :ARG2 (p2 / possible-01
            :ARG1 (c3 / change-01
                  :ARG1 (a2 / array
                        :ARG1-of (n / normal-02)))))"
1914,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.,3,3,3,"# ::snt An array they is declared as static can be accessed outside of the method it was declared without passing it as an argument to other functions in the same class.
(p / possible-01
      :ARG1 (a / access-01
            :ARG1 (a2 / array
                  :ARG1-of (d / declare-02
                        :ARG2 (s / static)))
            :location (o / outside
                  :op1 (m / method
                        :ARG1-of (d2 / declare-02)))
            :manner (p2 / pass-03
                  :polarity -
                  :ARG1 a2
                  :ARG2 (f / function
                        :mod (o2 / other)
                        :part-of (c / class
                              :ARG1-of (s2 / same-01)))
                  :prep-as (a3 / argument))))"
1915,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"A static array has class scope, allowing it to remain where other arrays might be recycled.",5,3.25,4.125,"# ::snt A static array has class scope, allowing it to remain where other arrays might be recycled.
(h / have-03
      :ARG0 (a / array
            :mod (s / static))
      :ARG1 (s2 / scope
            :mod (c / class))
      :ARG0-of (a2 / allow-01
            :ARG1 (r / remain-01
                  :ARG1 a
                  :location (p / place
                        :location-of (p2 / possible-01
                              :ARG1 (r2 / recycle-01
                                    :ARG1 (a3 / array
                                          :mod (o / other))))))))"
1916,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.,5,4.5,4.75,"# ::snt An array that is static does not change or uninitialize if called later unless explicitly acted upon.  It does not terminate or change across objects.  An automatic local array will be cleared and uninitialized if called later outside of it's specific scope.
(m / multi-sentence
      :snt1 (o / or
            :op1 (c / change-01
                  :polarity -
                  :ARG1 (a / array
                        :mod (s / static)))
            :op2 (ii / initialize-01
                  :polarity -
                  :ARG1 a)
            :condition (c2 / call-02
                  :ARG1 a
                  :time (a2 / after))
            :condition (a3 / act-on-02
                  :polarity -
                  :ARG1-of (e / explicit-02)))
      :snt2 (o2 / or
            :op1 (t / terminate-01
                  :polarity -
                  :ARG1 (ii2 / it))
            :op2 (c3 / change-01
                  :polarity -
                  :ARG1 ii2
                  :location (a4 / across
                        :op1 (o3 / object))))
      :snt3 (a5 / and
            :op1 (c4 / clear-06
                  :ARG1 (a6 / array
                        :ARG1-of (l / local-02)
                        :mod (a7 / automatic)))
            :op2 (ii3 / initialize-01
                  :polarity -
                  :ARG1 a6)
            :condition (c5 / call-01
                  :ARG1 a6
                  :time (a8 / after
                        :op1 (n / now))
                  :location (o4 / outside
                        :op1 (s2 / scope
                              :ARG1-of (s3 / specific-02)
                              :poss a6)))))"
1917,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.",2,3.75,2.875,"# ::snt one declared as static is one that is already defined. The program knows the length and the array from the start, whereas non-static arrays are declared or assigned later.
(m / multi-sentence
      :snt1 (d / define-01
            :ARG1 (o / one
                  :ARG1-of (d2 / declare-02
                        :ARG2 (s / static)))
            :time (a / already))
      :snt2 (c / contrast-01
            :ARG1 (k / know-01
                  :ARG0 (p / program)
                  :ARG1 (a2 / and
                        :op1 (l / length)
                        :op2 (a3 / array))
                  :time (f / from
                        :op1 (s2 / start-01)))
            :ARG2 (o2 / or
                  :op1 (d3 / declare-02
                        :ARG1 (a4 / array
                              :mod (s3 / static
                                    :polarity -)))
                  :op2 (a5 / assign-01
                        :ARG1 a4
                        :time (a6 / after
                              :op1 d3)))))"
1918,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.",5,5,5,"# ::snt a non static array must reinitialize itself every function call, while a static array will only initialize itself once, unless otherwise forced.
(c / contrast-01
      :ARG1 (o / obligate-01
            :ARG1 (a / array
                  :mod (s / static
                        :polarity -))
            :ARG2 (r / reinitialize-01
                  :ARG0 a
                  :ARG1 a
                  :frequency (c2 / call-02
                        :ARG1 (f / function))
                  :mod (e / every)))
      :ARG2 (ii / initialize-01
            :ARG0 a
            :ARG1 a
            :frequency 1
            :mod (o2 / only)
            :condition (f2 / force-01
                  :polarity -
                  :ARG1 a
                  :ARG2 (h / have-polarity-91
                        :ARG1 (ii2 / initialize-01
                              :ARG2 -)))))"
1919,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.,5,3.75,4.375,"# ::snt A static array retains any modified values after a function call. Automatic arrays reset to their initial values when the function ends.
(m / multi-sentence
      :snt1 (r / retain-01
            :ARG0 (a / array
                  :mod (s / static))
            :ARG1 (v / value
                  :ARG1-of (m2 / modify-01)
                  :mod (a2 / any))
            :time (a3 / after
                  :op1 (c / call-02
                        :ARG1 (f / function))))
      :snt2 (r2 / reset-01
            :ARG1 (a4 / array
                  :mod (a5 / automatic))
            :ARG2 (v2 / value
                  :mod (ii / initial)
                  :poss a4)
            :time (e / end-01
                  :ARG1 (f2 / function))))"
1920,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.",5,4,4.5,"# ::snt a static array is one that keeps its values and is not initialized every time a class function is called, it's data is not lost at function end.
(a / and
      :op1 (k / keep-01
            :ARG0 (a2 / array
                  :mod (s / static))
            :ARG1 (v / value
                  :poss a2))
      :op2 (ii / initialize-01
            :polarity -
            :ARG1 a2
            :frequency (r / rate-entity-91
                  :ARG4 (c / call-02
                        :ARG1 (f / function
                              :mod (c2 / class)))))
      :op3 (l / lose-02
            :polarity -
            :ARG1 (d / data
                  :poss a2)
            :time (e / end-01
                  :ARG1 (f2 / function))))"
1921,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.,0.5,4,2.25,"# ::snt an array that is declared as static can only be used in the function that its being called in. Its a constant array. Static is another way of say const.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (u / use-01
                  :ARG1 (a / array
                        :ARG1-of (d / declare-02
                              :ARG2 (s / static)))
                  :ARG2 (f / function
                        :ARG1-of (c / call-02
                              :ARG2 a))
                  :mod (o / only)))
      :snt2 (a2 / array
            :mod (c2 / constant)
            :domain (ii / it))
      :snt3 (w / way
            :mod (a3 / another)
            :manner-of (s2 / say-01
                  :ARG1 (s3 / string-entity
                        :value ""const""))
            :domain (s4 / static)))"
1922,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.,0.5,3.75,2.125,"# ::snt Values in an array that is not delcared as static will remain constant.  When an array is declared const values within the array can be manipulated.
(m / multi-sentence
      :snt1 (r / remain-01
            :ARG1 (v / value
                  :location (a / array
                        :ARG1-of (d / declare-01
                              :polarity -
                              :ARG2 (s / static))))
            :ARG3 (c / constant))
      :snt2 (p / possible-01
            :ARG1 (m2 / manipulate-01
                  :ARG1 (v2 / value
                        :location (a2 / array)))
            :time d
            :ARG1 (c2 / const)))"
1923,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,the data of a static array cannot be changed,0.5,3.75,2.125,"# ::snt the data of a static array cannot be changed
(p / possible-01
      :polarity -
      :ARG1 (c / change-01
            :ARG1 (d / data
                  :poss (a / array
                        :mod (s / static)))))"
1924,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).",5,2.5,3.75,"# ::snt Standard arrays terminate when the functions that call them finish. A static array is not removed from memory when it's parent function terminates, leaving it available for other functions (or new instances of the original function).
(m / multi-sentence
      :snt1 (t / terminate-01
            :ARG1 (a / array
                  :mod (s / standard))
            :time (f / finish-01
                  :ARG1 (f2 / function
                        :ARG0-of (c / call-01
                              :ARG1 a))))
      :snt2 (r / remove-01
            :polarity -
            :ARG1 (a2 / array
                  :mod (s2 / static))
            :ARG2 (m2 / memory)
            :time (t2 / terminate-01
                  :ARG1 (f3 / function
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 a2
                              :ARG2 (p / parent))))
            :ARG0-of (l / leave-13
                  :ARG1 (a3 / available-02
                        :ARG1 a2
                        :ARG2 (o / or
                              :op1 (f4 / function
                                    :mod (o2 / other))
                              :op2 (ii / instance
                                    :ARG1-of (n / new-01)
                                    :mod (f5 / function
                                          :mod (o3 / original))))))))"
1925,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.,4,4.5,4.25,"# ::snt by defining static array it doese not lose scope in locala function. static array makes programm more scalable. non static array lose scope inside the local function.
(m / multi-sentence
      :snt1 (l / lose-02
            :polarity -
            :ARG0 (ii / it)
            :ARG1 (s / scope)
            :location (f / function
                  :mod (l2 / local))
            :manner (d / define-01
                  :ARG0 ii
                  :ARG1 (a / array
                        :mod (s2 / static))))
      :snt2 (m2 / make-02
            :ARG0 (a2 / array
                  :mod (s3 / static))
            :ARG1 (s4 / scalable-03
                  :ARG1 (p / program)
                  :ARG2-of (h / have-degree-91
                        :ARG1 p
                        :ARG3 (m3 / more))))
      :snt3 (l3 / lose-02
            :ARG0 (a3 / array
                  :mod (s5 / static
                        :polarity -))
            :ARG1 (s6 / scope)
            :location (ii2 / inside
                  :op1 (f2 / function
                        :ARG1-of (l4 / local-02)))))"
1926,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,static arrays can be called from anywhere,3,1.25,2.125,"# ::snt static arrays can be called from anywhere
(p / possible-01
      :ARG1 (c / call-01
            :ARG1 (a / array
                  :mod (s / static))
            :source (a2 / anywhere)))"
1927,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.,0.5,3.75,2.125,"# ::snt A static array cannot be changed. A regular array can be changed when it is passed to a function or manually.
(m / multi-sentence
      :snt1 (p / possible-01
            :polarity -
            :ARG1 (c / change-01
                  :ARG1 (a / array
                        :mod (s / static))))
      :snt2 (p2 / possible-01
            :ARG1 (c2 / change-01
                  :ARG1 (a2 / array
                        :ARG1-of (r / regular-03))
                  :time (o / or
                        :op1 (p3 / pass-01
                              :ARG1 a2
                              :ARG2 (f / function))
                        :op2 (m2 / manually)))))"
1928,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function",3,3.75,3.375,"# ::snt a static array can be can be edited throughout the program, while a non-static array can only be edited within a given function
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (e / edit-01
                  :ARG1 (a / array
                        :mod (s / static))
                  :duration (t / throughout
                        :op1 (p2 / program))))
      :ARG2 (p3 / possible-01
            :ARG1 (e2 / edit-01
                  :ARG1 (a2 / array
                        :mod (s2 / static
                              :polarity -))
                  :mod (o / only)
                  :location (f / function
                        :ARG1-of (g / give-01)))))"
1929,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,"An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.",5,3.75,4.375,"# ::snt An array that is declared static is allocated when the program begins to run, and is not freed until the program exits, but has limited scope. A non-static array is allocated and freed every time that it comes in and out of scope.
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / allocate-01
                  :ARG1 (a3 / array
                        :ARG1-of (d / declare-02
                              :ARG2 (s / static)))
                  :time (b / begin-01
                        :ARG0 (p / program)
                        :ARG1 (r / run-01
                              :ARG0 p)))
            :op2 (f / free-01
                  :polarity -
                  :ARG1 a3
                  :time (u / until
                        :op1 (e / exit-01
                              :ARG0 (p2 / program))))
            :concession-of (h / have-03
                  :ARG0 a3
                  :ARG1 (s2 / scope
                        :ARG1-of (l / limit-01))))
      :snt2 (a4 / and
            :op1 (a5 / allocate-01
                  :ARG1 (a6 / array
                        :mod (s3 / static
                              :polarity -)))
            :op2 (f2 / free-01
                  :ARG1 a6)
            :frequency (r2 / rate-entity-91
                  :ARG4 (a7 / and
                        :op1 (c / come-01
                              :ARG1 a6
                              :ARG4 (s4 / scope)))
                  :op2 (c2 / come-01
                        :ARG1 a6
                        :ARG4 (s5 / scope)))))"
1930,11.7,What is the difference between an array that is declared as static and one that is not?,The static arrays are intialized only once when the function is called.,static has a predetermined size that cannot be passed while vis versa.,2,3.75,2.875,"# ::snt static has a predetermined size that cannot be passed while vis versa.
(h / have-03
      :ARG0 (s / static)
      :ARG1 (s2 / size
            :ARG1-of (d / determine-01
                  :ARG1-of (p / predetermine-01))
            :ARG1-of (p2 / pass-05
                  :ARG1-of (p3 / possible-01
                        :polarity -))
            :ARG1-of (c / contrast-01
                  :ARG2 (p4 / pass-05
                        :ARG1 s
                        :ARG2 (v / vis-versa)))))"
1931,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,the type char[] has a  null ('\n' ) element at the very end.,5,5,5,"# ::snt the type char[] has a  null ('\n' ) element at the very end.
(h / have-03
      :ARG0 (s / string-entity
            :value ""char[]""
            :ARG1-of (t / type-01))
      :ARG1 (e / element
            :mod (n / null)
            :ARG1-of (m / mean-01
                  :ARG2 s
                  :value ""n""))
      :time (e2 / end-01
            :mod (v / very)))"
1932,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.,0,3.75,1.875,"# ::snt a variable char is basically any non command key on the keyboard that you can press. A string is a collection of letters or numbers that is stored together to be used later. Comonly strings are used for words. Chars can be used for less but can have opperations performed on them in a useful way.
(m / multi-sentence
      :snt1 (k / key
            :mod (a / any)
            :mod (c / command
                  :polarity -)
            :location (k2 / keyboard)
            :ARG1-of (p / press-01
                  :ARG0 (y / you)
                  :ARG1-of (p2 / possible-01))
            :mod (b / basic))
      :snt2 (s / string
            :domain (c2 / collection
                  :consist-of (o / or
                        :op1 (l / letter)
                        :op2 (n / number))
                  :ARG1-of (s2 / store-01
                        :manner (t / together)
                        :purpose (u / use-01
                              :ARG1 s
                              :time (a2 / after
                                    :op1 (n2 / now))))))
      :snt3 (u2 / use-01
            :ARG1 (s3 / string
                  :mod (o2 / only))
            :ARG2 (w / word))
      :snt4 (c3 / contrast-01
            :ARG1 (p3 / possible-01
                  :ARG1 (u3 / use-01
                        :ARG1 (c4 / char)
                        :ARG3 (l2 / less)))
            :ARG2 (p4 / possible-01
                  :ARG1 (p5 / perform-02
                        :ARG1 (t2 / thing
                              :ARG1-of (u4 / useful-05))
                        :ARG2 c4))))"
1933,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.,5,5,5,"# ::snt The programmer must provide the null terminating character in a string of characters using type char[] and must also ensure that the array is large enough to contain the input string of characters and the null terminating character.
(a / and
      :op1 (o / obligate-01
            :ARG1 (p / person
                  :ARG0-of (p2 / program-01))
            :ARG2 (p3 / provide-01
                  :ARG0 p
                  :ARG1 (c / character
                        :ARG0-of (t / terminate-01
                              :polarity -))
                  :location (s / string
                        :consist-of (c2 / character)
                        :ARG0-of (u / use-01
                              :ARG1 (s2 / string
                                    :consist-of c2)))))
      :op2 (e / ensure-01
            :ARG0 p
            :ARG1 (h / have-degree-91
                  :ARG1 (a2 / array)
                  :ARG2 (l / large)
                  :ARG3 (e2 / enough)
                  :ARG6 (c3 / contain-01
                        :ARG0 a2
                        :ARG1 (a3 / and
                              :op1 (s3 / string
                                    :consist-of (c4 / character)
                                    :ARG1-of (ii / input-01))
                              :op2 c4)))
            :mod (a4 / also)))"
1934,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,String of characters are followed by a null statement.  type string is for example   string s;,5,5,5,"# ::snt String of characters are followed by a null statement.  type string is for example   string s;
(m / multi-sentence
      :snt1 (f / follow-01
            :ARG1 (s / string
                  :consist-of (c / character))
            :ARG2 (s2 / state-01
                  :ARG1 (n / null)))
      :snt2 (s3 / string
            :ARG1-of (t / type-01)
            :example (s4 / string
                  :name (n2 / name
                        :op1 ""s""))))"
1935,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,String contains a word where as char can contain phrases or a string of characters.,0,3.75,1.875,"# ::snt String contains a word where as char can contain phrases or a string of characters.
(c / contrast-01
      :ARG1 (c2 / contain-01
            :ARG0 (s / string)
            :ARG1 (w / word))
      :ARG2 (p / possible-01
            :ARG1 (c3 / contain-01
                  :ARG0 (s2 / string
                        :name (n / name
                              :op1 ""char""))
                  :ARG1 (o / or
                        :op1 (p2 / phrase)
                        :op2 (s3 / string
                              :consist-of (c4 / character))))))"
1936,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].,0,4,2,"# ::snt a string is a variable with a single entinty of letters combined into one while in a char[] each letter is assigned a memory value and each has its own variable assigned i.e. char[0] char[1].
(c / contrast-01
      :ARG1 (v / variable
            :domain (s / string)
            :consist-of (e / entity
                  :quant-of (l / letter
                        :ARG1-of (c2 / combine-01
                              :ARG2 (o / one)))
                  :ARG1-of (s2 / single-02)))
      :ARG2 (a / and
            :op1 (a2 / assign-01
                  :ARG1 (v2 / value
                        :mod (m / memory))
                  :ARG2 (l2 / letter
                        :mod (e2 / each)))
            :op2 (a3 / assign-01
                  :ARG1 (v3 / variable
                        :poss l2
                        :ARG1-of (m2 / mean-01
                              :ARG2 a
                              :op1 (s3 / string)
                              :op2 (s4 / string
                                    :name (n / name
                                          :op1 ""char[0"")))
                        :op3 (s5 / string
                              :name n
                              :op1 ""char[1"")))))"
1937,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.",5,2.5,3.75,"# ::snt A string contains a null character at the end of the string, which makes it easily possible to get the string length. A char array can have a virtually unlimited length, therefore, its size must be declared/limited.
(m / multi-sentence
      :snt1 (c / contain-01
            :ARG0 (s / string)
            :ARG1 (c2 / character
                  :mod (n / null))
            :location (e / end-01
                  :ARG1 (s2 / string))
            :ARG0-of (m2 / make-02
                  :ARG1 (p / possible-01
                        :ARG1 (g / get-01
                              :ARG1 (l / length
                                    :mod (s3 / string))
                              :ARG1-of (e2 / easy-05)))))
      :snt2 (p2 / possible-01
            :ARG1 (h / have-03
                  :ARG0 (a / array
                        :mod (c3 / char))
                  :ARG1 (l2 / length
                        :ARG1-of (l3 / limit-01
                              :polarity -
                              :mod (v / virtual))))
            :ARG0-of (c4 / cause-01
                  :ARG1 (o / obligate-01
                        :ARG1 (s4 / slash
                              :op1 (d / declare-02
                                    :ARG1 (s5 / size
                                          :poss a))
                              :op2 l3
                              :ARG1 (s6 / size))))))"
1938,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,an array of characters stores a null character at the end,5,5,5,"# ::snt an array of characters stores a null character at the end
(s / store-01
      :ARG0 (a / array
            :consist-of (c / character))
      :ARG1 (c2 / character
            :mod (n / null))
      :time (e / end-01))"
1939,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.",1.5,4,2.75,"# ::snt When you read a string of characters, you also read in the white space.  When you read characters declared char you only read the characters, no white space.
(m / multi-sentence
      :snt1 (r / read-01
            :ARG0 (y / you)
            :location (s / space
                  :ARG1-of (w / white-02))
            :time (r2 / read-01
                  :ARG0 y
                  :ARG1 (s2 / string
                        :consist-of (c / character)))
            :mod (a / also))
      :snt2 (r3 / read-01
            :ARG0 (y2 / you)
            :ARG1 (c2 / character
                  :ARG1-of (d / declare-02
                        :ARG2 s2)))
      :mod (o / only)
      :ARG1-of (c3 / contrast-01
            :ARG2 (s3 / space
                  :polarity -
                  :ARG1-of (w2 / white-02))))"
1940,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.",1.5,5,3.25,"# ::snt Character arrays will terminate at any whitespace, including spaces. Strings terminate when they encounter the new line character.
(m / multi-sentence
      :snt1 (t / terminate-01
            :ARG1 (a / array
                  :consist-of (c / character))
            :location (w / whitespace
                  :mod (a2 / any)
                  :ARG2-of (ii / include-01
                        :ARG1 (s / space))))
      :snt2 (t2 / terminate-01
            :ARG1 (s2 / string)
            :time (e / encounter-01
                  :ARG0 s2
                  :ARG1 (c2 / character
                        :mod (l / line)
                        :ARG1-of (n / new-01)))))"
1941,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.,0,3.75,1.875,"# ::snt The difference is that a string that is declared a variable of type char[] is each char is included in the array versus the string of characters that is read into a variable.
(d / differ-02
      :ARG1 (ii / include-01
            :ARG1 (s / string
                  :ARG1-of (d2 / declare-02
                        :ARG2 (v / variable
                              :ARG1-of (t / type-03
                                    :ARG2 (s2 / string
                                          :consist-of (c / character))))))
            :ARG2 (a / array))
      :ARG3 (ii2 / include-01
            :ARG1 (s3 / string
                  :consist-of (c2 / character)
                  :ARG1-of (r / read-01
                        :ARG2 (v2 / variable)))))"
1942,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.",0,3.75,1.875,"# ::snt An array of strings reads the string literals, meaning anything within ""quotes"". A char array reads a string as each individual character.
(m / multi-sentence
      :snt1 (r / read-01
            :ARG0 (a / array
                  :consist-of (s / string))
            :ARG1 (l / literal
                  :mod (s2 / string)
                  :ARG1-of (m2 / mean-01
                        :ARG2 (a2 / anything
                              :location (q / quote-01)))))
      :snt2 (r2 / read-01
            :ARG0 (a3 / array
                  :consist-of (s3 / string))
            :ARG1 (c / character
                  :mod (ii / individual)
                  :mod (e / each))))"
1943,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,character arrays can call on individual letters were a string array can only call words.,0,3.75,1.875,"# ::snt character arrays can call on individual letters were a string array can only call words.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (c2 / call-02
                  :ARG0 (a / array
                        :mod (c3 / character))
                  :ARG1 (l / letter
                        :mod (ii / individual))))
      :ARG2 (p2 / possible-01
            :ARG1 (c4 / call-02
                  :ARG0 (a2 / array
                        :mod (s / string))
                  :ARG1 (w / word)
                  :mod (o / only))))"
1944,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The character array has an end of line character at the end of it.,4.5,5,4.75,"# ::snt The character array has an end of line character at the end of it.
(h / have-03
      :ARG0 (a / array
            :consist-of (c / character))
      :ARG1 (c2 / character
            :mod (e / end-01
                  :ARG1 (l / line)
                  :location-of h)))"
1945,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"Type char[] may contain a null value as the last element, whereas type string will not.",5,5,5,"# ::snt Type char[] may contain a null value as the last element, whereas type string will not.
(c / contrast-01
      :ARG1 (p / possible-01
            :ARG1 (c2 / contain-01
                  :ARG0 (s / string
                        :ARG1-of (t / type-01))
                  :ARG1 (v / value
                        :mod (n / null))
                  :prep-as (e / element
                        :ord (o / ordinal-entity
                              :value -1))))
      :ARG2 (p2 / possible-01
            :polarity -
            :ARG1 (c3 / contain-01
                  :ARG0 s
                  :ARG1 v)))"
1946,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,The variable of type string has a terminating character \0 at the end of it.,2.5,5,3.75,"# ::snt The variable of type string has a terminating character \0 at the end of it.
(h / have-03
      :ARG0 (v / variable
            :mod (s / string
                  :mod (t / type)))
      :ARG1 (c / character
            :value 0
            :ARG0-of (t2 / terminate-01))
      :time (e / end-01
            :ARG1 v))"
1947,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,the one that is type string has an extra string member. The /0 at the end.,2.5,5,3.75,"# ::snt the one that is type string has an extra string member. The /0 at the end.
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (o / one
                  :ARG1-of (t / type-01
                        :ARG2 (s / string)))
            :ARG1 (m2 / member
                  :mod (s2 / string)
                  :mod (e / extra)))
      :snt2 (s3 / string
            :name (n / name
                  :op1 ""/0"")
            :location (e2 / end)))"
1948,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"a string has variable size and function calls available, while an character array usually has a static size.",2.5,4,3.25,"# ::snt a string has variable size and function calls available, while an character array usually has a static size.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (s / string)
            :ARG1 (a / and
                  :op1 (s2 / size
                        :ARG1-of (v / variable-02))
                  :op2 (c2 / call-03
                        :ARG1 (f / function-01))
                  :ARG1-of (a2 / available-02)))
      :ARG2 (h2 / have-03
            :ARG0 (a3 / array
                  :consist-of (c3 / character))
            :ARG1 (s3 / size
                  :ARG1-of (s4 / static-02))
            :mod (u / usual)))"
1949,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a string char[] adds a null value to the end of the string.,5,5,5,"# ::snt a string char[] adds a null value to the end of the string.
(a / add-02
      :ARG0 (s / string
            :name (n / name
                  :op1 ""char""))
      :ARG1 (v / value
            :mod (n2 / null))
      :ARG2 (e / end-01
            :ARG1 (s2 / string)))"
1950,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.",5,5,5,"# ::snt char array needs an end character signature and is made up of characters each separate from each other, a string is an object in itself, with a value that the user enters.
(m / multi-sentence
      :snt1 (a / and
            :op1 (n / need-01
                  :ARG0 (a2 / array
                        :mod (s / string))
                  :ARG1 (s2 / signature
                        :mod (c / character
                              :mod (e / end))))
            :op2 (m2 / make-up-10
                  :ARG1 a2
                  :ARG2 (c2 / character
                        :ARG1-of (s3 / separate-02
                              :ARG2 (o / other
                                    :mod (e2 / each))))))
      :snt2 (o2 / object
            :domain s
            :ARG0-of (h / have-03
                  :ARG1 (v / value
                        :ARG1-of (e3 / enter-01
                              :ARG0 (p / person
                                    :ARG0-of (u / use-01)))))))"
1951,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.",0,4,2,"# ::snt the variable of type char[], each character is stored into a different memory address and can be accessed easly, where as in a string of character, its not easy to be able to access each character in the string.
(c / contrast-01
      :ARG1 (a / and
            :op1 (s / store-01
                  :ARG1 (c2 / character
                        :mod (e / each))
                  :ARG2 (a2 / address
                        :mod (m / memory)
                        :ARG1-of (d / differ-02)))
            :op2 (p / possible-01
                  :ARG1 (a3 / access-01
                        :ARG1 c2
                        :manner (e2 / easy-05)))
            :ARG2 (p2 / possible-01
                  :polarity -
                  :ARG1 (a4 / access-01
                        :ARG1 c2
                        :location (s2 / string
                              :consist-of c2))))
      :ARG2 (v / variable
            :name (n / name
                  :op1 ""char"")
            :mod (t / type)))"
1952,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.",0,4,2,"# ::snt When the string is passed into the array char, individual characters are stored and can be manipulated.  Although when a word is stored into a string variable, it is stored as one word and not as individual characters.
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / store-01
                  :ARG1 (c / character
                        :mod (ii / individual))
                  :time (p / pass-01
                        :ARG1 (s2 / string)
                        :ARG2 (c2 / char
                              :mod (a2 / array))))
            :op2 (p2 / possible-01
                  :ARG1 (m2 / manipulate-01
                        :ARG1 c)))
      :snt2 (c3 / contrast-01
            :ARG1 (s3 / store-01
                  :ARG1 (w / word)
                  :ARG2 (w2 / word
                        :quant 1))
            :ARG2 (s4 / store-01
                  :polarity -
                  :ARG1 w
                  :ARG2 (c4 / character
                        :mod (ii2 / individual)))
            :time (s5 / store-01
                  :ARG1 w
                  :ARG2 (v / variable
                        :mod (s6 / string)))))"
1953,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only",0,3.75,1.875,"# ::snt a string variable can change in size and is passed to functions by value, whereas a type char[] cannot change in size and is passed to functions by reference only
(c / contrast-01
      :ARG1 (a / and
            :op1 (p / possible-01
                  :ARG1 (c2 / change-01
                        :ARG1 (v / variable
                              :mod (s / string))
                        :ARG2 (s2 / size)))
            :op2 (p2 / pass-01
                  :ARG1 v
                  :ARG2 (f / function)
                  :manner (v2 / value)))
      :ARG2 (a2 / and
            :op1 (p3 / possible-01
                  :polarity -
                  :ARG1 (c3 / change-01
                        :ARG1 (c4 / char
                              :mod (t / type))
                        :ARG2 (s3 / size)))
            :op2 (p4 / pass-01
                  :ARG1 c4
                  :ARG2 (f2 / function)
                  :manner (r / reference
                        :mod (o / only)))))"
1954,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.",1.5,3.75,2.625,"# ::snt A string type string acts as a single object, with individual char entities accessible only through specific string class functions. A char array is less robust, but allows direct access to specific char entities.
(m / multi-sentence
      :snt1 (a / act-01
            :ARG0 (s / string
                  :mod (t / type
                        :mod (s2 / string)))
            :ARG1 (o / object
                  :ARG1-of (s3 / single-02)))
      :snt2 (a2 / accessible-02
            :ARG1 (e / entity
                  :mod (c / char)
                  :mod (ii / individual))
            :manner (f / function-01
                  :ARG1 (c2 / class
                        :mod s)
                  :ARG1-of (s4 / specific-02))
            :mod (o2 / only))
      :snt3 (c3 / contrast-01
            :ARG1 (r / robust
                  :ARG2-of (h / have-degree-91
                        :ARG1 (a3 / array
                              :mod (c4 / char))
                        :ARG3 (l / less)))
            :ARG2 (a4 / allow-01
                  :ARG0 a3
                  :ARG1 (a5 / access-01
                        :ARG1 (e2 / entity
                              :mod (c5 / char))
                        :ARG1-of (d / direct-02)))))"
1955,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.",0,3.75,1.875,"# ::snt In arrays strings are stored as a characters (char[]), each character of string will be stored in each memory location of the array, while string of characters is only one memory location.
(c / contrast-01
      :ARG1 (s / store-01
            :ARG1 (s2 / string)
            :ARG2 (c2 / character
                  :mod (s3 / string))
            :prep-as (c3 / character
                  :mod (s4 / string))
            :location (l / location
                  :mod (m / memory)
                  :mod (e / each)
                  :part-of (a / array)))
      :ARG2 (s5 / store-01
            :ARG1 (c4 / character
                  :mod e)
            :part-of s4)
      :location (l2 / location
            :quant 1
            :mod (m2 / memory)
            :mod (o / only)
            :domain s4))"
1956,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string",5,5,5,"# ::snt an array of characters has one more element, its last element,the terminating element, or null, which doesnt exist in a variable of type string
(h / have-03
      :ARG0 (a / array
            :consist-of (c / character))
      :ARG1 (e / element
            :quant 1
            :mod (m / more)
            :ARG1-of (m2 / mean-01
                  :ARG2 (o / or
                        :op1 (e2 / element
                              :ARG0-of (t / terminate-01))
                        :op2 (n / null)
                        :ARG1-of (e3 / exist-01
                              :polarity -
                              :location (v / variable
                                    :ARG1-of (t2 / type-03
                                          :ARG2 (s / string))))))))"
1957,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0'),5,5,5,"# ::snt A string of characters is a specific variable type that has no extra data at the end. A string of type char[] is all the characters and a null ('\0')
(m / multi-sentence
      :snt1 (t / type
            :mod (v / variable)
            :ARG1-of (s / specific-02)
            :domain (s2 / string
                  :consist-of (c / character))
            :ARG0-of (h / have-03
                  :polarity -
                  :ARG1 (d / data
                        :mod (e / extra))
                  :time (e2 / end-01)))
      :snt2 (a / and
            :op1 (c2 / character
                  :mod (a2 / all))
            :op2 (n / null
                  :domain (s3 / string
                        :consist-of (t2 / type)))
            :domain (s4 / string
                  :consist-of (s5 / string
                        :consist-of (t3 / type)))))"
1958,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,a string of characters will have a null character or value at the end of the string,5,5,5,"# ::snt a string of characters will have a null character or value at the end of the string
(h / have-03
      :ARG0 (s / string
            :consist-of (c / character))
      :ARG1 (o / or
            :op1 (c2 / character
                  :mod (n / null))
            :op2 (v / value
                  :mod n))
      :time (e / end-01
            :ARG1 s))"
1959,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"when the characters are put in a char array, there is also a null terminating character added to the end, '\0'",5,5,5,"# ::snt when the characters are put in a char array, there is also a null terminating character added to the end, '\0'
(a / add-02
      :ARG1 (c / character
            :ARG0-of (t / terminate-01)
            :mod (n / null))
      :ARG2 (e / end)
      :time (p / put-01
            :ARG1 (c2 / character)
            :ARG2 (a2 / array
                  :mod (s / string-entity
                        :value ""0"")))
      :mod (a3 / also))"
1960,11.8,What is the main difference between a string of characters that is read into a variable of type string versus a variable of type char[]?,The char[] will automatically add a null \0 character at the end of the string.,"string of characters that is read into a variable of type string includes, ",0,3,1.5,"# ::snt string of characters that is read into a variable of type string includes, 
(ii / include-01
      :ARG1 (s / string
            :consist-of (c / character)
            :ARG1-of (r / read-01
                  :ARG2 (v / variable
                        :ARG1-of (t / type-01
                              :ARG2 (s2 / string))))))"
1961,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself",3,4.5,3.75,"# ::snt For example we have an array on n elements, the divide and conquer splits up the array into equal halves and repeats this process until each element is by itself
(a / and
      :op1 (h / have-03
            :ARG0 (w / we)
            :ARG1 (a2 / array
                  :consist-of (e / element
                        :quant (n / number
                              :value (n2 / n)))
                  :ARG0-of (e2 / exemplify-01))
            :op2 (a3 / and
                  :op1 (s / split-01
                        :ARG0 (p / program
                              :name (n3 / name
                                    :op1 ""Divide""
                                    :op2 ""and""
                                    :op3 ""Conquer""))
                        :ARG1 a2
                        :ARG2 (h2 / halves
                              :ARG1-of (e3 / equal-01)))
                  :op2 (r / repeat-01
                        :ARG0 p
                        :ARG1 (p2 / process-02
                              :mod (t / this))
                        :time (u / until
                              :op1 (b / by-oneself
                                    :domain (e4 / element
                                          :mod (e5 / each))))))))"
1962,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.,5,5,5,"# ::snt Divide and coquer means dividing a problem into 2+ problems which are solved and then merged  back together for a final solution to the whole problem.
(m / mean-01
      :ARG1 (d / divide-02
            :ARG1 (p / problem)
            :ARG2 (p2 / problem
                  :quant (m2 / more-than
                        :op1 2)
                  :ARG1-of (s / solve-01)
                  :ARG1-of (m3 / merge-01
                        :ARG2 (t / together
                              :mod (b / back))
                        :purpose (s2 / solve-01
                              :ARG1 (p3 / problem
                                    :mod (w / whole))
                              :mod (f / final))
                        :time (t2 / then))))
      :ARG2 (c / coquer-01))"
1963,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.,4,4.5,4.25,"# ::snt The divide and conquer paradigm divides a problem into smaller and smaller portions that are easier to solve.
(d / divide-02
      :ARG0 (p / paradigm
            :mod (d2 / divide-and-conquer-00))
      :ARG1 (p2 / problem)
      :ARG2 (p3 / portion
            :ARG1-of (h / have-degree-91
                  :ARG2 (s / small)
                  :ARG3 (m / more))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (e / easy-05
                        :ARG1 (s2 / solve-01
                              :ARG1 p2)
                        :ARG3 (m2 / more)))))"
1964,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide elements,recur then conquer, which works in merge sort and quicksort.",3,4.5,3.75,"# ::snt Divide elements,recur then conquer, which works in merge sort and quicksort.
(m / multi-sentence
      :snt1 (d / divide-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element))
      :snt2 (r / repeat-01
            :mode imperative
            :ARG0 y
            :ARG1 (c / conquer-01)
            :time (t / then))
      :snt3 (w / work-09
            :ARG1 (a / and
                  :op1 (s / sort-01
                        :ARG1-of (m2 / merge-01))
                  :op2 (s2 / sort-01
                        :ARG1-of (q / quick-02)))))"
1965,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.",4,4.5,4.25,"# ::snt To divide and conquer, you divide the program in half once or multiple times to the extent that the program as a whole is easier to work in groups to solve the problem.
(d / divide-02
      :ARG0 (y / you)
      :ARG1 (p / program)
      :ARG2 (h / half)
      :purpose (a / and
            :op1 (d2 / divide-02
                  :ARG0 y
                  :ARG1 p)
            :op2 (c / conquer-01
                  :ARG0 y))
      :frequency (o / or
            :op1 1
            :op2 (m / multiple
                  :op1 1))
      :ARG1-of (c2 / cause-01
            :ARG0 (h2 / have-degree-91
                  :ARG1 (w / work-01
                        :ARG0 (g / group)
                        :ARG1 (s / solve-01
                              :ARG0 g
                              :ARG1 (p2 / problem)))
                  :ARG2 (e / easy-05
                        :ARG1 w)
                  :ARG3 (m2 / more))))"
1966,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.,2,5,3.5,"# ::snt to divide one larger string/line of values and sepereate them into smallers lines to easily manipulate them and then replace them in the order in which they should be.
(a / and
      :op1 (d / divide-02
            :ARG1 (s / slash
                  :op1 (s2 / string)
                  :op2 (l / line)
                  :quant 1
                  :consist-of (v / value)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l2 / large)
                        :ARG3 (m / more))))
      :op2 (s3 / separate-01
            :ARG1 s
            :ARG2 l
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (s4 / small)
                  :ARG3 (m2 / more)))
      :purpose (m3 / manipulate-01
            :ARG0 s
            :ARG1 s
            :ARG1-of (e / easy-05))
      :op3 (r / replace-01
            :ARG0 s
            :ARG1 s
            :ARG2 (o / order
                  :ARG2-of (r2 / recommend-01))
            :time (t / then)))"
1967,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.",4,4.5,4.25,"# ::snt Split the problem into smaller, more manageable parts, and proceed to address the smaller problems.
(a / and
      :op1 (s / split-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (p / problem)
            :ARG2 (p2 / part
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s2 / small)
                        :ARG3 (m / more))
                  :ARG1-of (m2 / manage-01
                        :ARG1-of (p3 / possible-01))))
      :op2 (p4 / proceed-01
            :mode imperative
            :ARG0 y
            :ARG1 (a2 / address-02
                  :ARG0 y
                  :ARG1 (p5 / problem
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 s2
                              :ARG3 (m3 / more))))))"
1968,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",dived and conquer is the breaking up of a large complex program into small easy to solve components.,4,4.5,4.25,"# ::snt dived and conquer is the breaking up of a large complex program into small easy to solve components.
(a / and
      :op1 (d / dive-01)
      :op2 (c / conquer-01)
      :domain (b / break-up-08
            :ARG1 (p / program
                  :mod (l / large)
                  :ARG1-of (c2 / complex-02))
            :ARG2 (c3 / component
                  :mod (s / small)
                  :ARG1-of (s2 / solve-01
                        :ARG1-of (e / easy-05)))))"
1969,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.,4,4.5,4.25,"# ::snt Dividing a larger problem into the smallest incident of the problem and solving the smallest incident.
(a / and
      :op1 (d / divide-02
            :ARG1 (p / problem
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / more)))
            :ARG2 (ii / incident
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m2 / most))
                  :part-of (p2 / problem)))
      :op2 (s2 / solve-01
            :ARG1 (ii2 / incident
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 s)
                  :ARG3 (m3 / most))))"
1970,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Break up very large data structures into smaller sub-units, that are easier to manipulate.",4,4.5,4.25,"# ::snt Break up very large data structures into smaller sub-units, that are easier to manipulate.
(b / break-up-08
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / structure-01
            :ARG1 (d / data)
            :mod (l / large
                  :degree (v / very)))
      :ARG2 (s2 / subunit
            :ARG1-of (h / have-degree-91
                  :ARG2 (s3 / small)
                  :ARG3 (m / more))
            :ARG1-of (h2 / have-degree-91
                  :ARG2 (m2 / manipulate-01
                        :ARG1 s)
                  :ARG3 (m3 / more))))"
1971,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.,4,4.25,4.125,"# ::snt The divide-and-conquer technique is where it takes the sorting algorithm and breaks up the array into smaller elements of the array to tackle the problem and run the algorithm.
(t / technique
      :name (n / name
            :op1 ""divide-and-conquer"")
      :location-of (a / and
            :op1 (t2 / take-01
                  :ARG0 (ii / it)
                  :ARG1 (a2 / algorithm
                        :ARG0-of (s / sort-01)))
            :op2 (b / break-up-08
                  :ARG0 ii
                  :ARG1 (a3 / array)
                  :ARG2 (e / element
                        :part-of (a4 / array)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m / more)))
                  :purpose (a5 / and
                        :op1 (t3 / tackle-01
                              :ARG0 ii
                              :ARG1 (p / problem))
                        :op2 (r / run-01
                              :ARG0 ii
                              :ARG1 a2)))))"
1972,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. ",4,4.5,4.25,"# ::snt The divide-and-conquer paradigm divides the problem into two pieces and works on each piece separately, allowing for a faster approach to 2 separate smaller problems. 
(a / and
      :op1 (d / divide-02
            :ARG0 (p / paradigm
                  :name (n / name
                        :op1 ""divide-and-conquer""))
            :ARG1 (p2 / problem)
            :ARG2 (p3 / piece
                  :quant 2))
      :op2 (w / work-01
            :ARG0 p
            :ARG1 (p4 / piece
                  :mod (e / each))
            :manner (s / separate-02))
      :ARG0-of (a2 / allow-01
            :ARG1 (a3 / approach-02
                  :ARG1 (p5 / problem
                        :quant 2
                        :ARG1-of (s2 / separate-02)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (f / fast-02
                                    :ARG1 a3)
                              :ARG3 (m / more))))))"
1973,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.",4.5,4.5,4.5,"# ::snt Take a problem and divide it into a smaller problem and solve that smaller problem, or divide it into a smaller problem and solve it, thus solving the whole problem in the process.
(o / or
      :op1 (a / and
            :op1 (t / take-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (p / problem))
            :op2 (d / divide-02
                  :mode imperative
                  :ARG0 y
                  :ARG1 p
                  :ARG2 (p2 / problem
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m / more))))
            :op3 (s2 / solve-01
                  :ARG0 y
                  :ARG1 p2))
      :op2 (d2 / divide-02
            :mode imperative
            :ARG0 y
            :ARG1 p
            :ARG2 (p3 / problem
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 s)
                  :ARG3 (m2 / more)))
      :op3 (s3 / solve-01
            :mode imperative
            :ARG0 y
            :ARG1 p3
            :manner (s4 / solve-01
                  :ARG0 y
                  :ARG1 (p4 / problem
                        :mod (w / whole))
                  :time (p5 / process-02))))"
1974,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",The idea is to split the problem into half and solve for the smaller split-problems.,4,4.5,4.25,"# ::snt The idea is to split the problem into half and solve for the smaller split-problems.
(ii / idea
      :domain (a / and
            :op1 (s / split-01
                  :ARG1 (p / problem)
                  :ARG2 (h / half))
            :op2 (s2 / solve-01
                  :ARG1 (p2 / problem
                        :ARG1-of (s3 / split-01)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s4 / small)
                              :ARG3 (m / more))))))"
1975,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.",5,5,5,"# ::snt The divide and conquer paradigm, splits a large problem into simpler problems, at which point it solves the simpler problems and merges the simple solutions together to answer the large problem.
(a / and
      :op1 (s / split-01
            :ARG0 (p / paradigm
                  :name (n / name
                        :op1 ""Divide""
                        :op2 ""and""
                        :op3 ""Conquer""))
            :ARG1 (p2 / problem
                  :mod (l / large))
            :ARG2 (p3 / problem
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s2 / simple-02
                              :ARG1 p3)
                        :ARG3 (m / more))))
      :op2 (s3 / solve-01
            :ARG0 p
            :ARG1 p3
            :time (p4 / point
                  :time-of (s4 / solve-01
                        :ARG0 p
                        :ARG1 p3)))
      :op3 (m2 / merge-01
            :ARG0 p
            :ARG1 (s5 / solve-01
                  :ARG1-of (s6 / simple-02))
            :purpose (a2 / answer-01
                  :ARG0 p
                  :ARG1 p3)
            :manner (t / together)))"
1976,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.",4,4.5,4.25,"# ::snt Divide-and-conquer refers to abstraction, the act of separating large, complex problems into smaller, easier problems that can be solved by a relatively simple algorithm.
(r / refer-01
      :ARG1 (a / and
            :op1 (d / divide-02)
            :op2 (c / conquer-01))
      :ARG2 (a2 / abstraction
            :ARG1-of (m / mean-01
                  :ARG2 (s / separate-01
                        :ARG1 (p / problem
                              :mod (l / large)
                              :ARG1-of (c2 / complex-02))
                        :ARG2 (p2 / problem
                              :ARG1-of (s2 / solve-01
                                    :ARG0 (a3 / algorithm
                                          :ARG1-of (s3 / simple-02
                                                :ARG1-of (r2 / relative-05)))
                                    :ARG1-of (p3 / possible-01))
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (s4 / small)
                                    :ARG3 (m2 / more)))))))"
1977,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. ",4,4.5,4.25,"# ::snt It takes a large problem and splits it into two or more easier or faster solutions, and  makes for better readability. 
(a / and
      :op1 (t / take-01
            :ARG0 (ii / it)
            :ARG1 (p / problem
                  :mod (l / large)))
      :op2 (s / split-01
            :ARG0 ii
            :ARG1 p
            :ARG2 (o / or
                  :op1 (s2 / solve-01
                        :quant 2
                        :ARG1-of (h / have-degree-91
                              :ARG2 (e / easy-05
                                    :ARG1 s2)
                              :ARG3 (m / more)))
                  :op2 (s3 / solve-01
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (f / fast-02
                                    :ARG1 s3)
                              :ARG3 (m2 / more)))))
      :op2 (m3 / make-02
            :ARG0 ii
            :ARG1 (r / readability
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 r)
                        :ARG3 (m4 / more)))))"
1978,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the taking of a larger problem and splitting it into simpler smaller problems.,4,4.5,4.25,"# ::snt it is the taking of a larger problem and splitting it into simpler smaller problems.
(a / and
      :op1 (t / take-01
            :ARG1 (p / problem
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / more))))
      :op2 (s / split-01
            :ARG1 p
            :ARG2 (p2 / problem
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s2 / small)
                        :ARG3 (m2 / more))
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (s3 / simple-02)
                        :ARG3 (m3 / more)))))"
1979,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",It divides the problem into singular units and works on the problem piece by piece until the problem is solved.,4,4.5,4.25,"# ::snt It divides the problem into singular units and works on the problem piece by piece until the problem is solved.
(a / and
      :op1 (d / divide-02
            :ARG0 (ii / it)
            :ARG1 (p / problem)
            :ARG2 (u / unit
                  :mod (s / singular)))
      :op2 (w / work-01
            :ARG0 ii
            :ARG1 (p2 / problem)
            :manner (p3 / piece-by-piece)
            :time (u2 / until
                  :op1 (s2 / solve-01
                        :ARG1 p2))))"
1980,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.",5,5,5,"# ::snt smaller parts are easier to compare than comparing the whole, so it divides the problem down in halves until it can easily compare, then works backwards putting it back together to give the solution.
(c / cause-01
      :ARG0 (h / have-degree-91
            :ARG1 (c2 / compare-01
                  :ARG1 (p / part
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m / more))))
            :ARG2 (e / easy-05
                  :ARG1 c2)
            :ARG3 (m2 / more)
            :ARG4 (c3 / compare-01
                  :ARG1 (w / whole)))
      :ARG1 (a / and
            :op1 (d / divide-02
                  :ARG0 (ii / it)
                  :ARG1 (p2 / problem)
                  :ARG2 (h3 / halves)
                  :direction (d2 / down)
                  :time (u / until
                        :op1 (p3 / possible-01
                              :ARG1 (c4 / compare-01
                                    :ARG0 ii
                                    :ARG1-of e)))))
      :op2 (w2 / work-01
            :ARG0 ii
            :ARG1 (p4 / put-01
                  :ARG0 ii
                  :ARG1 p2
                  :ARG2 (t / together)
                  :direction (b / backwards)
                  :purpose (g / give-01
                        :ARG0 ii
                        :ARG1 (t2 / thing
                              :ARG2-of (s2 / solve-01))))))"
1981,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.",4,4.5,4.25,"# ::snt a divide-and-conquer paradigm. takes some data, divides it into two parts, and works on each part indiviually until the item is found.
(m / multi-sentence
      :snt1 (p / paradigm
            :mod (d / divide-and-conquer-01))
      :snt2 (a / and
            :op1 (t / take-01
                  :ARG1 (d2 / data
                        :quant (s / some)))
            :op2 (d3 / divide-02
                  :ARG1 d2
                  :ARG2 (p2 / part
                        :quant 2))
            :op3 (w / work-01
                  :ARG1 (p3 / part
                        :mod (e / each))
                  :manner (ii / individual)
                  :time (u / until
                        :op1 (f / find-01
                              :ARG1 (ii2 / item))))))"
1982,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.",4,4.5,4.25,"# ::snt The idea of divide and conquer is to take a large problem, split it into n smaller problems, making the program easier to read and modify.
(ii / idea
      :topic (a / and
            :op1 (d / divide-02)
            :op2 (c / conquer-01))
      :domain (a2 / and
            :op1 (t / take-01
                  :ARG1 (p / problem
                        :mod (l / large)))
            :op2 (s / split-01
                  :ARG1 p
                  :ARG2 (p2 / problem
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m / more))))
            :ARG0-of (m2 / make-02
                  :ARG1 (h2 / have-degree-91
                        :ARG1 (a3 / and
                              :op1 (r / read-01
                                    :ARG1 (p3 / program))
                              :op2 (m3 / modify-01
                                    :ARG1 p3))
                        :ARG2 (e / easy-05
                              :ARG1 a3)
                        :ARG3 (m4 / more)))))"
1983,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.,4,4.5,4.25,"# ::snt the divide and conquer paradigm is a recursive solution that keeps dividing the problem into halves until a base case is reached.
(s / solve-01
      :ARG1 (d / divide-02
            :ARG1 (p / problem)
            :ARG2 (h / half)
            :time (u / until
                  :op1 (r / reach-01
                        :ARG1 (c / case-03
                              :mod (b / base)))))
      :manner (r2 / recursive)
      :domain (p2 / paradigm
            :mod (d2 / divide-02
                  :ARG1 p)))"
1984,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.",5,5,5,"# ::snt dividing and conquering means breaking a problem into two smaller problems, solving both of those, and putting the two solutions together.
(m / mean-01
      :ARG1 (a / and
            :op1 (d / divide-02)
            :op2 (c / conquer-01))
      :ARG2 (a2 / and
            :op1 (b / break-01
                  :ARG1 (p / problem)
                  :ARG2 (p2 / problem
                        :quant 2
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m2 / more))))
            :op2 (s2 / solve-01
                  :ARG1 (p3 / problem
                        :quant 2
                        :mod (t / that)))
            :op3 (p4 / put-01
                  :ARG1 (s3 / solve-01
                        :quant 2)
                  :ARG2 (t2 / together))))"
1985,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements",5,5,5,"# ::snt Divide the big problem into small problem, solve small problem and join small solved elements of the problem. if there is two ore more elements in the array, divide the array into parts and compare the elements, after comperison, conquer the elements. If array have n element, first half have n/2 elements
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / divide-02
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (p / problem
                        :mod (b / big))
                  :ARG2 (p2 / problem
                        :mod (s / small)))
            :op2 (s2 / solve-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 p2)
            :op3 (j / join-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (e / element
                        :ARG1-of (s3 / solve-01)
                        :mod (s4 / small))))
      :snt2 (a2 / and
            :op1 (d2 / divide-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 (a3 / array)
                  :ARG2 (p3 / part))
            :op2 (c / compare-01
                  :mode imperative
                  :ARG0 y2
                  :ARG1 (e2 / element)))
      :snt3 (c2 / conquer-01
            :mode imperative
            :ARG0 y2
            :ARG1 (e3 / element)
            :time (a4 / after
                  :op1 c))
      :snt4 (h / have-condition-91
            :ARG1 (a5 / array)
            :ARG2 (h2 / have-03
                  :ARG0 (h3 / half
                        :ord (o / ordinal-entity
                              :value 1))
                  :ARG1 (e4 / element
                        :quant 2))))"
1986,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","divide the array in half, sort each half, then sort them back in one array",3,3,3,"# ::snt divide the array in half, sort each half, then sort them back in one array
(a / and
      :op1 (d / divide-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / array)
            :ARG2 (h / half))
      :op2 (s / sort-01
            :mode imperative
            :ARG0 y
            :ARG1 (h2 / half
                  :mod (e / each)))
      :op3 (s2 / sort-01
            :mode imperative
            :ARG0 y
            :ARG1 (t / they)
            :ARG2 (a3 / array
                  :quant 1)
            :direction (b / back)
            :time (t2 / then)))"
1987,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",You take a class and break down everything it is supposed to do into easily managed functions.,1,4.5,2.75,"# ::snt You take a class and break down everything it is supposed to do into easily managed functions.
(a / and
      :op1 (t / take-01
            :ARG0 (y / you)
            :ARG1 (c / class))
      :op2 (b / break-down-05
            :ARG0 y
            :ARG1 (e / everything
                  :ARG1-of (d / do-02
                        :ARG0 (ii / it)
                        :ARG1-of (s / suppose-02)))
            :ARG2 (f / function-01
                  :ARG1-of (m / manage-01
                        :ARG1-of (e2 / easy-05)))))"
1988,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file",1,4.5,2.75,"# ::snt this is shown by the use of .cpp and header files.  by splitting the program up into smaller subsections of individual code, it becomes easier to write and keep up with as opposed to having all of your code in one file
(m / multi-sentence
      :snt1 (s / show-01
            :ARG0 (u / use-01
                  :ARG1 (a / and
                        :op1 (f / file
                              :name (n / name
                                    :op1 "".cpp""))
                        :op2 (f2 / file
                              :mod (h / header))))
            :ARG1 (t / this))
      :snt2 (b / become-01
            :ARG1 (a2 / and
                  :op1 (w / write-01
                        :ARG1 (c / code
                              :poss (y / you)
                              :mod (a3 / all)))
                  :op2 (k / keep-up-10
                        :ARG1 c)
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (e / easy-05
                              :ARG1 a2)
                        :ARG3 (m2 / more))
                  :ARG1-of (ii / instead-of-91
                        :ARG2 (h3 / have-03
                              :ARG0 y
                              :ARG1 a2
                              :location f2
                              :quant 1))))
      :manner (s2 / split-01
            :ARG1 (p / program)
            :ARG2 (s3 / subsection
                  :part-of (c2 / code
                        :mod (ii2 / individual))
                  :ARG1-of h2
                  :ARG2 (s4 / small)
                  :ARG3 m2)))"
1989,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.","When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.",5,4.5,4.75,"# ::snt When a problem is too big, split it into smaller problems of the same type, and solve those, then from the solutions of the smaller problem, give the solution to the larger original problem.
(a / and
      :op1 (a2 / and
            :op1 (s / split-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (p / problem)
                  :ARG2 (p2 / problem
                        :ARG1-of (h / have-degree-91
                              :ARG2 (b / big)
                              :ARG3 (m / more))
                        :mod (t / type
                              :ARG1-of (s2 / same-01))))
            :op2 (s3 / solve-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 p2)
            :time (h2 / have-degree-91
                  :ARG1 p2
                  :ARG2 (b2 / big
                        :ARG3 (t2 / too)))
            :op2 (g / give-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (s4 / solve-01
                        :ARG1 (p3 / problem
                              :mod (o / original)
                              :ARG1-of (h3 / have-degree-91
                                    :ARG2 (l / large)
                                    :ARG3 (m2 / more))))
                  :source (s5 / solve-01
                        :ARG1 p3))))"
1990,11.9,Briefly describe the divide-and-conquer paradigm.,"Divide a problem into smaller subproblems, solve them recursively, and then combine the solutions into a solution for the original problem.",it is the separating of large program into smaller classes then until target is reached.,1.5,5,3.25,"# ::snt it is the separating of large program into smaller classes then until target is reached.
(s / separate-01
      :ARG1 (p / program
            :mod (l / large))
      :ARG2 (c / class
            :ARG1-of (h / have-degree-91
                  :ARG2 (s2 / small)
                  :ARG3 (m / more)))
      :time (u / until
            :op1 (r / reach-01
                  :ARG1 (t / target))))"
1991,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique",5,5,5,"# ::snt It uses the divide and conqure technique recursively and then when merging back together it compares each element together in a sorted list, this is done by reversing the divide and conquer technique
(a / and
      :op1 (u / use-01
            :ARG0 (ii / it)
            :ARG1 (t / technique
                  :name (n / name
                        :op1 ""Divide""
                        :op2 ""and""
                        :op3 ""Conqure""))
            :manner (r / recursive))
      :op2 (c / compare-01
            :ARG0 ii
            :ARG1 (e / element
                  :mod (e2 / each))
            :ARG2 (l / list
                  :ARG1-of (s / sort-01))
            :time (m / merge-01
                  :ARG1 ii
                  :manner (t2 / together)
                  :time-of c)
            :ARG1 ii
            :manner (t3 / together))
      :time (t4 / then)
      :op3 (r2 / reverse-01
            :ARG0 ii
            :ARG1 (t5 / technique
                  :name n
                  :op1 ""Disclaim""
                  :op2 ""and""
                  :op3 ""Conquere"")))"
1992,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",A merge sort works by removing all items to sepperate memory locations and merging them back together in order.,2,5,3.5,"# ::snt A merge sort works by removing all items to sepperate memory locations and merging them back together in order.
(w / work-09
      :ARG1 (s / sort-01
            :ARG1 (m / merge-01))
      :manner (a / and
            :op1 (r / remove-01
                  :ARG1 (ii / item
                        :mod (a2 / all))
                  :purpose (s2 / separate-01
                        :ARG1 ii
                        :ARG2 (l / location
                              :mod (m2 / memory))))
            :op2 (m3 / merge-01
                  :ARG1 ii
                  :manner (t / together
                        :mod (b / back))
                  :manner (o / order))))"
1993,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It divides the array into two halves, sorts each half, then merges the two halves together.",5,5,5,"# ::snt It divides the array into two halves, sorts each half, then merges the two halves together.
(a / and
      :op1 (d / divide-02
            :ARG0 (ii / it)
            :ARG1 (a2 / array)
            :ARG2 (h / halves
                  :quant 2))
      :op2 (s / sort-01
            :ARG0 ii
            :ARG1 (h2 / half
                  :mod (e / each)))
      :op3 (m / merge-01
            :ARG0 ii
            :ARG1 (h3 / halves
                  :quant 2)
            :manner (t / together)
            :time (t2 / then)))"
1994,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. ",5,5,5,"# ::snt Divide into two sublists and then those sublists break into length 1, then merges the sublists sorted. 
(a / and
      :op1 (d / divide-02
            :ARG2 (s / sublist
                  :quant 2))
      :op2 (b / break-01
            :ARG1 (s2 / sublist
                  :mod (t / that))
            :ARG4 (l / length
                  :quant 1)
            :time (t2 / then))
      :op3 (m / merge-01
            :ARG1 (s3 / sublist
                  :ARG1-of (s4 / sort-01))))"
1995,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort uses the ""divide and conquer"" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.",5,5,5,"# ::snt Merge sort uses the ""divide and conquer"" idea where it divides the array in half multiple times and then joins each element of the array back into one sorted array. This is one of the best sorting algorithms besides Quicksort.
(m / multi-sentence
      :snt1 (u / use-01
            :ARG0 (s / sort-01
                  :ARG1-of (m2 / merge-01))
            :ARG1 (ii / idea
                  :mod (a / and
                        :op1 (d / divide-02
                              :ARG0 s
                              :ARG1 (a2 / array)
                              :ARG2 (h / half)
                              :frequency (m3 / multiple))
                        :op2 (j / join-01
                              :ARG0 s
                              :ARG1 (e / element
                                    :mod (e2 / each)
                                    :part-of (a3 / array))
                              :ARG2 (a4 / array
                                    :quant 1
                                    :ARG1-of (s2 / sort-01))
                              :direction (b / back))
                        :time (t / then))))
      :snt2 (a5 / algorithm
            :ARG1-of (ii2 / include-91
                  :ARG2 (a6 / algorithm
                        :ARG0-of (s3 / sort-01)
                        :ARG1-of (g / good-02
                              :ARG2-of (h2 / have-degree-91
                                    :ARG1 a6
                                    :ARG3 (m4 / most)))
                        :ARG2-of (e3 / except-01
                              :ARG1 (s4 / sort-01
                                    :ARG1-of (q / quicksort-01))))
                  :domain (t2 / this))))"
1996,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.,5,5,5,"# ::snt divides the line in half coninuously until you get to only a single value then recombine the values to form a sorted line.
(d / divide-02
      :ARG1 (l / line)
      :ARG2 (h / half)
      :manner (s / simultaneous)
      :time (u / until
            :op1 (g / get-05
                  :ARG1 (y / you)
                  :ARG2 (v / value
                        :ARG1-of (s2 / single-02)
                        :mod (o / only))))
      :time-of (r / recombine-01
            :ARG0 y
            :ARG1 (v2 / value)
            :purpose (f / form-01
                  :ARG0 y
                  :ARG1 (l2 / line
                        :ARG1-of (s3 / sort-01)))))"
1997,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Continually split array in half, sort each side of the halves, then put them back together once organized.",5,5,5,"# ::snt Continually split array in half, sort each side of the halves, then put them back together once organized.
(a / and
      :op1 (s / split-01
            :ARG1 (a2 / array)
            :ARG2 (h / half)
            :manner (c / continue-01))
      :op2 (s2 / sort-01
            :ARG1 (s3 / side
                  :mod (e / each)
                  :part-of h))
      :op3 (p / put-01
            :ARG1 a2
            :ARG2 (t / together
                  :mod (b / back))
            :time (o / organize-01
                  :ARG1 a2)))"
1998,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.,5,5,5,"# ::snt merge sort splits the array of elements into smaller arrays until the arrays reach size 1 and then the merge sort merges the smaller arrays into arrays of size 2 then it moves to the next step and merges the next arrays.
(a / and
      :op1 (s / split-01
            :ARG0 (s2 / sort
                  :name (n / name
                        :op1 ""merge""))
            :ARG1 (a2 / array
                  :consist-of (e / element))
            :ARG2 (a3 / array
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s3 / small)
                        :ARG3 (m / more)))
            :time (u / until
                  :op1 (r / reach-01
                        :ARG0 a2
                        :ARG1 (s4 / size
                              :quant 1))))
      :op2 (m2 / merge-01
            :ARG0 (s5 / sort
                  :ARG1-of (m3 / merge-01))
            :ARG1 (a4 / array
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s6 / small)
                        :ARG3 (m4 / more)))
            :ARG2 (a5 / array
                  :mod (s7 / size
                        :quant 2))
            :time (t / then))
      :op2 (a6 / and
            :op1 (m5 / move-01
                  :ARG1 s2
                  :ARG2 (s8 / step
                        :mod (n2 / next)))
            :op2 m3
            :ARG0 s2
            :ARG1 (a7 / array
                  :mod (n3 / next))))"
1999,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",By divide and conquer.,1.5,5,3.25,"# ::snt By divide and conquer.
(a / and
      :op1 (d / divide-02)
      :op2 (c / conquer-01))"
2000,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.",5,5,5,"# ::snt Break a single array down into many arrays with individual elements, then sort the elements as you reconstruct them back into a single array.
(a / and
      :op1 (b / break-down-12
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / array
                  :ARG1-of (s / single-02))
            :ARG2 (a3 / array
                  :quant (m / many)
                  :consist-of (e / element
                        :ARG1-of (ii / individual-02))))
      :op2 (s2 / sort-01
            :mode imperative
            :ARG0 y
            :ARG1 e
            :time (r / reconstruct-01
                  :ARG0 y
                  :ARG1 e
                  :ARG2 (a4 / array
                        :ARG1-of (s3 / single-02))
                  :direction (b2 / back))
            :time (t / then)))"
2001,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.",5,5,5,"# ::snt Merge sort breaks the array in half, and continues to do so until it has 2 elements to compare and sorts them, after doing so it ""merges"" back as it keeps on sorting the algorithm as it does so.
(a / and
      :op1 (b / break-01
            :ARG0 (s / sort-01
                  :ARG1-of (m / merge-01))
            :ARG1 (a2 / array)
            :ARG2 (h / half))
      :op2 (c / continue-01
            :ARG1 (d / do-02
                  :ARG0 s
                  :time (u / until
                        :op1 (h2 / have-03
                              :ARG0 s
                              :ARG1 (e / element
                                    :quant 2
                                    :purpose (a3 / and
                                          :op1 (c2 / compare-01
                                                :ARG0 s
                                                :ARG1 e)
                                          :op2 (s2 / sort-01
                                                :ARG0 s
                                                :ARG1 e)))))))
      :op2 (m2 / merge-01
            :ARG0 s
            :direction (b2 / back)
            :time (a4 / after
                  :op1 (b3 / break-01)
                  :ARG1-of (c3 / cause-01
                        :ARG0 (k / keep-02
                              :ARG0 s
                              :ARG1 (s3 / sort-01
                                    :ARG0 s
                                    :ARG1 (a5 / algorithm)))))))"
2002,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort divides the problem in half, organizes each half, then brings the two halves together again.",5,5,5,"# ::snt Merge sort divides the problem in half, organizes each half, then brings the two halves together again.
(a / and
      :op1 (d / divide-02
            :ARG0 (m / merge-01)
            :ARG1 (p / problem)
            :ARG2 (h / half))
      :op2 (o / organize-01
            :ARG0 m
            :ARG1 (h2 / half
                  :mod (e / each)))
      :op3 (b / bring-01
            :ARG0 m
            :ARG1 (h3 / half
                  :quant 2)
            :ARG2 (t / together)
            :mod (a2 / again)
            :time (t2 / then)))"
2003,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.",5,5,5,"# ::snt Take an array and split it into two, then solve these simpler problems and merge the two answers in correct order.
(a / and
      :op1 (a2 / and
            :op1 (t / take-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (a3 / array
                        :quant 2))
            :op2 (s / split-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 a3
                  :ARG2 a3))
      :op2 (s2 / solve-01
            :mode imperative
            :ARG0 y
            :ARG1 (p / problem
                  :mod (t2 / this)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s3 / simple-02
                              :ARG1 p)
                        :ARG3 (m / more)))
            :time (t3 / then))
      :op3 (m2 / merge-01
            :mode imperative
            :ARG0 y
            :ARG1 (a4 / answer-01
                  :quant 2)
            :manner (o / order
                  :ARG1-of (c / correct-02))))"
2004,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.",5,5,5,"# ::snt A merge sort recursively divides the array into half until only one element remains, then it sorts the data on its way out of the recursive call by merging the cells.
(a / and
      :op1 (d / divide-02
            :ARG0 (s / sort-01
                  :ARG1 (m / merge-01))
            :ARG1 (a2 / array)
            :ARG2 (h / half)
            :manner (r / recursive)
            :time (u / until
                  :op1 (r2 / remain-01
                        :ARG1 (e / element
                              :quant 1
                              :mod (o / only)))))
      :op2 (s2 / sort-01
            :ARG0 s2
            :ARG1 (d2 / data)
            :manner (m2 / merge-01
                  :ARG1 (c / cell))
            :ARG0-of m2
            :manner (w / way
                  :direction (o2 / out-06
                        :ARG1 d2
                        :ARG2 (c2 / call-02
                              :manner (r3 / recursive))))
            :time (t / then)))"
2005,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.",5,5,5,"# ::snt Merge sort recursively divides an array into two arrays until all arrays have 1 element, at which point it merges the 1 element arrays into larger sorted arrays, the final returned array being the sorted version of the initial array.
(m / multi-sentence
      :snt1 (d / divide-02
            :ARG0 (s / sort-01
                  :ARG1 (a / array))
            :ARG2 (a2 / array
                  :quant 2)
            :manner (r / recursive)
            :time (u / until
                  :op1 (h / have-03
                        :ARG0 (a3 / array
                              :mod (a4 / all))
                        :ARG1 (e / element
                              :quant 1)))
            :time-of (m2 / merge-01
                  :ARG0 s
                  :ARG1 a3
                  :ARG2 (a5 / array
                        :ARG1-of (s2 / sort-01)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l / large)
                              :ARG3 (m3 / more)))))
      :snt2 (a6 / array
            :ARG1-of (r2 / return-01
                  :mod (f / final))
            :ARG1-of (m4 / mean-01
                  :ARG2 (v / version
                        :ARG1-of (s3 / sort-01)
                        :mod (a7 / array
                              :mod (ii / initial))))))"
2006,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.,5,5,5,"# ::snt Merge sort continuously breaks an array in half then sorts the arrays as it concatenates them back together into one sorted array.
(a / and
      :op1 (b / break-01
            :ARG0 (m / merge-01)
            :ARG1 (a2 / array)
            :ARG2 (h / half)
            :manner (c / continue-01))
      :op2 (s / sort-01
            :ARG0 m
            :ARG1 (a3 / array)
            :time (c2 / concatenate-01
                  :ARG0 m
                  :ARG1 a3
                  :ARG2 (a4 / array
                        :quant 1
                        :ARG1-of (s2 / sort-01))
                  :mod (t / together)
                  :mod (b2 / back))))"
2007,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. ",5,5,5,"# ::snt It takes an array, splits itself in half, sorts the two halves (either by recursion or iteration) and compares them together giving a third array a full sorted list with both halves rejoined. 
(a / and
      :op1 (t / take-01
            :ARG0 (ii / it)
            :ARG1 (a2 / array))
      :op2 (s / split-01
            :ARG0 ii
            :ARG1 a2
            :ARG2 (h / half))
      :op3 (s2 / sort-01
            :ARG0 ii
            :ARG1 (h2 / halves
                  :quant 2)
            :manner (o / or
                  :op1 (r / recur-01)
                  :op2 (ii2 / iterate-01)))
      :op4 (c / compare-01
            :ARG0 ii
            :ARG1 h2
            :manner (t2 / together))
      :op5 (g / give-01
            :ARG0 ii
            :ARG1 (l / list
                  :ARG1-of s2
                  :ARG1-of (f / full-09))
            :ARG2-of (r2 / rejoin-01
                  :ARG1 (h3 / halves
                        :mod (b / both))))
      :ARG2 (a3 / array
            :ord (o2 / ordinal-entity
                  :value 3)))"
2008,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.",5,5,5,"# ::snt it splits a large array into small arrays and recurs until the array is a size of 1, and then merges all of the arrays back together until the source array is completely sourted.
(a / and
      :op1 (s / split-01
            :ARG0 (ii / it)
            :ARG1 (a2 / array
                  :mod (l / large))
            :ARG2 (a3 / array
                  :mod (s2 / small)))
      :op2 (r / recur-01
            :ARG0 ii
            :time (u / until
                  :op1 (s3 / size-01
                        :ARG1 a2
                        :ARG2 (t / thing
                              :quant 1))))
      :op3 (m / merge-01
            :ARG0 ii
            :ARG1 (a4 / array
                  :mod (a5 / all))
            :ARG2 (t2 / together
                  :mod (b / back))
            :time (t3 / then)
            :time (u2 / until
                  :op1 (s4 / sour-01
                        :ARG1 (a6 / array
                              :ARG0-of (s5 / source-01))
                        :ARG1-of (c / complete-02)))))"
2009,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.,5,5,5,"# ::snt Mergesort divides the array into smaller halves and then combines the sorted subarrays into one sorted array.
(a / and
      :op1 (d / divide-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 ""Mergesort""))
            :ARG1 (a2 / array)
            :ARG2 (h / halves
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s / small)
                        :ARG3 (m / more))))
      :op2 (c2 / combine-01
            :ARG0 c
            :ARG1 (s2 / subarray
                  :ARG1-of (s3 / sort-01))
            :ARG2 (a3 / array
                  :quant 1
                  :ARG1-of (s4 / sort-01))
            :time (t / then)))"
2010,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.",5,5,5,"# ::snt merge sort breaks the array down in halves until it is comparing two values, sorts those two values, then merges that back with the other broken down parts that it sorted, each level merging more sets together till you return back to your whole array in order.
(a / and
      :op1 (b / break-down-05
            :ARG0 (s / sort-01
                  :ARG0 (m / merge-01))
            :ARG1 (a2 / array)
            :ARG2 (h / half)
            :time (u / until
                  :op1 (c / compare-01
                        :ARG0 (ii / it)
                        :ARG1 (v / value
                              :quant 2))))
      :op2 (s2 / sort-01
            :ARG0 ii
            :ARG1 v)
      :op3 (m2 / merge-01
            :ARG0 ii
            :ARG1 (t / that)
            :ARG2 (p / part
                  :ARG1-of (b2 / break-down-05)
                  :mod (o / other)
                  :ARG1-of s
                  :ARG0 ii))
      :direction (b3 / back)
      :op4 (m3 / merge-01
            :ARG0 ii
            :ARG1 (s3 / set
                  :quant (m4 / more))
            :manner (t2 / together)
            :time (u2 / until
                  :op1 (r / return-01
                        :ARG1 (y / you)
                        :ARG4 (a3 / array
                              :mod (w / whole)
                              :poss y)
                        :direction (b4 / back)
                        :manner (o2 / order)))))"
2011,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. ",5,5,5,"# ::snt Divides the data into twor separate arrays, sorts the two arrays and merges them back to back together recursively. 
(a / and
      :op1 (d / divide-01
            :ARG1 (d2 / data)
            :ARG2 (a2 / array
                  :quant 2
                  :ARG1-of (s / separate-02)))
      :op2 (s2 / sort-01
            :ARG1 a2)
      :op3 (m / merge-01
            :ARG1 a2
            :ARG2 (t / together
                  :mod (b / back))
            :manner (r / recursive)))"
2012,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.",5,5,5,"# ::snt Take the initial array and split it into two, temporary, smaller arrays, sort the two smaller arrays, and merge them back into a single array.
(a / and
      :op1 (a2 / and
            :op1 (t / take-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (a3 / array
                        :mod (ii / initial)))
            :op2 (s / split-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 a3
                  :ARG2 (a4 / array
                        :quant 2
                        :mod (t2 / temporary)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m / more)))))
      :op3 (s3 / sort-01
            :mode imperative
            :ARG0 y
            :ARG1 a4)
      :op4 (m2 / merge-01
            :mode imperative
            :ARG0 y
            :ARG1 a4
            :ARG2 (a5 / array
                  :ARG1-of (s4 / single-02))
            :direction (b / back)))"
2013,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data,5,5,5,"# ::snt merge sort divides the data into halves until data of one element is reached and then merges each element together according to its placement in comparison to the rest of the data
(a / and
      :op1 (d / divide-02
            :ARG0 (s / sort-01
                  :ARG1 (m / merge-01))
            :ARG1 (d2 / data)
            :ARG2 (h / halves)
            :time (u / until
                  :op1 (r / reach-01
                        :ARG1 (d3 / data
                              :poss (e / element
                                    :quant 1)))))
      :op2 (m2 / merge-01
            :ARG1 (e2 / element
                  :mod (e3 / each))
            :manner (t / together)
            :time (t2 / then)
            :ARG1-of (c / conform-01
                  :ARG2 (p / place-01
                        :ARG1 e2
                        :ARG1-of (c2 / compare-01
                              :ARG2 (r2 / rest
                                    :part-of d3))))))"
2014,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.",5,5,5,"# ::snt merge sort uses the divide and conquer strategy, sorting an array in parts, then merging the sorted parts back together.
(u / use-01
      :ARG0 (s / sort-01
            :ARG1-of (m / merge-01))
      :ARG1 (s2 / strategy
            :name (n / name
                  :op1 ""Divide""
                  :op2 ""and""
                  :op3 ""Conquer"")
            :ARG0-of (m2 / mean-01
                  :ARG1 (a / and
                        :op1 (s3 / sort-01
                              :ARG1 (a2 / array)
                              :ARG2 (p / part))
                        :op2 (m3 / merge-01
                              :ARG1 (p2 / part
                                    :ARG1-of (s4 / sort-01))
                              :ARG2 (t / together
                                    :mod (b / back))
                              :time (t2 / then))))))"
2015,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.",5,5,5,"# ::snt Divide recursuivly big array into two arrays, sort two array and merge them togather recuruivly.
(a / and
      :op1 (d / divide-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (a2 / array
                  :quant 2
                  :mod (b / big))
            :ARG2 (a3 / array
                  :quant 2)
            :manner (r / repeat-01))
      :op2 (s / sort-01
            :mode imperative
            :ARG0 y
            :ARG1 a2)
      :op3 (m / merge-01
            :mode imperative
            :ARG0 y
            :ARG1 a2
            :purpose (g / gather-01
                  :ARG0 y
                  :manner r)))"
2016,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.",5,5,5,"# ::snt divides an array in half and sorts each half by calling its self, thus dividing each half again and again and sorting it until the array is sorted. then putting the elements back in the original array sorted.
(m / multi-sentence
      :snt1 (a / and
            :op1 (d / divide-02
                  :ARG1 (a2 / array)
                  :ARG2 (h / half))
            :op2 (s / sort-01
                  :ARG0 a2
                  :ARG1 (h2 / half
                        :mod (e / each))
                  :manner (c / call-02
                        :ARG0 a2
                        :ARG1 a2))
            :ARG0-of (c2 / cause-01
                  :ARG1 (a3 / and
                        :op1 (d2 / divide-02
                              :ARG0 a2
                              :ARG1 h2
                              :mod (a4 / again-and-again))
                        :op2 (s2 / sort-01
                              :ARG0 a2
                              :ARG1 a2
                              :time (u / until
                                    :op1 (s3 / sort-01
                                          :ARG1 a2))))))
      :snt2 (p / put-01
            :ARG1 (e2 / element)
            :ARG2 (a5 / array
                  :mod (o / original)
                  :ARG1-of (s4 / sort-01))
            :direction (b / back)
            :time (t / then)))"
2017,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.,5,5,5,"# ::snt Merge sort takes an array and splits it in half and sends each half back to itself recursively and merges and sorts the two halves when it starts going back up.
(a / and
      :op1 (a2 / and
            :op1 (t / take-01
                  :ARG0 (s / sort-01
                        :ARG1 (a3 / array)))
            :op2 (s2 / split-01
                  :ARG0 s
                  :ARG1 a3
                  :ARG2 (h / half))
            :op3 (s3 / send-01
                  :ARG0 s
                  :ARG1 (h2 / half
                        :mod (e / each))
                  :ARG2 (b / back)
                  :manner (r / recursive)))
      :op4 (a4 / and
            :op1 (m / merge-01
                  :ARG0 s
                  :ARG1 (h3 / half
                        :quant 2))
            :op2 s
            :ARG0 s
            :ARG1 h3)
      :time (s4 / start-01
            :ARG0 a3
            :ARG1 (g / go-back-19
                  :ARG1 a3)))"
2018,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array",5,5,5,"# ::snt merge sort splits an array into two halves and then sorts the two smaller arrays, and then merges them back together to form a sorted array
(a / and
      :op1 (s / split-01
            :ARG0 (s2 / sort-01
                  :ARG1 (a2 / array)
                  :ARG1-of (m / merge-01))
            :ARG2 (h / halves
                  :quant 2))
      :op2 (s3 / sort-01
            :ARG0 s2
            :ARG1 (a3 / array
                  :quant 2
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s4 / small)
                        :ARG3 (m2 / more)))
            :time (t / then))
      :op3 (m3 / merge-01
            :ARG0 s2
            :ARG1 a3
            :manner (t2 / together
                  :mod (b / back))
            :time (t3 / then)
            :purpose (f / form-01
                  :ARG0 s2
                  :ARG1 (a4 / array
                        :ARG1-of (s5 / sort-01)))))"
2019,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.","the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).",5,5,5,"# ::snt the merge sort continually divides the array (or set of containers) into halves, until it reaches the point where there is just one element left, then merges each of the sets of two sorted arrays (containers).
(a / and
      :op1 (d / divide-02
            :ARG0 (s / sort-01
                  :ARG1-of (m / merge-01))
            :ARG1 (o / or
                  :op1 (a2 / array)
                  :op2 (s2 / set
                        :consist-of (c / container)))
            :ARG2 (h / halves)
            :ARG1-of (c2 / continue-01)
            :time (u / until
                  :op1 (r / reach-01
                        :ARG0 s
                        :ARG1 (p / point
                              :location-of (l / leave-17
                                    :ARG1 (e / element
                                          :quant 1
                                          :mod (j / just)))))))
      :op2 m
      :ARG0 s
      :ARG1 (s3 / set
            :consist-of (a3 / array
                  :quant 2
                  :ARG1-of s))
      :time (t / then))"
2020,11.11,Briefly describe in one sentence how does merge sort work?,"It splits the original array into two, sorts each of the two halves, and then merges the sorted arrays.",merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.,2.5,5,3.75,"# ::snt merge sort splits an array of elements into smaller and smaller array's till the value of 1 is reached.
(s / split-01
      :ARG0 (s2 / sort-01
            :ARG1-of (m / merge-01))
      :ARG1 (a / array
            :consist-of (e / element))
      :ARG2 (a2 / array
            :ARG1-of (h / have-degree-91
                  :ARG2 (s3 / small)
                  :ARG3 (m2 / more)))
      :time (t / till
            :op1 (r / reach-01
                  :ARG1 (v / value
                        :quant 1))))"
2021,12.1,What is a pointer?,The address of a location in memory.,A variable in memory that hold the address of another memory location to which it points too,5,5,5,"# ::snt A variable in memory that hold the address of another memory location to which it points too
(v / variable
      :location (m / memory)
      :ARG0-of (h / hold-01
            :ARG1 (a / address
                  :poss (l / location
                        :mod (m2 / memory)
                        :mod (a2 / another)
                        :ARG1-of (p / point-01
                              :ARG0 v
                              :mod (t / too))))))"
2022,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that contains the memory address of a given value.,4.5,5,4.75,"# ::snt A pointer is a variable that contains the memory address of a given value.
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (v2 / value
                        :ARG1-of (g / give-01))))
      :domain (p / pointer))"
2023,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that stores the address of another variable.,5,5,5,"# ::snt A pointer is a variable that stores the address of another variable.
(v / variable
      :ARG0-of (s / store-01
            :ARG1 (a / address
                  :poss (v2 / variable
                        :mod (a2 / another))))
      :domain (p / pointer))"
2024,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that holds a memory address or location of another variable.,5,5,5,"# ::snt A pointer is a variable that holds a memory address or location of another variable.
(v / variable
      :ARG0-of (h / hold-01
            :ARG1 (o / or
                  :op1 (a / address
                        :mod (m / memory)
                        :poss (v2 / variable
                              :mod (a2 / another)))
                  :op2 (l / location
                        :poss v2)))
      :domain (p / pointer))"
2025,12.1,What is a pointer?,The address of a location in memory.,A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.,5,5,5,"# ::snt A data type that points to an address in memory which contains certain information. Used for pass-by-reference to save memory.
(m / multi-sentence
      :snt1 (t / type
            :mod (d / data)
            :ARG0-of (p / point-01
                  :ARG2 (a / address
                        :location (m2 / memory)
                        :ARG0-of (c / contain-01
                              :ARG1 (ii / information
                                    :mod (c2 / certain))))))
      :snt2 (u / use-01
            :ARG2 (r / reference
                  :ARG1-of (p2 / pass-by-17))
            :purpose (s / save-01
                  :ARG1 (m3 / memory))))"
2026,12.1,What is a pointer?,The address of a location in memory.,a pointer points to a location in memory of a certain data type,4.5,5,4.75,"# ::snt a pointer points to a location in memory of a certain data type
(p / point-01
      :ARG0 (p2 / pointer)
      :ARG2 (l / location
            :location (m / memory)
            :mod (t / type
                  :mod (d / data)
                  :mod (c / certain))))"
2027,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that points to the address location of another variable.  Represented by (*).,5,5,5,"# ::snt A pointer is a variable that points to the address location of another variable.  Represented by (*).
(m / multi-sentence
      :snt1 (v / variable
            :ARG0-of (p / point-01)
            :ARG0-of (p2 / point-01
                  :ARG2 (l / location
                        :mod (a / address)
                        :poss (v2 / variable
                              :mod (a2 / another)))))
      :snt2 (r / represent-01
            :ARG0 (s / string-entity
                  :value ""*"")))"
2028,12.1,What is a pointer?,The address of a location in memory.,A pointer is a variable that holds the address of a given variable (and of a given data type),5,5,5,"# ::snt A pointer is a variable that holds the address of a given variable (and of a given data type)
(v / variable
      :ARG0-of (h / hold-01
            :ARG1 (a / and
                  :op1 (a2 / address
                        :poss (v2 / variable
                              :ARG1-of (g / give-01)))
                  :op2 (a3 / address
                        :poss (t / type
                              :mod (d / data)
                              :ARG1-of (g2 / give-01)))))
      :domain (p / pointer))"
2029,12.1,What is a pointer?,The address of a location in memory.,pointer is a programming data type whose value points to another value stored in computer memory by its address.,5,5,5,"# ::snt pointer is a programming data type whose value points to another value stored in computer memory by its address.
(t / type
      :mod (d / data
            :purpose (p / program-01))
      :domain (p2 / pointer)
      :ARG1-of (p3 / point-01
            :ARG2 (v / value
                  :mod (a / another)
                  :ARG1-of (s / store-01
                        :ARG2 (m / memory
                              :mod (c / computer))
                        :manner (a2 / address
                              :poss t)))))"
2030,12.1,What is a pointer?,The address of a location in memory.,A data type that points to a specific memory address.,5,5,5,"# ::snt A data type that points to a specific memory address.
(t / type
      :mod (d / data)
      :ARG0-of (p / point-01
            :ARG2 (a / address
                  :mod (m / memory)
                  :ARG1-of (s / specific-02))))"
2031,12.1,What is a pointer?,The address of a location in memory.,Its like a variable except it only holds the address in memory of the variable not the physical information.,5,5,5,"# ::snt Its like a variable except it only holds the address in memory of the variable not the physical information.
(r / resemble-01
      :ARG1 (ii / it)
      :ARG2 (v / variable)
      :ARG2-of (e / except-01
            :ARG1 (h / hold-01
                  :ARG0 ii
                  :ARG1 (a / address)
                  :mod (o / only)
                  :location (m / memory
                        :poss v)
                  :ARG1-of (ii2 / instead-of-91
                        :ARG2 (h2 / hold-01
                              :ARG0 ii
                              :ARG1 (ii3 / information
                                    :mod (p / physical)))))))"
2032,12.1,What is a pointer?,The address of a location in memory.,a pointer is a reference to a memory location.,5,5,5,"# ::snt a pointer is a reference to a memory location.
(r / refer-01
      :ARG1 (p / pointer)
      :ARG2 (l / location
            :mod (m / memory)))"
2033,12.1,What is a pointer?,The address of a location in memory.,A pointer is an alias to an object in memory.,3.5,4.25,3.875,"# ::snt A pointer is an alias to an object in memory.
(a / alias-01
      :ARG0 (p / pointer)
      :ARG1 (o / object
            :location (m / memory)))"
2034,12.1,What is a pointer?,The address of a location in memory.,"A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.",5,5,5,"# ::snt A pointer is a variable that contains a memory address for something that you can use, such as a value, array, or even a function.
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :purpose (s / something
                        :ARG1-of (u / use-01
                              :ARG0 (y / you)
                              :ARG1-of (p / possible-01))
                        :example (o / or
                              :op1 (v2 / value)
                              :op2 (a2 / array)
                              :op3 (f / function
                                    :mod (e / even))))))
      :domain (p2 / pointer))"
2035,12.1,What is a pointer?,The address of a location in memory.,its a data type with a memory address and a value,1.5,5,3.25,"# ::snt its a data type with a memory address and a value
(t / type
      :mod (d / data)
      :ARG0-of (h / have-03
            :ARG1 (a / and
                  :op1 (a2 / address
                        :mod (m / memory))
                  :op2 (v / value))))"
2036,12.1,What is a pointer?,The address of a location in memory.,a form of storing data that keeps the location in memory of an data type or object.,5,5,5,"# ::snt a form of storing data that keeps the location in memory of an data type or object.
(f / form
      :mod (s / store-01
            :ARG1 (d / data))
      :ARG0-of (k / keep-01
            :ARG1 (l / location
                  :location (m / memory)
                  :poss (o / or
                        :op1 (t / type
                              :mod (d2 / data))
                        :op2 (o2 / object
                              :mod d2)))))"
2037,12.1,What is a pointer?,The address of a location in memory.,it contains a object's memory address,5,5,5,"# ::snt it contains a object's memory address
(c / contain-01
      :ARG0 (ii / it)
      :ARG1 (a / address
            :mod (m / memory)
            :poss (o / object)))"
2038,12.1,What is a pointer?,The address of a location in memory.,variable that contains the memory address of a data object.,5,5,5,"# ::snt variable that contains the memory address of a data object.
(v / variable
      :ARG0-of (c / contain-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (o / object
                        :mod (d / data)))))"
2039,12.1,What is a pointer?,The address of a location in memory.,A pointer is an element that references a memory location.,5,5,5,"# ::snt A pointer is an element that references a memory location.
(e / element
      :ARG0-of (r / reference-04
            :ARG1 (l / location
                  :mod (m / memory)))
      :domain (p / pointer))"
2040,12.1,What is a pointer?,The address of a location in memory.,"an object that points to a specific place in memory, where a variable or value is stored.",5,5,5,"# ::snt an object that points to a specific place in memory, where a variable or value is stored.
(o / object
      :ARG0-of (p / point-01
            :ARG2 (p2 / place
                  :ARG1-of (s / specific-02)
                  :location (m / memory)
                  :location-of (s2 / store-01
                        :ARG1 (o2 / or
                              :op1 (v / variable)
                              :op2 (v2 / value))))))"
2041,12.1,What is a pointer?,The address of a location in memory.,a variable that stores the address of a memory location,5,5,5,"# ::snt a variable that stores the address of a memory location
(v / variable
      :ARG0-of (s / store-01
            :ARG1 (a / address
                  :poss (l / location
                        :mod (m / memory)))))"
2042,12.1,What is a pointer?,The address of a location in memory.,"A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.",5,5,5,"# ::snt A pointer is a variable that points to an address in memory, which contains some data. The pointer does not contain or point to any data, only a memory address.
(m / multi-sentence
      :snt1 (v / variable
            :domain (p / pointer)
            :ARG0-of (p2 / point-01
                  :ARG2 (a / address
                        :location (m2 / memory)
                        :ARG0-of (c / contain-01
                              :ARG1 (d / data
                                    :quant (s / some))))))
      :snt2 (o / or
            :op1 (c2 / contain-01
                  :polarity -
                  :ARG0 (p3 / pointer)
                  :ARG1 (d2 / data
                        :mod (a2 / any)))
            :op2 (p4 / point-01
                  :polarity -
                  :ARG0 p3
                  :ARG1 (a3 / address
                        :mod (m3 / memory)
                        :mod (o2 / only)))))"
2043,12.1,What is a pointer?,The address of a location in memory.,Pointer is a variable which have a memory address of a variable.,5,5,5,"# ::snt Pointer is a variable which have a memory address of a variable.
(v / variable
      :domain (p / pointer)
      :ARG0-of (h / have-03
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss v)))"
2044,12.1,What is a pointer?,The address of a location in memory.,a pointer points to a location in memory where data is stored,5,5,5,"# ::snt a pointer points to a location in memory where data is stored
(p / point-01
      :ARG0 (p2 / pointer)
      :ARG2 (l / location
            :location (m / memory)
            :location-of (s / store-01
                  :ARG1 (d / data))))"
2045,12.1,What is a pointer?,The address of a location in memory.,a variable that holds the address of another variable and can access the contents of the variable.,5,5,5,"# ::snt a variable that holds the address of another variable and can access the contents of the variable.
(v / variable
      :ARG0-of (h / hold-01
            :ARG1 (a / address
                  :poss (v2 / variable
                        :mod (a2 / another))))
      :ARG0-of (a3 / access-01
            :ARG1 (t / thing
                  :ARG2-of (c / contain-01
                        :ARG1 v2))
            :ARG1-of (p / possible-01)))"
2046,12.1,What is a pointer?,The address of a location in memory.,a pointer is a memory address that points to a data member,5,5,5,"# ::snt a pointer is a memory address that points to a data member
(p / pointer
      :domain (a / address
            :mod (m / memory)
            :ARG0-of (p2 / point-01
                  :ARG2 (m2 / member
                        :mod (d / data)))))"
2047,12.1,What is a pointer?,The address of a location in memory.,A data type that stores the memory address of another variable.,5,5,5,"# ::snt A data type that stores the memory address of another variable.
(t / type
      :mod (d / data)
      :ARG0-of (s / store-01
            :ARG1 (a / address
                  :mod (m / memory)
                  :poss (v / variable
                        :mod (a2 / another)))))"
2048,12.1,What is a pointer?,The address of a location in memory.,its like a variable but only holds an address in meomrry not the physical address.,1,5,3,"# ::snt its like a variable but only holds an address in meomrry not the physical address.
(c / contrast-01
      :ARG1 (r / resemble-01
            :ARG1 (ii / it)
            :ARG2 (v / variable))
      :ARG2 (h / hold-01
            :ARG0 ii
            :ARG1 (a / address)
            :mod (o / only)
            :ARG1-of (ii2 / instead-of-91
                  :ARG2 (h2 / hold-01
                        :ARG0 ii
                        :ARG1 (a2 / address
                              :mod (p / physical))))))"
2049,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs",5,3.75,4.375,"# ::snt Try several sets of data on an algorithm that includes worst case, best case, and random cases.  Also try and run the same program on a different computer with the same specs
(m / multi-sentence
      :snt1 (t / try-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s / set
                  :quant (s2 / several)
                  :consist-of (d / data))
            :prep-on (a / algorithm
                  :ARG2-of (ii / include-01
                        :ARG1 (a2 / and
                              :op1 (c / case
                                    :ARG1-of (h / have-degree-91
                                          :ARG2 (b / bad-07
                                                :ARG1 c)
                                          :ARG3 (m2 / most)))
                              :op2 (c2 / case
                                    :ARG1-of (h2 / have-degree-91
                                          :ARG2 (g / good-02
                                                :ARG1 c2)
                                          :ARG3 (m3 / most)))
                              :op3 (c3 / case
                                    :ARG1-of (r / random-02))))))
      :snt2 (t2 / try-01
            :mode imperative
            :ARG0 (y2 / you)
            :ARG1 (r2 / run-01
                  :mode imperative
                  :ARG0 y2
                  :ARG1 (p / program
                        :ARG1-of (s3 / same-01))
                  :location (c4 / computer
                        :ARG1-of (d2 / differ-02)
                        :ARG0-of (h3 / have-03
                              :ARG1 (s4 / specs
                                    :ARG1-of (s5 / same-01)))))
            :mod (a3 / also)))"
2050,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
2051,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1,1.5,3,2.25,"# ::snt time complexity using big O  logarthmic O(log n) linear O(n) exponential O(n^2) quadratic O(n^k) k&gt;=1 Polynomial O(a^n) n&gt;1
(m / multi-sentence
      :snt1 (u / use-01
            :ARG1 (c / complex
                  :mod (t / time)))
      :snt2 (a / and
            :op1 (l / logarithmic
                  :domain (t2 / thing
                        :name (n / name
                              :op1 ""O"")
                        :mod (b / big)))
            :op2 (l2 / linear
                  :domain (t3 / thing
                        :name (n2 / name
                              :op1 ""o""
                              :op2 ""logarithmic""
                              :op3 ""n"")))
            :op3 (e / exponential
                  :domain (t4 / thing
                        :name (n3 / name
                              :op1 ""o(nk"")))
            :op4 (q / quadratic
                  :domain (t5 / thing
                        :name (n4 / name
                              :op1 ""o""
                              :op2 ""nk"")))
            :op5 (p / polynomial
                  :domain (t6 / thing
                        :name (n5 / name
                              :op1 ""o(an"")))))"
2052,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Using some sort of counting principle of the number of operations performed in an algorithm.,5,3.75,4.375,"# ::snt Using some sort of counting principle of the number of operations performed in an algorithm.
(u / use-01
      :ARG1 (p / principle
            :mod (c / count-01)
            :mod (s / sort
                  :mod (s2 / some))
            :topic (n / number
                  :quant-of (o / operate-01
                        :ARG1-of (p2 / perform-02
                              :ARG0 (a / algorithm))))))"
2053,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.,5,5,5,"# ::snt Experimental means you would actually write a prototype of the algorithm and measure the time it takes to run given certain parameters.
(m / mean-01
      :ARG1 (e / experiment-01)
      :ARG2 (a / and
            :op1 (w / write-01
                  :ARG0 (y / you)
                  :ARG1 (p / prototype
                        :mod (a2 / algorithm))
                  :ARG1-of (a3 / actual-02))
            :op2 (m2 / measure-01
                  :ARG0 y
                  :ARG1 (t / time
                        :ARG1-of (t2 / take-10
                              :ARG0 (r / run-01
                                    :ARG1 a2)))
                  :ARG1-of (g / give-01
                        :ARG2 (p2 / parameter
                              :mod (c / certain))))))"
2054,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,measuring the relationship of running an algorithm with different input sizes.,5,3.75,4.375,"# ::snt measuring the relationship of running an algorithm with different input sizes.
(m / measure-01
      :ARG1 (r / relation-03
            :ARG0 (r2 / run-01
                  :ARG1 (a / algorithm)
                  :ARG2 (s / size
                        :mod (ii / input)
                        :ARG1-of (d / differ-02)))))"
2055,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.",5,4.25,4.625,"# ::snt Oposite of a theoretical assessment of the algorithm to determine runtime, but to run the code first to determine the the runtime.  This is not recommended because it is a limited test.  It does not include all possibilities of the data, nor the hardware used to process the data.
(m / multi-sentence
      :snt1 (c / contrast-01
            :ARG1 (a / assess-01
                  :ARG1 (a2 / algorithm)
                  :mod (t / theoretical)
                  :purpose (d / determine-01
                        :ARG1 (r / runtime)))
            :ARG2 (a3 / assess-01
                  :ARG1 (c2 / code)
                  :purpose (d2 / determine-01
                        :ARG1 (r2 / runtime))
                  :ord (o / ordinal-entity
                        :value 1)))
      :snt2 (r3 / recommend-01
            :polarity -
            :ARG1 (t2 / this)
            :ARG1-of (c3 / cause-01
                  :ARG0 (t3 / test-01
                        :ARG1-of (l / limit-01))))
      :snt3 (ii / include-01
            :polarity -
            :ARG0 (ii2 / it)
            :ARG1 (a4 / and
                  :op1 (p / possible-01
                        :ARG1 (d3 / data)
                        :mod (a5 / all))
                  :op2 (h / hardware
                        :ARG1-of (u / use-01
                              :ARG2 (p2 / process-01
                                    :ARG1 (d4 / data)))))))"
2056,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
2057,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.,1.5,3.75,2.625,"# ::snt The experimental approach for measuring the running time is by using the Big O equation which tells you the running time.
(a / approach-02
      :ARG1 (m / measure-01
            :ARG1 (t / time
                  :mod (r / run-02)))
      :manner (e / experiment-01)
      :manner (u / use-01
            :ARG1 (t2 / thing
                  :name (n / name
                        :op1 ""Big""
                        :op2 ""O""
                        :op3 ""Equation"")
                  :ARG0-of (t3 / tell-01
                        :ARG1 (t4 / time
                              :mod (r2 / run-02))
                        :ARG2 (y / you)))))"
2058,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.",5,5,5,"# ::snt You create and run  the algorithm multiple times, while measuring the amount of time it takes, you then average the results.
(a / and
      :op1 (c / create-01
            :ARG0 (y / you)
            :ARG1 (a2 / algorithm))
      :op2 (r / run-01
            :ARG0 y
            :ARG1 a2)
      :time (m / measure-01
            :ARG0 y
            :ARG1 (a3 / amount
                  :quant-of (t / time
                        :ARG1-of (t2 / take-10
                              :ARG0 (ii / it)))))
      :time-of (a4 / average-01
            :ARG0 y
            :ARG1 (t3 / thing
                  :ARG2-of (r2 / result-01))
            :time (t4 / then)))"
2059,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,keep a value of how many operations it takes and add to this value each time a function is called.,3,3.75,3.375,"# ::snt keep a value of how many operations it takes and add to this value each time a function is called.
(a / and
      :op1 (k / keep-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (v / value
                  :consist-of (n / number
                        :quant-of (o / operate-01
                              :ARG1-of (t / take-10
                                    :ARG0 (ii / it))))))
      :op2 (a2 / add-02
            :mode imperative
            :ARG0 y
            :ARG1 v
            :ARG2 v
            :frequency (r / rate-entity-91
                  :ARG4 (c / call-02
                        :ARG1 (f / function)))))"
2060,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,BIG-OH,1.5,3,2.25,"# ::snt BIG-OH
(b / big-oh
      :mode expressive)"
2061,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Running the program with various input data and measuring the running time with system time.,5,5,5,"# ::snt Running the program with various input data and measuring the running time with system time.
(a / and
      :op1 (r / run-01
            :ARG1 (p / program)
            :instrument (d / data
                  :mod (ii / input)
                  :mod (v / various)))
      :op2 (m / measure-01
            :ARG1 (t / time
                  :mod (r2 / run-01))
            :instrument (t2 / time
                  :mod (s / system))))"
2062,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.",5,3,4,"# ::snt You run a program with different data sizes, like 10^x.  As you increase x and measure the completion speeds for the program, you can find patterns and attempt the measure the running time.  It's very important to keep the same software and hardware however, which makes experimental testing inferior to theoretical in the eyes of most.
(m / multi-sentence
      :snt1 (r / run-01
            :ARG0 (y / you)
            :ARG1 (p / program
                  :ARG0-of (h / have-03
                        :ARG1 (s / size
                              :mod (d / data)
                              :ARG1-of (d2 / differ-02)
                              :example (r2 / rate-entity-91
                                    :ARG1 10)))))
      :snt2 (p2 / possible-01
            :ARG1 (a / and
                  :op1 (f / find-01
                        :ARG0 (y2 / you)
                        :ARG1 (p3 / pattern))
                  :op2 (a2 / attempt-01
                        :ARG0 y2
                        :ARG1 (m2 / measure-01
                              :ARG0 y2
                              :ARG1 (t / time
                                    :duration-of (r3 / run-01))))
                  :time (ii / increase-01
                        :ARG0 y2
                        :ARG1 (x / x))
                  :time (m3 / measure-01
                        :ARG0 y2
                        :ARG1 (s2 / speed)))
            :snt2 (ii2 / important-01
                  :ARG1 (k / keep-01
                        :ARG1 (a3 / and
                              :op1 (s3 / software)
                              :op2 (h2 / hardware)
                              :ARG1-of (s4 / same-01))
                        :ARG0-of (m4 / make-02
                              :ARG1 (ii3 / inferior-01
                                    :ARG1 (t2 / test-01
                                          :mod (e / experiment-01))
                                    :ARG2 (t3 / test-01
                                          :mod (t4 / theory))
                                    :ARG1-of (s5 / see-01
                                          :ARG0 (p4 / person
                                                :quant (m5 / most)))))
                        :degree (v / very)))))"
2063,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,to run the program through and see how many times each thing is called and the runtime of each function is based on that.,5,3.5,4.25,"# ::snt to run the program through and see how many times each thing is called and the runtime of each function is based on that.
(a / and
      :op1 (r / run-01
            :ARG1 (p / program)
            :manner (t / through))
      :op2 (s / see-01
            :ARG1 (a2 / and
                  :op1 (n / number
                        :quant-of (c / call-01
                              :ARG1 (t2 / thing
                                    :mod (e / each))))
                  :op2 (b / base-02
                        :ARG1 (r2 / run-01
                              :ARG1 (f / function
                                    :mod (e2 / each)))
                        :ARG2 (t3 / that)))))"
2064,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,the number of times a specific segments get called per unit work.,3,3,3,"# ::snt the number of times a specific segments get called per unit work.
(w / work-01
      :ARG1 (r / rate-entity-91
            :ARG1 (n / number
                  :frequency-of (c / call-02
                        :ARG1 (s / segment
                              :ARG1-of (s2 / specific-02))))
            :ARG2 (u / unit)))"
2065,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"For every call into memory, add/ multiply it into an equation of type O(n)",1.5,3,2.25,"# ::snt For every call into memory, add/ multiply it into an equation of type O(n)
(s / slash
      :op1 (a / add-02
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :ARG2 (e / equation
                  :mod (t / type
                        :op1 ""O(n"")))
      :op2 (m / multiply-01
            :mode imperative
            :ARG0 y
            :ARG1 ii)
      :purpose (c / call-03
            :ARG1 (m2 / memory)
            :mod (e2 / every)))"
2066,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.",3,4.25,3.625,"# ::snt adding a time marker at the before the algorithm is called and another time marker immediately after so that you have the change in time, then you can calculate the efficiency by the speed of the computers cpu.
(a / and
      :op1 (a2 / add-02
            :ARG1 (a3 / and
                  :op1 (m / marker
                        :mod (t / time)
                        :time (b / before
                              :op1 (c / call-02
                                    :ARG1 (a4 / algorithm))))
                  :op2 (m2 / marker
                        :mod (t2 / time)
                        :mod (a5 / another))
                  :time (a6 / after
                        :mod (ii / immediate)))
            :purpose (h / have-03
                  :ARG0 (y / you)
                  :ARG1 (c2 / change-01
                        :ARG1 (t3 / time))))
      :op2 (p / possible-01
            :ARG1 (c3 / calculate-01
                  :ARG0 y
                  :ARG1 (e / efficiency)
                  :ARG2 (s / speed
                        :poss (c4 / CPU
                              :poss (c5 / computer)))
                  :time (t4 / then))))"
2067,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,Big O(h) notation,1.5,3,2.25,"# ::snt Big O(h) notation
(n / notation
      :mod (s / string-entity
            :value ""O"")
      :mod (b / big))"
2068,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,the experimental approach measures actual running time in t.  t= seconds.,5,5,5,"# ::snt the experimental approach measures actual running time in t.  t= seconds.
(m / measure-01
      :ARG0 (a / approach-02
            :mod (e / experiment-01))
      :ARG1 (t / time
            :ARG1-of (r / run-02)
            :ARG1-of (a2 / actual-02))
      :ARG2 (v / value-entity
            :value ""t""
            :ARG1-of (e2 / equal-01
                  :ARG2 (t2 / temporal-quantity
                        :quant 1
                        :unit (s / second)))))"
2069,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,running an algorithm on a specific set of data,5,3,4,"# ::snt running an algorithm on a specific set of data
(r / run-01
      :ARG1 (a / algorithm)
      :ARG2 (s / set
            :consist-of (d / data)
            :ARG1-of (s2 / specific-02)))"
2070,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.",2.5,3.75,3.125,"# ::snt In experimental terms, the running time of an algorithm is measured by the number of operations required to complete the function. This number can usually be expressed in big-O notation.
(m / multi-sentence
      :snt1 (m2 / measure-01
            :ARG1 (t / time
                  :duration-of (r / run-01
                        :ARG1 (a / algorithm)))
            :ARG2 (n / number
                  :quant-of (o / operate-01
                        :ARG1-of (r2 / require-01
                              :purpose (c / complete-01
                                    :ARG1 (f / function)))))
            :manner (t2 / term
                  :mod (e / experiment-01)))
      :snt2 (p / possible-01
            :ARG1 (e2 / express-01
                  :ARG1 (n2 / number
                        :mod (t3 / this))
                  :manner (n3 / notation
                        :mod (b / big)
                        :mod (s / string-entity
                              :value ""O""))
                  :mod (u / usual))))"
2071,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)",2.5,4.5,3.5,"# ::snt run the code for n-times and get average values, drop the constant and lowest number. for example if             f(x) = 3n +1 the running time will bef  f(x) = O(n)
(m / multi-sentence
      :snt1 (a / and
            :op1 (r / run-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (c / code)
                  :purpose (t / time
                        :quant (n / number
                              :quant (n2 / n)))
                  :op2 (g / get-01
                        :mode imperative
                        :ARG0 y
                        :ARG1 (v / value
                              :ARG1-of (a2 / average-01)))
                  :op3 (d / drop-01
                        :mode imperative
                        :ARG0 y
                        :ARG1 (a3 / and
                              :op1 (c2 / constant)
                              :op2 (n3 / number
                                    :ARG1-of (h / have-degree-91
                                          :ARG2 (l / low-04
                                                :ARG1 n3)
                                          :ARG3 (m2 / most))))))
            :snt2 (e / exemplify-01
                  :ARG0 (h2 / have-condition-91
                        :ARG1 (e2 / equal-01
                              :ARG1 (s / string-entity
                                    :value ""f(x""))
                        :ARG2 (s2 / string-entity
                              :value ""o(n""))
                  :ARG2 (e3 / equal-01
                        :ARG1 s
                        :ARG2 (s3 / string-entity
                              :value ""f(x"")))))"
2072,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,to measure the actual time of the program to run. and calculate the running time using the input and operations done,5,5,5,"# ::snt to measure the actual time of the program to run. and calculate the running time using the input and operations done
(a / and
      :op1 (m / measure-01
            :ARG1 (t / time
                  :ARG1-of (a2 / actual-02)
                  :time-of (p / program
                        :ARG1-of (r / run-01))))
      :op2 (c / calculate-01
            :ARG1 (t2 / time
                  :time-of r))
      :instrument (a3 / and
            :op1 (ii / input)
            :op2 (o / operate-01
                  :ARG1-of (d / do-02))))"
2073,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,adding up the number of operations performed based on the worst case possible.,2,3,2.5,"# ::snt adding up the number of operations performed based on the worst case possible.
(a / add-up-04
      :ARG1 (n / number
            :quant-of (o / operate-01
                  :ARG1-of (p / perform-02)))
      :ARG1-of (b / base-02
            :ARG2 (c / case-04
                  :ARG1-of (h / have-degree-91
                        :ARG2 (b2 / bad-07
                              :ARG1 c)
                        :ARG3 (m / most)
                        :ARG5 (p2 / possible-01)))))"
2074,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,the experimental approach would be to run through the algorithm and see how long it takes,5,5,5,"# ::snt the experimental approach would be to run through the algorithm and see how long it takes
(a / approach-02
      :ARG1 (e / experiment-01)
      :ARG2 (a2 / and
            :op1 (r / run-through-20
                  :ARG1 (a3 / algorithm))
            :op2 (s / see-01
                  :ARG1 (t / thing
                        :ARG2-of (t2 / take-10
                              :ARG1 (ii / it)
                              :ARG3 (t3 / temporal-quantity))))))"
2075,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,"trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.",5,5,5,"# ::snt trying it with different sets of inputs, and measuring the amount of time that the algorithm actually takes.
(a / and
      :op1 (t / try-01
            :ARG1 (ii / it)
            :instrument (s / set
                  :consist-of (ii2 / input)
                  :ARG1-of (d / differ-02)))
      :op2 (m / measure-01
            :ARG1 (a2 / amount
                  :quant-of (t2 / time
                        :ARG1-of (t3 / take-10
                              :ARG0 (a3 / algorithm)
                              :ARG1-of (a4 / actual-02))))))"
2076,12.2,What is the experimental approach for measuring the running time of an algorithm?,Implement the algorithm and measure the physical running time.,running the input with various inputs measuring the running time with  system time,5,3.75,4.375,"# ::snt running the input with various inputs measuring the running time with  system time
(r / run-01
      :ARG1 (ii / input)
      :accompanier (ii2 / input
            :mod (v / various))
      :ARG0-of (m / measure-01
            :ARG1 (t / time
                  :time-of (r2 / run-01))
            :accompanier (t2 / time
                  :mod (s / system))))"
2077,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.",5,5,5,"# ::snt it scans the list and selects the smallest(largest) element and places it in the front, increment the curPtr by one, scan the list again for the next smallest(largest) element and place it in with respect with the other sorted elements.
(a / and
      :op1 (a2 / and
            :op1 (s / scan-01
                  :ARG0 (ii / it)
                  :ARG1 (l / list))
            :op2 (s2 / select-01
                  :ARG0 ii
                  :ARG1 (e / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s3 / small)
                              :ARG3 (m / most))))
            :op3 (p / place-01
                  :ARG0 ii
                  :ARG1 e
                  :ARG2 (f / front)))
      :op2 (ii2 / increment-01
            :ARG0 ii
            :ARG1 (c / curPtr)
            :ARG2 (o / one))
      :op3 (s4 / scan-01
            :ARG0 ii
            :ARG1 (l2 / list)
            :ARG2 (e2 / element
                  :mod (n / next)
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s5 / small)
                        :ARG3 (m2 / most)))
            :mod (a3 / again))
      :op4 (p2 / place-01
            :ARG0 ii
            :ARG1 e2
            :prep-with (e3 / element
                  :ARG1-of (s6 / sort-01)
                  :mod (o2 / other))))"
2078,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.",5,5,5,"# ::snt Selection sort searches the array for the lowest value and swaps it with the first value in the array. Then searches for the next lowest value and swaps it with the second item in the array, and so on.
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / search-01
                  :ARG0 (s2 / sort-01
                        :ARG1 (s3 / select-01))
                  :ARG1 (a2 / array)
                  :ARG2 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l / low-04
                                    :ARG1 v)
                              :ARG3 (m2 / most))))
            :op2 (s4 / swap-01
                  :ARG0 s2
                  :ARG1 v
                  :ARG2 (v2 / value
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (a3 / array))))
      :snt2 (a4 / and
            :op1 (s5 / search-01
                  :ARG0 s2
                  :ARG1 (v3 / value
                        :mod (n / next)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l2 / low-04
                                    :ARG1 v3)
                              :ARG3 (m3 / most))))
            :op2 (s6 / swap-01
                  :ARG0 s2
                  :ARG1 v3
                  :ARG2 (ii / item
                        :ord (o2 / ordinal-entity
                              :value 2)
                        :part-of a3)))
      :time (t / then)
      :snt3 (e / et-cetera))"
2079,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",Compare the largest element to the front element and swap data according to value if needed.,4,3.75,3.875,"# ::snt Compare the largest element to the front element and swap data according to value if needed.
(a / and
      :op1 (c / compare-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / most)))
            :ARG2 (e2 / element
                  :mod (f / front)))
      :op2 (s / swap-01
            :mode imperative
            :ARG0 y
            :ARG1 (d / data)
            :ARG1-of (c2 / conform-01
                  :ARG2 (v / value))
            :condition (n / need-01)
            :ARG1-of n))"
2080,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.",1,3,2,"# ::snt Selection sort is a sorting algorithm that divides a list in half and has two lists. It then compares the first elements in both these lists and puts these elements in another list, having the smaller element before the bigger one.
(m / multi-sentence
      :snt1 (a / algorithm
            :ARG0-of (s / sort-01)
            :ARG0-of (d / divide-02
                  :ARG1 (l / list)
                  :ARG2 (h / half))
            :ARG0-of (h2 / have-03
                  :ARG1 (l2 / list
                        :quant 2)))
      :snt2 (a2 / and
            :op1 (c / compare-01
                  :ARG0 (ii / it)
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (l3 / list
                              :mod (t / this)))
                  :time (t2 / then))
            :op2 (p / put-01
                  :ARG0 ii
                  :ARG1 e
                  :ARG2 (l4 / list
                        :mod (a3 / another))
                  :manner (h3 / have-03
                        :ARG0 ii
                        :ARG1 (e2 / element
                              :ARG1-of (h4 / have-degree-91
                                    :ARG2 (s2 / small)
                                    :ARG3 (m2 / more)))
                        :ARG2 (b / before
                              :op1 (e3 / element
                                    :ARG1-of (h5 / have-degree-91
                                          :ARG2 (b2 / big)
                                          :ARG3 (m3 / more))))))))"
2081,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.",5,4.5,4.75,"# ::snt Iterate through the list (assume list of integers), find the smallest one, and put it in a separate ""sorted"" list... then traverse again and find the next smallest, and move it to the sorted section... and repeat until you run out of elements to sort.
(m / multi-sentence
      :snt1 (ii / iterate-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (l / list)
            :ARG1-of (m2 / mean-01
                  :ARG2 (a / assume-02
                        :ARG0 y
                        :ARG1 (l2 / list
                              :consist-of (ii2 / integer)))))
      :snt2 (a2 / and
            :op1 (f / find-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (o / one
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m3 / most))))
            :op2 (p / put-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 o
                  :ARG2 l2
                  :ARG1-of (s2 / sort-01)
                  :ARG1-of (s3 / separate-02)))
      :snt2 (a3 / and
            :op1 (t / traverse-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :mod (a4 / again))
            :op2 (f2 / find-01
                  :mode imperative
                  :ARG0 y2
                  :ARG1 (t2 / thing
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s4 / small)
                              :ARG3 (m4 / most)
                              :ARG5 (s5 / section
                                    :ARG1-of (s6 / sort-01))
                              :mod (n / next))))
            :op3 (m5 / move-01
                  :mode imperative
                  :ARG0 y2
                  :ARG1 (t3 / thing
                        :ARG2 s5))
            :op4 (r / repeat-01
                  :ARG0 y2
                  :time (u / until
                        :op1 (r2 / run-out-05
                              :ARG1 (e / element)
                              :purpose (s7 / sort-01))))))"
2082,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.,5,5,5,"# ::snt selection sort selects the smallest element out of the list then the second smallest ....and sorts them acordingly.
(a / and
      :op1 (s / select-01
            :ARG0 (s2 / sort-01
                  :ARG1 (s3 / select-01))
            :ARG1 (e / element
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s4 / small)
                        :ARG3 (m / most))
                  :ARG1-of (l / list-01)))
      :op2 (s5 / sort-01
            :ARG0 (s6 / sort-01
                  :ARG1 (e2 / element
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s7 / small)
                              :ARG3 (m2 / most
                                    :ord (o / ordinal-entity
                                          :value 2))))
                  :ARG1-of (a2 / accord-02))))"
2083,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.,5,5,5,"# ::snt You select the smallest element and place it on the left.  You select the smallest element and sort it with respect the the item already on the left.  You continue this till the end of the collection of items.
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / select-01
                  :ARG0 (y / you)
                  :ARG1 (e / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m2 / most))))
            :op2 (p / place-01
                  :ARG0 y
                  :ARG1 e
                  :ARG2 (l / left-19)))
      :snt2 (a2 / and
            :op1 (s3 / select-01
                  :ARG0 (y2 / you)
                  :ARG1 (e2 / element
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s4 / small)
                              :ARG3 (m3 / most))))
            :op2 (s5 / sort-01
                  :ARG0 y2
                  :ARG1 e2
                  :manner (r / respect-01
                        :ARG1 (ii / item
                              :location (l2 / left)
                              :time (a3 / already)))))
      :snt3 (c / continue-01
            :ARG0 (y3 / you)
            :ARG1 (t / this)
            :time (t2 / till
                  :op1 (e3 / end-01
                        :ARG1 (c2 / collect-01
                              :ARG1 (ii2 / item))))))"
2084,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.",5,5,5,"# ::snt A selection sort scrolls through the data structure looking for the lowest (or highest) unsorted piece of data, moves it to the held spot, increments that spot by one, and starts the process over.
(a / and
      :op1 (s / scroll-01
            :ARG0 (s2 / sort-01
                  :ARG1 (s3 / select-01))
            :ARG1 (s4 / structure
                  :mod (d / data))
            :manner (l / look-01
                  :ARG0 s2
                  :ARG1 (p / piece
                        :consist-of (d2 / data
                              :ARG1-of s2
                              :polarity -)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l2 / low-04
                                    :ARG1 p)
                              :ARG3 (m / most)))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (h3 / high-02
                              :ARG1 p)
                        :ARG3 (m2 / most))))
      :op2 (m3 / move-01
            :ARG0 s2
            :ARG1 p
            :ARG2 (s5 / spot
                  :ARG1-of (h4 / hold-01)))
      :op3 (ii / increment-01
            :ARG0 s2
            :ARG1 s5
            :ARG2 (o / one))
      :op4 (s6 / start-01
            :ARG0 s2
            :ARG1 (p2 / process-01)
            :mod (o2 / over)))"
2085,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.,0,3.75,1.875,"# ::snt Selection sort works by finding the smallest element and then compares it with the largest and sorts the elements.
(w / work-09
      :ARG1 (s / sort-01
            :ARG1 (s2 / select-01))
      :manner (a / and
            :op1 (f / find-01
                  :ARG1 (e / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s3 / small)
                              :ARG3 (m / most))))
            :op2 (a2 / and
                  :op1 (c / compare-01
                        :ARG1 e
                        :ARG2 (e2 / element
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (l / large)
                                    :ARG3 (m2 / most))))
                  :op2 s
                  :ARG1 e2)
            :time (t / then)))"
2086,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.",1,4,2.5,"# ::snt Selection sort is usually a recursive sorting method where you divide the elements to be sorted in half repeatedly. You then sort the smallest case, then work your way up, sorting each until they are all sorted.
(m / multi-sentence
      :snt1 (m2 / method
            :mod (s / sort-01
                  :ARG1-of (r / recursive-02))
            :domain (s2 / sort-01
                  :ARG1 (e / element
                        :ARG1-of (s3 / sort-01
                              :ARG1-of (r2 / repeat-01))))
            :mod (u / usual))
      :snt2 (a / and
            :op1 (s4 / sort-01
                  :ARG0 (y / you)
                  :ARG1 (c / case-03
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s5 / small)
                              :ARG3 (m3 / most)))
                  :time (t / then))
            :op2 (w / work-up-03
                  :ARG0 y
                  :ARG1 (w2 / way
                        :poss y)
                  :time (t2 / then))
            :op3 s3
            :ARG0 y
            :ARG1 (e2 / each)
            :time (u2 / until
                  :op1 s4
                  :ARG1 (t3 / they
                        :mod (a2 / all)))))"
2087,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.",0,3.75,1.875,"# ::snt goes to the middle of the list, checks to see if it is greater or less then the value given and moves through the list accordingly to add the value into the proper place.
(a / and
      :op1 (g / go-01
            :ARG1 (ii / it)
            :ARG4 (m / middle
                  :part-of (l / list)))
      :op2 (c / check-01
            :ARG0 ii
            :purpose (s / see-01
                  :ARG0 ii
                  :ARG1 (t / truth-value
                        :polarity-of (o / or
                              :op1 (h / have-degree-91
                                    :ARG1 ii
                                    :ARG2 (g2 / great)
                                    :ARG3 (m2 / more)
                                    :ARG4 (v / value
                                          :ARG1-of (g3 / give-01)))
                              :op2 (h2 / have-quant-91
                                    :ARG1 v
                                    :ARG3 (l2 / less)
                                    :ARG4 v)))))
      :op2 (m3 / move-01
            :ARG1 ii
            :ARG2 (t2 / through
                  :op1 l))
      :purpose (a2 / add-02
            :ARG0 ii
            :ARG1 v
            :ARG2 (p / place
                  :mod (p2 / proper)))
      :manner (a3 / accordingly))"
2088,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort finds the lowest element in the data set and places it behind the pivot point.,5,3.75,4.375,"# ::snt selection sort finds the lowest element in the data set and places it behind the pivot point.
(a / and
      :op1 (f / find-01
            :ARG0 (s / sort-01
                  :ARG1 (s2 / select-01))
            :ARG1 (e / element
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / low-04
                              :ARG1 e)
                        :ARG3 (m / most))
                  :part-of (s3 / set
                        :consist-of (d / data))))
      :op2 (p / place-01
            :ARG0 s
            :ARG1 e
            :ARG2 (b / behind
                  :op1 (p2 / point
                        :mod (p3 / pivot)))))"
2089,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.",5,3.75,4.375,"# ::snt Selection sort iterates through the array one element at a time, seeking the least value from the right and replacing the current value with it.
(ii / iterate-01
      :ARG0 (s / sort-01
            :ARG1 (s2 / select-01))
      :ARG1 (a / array)
      :manner (a2 / and
            :op1 (s3 / seek-01
                  :ARG0 s
                  :ARG1 (v / value
                        :ARG1-of (h / have-quant-91
                              :ARG3 (l / least)))
                  :ARG2 (r / right-08))
            :op2 (r2 / replace-01
                  :ARG0 s
                  :ARG1 (v2 / value
                        :time (c / current)
                        :ARG2-of r2))))"
2090,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.",5,5,5,"# ::snt Selection sort traverses an unsorted array looking for the smallest value, when it's found it is put at the beginning of the unsorted array.  Performed several times, this will output a sorted array.
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / traverse-01
                  :ARG0 (s / sort-01
                        :ARG1 (t2 / thing
                              :ARG1-of (s2 / sort-01
                                    :polarity -)))
                  :ARG1 (a2 / array
                        :ARG1-of (s3 / sort-01))
                  :purpose (l / look-01
                        :ARG0 s
                        :ARG1 (t3 / thing
                              :ARG1-of (v / value-01)
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (s4 / small)
                                    :ARG3 (m2 / most)))))
            :op2 (p / put-01
                  :ARG1 t3
                  :ARG2 (b / begin-01
                        :ARG1 (a3 / array
                              :ARG1-of s2
                              :polarity -)))
            :time (f / find-01
                  :ARG1 t3))
      :snt2 (p2 / perform-02
            :ARG1 (t4 / this)
            :frequency (s5 / several))
      :snt3 (o / output-01
            :ARG0 (s6 / sort-01
                  :ARG1 (a4 / array
                        :ARG1-of s3))))"
2091,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position,5,3.75,4.375,"# ::snt it runs through the list and finds the smallest (or largest) value and puts it at the appropriate position
(a / and
      :op1 (r / run-02
            :ARG0 (ii / it)
            :ARG1 (l / list))
      :op2 (f / find-01
            :ARG0 ii
            :ARG1 (o / or
                  :op1 (v / value
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s / small)
                              :ARG3 (m / most)))
                  :op2 (v2 / value
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (l2 / large)
                              :ARG3 (m2 / most)))))
      :op2 (p / put-01
            :ARG0 ii
            :ARG1 v
            :ARG2 (p2 / position-01
                  :ARG1-of (a2 / appropriate-02))))"
2092,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.",1,5,3,"# ::snt pick a number, and set all values less than that number to the left, while all numbers on the right of that number is larger.
(c / contrast-01
      :ARG1 (a / and
            :op1 (p / pick-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (n / number))
            :op2 (s / set-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (v / value
                        :mod (a2 / all)
                        :ARG1-of (h / have-quant-91
                              :ARG3 (l / less)
                              :ARG4 (n2 / number
                                    :mod (t / that)))))
            :ARG2 (l2 / left-19))
      :ARG2 (h2 / have-degree-91
            :ARG1 (n3 / number
                  :mod (a3 / all)
                  :location (r / right-08)
                  :ARG1-of r)
            :ARG2 (l3 / large)
            :ARG3 (m / more)))"
2093,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.,5,3.75,4.375,"# ::snt It takes the largest item in the unsorted array and swaps it with last item in the unsorted array.
(a / and
      :op1 (t / take-01
            :ARG0 (ii / it)
            :ARG1 (ii2 / item
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m / most))
                  :part-of (a2 / array
                        :ARG1-of (s / sort-01
                              :polarity -))))
      :op2 (s2 / swap-01
            :ARG0 ii
            :ARG1 ii2
            :ARG2 (ii3 / item
                  :mod (l2 / last)
                  :part-of (a3 / array
                        :ARG1-of (s3 / sort-01
                              :polarity -)))))"
2094,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.",1,3.75,2.375,"# ::snt by selecting the first object and comparing it with the next objects to find one that is smaller, if it does it switches the two.  then it comes back the other way and sees if the objects previous to the last one is greater, if it does it switches them.  it does this while decreasing the range it looks at until it finishes in the middle.
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / and
                  :op1 (s / select-01
                        :ARG0 (ii / it)
                        :ARG1 (o / object
                              :ord (o2 / ordinal-entity
                                    :value 1)))
                  :op2 (c / compare-01
                        :ARG0 ii
                        :ARG1 o
                        :ARG2 (o3 / object
                              :mod (n / next))
                        :purpose (f / find-01
                              :ARG0 ii
                              :ARG1 (o4 / object
                                    :ARG1-of (h / have-degree-91
                                          :ARG2 (s2 / small)
                                          :ARG3 (m2 / more))))
                        :purpose f
                        :ARG0 ii
                        :ARG1 o4)))
      :snt2 (s3 / switch-01
            :ARG0 (ii2 / it)
            :ARG1 (o5 / object
                  :quant 2
                  :mod n))
      :condition (d / do-02
            :ARG0 ii2)
      :snt3 (a3 / and
            :op1 (c2 / come-01
                  :ARG1 ii2
                  :ARG4 (w / way
                        :mod (o6 / other))
                  :direction (b / back))
            :op2 (s4 / see-01
                  :ARG0 ii2
                  :ARG1 (t / truth-value
                        :polarity-of (h2 / have-degree-91
                              :ARG1 o4
                              :ARG1-of (p / precede-01
                                    :ARG2 (o7 / one
                                          :mod (l / last))))
                        :ARG2 (g / great)
                        :ARG3 (m3 / more))))
      :time (t2 / then)
      :snt3 d
      :ARG0 (ii3 / it)
      :ARG1 (t3 / this)
      :time (d2 / decrease-01
            :ARG0 ii3
            :ARG1 (r / range
                  :ARG1-of (l2 / look-02))))"
2095,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.",5,3.75,4.375,"# ::snt Selection sorts works by going through a certain list. Goes through the unsorted list and selecting the largest item in the list and placing it in a sorted array. There are two arrays, unsorted and sorted. Complete these steps until the list is sorted.
(m / multi-sentence
      :snt1 (w / work-09
            :ARG1 (s / sort-01
                  :ARG1 (t / thing
                        :ARG1-of (s2 / sort-01
                              :polarity -)))
            :manner (g / go-through-20
                  :ARG1 (l / list
                        :mod (c / certain))))
      :snt2 (a / and
            :op1 (g2 / go-through-20
                  :ARG1 (l2 / list
                        :ARG1-of (s3 / sort-01
                              :polarity -)))
            :op2 (s4 / select-01
                  :ARG1 (ii / item
                        :ARG1-of (h / have-degree-91
                              :ARG2 (l3 / large)
                              :ARG3 (m2 / most))))
            :op3 (p / place-01
                  :ARG1 ii
                  :ARG2 (a2 / array
                        :quant 2
                        :ARG1-of (s5 / sort-01))))
      :snt2 (a3 / array
            :quant 2
            :ARG1-of (s6 / sort-01))
      :snt3 (c2 / complete-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (s7 / step
                  :mod (t2 / this))
            :time (u / until
                  :op1 (s8 / sort-01
                        :ARG1 (l4 / list)))))"
2096,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.",1,3.75,2.375,"# ::snt selection sort works by pulling all of the values off to the side, leaving one value in the list.  It will then insert a value into the list.  if the value is bigger it will go to the right, if smaller if will go to the left.
(m / multi-sentence
      :snt1 (w / work-09
            :ARG1 (s / sort-01
                  :ARG1 (s2 / select-01))
            :manner (p / pull-01
                  :ARG1 (v / value
                        :mod (a / all))
                  :ARG2 (s3 / side)
                  :ARG0-of (l / leave-13
                        :ARG1 (v2 / value
                              :quant 1)
                        :location (l2 / list))))
      :snt2 (ii / insert-01
            :ARG0 (ii2 / it)
            :ARG1 (v3 / value)
            :ARG2 l2)
      :time (t / then)
      :snt3 (a2 / and
            :op1 (g / go-01
                  :ARG1 (v4 / value)
                  :ARG4 (r / right-08)
                  :condition (b / big
                        :ARG2-of (h / have-degree-91
                              :ARG1 v4
                              :ARG3 (m2 / more))))
            :op2 (g2 / go-01
                  :ARG1 v4
                  :ARG4 (l3 / left-19)
                  :condition (h2 / have-degree-91
                        :ARG1 v4
                        :ARG2 (s4 / small)
                        :ARG3 (m3 / more)))))"
2097,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization,5,3.75,4.375,"# ::snt selection sort searches for the smallest element of the remaining data organization and places it at the largest point of the new data organization
(a / and
      :op1 (s / search-01
            :ARG0 (s2 / sort-01
                  :ARG1 (s3 / select-01))
            :ARG1 (e / element
                  :ARG1-of (h / have-degree-91
                        :ARG2 (s4 / small)
                        :ARG3 (m / most))
                  :part-of (o / organization
                        :mod (d / data)
                        :ARG1-of (r / remain-01))))
      :op2 (p / place-01
            :ARG0 s2
            :ARG1 e
            :ARG2 (p2 / point
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (l / large)
                        :ARG3 (m2 / most))
                  :part-of (o2 / organization
                        :ARG1-of (n / new-01)
                        :mod (d2 / data)))))"
2098,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.",5,5,5,"# ::snt Selection sort sorts an array one element at at time. It first finds the element with the smallest key and puts it into the first location within its array or list, then finds the next smallest and puts it in the second location, and so on.
(m / multi-sentence
      :snt1 (s / sort-01
            :ARG0 s
            :ARG1 (a / array))
      :ARG1 (e / element
            :quant 1
            :mod (a2 / at-a-time))
      :snt2 (a3 / and
            :op1 (f / find-01
                  :ARG0 (ii / it)
                  :ARG1 (e2 / element
                        :ARG0-of (h / have-03
                              :ARG1 (k / key
                                    :ARG1-of (h2 / have-degree-91
                                          :ARG2 (s2 / small)
                                          :ARG3 (m2 / most)))))
                  :time (f2 / first))
            :op2 (p / put-01
                  :ARG0 ii
                  :ARG1 e2
                  :ARG2 (l / location
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (o2 / or
                              :op1 (a4 / array
                                    :poss (ii2 / it)
                                    :op2 (l2 / list)))))
            :op3 (f3 / find-01
                  :ARG0 ii2
                  :ARG1 (e3 / element
                        :ARG1-of (h3 / have-degree-91
                              :ARG2 (s3 / small)
                              :ARG3 (m3 / most))
                        :mod (n / next))
                  :time (t / then))
            :op4 (p2 / put-01
                  :ARG0 ii2
                  :ARG1 e3
                  :ARG2 (l3 / location
                        :ord (o3 / ordinal-entity
                              :value 2)))
            :op5 (e4 / et-cetera)))"
2099,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","select an element compare it with 2nd element if it is greater, swap it ",1,4.5,2.75,"# ::snt select an element compare it with 2nd element if it is greater, swap it 
(a / and
      :op1 (s / select-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (e / element))
      :op2 (c / compare-01
            :mode imperative
            :ARG0 y
            :ARG1 e
            :ARG2 (e2 / element
                  :ord (o / ordinal-entity
                        :value 2))
            :condition (h / have-degree-91
                  :ARG1 e
                  :ARG2 (g / great)
                  :ARG3 (m / more)))
      :op3 (s2 / swap-01
            :mode imperative
            :ARG0 y
            :ARG1 e2))"
2100,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...",5,4.25,4.625,"# ::snt it selects the smallest element in a list and switches it with the element in its correct position, then it selects the next smallest and does the same...
(a / and
      :op1 (a2 / and
            :op1 (s / select-01
                  :ARG0 (ii / it)
                  :ARG1 (e / element
                        :location (l / list)
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m / most))))
            :op2 (s3 / switch-01
                  :ARG0 ii
                  :ARG1 e
                  :ARG2 (p / position-01
                        :ARG1 e
                        :ARG1-of (c / correct-02))))
      :op3 (a3 / and
            :op1 (s4 / select-01
                  :ARG0 ii
                  :ARG1 (e2 / element
                        :mod (n / next)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (s5 / small)
                              :ARG3 (m2 / most))))
            :op2 (d / do-02
                  :ARG0 ii
                  :ARG1 (t / thing
                        :ARG1-of (s6 / same-01)))
            :time (t2 / then)))"
2101,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.,5,4.25,4.625,"# ::snt It starts at the first element and replaces it with the smallest element found to the right. It then repeats with the next element in the list.
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / start-01
                  :ARG0 (ii / it)
                  :ARG2 (e / element
                        :ord (o / ordinal-entity
                              :value 1)))
            :op2 (r / replace-01
                  :ARG0 ii
                  :ARG1 e
                  :ARG2 (e2 / element
                        :ARG1-of (h / have-degree-91
                              :ARG2 (s2 / small)
                              :ARG3 (m2 / most))
                        :ARG5 (e3 / element
                              :ARG1-of (f / find-01
                                    :location (r2 / relative-position
                                          :op1 (r3 / right)))))))
      :snt2 (r4 / repeat-01
            :ARG0 (ii2 / it)
            :ARG2 (e4 / element
                  :mod (n / next)
                  :location (l / list))
            :time (t / then)))"
2102,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc",1,5,3,"# ::snt selection sort is when you pick a data member and put it in a new array, then you pick another data member and put it in order with the new array, then pick another and insert it in the correct place in the new array, etc etc
(s / sort-01
      :ARG1 (s2 / select-01)
      :ARG2 (a / and
            :op1 (a2 / and
                  :op1 (p / pick-01
                        :ARG0 (y / you)
                        :ARG1 (m / member
                              :mod (d / data)))
                  :op2 (p2 / put-01
                        :ARG0 y
                        :ARG1 m
                        :ARG2 (a3 / array
                              :ARG1-of (n / new-01))))
            :op2 (a4 / and
                  :op1 (p3 / pick-01
                        :ARG0 y
                        :ARG1 (m2 / member
                              :mod (d2 / data)
                              :mod (a5 / another)))
                  :op2 (p4 / put-01
                        :ARG0 y
                        :ARG1 m2
                        :ARG2 (o / order
                              :prep-with (a6 / array
                                    :ARG1-of (n2 / new-01)))))
            :op3 a4
            :op1 p3
            :ARG0 y
            :ARG1 m2)
      :op2 (ii / insert-01
            :ARG0 y
            :ARG1 m2
            :ARG2 (p5 / place
                  :ARG1-of (c / correct-02)
                  :location (a7 / array
                        :ARG1-of (n3 / new-01))))
      :op4 (e / et-cetera))"
2103,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.","it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.",5,3,4,"# ::snt it searches through the entire data set for the best element to go in the current position, then it moves up a position and searches through the remainder of the set for the best element for the new position.
(a / and
      :op1 (s / search-01
            :ARG0 (ii / it)
            :ARG1 (s2 / set
                  :consist-of (d / data)
                  :mod (e / entire))
            :ARG2 (e2 / element
                  :ARG1-of (h / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 e2)
                        :ARG3 (m / most))
                  :purpose (g2 / go-01
                        :ARG4 (p / position
                              :time (c / current)))
                  :ARG1-of g2))
      :op2 (a2 / and
            :op1 (m2 / move-01
                  :ARG1 ii
                  :ARG2 (u / up
                        :op1 (p2 / position)))
            :op2 (s3 / search-01
                  :ARG0 ii
                  :ARG1 (r / remainder
                        :part-of s2)
                  :ARG2 (e3 / element
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (g3 / good-02
                                    :ARG1 e3)
                              :ARG3 (m3 / most))
                        :purpose (p3 / position
                              :ARG1-of (n / new-01))))
            :time (t / then)))"
2104,12.4,"Briefly, how does selection sort work?","It selects the minimum from an array and places it on the first position, then it selects the minimum from the rest of the array and places it on the second position, and so forth.",selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.,5,3,4,"# ::snt selection sort  iterates through the array one element @ a time searching for the right and replacing current value with it.
(ii / iterate-01
      :ARG0 (s / sort-01
            :ARG1 (s2 / select-01))
      :ARG1 (a / array)
      :manner (a2 / and
            :op1 (s3 / search-01
                  :ARG0 s
                  :ARG1 (t / thing
                        :ARG1-of (r / right-02)))
            :op2 (r2 / replace-01
                  :ARG0 s
                  :ARG1 (v / value
                        :time (c / current))
                  :ARG2 t)))"
2105,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",A link list can grow to a infinite size as a array has a fixes size.,5,5,5,"# ::snt A link list can grow to a infinite size as a array has a fixes size.
(p / possible-01
      :ARG1 (g / grow-01
            :ARG1 (l / list
                  :mod (l2 / link))
            :ARG4 (s / size
                  :mod (ii / infinite)))
      :ARG1-of (c / cause-01
            :ARG0 (h / have-03
                  :ARG0 (a / array)
                  :ARG1 (s2 / size
                        :ARG1-of (f / fix-03)))))"
2106,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The advantage of linked lists is that they are not limited in size like arrays.,5,5,5,"# ::snt The advantage of linked lists is that they are not limited in size like arrays.
(a / advantage-01
      :ARG1 (l / list
            :ARG1-of (l2 / link-01))
      :ARG2 (l3 / limit-01
            :polarity -
            :ARG1 l
            :ARG2 (s / size)
            :ARG1-of (r / resemble-01
                  :ARG2 (a2 / array))))"
2107,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",link lists dont have a fixed size,5,5,5,"# ::snt link lists dont have a fixed size
(h / have-03
      :polarity -
      :ARG0 (l / list
            :mod (l2 / link))
      :ARG1 (s / size
            :ARG1-of (f / fix-03)))"
2108,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked Lists can be of variable size, where arrays have fixed size.",5,5,5,"# ::snt Linked Lists can be of variable size, where arrays have fixed size.
(p / possible-01
      :ARG1 (h / have-quant-91
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG2 (s / size
                  :ARG1-of (v / variable-02)))
      :ARG1-of (c / contrast-01
            :ARG2 (h2 / have-quant-91
                  :ARG1 (a / array)
                  :ARG2 (s2 / size
                        :ARG1-of (f / fix-03)))))"
2109,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.",5,5,5,"# ::snt Linked lists do not have a definite size. They can be as big or as small as needed, and they don't have to allocate extra memory for elements you don't need. Arrays size must be defined.
(m / multi-sentence
      :snt1 (h / have-03
            :polarity -
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :ARG1-of (d / definite-02)))
      :snt2 (a / and
            :op1 (p / possible-01
                  :ARG1 (h2 / have-degree-91
                        :ARG1 (t / they)
                        :ARG2 (o / or
                              :op1 (b / big)
                              :op2 (s2 / small))
                        :ARG3 (e / equal)
                        :ARG4 (n / need-01
                              :ARG1 t)))
            :op2 (o2 / obligate-01
                  :polarity -
                  :ARG1 (a2 / allocate-01
                        :ARG0 t
                        :ARG1 (m2 / memory
                              :mod (e2 / extra))
                        :ARG2 (e3 / element
                              :ARG1-of (n2 / need-01
                                    :polarity -
                                    :ARG0 (y / you))))))
      :snt3 (o3 / obligate-01
            :ARG1 (d2 / define-01
                  :ARG1 (s3 / size
                        :poss (a3 / array)))))"
2110,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.",5,5,5,"# ::snt a linked list has a dynamic size , but an array only has a fixed size and takes allot of extra operations to increase its size.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :mod (d / dynamic)))
      :ARG2 (a / and
            :op1 (h2 / have-03
                  :ARG0 (a2 / array)
                  :ARG1 (s2 / size
                        :ARG1-of (f / fix-03)
                        :mod (o / only)))
            :op2 (t / take-10
                  :ARG0 a2
                  :ARG1 (o2 / operation
                        :mod (e / extra)
                        :quant (a3 / allot))
                  :purpose (ii / increase-01
                        :ARG0 a2
                        :ARG1 (s3 / size
                              :poss a2)))))"
2111,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.,5,5,5,"# ::snt You do not have to predetermine your list size as you do with arrays. Linked list have the ability to be as large as you want them adding memory as needed.
(m / multi-sentence
      :snt1 (o / obligate-01
            :polarity -
            :ARG1 (y / you)
            :ARG2 (p / predetermine-01
                  :ARG0 y
                  :ARG1 (s / size
                        :poss (l / list
                              :poss y))
                  :ARG1-of (r / resemble-01
                        :ARG2 (p2 / predetermine-01
                              :ARG0 y
                              :ARG1 (s2 / size
                                    :poss (a / array))))))
      :snt2 (c / capable-01
            :ARG1 (l2 / list
                  :ARG1-of (l3 / link-01))
            :ARG2 (h / have-degree-91
                  :ARG1 l2
                  :ARG2 (l4 / large)
                  :ARG3 (e / equal)
                  :ARG4 (w / want-01
                        :ARG0 (y2 / you)))
            :ARG0-of (a2 / add-02
                  :ARG1 (m2 / memory)
                  :ARG1-of (n / need-01
                        :ARG0 y2))))"
2112,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",The main advantage to a linked list is that it can have it's size adjusted during runtime.,5,5,5,"# ::snt The main advantage to a linked list is that it can have it's size adjusted during runtime.
(a / advantage-01
      :ARG1 (l / list
            :ARG1-of (l2 / link-01))
      :ARG2 (p / possible-01
            :ARG1 (a2 / adjust-01
                  :ARG1 (s / size
                        :poss l)
                  :time (r / runtime)))
      :mod (m / main))"
2113,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists are able to grow in size. So elements can be added to the list.,5,5,5,"# ::snt Linked lists are able to grow in size. So elements can be added to the list.
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (g / grow-01
                  :ARG1 (s / size
                        :poss (l / list
                              :ARG1-of (l2 / link-01)))))
      :snt2 (c / cause-01
            :ARG0 (p2 / possible-01
                  :ARG1 (a / add-02
                        :ARG1 (e / element)
                        :ARG2 (l3 / list)))))"
2114,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.",4.5,5,4.75,"# ::snt Linked lists are not confined to a specific size, and can have elements added and removed far easier. They are also easier to traverse.
(m / multi-sentence
      :snt1 (a / and
            :op1 (c / confine-01
                  :polarity -
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :ARG2 (s / size
                        :ARG1-of (s2 / specific-02)))
            :op2 (p / possible-01
                  :ARG1 (h / have-degree-91
                        :ARG1 (a2 / and
                              :op1 (a3 / add-02
                                    :ARG1 (e / element))
                              :op2 (r / remove-01
                                    :ARG1 e))
                        :ARG2 (e2 / easy-05
                              :ARG1 a3)
                        :ARG3 (m2 / more
                              :quant (f / far)))))
      :snt2 (h2 / have-degree-91
            :ARG1 (t / traverse-01
                  :ARG1 (t2 / they))
            :ARG2 (e3 / easy-05
                  :ARG1 t)
            :ARG3 (m3 / more)
            :mod (a4 / also)))"
2115,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",There is no predetermined length,5,5,5,"# ::snt There is no predetermined length
(l / length
      :polarity -
      :ARG1-of (d / determine-01
            :ARG1-of (p / predetermine-01)))"
2116,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.",4,5,4.5,"# ::snt Inserts into a linked list are far cheaper than an insert into an array. With an array, all items after the one being inserted must me shifted, with a linked list, only the pointers are replaced.
(m / multi-sentence
      :snt1 (h / have-degree-91
            :ARG1 (ii / insert-01
                  :ARG2 (l / list
                        :ARG1-of (l2 / link-01)))
            :ARG2 (c / cheap-02
                  :ARG1 ii)
            :ARG3 (m2 / more
                  :quant (f / far))
            :ARG4 (ii2 / insert-01
                  :ARG2 (a / array)))
      :snt2 (c2 / contrast-01
            :ARG1 (o / obligate-01
                  :ARG1 (s / shift-01
                        :ARG1 (ii3 / item
                              :mod (a2 / all)
                              :time (a3 / after
                                    :op1 (ii4 / insert-01
                                          :ARG1 (o2 / one)))))
                  :ARG2 (r / replace-01
                        :ARG1 (p / pointer
                              :mod (o3 / only))
                        :condition (l3 / list
                              :ARG1-of (l4 / link-01))))))"
2117,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists may be dynamically grown.,5,5,5,"# ::snt Linked lists may be dynamically grown.
(p / possible-01
      :ARG1 (g / grow-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01))
            :manner (d / dynamic)))"
2118,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.",5,5,5,"# ::snt Linked lists are very dynamic in that they can change and be added/subtracted to very easily because they are not linear in memory.   Arrays are pre-specified in size to be cast over a certain amount of disk space.  This makes insertion into Arrays difficult because all elements must be shifted, and if you reach the end of the array, you are done even if you have more data to input.  Linked Lists do not run into these problems.
(m / multi-sentence
      :snt1 (d / dynamic
            :domain (l / list
                  :ARG1-of (l2 / link-01))
            :degree (v / very)
            :ARG1-of (c / cause-01
                  :ARG0 (p / possible-01
                        :ARG1 (a / and
                              :op1 (c2 / change-01
                                    :ARG1 l)
                              :op2 (s / slash
                                    :op1 (a2 / add-02
                                          :ARG1 l)
                                    :op2 (s2 / subtract-01
                                          :ARG1 l)))
                        :ARG1-of (e / easy-05
                              :degree (v2 / very))
                        :ARG1-of (c3 / cause-01
                              :ARG0 (l3 / linear
                                    :polarity -
                                    :domain l
                                    :location (m2 / memory))))))
      :snt2 (s3 / specify-01
            :ARG1 (s4 / size
                  :poss (a3 / array))
            :ARG1-of (p2 / preclude-01)
            :purpose (c4 / cast-01
                  :ARG1 a3
                  :ARG2 (s5 / space
                        :mod (d2 / disk)
                        :quant (a4 / amount
                              :mod (c5 / certain)))))
      :snt3 (m3 / make-02
            :ARG0 (t / this)
            :ARG1 (d3 / difficult
                  :domain (ii / insert-01
                        :ARG1 (a5 / array)))
            :ARG1-of c3
            :ARG0 (o / obligate-01
                  :ARG1 (s6 / shift-01
                        :ARG1 (e2 / element
                              :mod (a6 / all)))))
      :snt4 (e3 / even-if
            :op1 (h / have-03
                  :ARG0 (y / you)
                  :ARG1 (d4 / data
                        :quant (m4 / more)
                        :ARG1-of (ii2 / input-01
                              :ARG0 y)))))"
2119,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists have an indefinite size, whereas arrays are a specific size.",5,5,5,"# ::snt linked lists have an indefinite size, whereas arrays are a specific size.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :duration (d / definite
                        :polarity -)))
      :ARG2 (s2 / size
            :domain (a / array)
            :ARG1-of (s3 / specific-02)))"
2120,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.",5,5,5,"# ::snt Linked lists have no predefined length, and thus you can have virtually unlimited items in that list.
(c / cause-01
      :ARG0 (l / long-03
            :polarity -
            :ARG1 (l2 / list
                  :ARG1-of (l3 / link-01))
            :ARG1-of (d / define-01
                  :ARG1-of (p / predetermine-01)))
      :ARG1 (p2 / possible-01
            :ARG1 (h / have-03
                  :ARG0 (y / you)
                  :ARG1 (ii / item
                        :ARG1-of (l4 / limit-01
                              :polarity -
                              :degree (v / virtual))
                        :location (l5 / list
                              :mod (t / that))))))"
2121,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","They grow dynamically, unlike the fixed size array",5,5,5,"# ::snt They grow dynamically, unlike the fixed size array
(g / grow-01
      :ARG1 (t / they)
      :manner (d / dynamic)
      :ARG1-of (r / resemble-01
            :polarity -
            :ARG2 (a / array
                  :mod (s / size
                        :ARG1-of (f / fix-03)))))"
2122,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room",5,5,5,"# ::snt you can add as many nodes as you like without having to specify a list size, if an array gets too big you have to copy its entire contents to another larger array to get more room
(m / multi-sentence
      :snt1 (p / possible-01
            :ARG1 (a / add-02
                  :ARG0 (y / you)
                  :ARG1 (n / node
                        :ARG1-of (h / have-quant-91
                              :ARG2 (m2 / many)
                              :ARG3 (e / equal)
                              :ARG4 (l / like-02
                                    :ARG0 y)))
                  :manner (o / obligate-01
                        :polarity -
                        :ARG1 y
                        :ARG2 (s / specify-01
                              :ARG0 y
                              :ARG1 (s2 / size
                                    :mod (l2 / list))))))
      :snt2 (o2 / obligate-01
            :ARG1 (y2 / you)
            :ARG2 (c / copy-01
                  :ARG0 y2
                  :ARG1 (t / thing
                        :ARG2-of (c2 / contain-01
                              :ARG1 (a2 / array)
                              :mod (e2 / entire)))
                  :ARG2 (a3 / array
                        :mod (a4 / another)
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (b / big)
                              :ARG3 (t2 / too)))
                  :purpose (g / get-01
                        :ARG0 y2
                        :ARG1 (r / room
                              :quant (m3 / more))))
            :condition (g2 / get-03
                  :ARG0 y2
                  :ARG1 r
                  :quant (m4 / more))))"
2123,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linkded list does not have a fixed size. Arrays have a fixed size.,5,5,5,"# ::snt Linkded list does not have a fixed size. Arrays have a fixed size.
(m / multi-sentence
      :snt1 (h / have-03
            :polarity -
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :ARG1-of (f / fix-03)))
      :snt2 (h2 / have-03
            :ARG0 (a / array)
            :ARG1 (s2 / size
                  :ARG1-of (f2 / fix-03))))"
2124,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Linked lists have a dynamic size, where as arrays have a static size.",5,5,5,"# ::snt Linked lists have a dynamic size, where as arrays have a static size.
(c / contrast-01
      :ARG1 (h / have-03
            :ARG0 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG1 (s / size
                  :mod (d / dynamic)))
      :ARG2 (h2 / have-03
            :ARG0 (a / array)
            :ARG1 (s2 / size
                  :mod (s3 / static))))"
2125,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked lists do not have a memory constraint other than total memory,5,5,5,"# ::snt linked lists do not have a memory constraint other than total memory
(h / have-03
      :polarity -
      :ARG0 (l / list
            :ARG1-of (l2 / link-01))
      :ARG1 (c / constraint
            :mod (m / memory)
            :ARG2-of (e / except-01
                  :ARG1 (m2 / memory
                        :mod (t / total)))))"
2126,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.",5,5,5,"# ::snt The primary advantage of linked lists over arrays is their ability to become larger or smaller as data is added and removed from the list, whereas arrays may waste memory for small data sets, and run out of space for large data sets.
(a / advantage-01
      :ARG0 (l / list
            :ARG1-of (l2 / link-01))
      :ARG1 (c / capable-01
            :ARG1 l
            :ARG2 (b / become-01
                  :ARG1 l
                  :ARG2 (o / or
                        :op1 (h / have-degree-91
                              :ARG1 l
                              :ARG2 (l3 / large)
                              :ARG3 (m / more))
                        :op2 (h2 / have-degree-91
                              :ARG1 l
                              :ARG2 (s / small)
                              :ARG3 (m2 / more)))
                  :time (a2 / and
                        :op1 (a3 / add-02
                              :ARG1 (d / data))
                        :op2 (r / remove-01
                              :ARG1 d
                              :ARG2 (l4 / list))))
            :mod (p / primary))
      :ARG1-of (c2 / contrast-01
            :ARG2 (p2 / possible-01
                  :ARG1 (a4 / and
                        :op1 (w / waste-01
                              :ARG0 (a5 / array)
                              :ARG1 (m3 / memory
                                    :beneficiary (s2 / set
                                          :mod (d2 / data
                                                :mod (s3 / small)))))
                        :op2 (r2 / run-out-05
                              :ARG1 (s4 / space
                                    :beneficiary (s5 / set
                                          :mod (d3 / data
                                                :mod (l5 / large)))))))))"
2127,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","Array have fixed size, in Link List are flexible for adding or deleting an element. ",5,5,5,"# ::snt Array have fixed size, in Link List are flexible for adding or deleting an element. 
(a / and
      :op1 (h / have-03
            :ARG0 (a2 / array)
            :ARG1 (s / size
                  :ARG1-of (f / fix-03)))
      :op2 (f2 / flexible-03
            :ARG1 (l / list
                  :mod (l2 / link))
            :ARG2 (o / or
                  :op1 (a3 / add-02
                        :ARG1 (e / element))
                  :op2 (d / delete-01
                        :ARG1 e))))"
2128,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",they are resizeable,5,5,5,"# ::snt they are resizeable
(p / possible-01
      :ARG1 (r / resize-01
            :ARG1 (t / they)))"
2129,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",Linked lists can be dynamically allocated and their size can change as needed.,5,5,5,"# ::snt Linked lists can be dynamically allocated and their size can change as needed.
(a / and
      :op1 (p / possible-01
            :ARG1 (a2 / allocate-01
                  :ARG1 (l / list
                        :ARG1-of (l2 / link-01))
                  :manner (d / dynamic)))
      :op2 (p2 / possible-01
            :ARG1 (c / change-01
                  :ARG1 (s / size
                        :poss l)
                  :ARG1-of (c2 / cause-01
                        :ARG0 (n / need-01)))))"
2130,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","linked lists do not have to have a specified size, they are easier to add to and remove from",5,5,5,"# ::snt linked lists do not have to have a specified size, they are easier to add to and remove from
(a / and
      :op1 (o / obligate-01
            :polarity -
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01))
            :ARG2 (h / have-03
                  :ARG0 l
                  :ARG1 (s / size
                        :ARG1-of (s2 / specify-01))))
      :op2 (h2 / have-degree-91
            :ARG1 (a2 / and
                  :op1 (a3 / add-02
                        :ARG1 l)
                  :op2 (r / remove-01
                        :ARG1 l))
            :ARG2 (e / easy-05
                  :ARG1 a2)
            :ARG3 (m / more)))"
2131,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.","they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.",5,5,5,"# ::snt they dont have a fixed size, no shiftnig needs to be done for insertion/deletion.
(a / and
      :op1 (h / have-03
            :polarity -
            :ARG0 (t / they)
            :ARG1 (s / size
                  :ARG1-of (f / fix-03)))
      :op2 (n / need-01
            :polarity -
            :ARG1 (s2 / shift-01)
            :purpose (s3 / slash
                  :op1 (ii / insert-01)
                  :op2 (r / remove-01))))"
2132,12.5,What is the advantage of linked lists over arrays?,"Linked lists are dynamic structures, which allow for a variable number of elements to be stored.",linked list many be dynamically grown. It has not limit,5,5,5,"# ::snt linked list many be dynamically grown. It has not limit
(m / multi-sentence
      :snt1 (g / grow-01
            :ARG1 (l / list
                  :ARG1-of (l2 / link-01)
                  :quant (m2 / many))
            :manner (d / dynamic))
      :snt2 (l3 / limit-01
            :polarity -
            :ARG0 (ii / it)))"
2133,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A data structure in C++ where the the first element in the queue is the first element taken out of the queue.,5,5,5,"# ::snt A data structure in C++ where the the first element in the queue is the first element taken out of the queue.
(s / structure-01
      :ARG1 (d / data)
      :mod (l / language
            :name (n / name
                  :op1 ""C++""))
      :location-of (e / element
            :ord (o / ordinal-entity
                  :value 1)
            :location (q / queue)
            :domain (e2 / element
                  :ord (o2 / ordinal-entity
                        :value 1)
                  :ARG1-of (t / take-out-11
                        :ARG2 q))))"
2134,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.,5,5,5,"# ::snt A queue is an abstract data type that performs operations on both ends of the list and exhibits first-in first-out behavior.
(t / type-03
      :ARG1 (q / queue)
      :ARG2 (d / data
            :mod (a / abstract))
      :ARG0-of (o / operate-01
            :location (e / end
                  :mod (b / both)
                  :part-of (l / list)))
      :ARG0-of (e2 / exhibit-01
            :ARG1 (b2 / behave-01
                  :ARG0 q
                  :ARG1 (f / first-in
                        :ord (o2 / ordinal-entity
                              :value 1)
                        :direction (o3 / out)))))"
2135,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,First in first out.,4,5,4.5,"# ::snt First in first out.
(b / be-located-at-91
      :ARG2 (f / first
            :ARG1-of (ii / include-91
                  :ARG2 (f2 / first
                        :op1 (o / out)))))"
2136,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.",5,5,5,"# ::snt A queue is an abstract data type that involves putting an element at the back of the list. Queues use the FIFO, first in first out, idea where the first element in the list is the first that comes out.
(m / multi-sentence
      :snt1 (t / type
            :domain (q / queue)
            :mod (d / data
                  :mod (a / abstract))
            :ARG0-of (ii / involve-01
                  :ARG1 (p / put-01
                        :ARG1 (e / element)
                        :ARG2 (b / back
                              :part-of (l / list)))))
      :snt2 (u / use-01
            :ARG0 (q2 / queue)
            :ARG1 (ii2 / idea
                  :name (n / name
                        :op1 ""First""
                        :op2 ""in""
                        :op3 ""first""
                        :op4 ""out"")
                  :domain (e2 / element
                        :ord (o / ordinal-entity
                              :value 1)
                        :part-of (l2 / list))
                  :ARG1-of (c / come-out-09))
            :mod (f / FIFO)))"
2137,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A data structure that implements first in, first out. The element that has been there the longest is the first to get served.",5,5,5,"# ::snt A data structure that implements first in, first out. The element that has been there the longest is the first to get served.
(m / multi-sentence
      :snt1 (s / structure-01
            :ARG1 (d / data)
            :ARG0-of (ii / implement-01
                  :ARG1 (a / and
                        :op1 (ii2 / in
                              :ord (o / ordinal-entity
                                    :value 1))
                        :op2 (o2 / out
                              :ord (o3 / ordinal-entity
                                    :value 1)))))
      :snt2 (s2 / serve-01
            :ARG1 (e / element
                  :ord (o4 / ordinal-entity
                        :value 1)
                  :location (t / there)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l / long-03
                              :ARG1 s2)
                        :ARG3 (m2 / most)))))"
2138,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a data structure that inserts elements at the end of it and removes elements from the front.,5,5,5,"# ::snt a data structure that inserts elements at the end of it and removes elements from the front.
(s / structure
      :mod (d / data)
      :ARG0-of (ii / insert-01
            :ARG1 (e / element)
            :ARG2 (e2 / end
                  :part-of (ii2 / it)))
      :ARG0-of (r / remove-01
            :ARG1 (e3 / element)
            :ARG2 (f / front)))"
2139,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.,5,5,5,"# ::snt A queue is a collection of elements with the characteristics of first in first out (FIFO).  The first item in is the first item out.  All additional items are added to the end of the list.
(m / multi-sentence
      :snt1 (c / collect-01
            :ARG0 (q / queue)
            :ARG1 (e / element
                  :ARG1-of (c2 / characteristic-02
                        :ARG2 (f / first
                              :ord (o / ordinal-entity
                                    :value 1)
                              :ord (o2 / ordinal-entity
                                    :value 1
                                    :range (o3 / out))))))
      :snt2 (a / add-02
            :ARG1 (ii / item
                  :mod (a2 / all)
                  :mod (a3 / additional))
            :ARG2 (e2 / end-01
                  :ARG1 (l / list))))"
2140,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.",5,5,5,"# ::snt A queue is a data structure that inserts data into a FIFO configuration, that is, data input to the structure is always at it's end, and data taken is always from the beginning.
(s / structure
      :mod (d / data)
      :domain (q / queue)
      :ARG0-of (ii / insert-01
            :ARG1 (d2 / data)
            :ARG2 (c / configure-01
                  :ARG1 (p / product
                        :name (n / name
                              :op1 ""FIFO"")))
            :ARG1-of (m / mean-01
                  :ARG2 (a / and
                        :op1 (ii2 / input-01
                              :ARG1 (d3 / data)
                              :ARG2 (s2 / structure
                                    :time (a2 / always)
                                    :time (e / end-01)
                                    :ARG1-of e)
                              :op2 (t / take-01
                                    :ARG1 (d4 / data)
                                    :time (a3 / always)
                                    :time (b / begin-01
                                          :ARG1 s2)))))))"
2141,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.,1.5,5,3.25,"# ::snt It is a particular set of entities that are put in to a certain order by the enqueue and the dequeue functions.
(s / set
      :mod (p / particular)
      :consist-of (e / entity)
      :ARG1-of (p2 / put-03
            :ARG0 (a / and
                  :op1 (e2 / enqueue)
                  :op2 (f / function-01
                        :ARG1 e2))
            :ARG2 (o / order
                  :mod (c / certain))))"
2142,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.,5,2.5,3.75,"# ::snt A queue is a data type that operates under a FILO (First In Last Out) method. This means that the first element inserted into the queue is the first element removed.
(m / multi-sentence
      :snt1 (t / type
            :domain (q / queue)
            :mod (d / data)
            :ARG0-of (o / operate-01
                  :manner (m2 / method
                        :name (n / name
                              :op1 ""FILO"")
                        :ARG1-of (m3 / mean-01
                              :ARG2 (r / remove-01
                                    :ARG1 (e / element
                                          :ord (o2 / ordinal-entity
                                                :value 1)
                                          :ARG1-of (ii / insert-01
                                                :ARG2 q)))))))
      :snt2 m3
      :ARG1 (t2 / this)
      :ARG2 (e2 / element
            :ord (o3 / ordinal-entity
                  :value 1)
            :ARG1-of r))"
2143,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list except it is first in last out,0,5,2.5,"# ::snt like a linked list except it is first in last out
(r / resemble-01
      :ARG2 (t / thing
            :ARG1-of (l / list-01)
            :ARG1-of (l2 / link-01))
      :ARG2-of (e / except-01
            :ARG1 (b / be-located-at-91
                  :ARG1 t
                  :ARG2 l
                  :ord (o / ordinal-entity
                        :value 1))
            :mod (o2 / out
                  :mod (l3 / last))))"
2144,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is like a stack except it follows FIFO (First in first out) .,5,5,5,"# ::snt A queue is like a stack except it follows FIFO (First in first out) .
(r / resemble-01
      :ARG1 (q / queue)
      :ARG2 (s / stack)
      :ARG2-of (e / except-01
            :ARG1 (f / follow-02
                  :ARG0 q
                  :ARG1 (s2 / string-entity
                        :value ""FIFO""
                        :ARG1-of (m / mean-01
                              :ARG2 (f2 / first
                                    :ord (o / ordinal-entity
                                          :value 1)
                                    :ARG2 (o2 / out)))))))"
2145,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a data structure where the first node in is the first node out.,5,5,5,"# ::snt A queue is a data structure where the first node in is the first node out.
(s / structure
      :mod (d / data)
      :domain (q / queue)
      :location-of (n / node
            :ord (o / ordinal-entity
                  :value 1)
            :location (ii / in)
            :domain (n2 / node
                  :ord (o2 / ordinal-entity
                        :value 1)
                  :location (o3 / out))))"
2146,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.,5,5,5,"# ::snt A queue is a First in First out data structure much like a line for a movie theatre.  The first object in line is the first object to be handled or enacted upon.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :domain (q / queue)
            :ARG1-of (r / resemble-01
                  :ARG2 (l / line
                        :purpose (t / theatre
                              :mod (m2 / movie)))
                  :degree (m3 / much)))
      :snt2 (o / object
            :ord (o2 / ordinal-entity
                  :value 1)
            :ARG1-of (h / handle-01)
            :domain (o3 / object
                  :ord (o4 / ordinal-entity
                        :value 1)
                  :ARG1-of (e / enact-01))))"
2147,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.",5,5,5,"# ::snt its a lot like a stack, except that the first item put into the list is the first item to be taken from the list.
(r / resemble-01
      :ARG1 (ii / it)
      :ARG2 (s / stack)
      :degree (l / lot)
      :ARG2-of (e / except-01
            :ARG1 (t / take-01
                  :ARG1 (ii2 / item
                        :ord (o / ordinal-entity
                              :value 1)
                        :ARG1-of (p / put-01
                              :ARG2 (l2 / list)))
                  :ARG2 l2)))"
2148,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.",5,5,5,"# ::snt a first in first out list of items, like if you put 5, 4, 3, 2, and 1 in the queue it will when you dequeue items remove the items in the same order as put in, so thus it will put out, 5, 4, 3, 2, and 1 in that exact order.
(e / exemplify-01
      :ARG0 (r / remove-01
            :ARG0 (q / queue-01)
            :ARG1 (ii / item
                  :ARG1-of (o / order-03
                        :ARG1-of (s / same-01
                              :ARG2 (o2 / order-03
                                    :ARG1 (ii2 / item
                                          :ARG1-of (p / put-01
                                                :ARG2 (q2 / queue-01)))))))
            :condition (p2 / put-01
                  :ARG0 (y / you)
                  :ARG1 (a / and
                        :op1 (n / number
                              :quant 5
                              :op2 3
                              :op3 1)
                        :op2 (n2 / number
                              :quant-of (ii3 / item)))
                  :ARG2 q2)
            :ARG0-of (c / cause-01
                  :ARG1 (p3 / put-01
                        :ARG0 y
                        :ARG1 ii3
                        :ARG2 (o3 / out)
                        :manner (o4 / order
                              :ARG1-of (e2 / exact-02
                                    :mod (t / that))))))
      :ARG2 (l / list-01
            :ARG1 ii3
            :ARG2 (o5 / order
                  :ord (o6 / ordinal-entity
                        :value 1)
                  :mod (ii4 / in
                        :op1 (o7 / order
                              :ord (o8 / ordinal-entity
                                    :value 1))))))"
2149,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list",5,5,5,"# ::snt A linked list with a First In, Out structure dequeue at the head of the list enqueue at the end of the list
(l / list
      :ARG1-of (l2 / link-01)
      :accompanier (d / dequeue-01
            :ARG1 (s / structure
                  :mod (f / first
                        :op1 (ii / in)
                        :op2 (o / out)))
            :location (h / head
                  :part-of (l3 / list))
            :location (e / enqueue-01
                  :location (e2 / end-01
                        :ARG1 l3))))"
2150,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.",5,5,5,"# ::snt a list of objects that follow the rule first in first out, essentially a linked list that goes in order of the first object in the list is the first to be taken off.
(m / multi-sentence
      :snt1 (l / list
            :consist-of (o / object)
            :ARG0-of (f / follow-02
                  :ARG1 (r / rule
                        :mod (f2 / first
                              :ord (o2 / ordinal-entity
                                    :value 1)))))
      :snt2 (t / take-off-07
            :ARG1 (l2 / list
                  :ARG1-of (l3 / link-01)
                  :ARG1-of (g / go-01
                        :ARG2 (o3 / order
                              :mod (o4 / object
                                    :ord (o5 / ordinal-entity
                                          :value 1)
                                    :ARG1-of (ii / include-91
                                          :ARG2 (l4 / list))))))
            :mod (e / essential)))"
2151,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.,5,5,5,"# ::snt A queue is an abstract data type that is based off of the priniple of first in first out. FIFO. The first item inserted into the list will the first item taken out.
(m / multi-sentence
      :snt1 (t / type
            :mod (d / data)
            :mod (a / abstract)
            :domain (q / queue)
            :ARG1-of (b / base-02
                  :ARG2 (p / principle
                        :mod (f / first
                              :op1 (ii / in)
                              :op2 (o / out)))))
      :snt2 (f2 / fiFO)
      :snt3 (t2 / take-out-11
            :ARG1 (ii2 / item
                  :ord (o2 / ordinal-entity
                        :value 1)
                  :ARG1-of (ii3 / insert-01
                        :ARG2 (l / list)))
            :ord (o3 / ordinal-entity
                  :value 1)))"
2152,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.",5,5,5,"# ::snt It is a ""first in first out"" data structure.  It can be implemented with either a linked list or an array.
(m / multi-sentence
      :snt1 (s / structure-01
            :ARG1 (d / data)
            :ARG2 (f / first-in-first-out))
      :snt2 (p / possible-01
            :ARG1 (ii / implement-01
                  :ARG1 (ii2 / it)
                  :instrument (o / or
                        :op1 (l / list
                              :ARG1-of (l2 / link-01))
                        :op2 (a / array)))))"
2153,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.,5,5,5,"# ::snt an ordered list that performs task in the order of first in first out. adding items to the queue places items behind the rest of them. taking items off the queue takes the one that has waited the longest.
(m / multi-sentence
      :snt1 (l / list
            :ARG1-of (o / order-02)
            :ARG0-of (p / perform-02
                  :ARG1 (t / task)
                  :manner (o2 / order-02
                        :ARG1 (ii / in
                              :ord (o3 / ordinal-entity
                                    :value 1)
                              :ARG2 (o4 / out)))))
      :snt2 (p2 / place-01
            :ARG0 (a / add-02
                  :ARG1 (ii2 / item)
                  :ARG2 (q / queue))
            :ARG1 (ii3 / item
                  :location (b / behind
                        :op1 (r / rest
                              :part-of (t2 / they)))))
      :snt3 (t3 / take-01
            :ARG0 (t4 / take-01
                  :ARG1 (ii4 / item)
                  :ARG2 q))
      :ARG1 (o5 / one
            :ARG0-of (w / wait-01
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l2 / long-03
                              :ARG1 w)
                        :ARG3 (m2 / most)))))"
2154,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.",5,5,5,"# ::snt A queue is a linear, first-in first-out data structure. Data must be accessed in the same order it was put into the queue, so only the oldest item in the queue is accessible at any time. Main functions defined are enqueue and dequeue.
(m / multi-sentence
      :snt1 (s / structure
            :mod (d / data)
            :domain (q / queue)
            :mod (l / linear)
            :mod (f / first-in
                  :op1 (o / out)))
      :snt2 (o2 / obligate-01
            :ARG2 (a / access-01
                  :ARG1 (d2 / data)
                  :manner (o3 / order
                        :ARG1-of (s2 / same-01)
                        :manner-of (p / put-01
                              :ARG1 d2
                              :ARG2 (q2 / queue))))
            :ARG0-of (c / cause-01
                  :ARG1 (a2 / access-01
                        :ARG1 (ii / item
                              :ARG1-of (h / have-degree-91
                                    :ARG2 (o4 / old)
                                    :ARG3 (m2 / most)))
                        :mod (o5 / only)
                        :time (t / time
                              :mod (a3 / any)))))
      :snt2 (d3 / define-01
            :ARG1 (a4 / and
                  :op1 (e / enqueue)
                  :op2 (d4 / dequeue))
            :mod (m3 / main)))"
2155,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .",5,5,5,"# ::snt Queue is a buffer, it follows the rule of First In and First out. Queue is very useful in computer science for scheduleing .
(m / multi-sentence
      :snt1 (b / buffer
            :domain (q / queue))
      :snt2 (f / follow-01
            :ARG0 q
            :ARG1 (r / rule
                  :topic (a / and
                        :op1 (f2 / first
                              :op1 (ii / in)
                              :op2 (o / out)
                              :ord (o2 / ordinal-entity
                                    :value 1)))))
      :snt3 (u / useful-05
            :ARG1 (q2 / queue)
            :ARG2 (s / schedule-01)
            :degree (v / very)
            :location (s2 / science
                  :mod (c / computer))))"
2156,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,a queue is a set of elements where the first element inserted is the first element to be removed,5,5,5,"# ::snt a queue is a set of elements where the first element inserted is the first element to be removed
(q / queue
      :consist-of (s / set
            :consist-of (e / element)
            :location-of (e2 / element
                  :ord (o / ordinal-entity
                        :value 1)
                  :ARG1-of (ii / insert-01)
                  :domain (e3 / element
                        :ord (o2 / ordinal-entity
                              :value 1)
                        :ARG1-of (r / remove-01)))))"
2157,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,Is a list of items where the the user only has access to the first element and each new element is added at the end.,5,5,5,"# ::snt Is a list of items where the the user only has access to the first element and each new element is added at the end.
(l / list
      :consist-of (ii / item)
      :location-of (a / and
            :op1 (a2 / access-01
                  :ARG0 (p / person
                        :ARG0-of (u / use-01))
                  :ARG1 (e / element
                        :ord (o / ordinal-entity
                              :value 1))
                  :mod (o2 / only))
            :op2 (a3 / add-02
                  :ARG1 (e2 / element
                        :ARG1-of (n / new-01)
                        :mod (e3 / each))
                  :time (e4 / end-01))))"
2158,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first",5,5,5,"# ::snt a queue is a list of data that follows the fifo principle, an example of this would be when you get into a line at a movie theater...the first one there gets to buy a ticket first
(m / multi-sentence
      :snt1 (l / list-01
            :ARG1 (d / data)
            :ARG2 (q / queue)
            :ARG0-of (f / follow-01
                  :ARG1 (p / principle
                        :name (n / name
                              :op1 ""Fifo""))))
      :snt2 (e / exemplify-01
            :ARG0 (g / get-05
                  :ARG1 (y / you)
                  :ARG2 (l2 / line
                        :location (t / theater
                              :mod (m2 / movie)))))
      :snt3 (g2 / get-22
            :ARG0 (o / one
                  :ord (o2 / ordinal-entity
                        :value 1))
            :ARG1 (b / buy-01
                  :ARG0 o
                  :ARG1 (t2 / ticket)
                  :ord o2
                  :value 1)))"
2159,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,"A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.",5,5,5,"# ::snt A queue is a data structure that holds a set of objects, which has a FIFO (first in first out) priority.
(s / structure
      :mod (d / data)
      :domain (q / queue)
      :ARG0-of (h / hold-01
            :ARG1 (s2 / set
                  :consist-of (o / object)
                  :ARG0-of (h2 / have-03
                        :ARG1 (p / priority
                              :mod (f / first
                                    :ord (o2 / ordinal-entity
                                          :value 1)
                                    :ARG1-of (m / mean-01
                                          :ARG2 (f2 / first
                                                :op1 (ii / in)
                                                :op2 (o3 / out)))))))))"
2160,12.6,What is a queue?,A data structure that stores elements following the first in first out principle. The main operations in a queue are enqueue and dequeue.,like a linked list expect first in last out,0,2.5,1.25,"# ::snt like a linked list expect first in last out
(e / expect-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (t / thing
            :ord (o / ordinal-entity
                  :value 1)
            :ARG1-of (r / resemble-01
                  :ARG2 (t2 / thing
                        :ARG1-of (l / list-01)
                        :ARG1-of (l2 / link-01))))
      :mod (l3 / last-out-06))"
2161,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2162,12.7,What are the main operations associated with a stack?,push and pop,"Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.",5,5,5,"# ::snt Pop, which removes the head, or least recently inserted node from the stack. Push, which inserts a new node at the head of the stack.
(m / multi-sentence
      :snt1 (p / pop-01
            :ARG0-of (r / remove-01
                  :ARG1 (o / or
                        :op1 (h / head)
                        :op2 (n / node
                              :ARG1-of (ii / insert-01
                                    :time (r2 / recent
                                          :mod (l / least)))))
                  :ARG2 (s / stack)))
      :snt2 (p2 / push-01
            :ARG0-of (ii2 / insert-01
                  :ARG1 (n2 / node
                        :ARG1-of (n3 / new-01))
                  :location (h2 / head
                        :part-of (s2 / stack)))))"
2163,12.7,What are the main operations associated with a stack?,push and pop,Push and pop,5,5,5,"# ::snt Push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2164,12.7,What are the main operations associated with a stack?,push and pop,The Push function and the Pop function.,5,5,5,"# ::snt The Push function and the Pop function.
(a / and
      :op1 (f / function
            :name (n / name
                  :op1 ""Push""))
      :op2 (f2 / function
            :name n
            :op1 ""Pop""))"
2165,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2166,12.7,What are the main operations associated with a stack?,push and pop,push - puts an element on the stack pop- takes an element off the stack,5,5,5,"# ::snt push - puts an element on the stack pop- takes an element off the stack
(a / and
      :op1 (p / push-01)
      :op2 (p2 / put-01
            :ARG1 (e / element)
            :ARG2 (s / stack))
      :op3 (p3 / pop-01)
      :op4 (t / take-01
            :ARG1 (e2 / element)
            :ARG2 s))"
2167,12.7,What are the main operations associated with a stack?,push and pop,Push  and pop.,5,5,5,"# ::snt Push  and pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2168,12.7,What are the main operations associated with a stack?,push and pop,Push and Pop,5,5,5,"# ::snt Push and Pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2169,12.7,What are the main operations associated with a stack?,push and pop,push and pop.,5,5,5,"# ::snt push and pop.
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2170,12.7,What are the main operations associated with a stack?,push and pop,"Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.",5,5,5,"# ::snt Push and Pop. Push adds an element to the stack, while Pop removes the top element from a stack.
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / thing
                  :name (n / name
                        :op1 ""Push""))
            :op2 (t2 / thing
                  :name (n2 / name
                        :op1 ""Pop"")))
      :snt2 (c / contrast-01
            :ARG1 (a2 / add-02
                  :ARG0 (t3 / thing
                        :name (n3 / name
                              :op1 ""Push""))
                  :ARG1 (e / element)
                  :ARG2 (s / stack))
            :ARG2 (r / remove-01
                  :ARG0 (p / person
                        :name (n4 / name
                              :op1 ""Pop""))
                  :ARG1 (e2 / element
                        :mod (t4 / top))
                  :ARG2 s)))"
2171,12.7,What are the main operations associated with a stack?,push and pop,pop and push,5,5,5,"# ::snt pop and push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
2172,12.7,What are the main operations associated with a stack?,push and pop,"push,pop,search,isEmpty",4,5,4.5,"# ::snt push,pop,search,isEmpty
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01)
      :op3 (s / search-01)
      :op4 (e / empty))"
2173,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2174,12.7,What are the main operations associated with a stack?,push and pop,"Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.",4.5,5,4.75,"# ::snt Push, Pop, isEmpty, isFull  Maybe List to show all elements or an operation to count how many elements in the stack.
(p / possible-01
      :ARG1 (l / list-01
            :purpose (s / show-01
                  :ARG1 (o / or
                        :op1 (e / element
                              :mod (a / all))
                        :op2 (o2 / operation
                              :purpose (c / count-01
                                    :ARG1 (e2 / element
                                          :quant (a2 / amr-unknown)
                                          :location (s2 / stack)))))))
      :ARG1-of (m / mean-01
            :ARG2 (a3 / and
                  :op1 (p2 / push-01)
                  :op2 (p3 / pop-01)
                  :op3 (e3 / empty)
                  :op4 (f / full-09
                        :ARG1 l))))"
2175,12.7,What are the main operations associated with a stack?,push and pop,"pop, push",5,5,5,"# ::snt pop, push
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01))"
2176,12.7,What are the main operations associated with a stack?,push and pop,"isempty, push and pop, along with usually, ",5,5,5,"# ::snt isempty, push and pop, along with usually, 
(a / and
      :op1 (e / empty
            :polarity -)
      :op2 (p / push-01)
      :op3 (p2 / pop-01)
      :op4 (u / usual))"
2177,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2178,12.7,What are the main operations associated with a stack?,push and pop,push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.,5,5,5,"# ::snt push and pop. push puts objects into the stack and pop takes them out following the first in last out rule.
(m / multi-sentence
      :snt1 (a / and
            :op1 (p / push-01)
            :op2 (p2 / pop-01))
      :snt2 (a2 / and
            :op1 (p3 / put-01
                  :ARG0 (p4 / push-01)
                  :ARG1 (o / object)
                  :ARG2 (s / stack))
            :op2 (t / take-01
                  :ARG0 (p5 / pop-01)
                  :ARG1 o
                  :direction (o2 / out))
            :ARG1-of (f / follow-01
                  :ARG2 (r / rule
                        :mod (l / last
                              :ord (o3 / ordinal-entity
                                    :value 1))))))"
2179,12.7,What are the main operations associated with a stack?,push and pop,"The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.",5,5,5,"# ::snt The main operations in a stack are push and pop. Push adds an item to the top of the stack, pop removes the top item from the stack.
(m / multi-sentence
      :snt1 (a / and
            :op1 (o / operate-01
                  :ARG1 (s / stack)
                  :mod (m2 / main))
            :op2 (o2 / operate-01
                  :ARG1 (p / push-01)))
      :snt2 (a2 / and
            :op1 (a3 / add-01
                  :ARG0 (p2 / push-01)
                  :ARG1 (ii / item)
                  :ARG2 (t / top
                        :part-of (s2 / stack)))
            :op2 (r / remove-01
                  :ARG0 (p3 / pop-01)
                  :ARG1 (ii2 / item
                        :mod (t2 / top))
                  :ARG2 (s3 / stack))))"
2180,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2181,12.7,What are the main operations associated with a stack?,push and pop,"push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack",5,5,5,"# ::snt push, which adds an item to the top of the stack, and pop, which takes the first item off the top to the stack
(a / and
      :op1 (p / push-01
            :ARG0-of (a2 / add-02
                  :ARG1 (ii / item)
                  :ARG2 (t / top
                        :part-of (s / stack))))
      :op2 (p2 / pop-01
            :ARG0-of (t2 / take-01
                  :ARG1 (ii2 / item
                        :ord (o / ordinal-entity
                              :value 1))
                  :ARG3 (t3 / top
                        :part-of s))))"
2182,12.7,What are the main operations associated with a stack?,push and pop,"the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.",5,5,5,"# ::snt the main functions defined for a stack are push, which puts an element on the top of the stack, and pop, which removes an item from the top.
(d / define-01
      :ARG1 (a / and
            :op1 (p / push-01
                  :ARG0-of (p2 / put-01
                        :ARG1 (e / element)
                        :ARG2 (t / top
                              :part-of (s / stack))))
            :op2 (p3 / pop-01
                  :ARG0-of (r / remove-01
                        :ARG1 (ii / item)
                        :ARG2 (t2 / top
                              :part-of (s2 / stack)))))
      :ARG2 (f / function
            :mod (m / main)))"
2183,12.7,What are the main operations associated with a stack?,push and pop,Push() Pop() Full() IsEmpty(),4.5,5,4.75,"# ::snt Push() Pop() Full() IsEmpty()
(e / empty-02
      :ARG1 (f / function
            :name (n / name
                  :op1 ""IsEmpty""))
      :mod (f2 / function
            :name (n2 / name
                  :op1 ""Push""
                  :op2 ""()""
                  :op3 ""Pop""
                  :op4 ""()"")
            :op5 (f3 / function
                  :name (n3 / name
                        :op1 ""Full""
                        :op2 ""()""))))"
2184,12.7,What are the main operations associated with a stack?,push and pop,pop and push to remove an element and to insert an element,5,5,5,"# ::snt pop and push to remove an element and to insert an element
(a / and
      :op1 (p / pop-01)
      :op2 (p2 / push-01)
      :purpose (a2 / and
            :op1 (r / remove-01
                  :ARG1 (e / element))
            :op2 (ii / insert-01
                  :ARG1 e)))"
2185,12.7,What are the main operations associated with a stack?,push and pop,"Push, Pop",5,5,5,"# ::snt Push, Pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2186,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2187,12.7,What are the main operations associated with a stack?,push and pop,push - Add an element to the top of the stack pop - remove the top element from the stack,5,5,5,"# ::snt push - Add an element to the top of the stack pop - remove the top element from the stack
(m / multi-sentence
      :snt1 (p / push-01)
      :snt2 (a / add-02
            :ARG1 (e / element)
            :ARG2 (t / top
                  :part-of (s / stack))
            :ARG1-of (p2 / pop-01))
      :snt3 (r / remove-01
            :ARG1 (e2 / element
                  :mod (t2 / top))
            :ARG2 (s2 / stack)))"
2188,12.7,What are the main operations associated with a stack?,push and pop,push and pop,5,5,5,"# ::snt push and pop
(a / and
      :op1 (p / push-01)
      :op2 (p2 / pop-01))"
2189,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.,5,3,4,"# ::snt When you traverse a tree of any size you will visit each node three times.  Its on the order of 3n or O(n) running time.
(m / multi-sentence
      :snt1 (v / visit-01
            :frequency 3
            :ARG0 (y / you)
            :ARG1 (n / node
                  :mod (e / each))
            :time (t / traverse-01
                  :ARG0 y
                  :ARG1 (t2 / tree
                        :mod (s / size
                              :mod (a / any)))))
      :snt2 (o / order-91
            :ARG1 (ii / it)
            :ARG2 (t3 / time
                  :ARG1-of (r / run-01)
                  :quant (o2 / or
                        :op1 3
                        :op2 (n2 / n)))))"
2190,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.",5,5,5,"# ::snt The Euler tour traversal of a tree begins at the root and visits each node in the tree from the left, then bottom, then right sides.
(a / and
      :op1 (b / begin-01
            :ARG1 (t / traverse-01
                  :ARG0 (c / company
                        :name (n / name
                              :op1 ""Euler""))
                  :ARG1 (t2 / tree))
            :ARG2 (r / root))
      :op2 (v / visit-01
            :ARG0 c
            :ARG1 (n2 / node
                  :mod (e / each)
                  :location t2)
            :source (a2 / and
                  :op1 (l / left-19)
                  :op2 (b2 / bottom)
                  :op3 (s / side
                        :ARG1-of (r2 / right-04)
                        :time (t3 / then)))))"
2191,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Where you visit the in order according to its data value.,2.5,3,2.75,"# ::snt Where you visit the in order according to its data value.
(o / order
      :domain (t / thing
            :location-of (v / visit-01
                  :ARG0 (y / you)))
      :ARG1-of (c / conform-01
            :ARG2 (v2 / value
                  :mod (d / data)
                  :poss t)))"
2192,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. ",0,3.75,1.875,"# ::snt It is a tree that shows how it functions. It contains parents, children, siblings, ancestors and descendents. The use of tree type algorithm is also an alternative sorting algorithm. 
(m / multi-sentence
      :snt1 (t / tree
            :domain (ii / it)
            :ARG0-of (s / show-01
                  :ARG1 (t2 / thing
                        :manner-of (f / function-01
                              :ARG1 (ii2 / it)))))
      :snt2 (c / contain-01
            :ARG0 (ii3 / it)
            :ARG1 (a / and
                  :op1 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG2 (p2 / parent)))
                  :op2 (p3 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 ii3
                              :ARG2 (c2 / child)))
                  :op3 (p4 / person
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 ii3
                              :ARG2 (s2 / sibling)))
                  :op4 (p5 / person
                        :ARG0-of (h4 / have-rel-role-91
                              :ARG1 ii3
                              :ARG2 (a2 / ancestor)))
                  :op5 (p6 / person
                        :ARG0-of (d / descend-01))))
      :snt2 (a3 / algorithm
            :ARG0-of (s3 / sort-01)
            :mod (a4 / alternative)
            :domain (u / use-01
                  :ARG1 (a5 / algorithm
                        :mod (t3 / type
                              :mod (t4 / tree))))
            :mod (a6 / also)))"
2193,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.",5,4.25,4.625,"# ::snt Start from the root, circle around the _whole_ ""tree"", naming each node as you see it.
(a / and
      :op1 (s / start-01
            :mode imperative
            :ARG0 (y / you)
            :ARG2 (r / root))
      :op2 (c / circle-01
            :mode imperative
            :ARG0 y
            :ARG1 (a2 / around
                  :op1 (t / tree
                        :mod (w / whole))))
      :op3 (n / name-01
            :ARG0 y
            :ARG1 (n2 / node
                  :mod (e / each))
            :ARG2 (s2 / see-01
                  :ARG0 y
                  :ARG1 n2)))"
2194,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it is where you visit the parent then you vistit the children,0,3,1.5,"# ::snt it is where you visit the parent then you vistit the children
(t / then
      :op1 (v / visit-01
            :ARG0 (y / you)
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (p2 / parent))))
      :op2 (v2 / visit-01
            :ARG0 y
            :ARG1 (p3 / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 y
                        :ARG2 (c / child)))))"
2195,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.",4,4.25,4.125,"# ::snt To start from the root , traveling left and visiting ever child along the way till you return to the root from the right.
(s / start-01
      :ARG0 (y / you)
      :ARG2 (r / root)
      :manner (a / and
            :op1 (t / travel-01
                  :ARG0 y
                  :ARG1-of (l / left-19))
            :op2 (v / visit-01
                  :ARG0 y
                  :ARG1 (c / child
                        :mod (e / ever))
                  :location (a2 / along
                        :op1 (w / way)))
            :time (u / until
                  :op1 (r2 / return-01
                        :ARG1 y
                        :ARG4 r
                        :source (r3 / right-08)))))"
2196,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.",4,4.25,4.125,"# ::snt Traversing a tree down to it's terminal child and then all of it's siblings, then it traverses up the terminal child's parent and all of it's siblings (repeating the first step if those siblings have children) until the root node has been visited.
(a / and
      :op1 (t / traverse-01
            :ARG0 (ii / it)
            :ARG1 (t2 / tree)
            :direction (d / down)
            :destination (a2 / and
                  :op1 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 t2
                              :ARG2 (c / child
                                    :mod (t3 / terminal))))
                  :op2 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 t2
                              :ARG2 (s / sibling))
                        :mod (a3 / all)))
            :direction d)
      :op2 (t4 / traverse-01
            :ARG0 t2
            :direction (u / up)
            :time (t5 / then)
            :ARG0-of (r / repeat-01
                  :ARG1 (s2 / step-01
                        :ord (o / ordinal-entity
                              :value 1))
                  :condition (h3 / have-03
                        :ARG0 (s3 / sibling
                              :mod (t6 / that))
                        :ARG1 (c2 / child))))
      :time (u2 / until
            :op1 (v / visit-01
                  :ARG1 (n / node
                        :mod (r2 / root)))))"
2197,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.,1.5,3.75,2.625,"# ::snt The Euler tour traversal of a tree the function that iteratively keeps track of the pointer on each node.
(f / function-01
      :ARG1 (t / traverse-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 ""Euler""))
            :ARG1 (t2 / tree))
      :ARG0-of (k / keep-02
            :ARG1 (t3 / track-01
                  :ARG1 (p2 / pointer
                        :location (n2 / node
                              :mod (e / each))))
            :manner (ii / iterative)))"
2198,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You travel the outside edge of the tree, clockwise, while naming each node.",4.5,3,3.75,"# ::snt You travel the outside edge of the tree, clockwise, while naming each node.
(t / travel-01
      :ARG0 (y / you)
      :ARG1 (e / edge
            :mod (o / outside)
            :part-of (t2 / tree))
      :manner (c / clockwise)
      :time (n / name-01
            :ARG0 y
            :ARG1 (n2 / node
                  :mod (e2 / each))))"
2199,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",children to root,0,3.75,1.875,"# ::snt children to root
(r / root-02
      :ARG0 (c / child))"
2200,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",go to the bottom of the left sub tree and visit the parent and then its children,2,3.75,2.875,"# ::snt go to the bottom of the left sub tree and visit the parent and then its children
(a / and
      :op1 (g / go-02
            :mode imperative
            :ARG0 (y / you)
            :ARG4 (b / bottom
                  :part-of (t / tree
                        :mod (s / sub)
                        :ARG1-of (l / left-19))))
      :op2 (v / visit-01
            :mode imperative
            :ARG0 y
            :ARG1 (a2 / and
                  :op1 (p / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 t
                              :ARG2 (p2 / parent)))
                  :op2 (p3 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 t
                              :ARG2 (c / child))
                        :time (t2 / then)))))"
2201,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler tour traverses through the tree in a rubber-band style shape.,3.5,3,3.25,"# ::snt The Euler tour traverses through the tree in a rubber-band style shape.
(t / traverse-01
      :ARG0 (t2 / tour
            :mod (c / company
                  :name (n / name
                        :op1 ""Euler"")))
      :ARG1 (t3 / tree)
      :manner (s / shape
            :mod (r / rubberband)))"
2202,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.",5,3.75,4.375,"# ::snt The Euler tour traversal of a tree is a specific way of navigating a tree that involves following the tree starting at the very top and moving along the left side of the tree first, cupping in to visit the parents of children nodes.  It allows for each node to be visited from the left, the right and the bottom.  The Euler tour first progresses to a left child if there is one, then progresses to it's parent, then it's next child, then it's parent's parent.
(m / multi-sentence
      :snt1 (w / way
            :manner-of (n / navigate-01
                  :ARG1 (t / tree))
            :ARG1-of (s / specific-02)
            :ARG2-of (ii / involve-01
                  :ARG1 (a / and
                        :op1 (f / follow-02
                              :ARG1 (t2 / tree)
                              :ARG1-of (s2 / start-01
                                    :location (t3 / top
                                          :mod (v / very)))))
                  :op2 (m2 / move-01
                        :ARG1 t2
                        :direction (a2 / along
                              :op1 (s3 / side
                                    :ARG1-of (l / left-19))
                              :ord (o / ordinal-entity
                                    :value 1)))
                  :op3 (c / cup-01
                        :ARG0 t2
                        :purpose (v2 / visit-01
                              :ARG0 t2
                              :ARG1 (n2 / node
                                    :ARG0-of (h / have-rel-role-91
                                          :ARG1 (c2 / child)
                                          :ARG2 (p / parent)))))))
      :snt2 (a3 / allow-01
            :ARG0 (ii2 / it)
            :ARG1 (v3 / visit-01
                  :ARG1 (n3 / node
                        :mod (e / each))
                  :source (a4 / and
                        :op1 (l2 / left-19)
                        :op2 (r / right-04)
                        :op3 (b / bottom))))
      :snt3 (a5 / and
            :op1 (p2 / progress-01
                  :ARG1 (t4 / tour
                        :name (n4 / name
                              :op1 ""Euler""))
                  :ARG2 (c3 / child
                        :ARG1-of l2))
            :condition (e2 / exist-01
                  :ARG1 c3))
      :op2 (p3 / progress-01
            :ARG1 t4
            :time (t5 / then)))"
2203,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",it runs through the parents and the children in order,2.5,3,2.75,"# ::snt it runs through the parents and the children in order
(r / run-02
      :ARG0 (ii / it)
      :path (t / through
            :op1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG2 (p2 / parent)))
            :op2 (p3 / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 (c / child))
                  :ARG2 c))
      :manner (o / order))"
2204,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.",2.5,3.75,3.125,"# ::snt it starts node on the left of the root and then proceeds to visits each node in a left to right order, visits the root, and then proceeds to repeat the previous step on the right side of the tree.
(a / and
      :op1 (s / start-01
            :ARG0 (ii / it)
            :ARG1 (n / node
                  :location (r / relative-position
                        :op1 (r2 / root)
                        :direction (l / left))))
      :op2 (p / proceed-01
            :ARG0 ii
            :ARG1 (a2 / and
                  :op1 (v / visit-01
                        :ARG0 ii
                        :ARG1 (n2 / node
                              :mod (e / each))
                        :manner (o / order
                              :ARG1-of (l2 / left-19)
                              :ARG2 (r3 / right-08)))
                  :op2 (v2 / visit-01
                        :ARG0 ii
                        :ARG1 r2))
            :op3 (p2 / proceed-01
                  :ARG0 ii
                  :ARG1 (r4 / repeat-01
                        :ARG0 ii
                        :ARG1 (s2 / step-01
                              :mod (p3 / previous))
                        :location (s3 / side
                              :ARG1-of r3)
                        :part-of (t / tree)))
            :time (t2 / then)))"
2205,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.",3.5,5,4.25,"# ::snt Travel from the root to the farthest left child Backup, travel the leftmost children in the right side repeat until reaching the rightmost child.
(m / multi-sentence
      :snt1 (t / travel-01
            :mode imperative
            :ARG0 (y / you)
            :source (r / root)
            :destination (c / child
                  :ARG1-of (l / left-19)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (f / far)
                        :ARG3 (m2 / most))))
      :snt2 (t2 / travel-01
            :mode imperative
            :ARG0 (y2 / you)
            :ARG1 (c2 / child
                  :ARG1-of (l2 / left-19)
                  :location (s / side
                        :ARG1-of (r2 / right-08))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (l3 / left-19)
                        :ARG3 (m3 / most))))
      :ARG1-of (r3 / repeat-01
            :time (u / until
                  :op1 (r4 / reach-01
                        :ARG0 (y3 / you
                              :ARG1 (c3 / child
                                    :ARG1-of (h3 / have-degree-91
                                          :ARG2 (r5 / right-08)
                                          :ARG3 (m4 / most))))))))"
2206,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).",2.5,3.75,3.125,"# ::snt has preorder, in order, and postorder of a tree.  preorder = puts the parent node in front of the child node(s).  in order = puts the parent node between the left child and right child node(s).  postorder = puts the parent node after the child node(s).
(m / multi-sentence
      :snt1 (h / have-03
            :ARG0 (t / tree)
            :ARG1 (a / and
                  :op1 (p / preorder-01)
                  :op2 (ii / in-order-01)
                  :op3 (p2 / postorder-01)))
      :snt2 (a2 / and
            :op1 (m2 / mean-01
                  :ARG1 (p3 / preorder-01)
                  :ARG2 (p4 / put-01
                        :ARG1 (n / node
                              :mod (p5 / parent))
                        :ARG2 (ii2 / in-front-of
                              :op1 (n2 / node
                                    :mod (c / child)))))
            :op2 (m3 / mean-01
                  :ARG1 (ii3 / in-order-01)
                  :ARG2 (p6 / put-01
                        :ARG1 (n3 / node
                              :mod (p7 / parent))
                        :ARG2 (b / between
                              :op1 (n4 / node
                                    :mod (c2 / child
                                          :ARG1-of (l / left-19)))
                              :op2 (n5 / node
                                    :mod (c3 / child
                                          :ARG1-of (r / right-08))))))
            :op3 (p8 / put-01
                  :ARG1 n5
                  :mod p7)
            :ARG2 (a3 / after
                  :op1 n5)))"
2207,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. ",2.5,5,3.75,"# ::snt The Euler traveral is when you go through a tree looking for nodes to put in the order of left, root, right. Like inOrder traversal. 
(m / multi-sentence
      :snt1 (m2 / mean-01
            :ARG1 (t / traveral
                  :mod (c / company
                        :name (n / name
                              :op1 ""Euler"")))
            :ARG2 (g / go-02
                  :ARG0 (y / you)
                  :ARG1 (t2 / tree)
                  :purpose (l / look-01
                        :ARG0 y
                        :ARG1 (n2 / node
                              :ARG1-of (p / put-01
                                    :ARG2 (o / order
                                          :mod (a / and
                                                :op1 (l2 / left-19)
                                                :op2 (r / root)
                                                :op3 (r2 / right-08))))))))
      :snt2 (r3 / resemble-01
            :ARG2 (t3 / traverse-01
                  :ARG0 (o2 / organization
                        :name (n3 / name
                              :op1 ""InOrder"")))))"
2208,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.",5,5,5,"# ::snt An Euler traversal is a traversal that begins with the root, and travels around the outside of the tree.  Each element in the tree is visited 3 times.  From the left, from the bottom and from the right.
(m / multi-sentence
      :snt1 (t / traverse-01
            :ARG0 (p / person
                  :name (n / name
                        :op1 ""Euler""))
            :ARG1-of (b / begin-01
                  :ARG2 (r / root))
            :ARG0-of (t2 / travel-01
                  :ARG4 (a / around
                        :op1 (o / outside
                              :part-of (t3 / tree)))))
      :snt2 (v / visit-01
            :frequency 3
            :ARG1 (e / element
                  :mod (e2 / each)
                  :part-of (t4 / tree))
            :source (a2 / and
                  :op1 (l / left-19)
                  :op2 (b2 / bottom)
                  :op3 (r2 / right-08))))"
2209,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.,4,3.75,3.875,"# ::snt Euler tour traversal of a tree traverses down each branch straight to one leaf then starts again at the root and repeats until all elements have been traversed.
(t / traverse-01
      :ARG0 (t2 / traverse-01
            :ARG0 (c / company
                  :name (n / name
                        :op1 ""Euler""))
            :ARG1 (t3 / tree))
      :ARG1 (b / branch
            :mod (e / each))
      :direction (d / down)
      :destination (l / leaf
            :quant 1)
      :ARG1-of (s / straight-04)
      :time (t4 / then
            :op1 (s2 / start-01
                  :ARG1 t2
                  :mod (a / again)
                  :location (r / root))
            :op2 (r2 / repeat-01
                  :ARG1 t2
                  :time (u / until
                        :op1 (t5 / traverse-01
                              :ARG1 (e2 / element
                                    :mod (a2 / all)))))))"
2210,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.",4,4.5,4.25,"# ::snt The Euler tour visits every node in a tree, starting with the root and working around the tree counterclockwise. in-order, post-order, and pre-order traversals can be seen as variations of the Euler tour traversal.
(m / multi-sentence
      :snt1 (v / visit-01
            :ARG0 (t / tour
                  :name (n / name
                        :op1 ""Euler""))
            :ARG1 (n2 / node
                  :mod (e / every)
                  :location (t2 / tree))
            :manner (a / and
                  :op1 (s / start-01
                        :ARG0 t
                        :ARG2 (r / root))
                  :op2 (w / work-01
                        :ARG0 t
                        :ARG1 (a2 / around
                              :op1 (t3 / tree))
                        :manner (c / counterclockwise))))
      :snt2 (p / possible-01
            :ARG1 (s2 / see-01
                  :ARG1 (a3 / and
                        :op1 (t4 / traverse-01
                              :ARG1 (o / order
                                    :mod (ii / in-order)))
                        :op2 (t5 / traverse-01
                              :time (a4 / after
                                    :op1 (o2 / order)))
                        :op3 (t6 / traverse-01
                              :time (b / before
                                    :op1 (o3 / order))))
                  :ARG2 (v2 / vary-01
                        :ARG1 (t7 / traverse-01
                              :ARG1 (t8 / tour
                                    :name n
                                    :op1 ""Euler""
                                    :op2 ""Tour""))))))"
2211,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
2212,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree,5,4.5,4.75,"# ::snt to traverse going down to the left then go to the right of last children and back to the top.. kind of like going around the tree
(m / multi-sentence
      :snt1 (t / traverse-01
            :ARG0 (y / you)
            :manner (g / go-02
                  :ARG0 y
                  :ARG4 (l / left-19)
                  :direction (d / down)))
      :snt2 (a / and
            :op1 (g2 / go-02
                  :ARG0 y
                  :ARG4 (r / right-08
                        :ARG1 (c / child
                              :mod (l2 / last))))
            :op2 (g3 / go-02
                  :ARG0 y
                  :ARG4 (t2 / top)
                  :direction (b / back)))
      :snt3 (r2 / resemble-01
            :ARG2 (g4 / go-02
                  :direction (a2 / around
                        :op1 (t3 / tree)))
            :degree (k / kind-of)))"
2213,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.",5,5,5,"# ::snt You recursively visit every node on the list. You visit the node from the left, the bottom, and from the right.
(m / multi-sentence
      :snt1 (v / visit-01
            :ARG0 (y / you)
            :ARG1 (n / node
                  :mod (e / every)
                  :location (l / list))
            :manner (r / recursive))
      :snt2 (v2 / visit-01
            :ARG0 (y2 / you)
            :ARG1 (a / and
                  :op1 (l2 / left-19)
                  :op2 (b / bottom)
                  :op3 (r2 / right-08))))"
2214,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.","the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom",5,5,5,"# ::snt the euler tour is a way to traverse a tree where you come into contact with each node three times, from the left, from the right, and from the bottom
(w / way
      :manner-of (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (t2 / tree
                  :location-of (c / contact-01
                        :ARG0 y
                        :ARG1 (n / node
                              :mod (e / each))
                        :frequency 3
                        :source (a / and
                              :op1 (l / left-19)
                              :op2 (r / right-08)
                              :op3 (b / bottom)))))
      :domain (t3 / tour-01
            :ARG0 (o / organization
                  :name (n2 / name
                        :op1 ""Euler""))))"
2215,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",traversing a tree level by level,0,3,1.5,"# ::snt traversing a tree level by level
(t / traverse-01
      :ARG1 (t2 / tree)
      :manner (l / level
            :mod (b / by)
            :op1-of b))"
2216,12.8,What is the Euler tour traversal of a tree?,"A walk around the tree, starting with the root, where each node is seen three times: from the left, from below, from the right.",The Euler traversal through the tree in a rubber band style shape.,3.5,3,3.25,"# ::snt The Euler traversal through the tree in a rubber band style shape.
(t / traverse-01
      :ARG0 (a / aircraft-type
            :name (n / name
                  :op1 ""Euler""))
      :path (t2 / tree)
      :manner (s / shape
            :mod (r / rubber-band)))"
2217,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.",4.5,4,4.25,"# ::snt if root, set root to NULL else if deleting right leaf, set rightPtr of parent node to NULL else if deleting left leaf, set leftPtr of parent node to NULL else if deleting a left or right subtree child node, set the max leaf child in the left subtree as the new child node.
(a / and
      :op1 (s / set-01
            :ARG1 (r / root)
            :ARG2 (n / null)
            :condition (d / delete-01
                  :ARG1 (l / leaf
                        :ARG1-of (r2 / right-08))))
      :op2 (s2 / set-01
            :ARG1 (s3 / string-entity
                  :value ""rightPtr""
                  :poss (n2 / node
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 (p / parent))))
            :ARG2 (s4 / string-entity
                  :value ""NULL"")
            :condition (d2 / delete-01
                  :ARG1 (l2 / leaf
                        :ARG1-of (l3 / left-19))))
      :op3 (s5 / set-03
            :ARG0 (n3 / node
                  :ARG1 s4
                  :ARG2 (s6 / string-entity
                        :value ""NULL"")
                  :condition (d3 / delete-01
                        :ARG1 (o / or
                              :op1 (n4 / node
                                    :mod (c / child)
                                    :location (s7 / subtree
                                          :ARG1-of l3)))
                        :op2 (n5 / node
                              :mod (c2 / child
                                    :ARG1-of (n6 / new-01))
                              :location s7))
                  :ARG0-of d3)))"
2218,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.",3,3.75,3.375,"# ::snt Traverse the tree and find the node, if the node has no children, simply delete it; otherwise set the node's data equal to the data of one of its children then set the pointer for that child to NULL.
(m / multi-sentence
      :snt1 (a / and
            :op1 (t / traverse-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (t2 / tree))
            :op2 (f / find-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (n / node)))
      :snt2 (d / delete-01
            :mode imperative
            :ARG0 (y2 / you)
            :ARG1 (n2 / node)
            :ARG1-of (s / simple-02)
            :condition (h / have-03
                  :polarity -
                  :ARG0 n2
                  :ARG1 (c / child)))
      :snt3 (s2 / set-02
            :mode imperative
            :ARG0 (y3 / you)
            :ARG1 (d2 / data
                  :poss (n3 / node)
                  :ARG1-of (e / equal-01
                        :ARG2 (d3 / data
                              :poss (c2 / child
                                    :quant 1
                                    :ARG1-of (ii / include-91
                                          :ARG2 (c3 / child
                                                :poss n3))))))
            :ARG2 (n4 / null)
            :time (t3 / then)))"
2219,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node;,3,3.75,3.375,"# ::snt first attaching the elements from the node to be deleting to alternate nodes and then deleting that node.    delete node;
(m / multi-sentence
      :snt1 (a / attach-01
            :ARG1 (e / element
                  :source (n / node)
                  :ARG1-of (d / delete-01))
            :ARG2 (n2 / node
                  :ARG1-of (a2 / alternate-01))
            :ord (o / ordinal-entity
                  :value 1))
      :snt2 (d2 / delete-01
            :ARG1 (n3 / node
                  :mod (t / that))
            :time (t2 / then)))"
2220,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If you delete a node from a tree, you have to link that nodes parents to the children of that node.",2.5,3.75,3.125,"# ::snt If you delete a node from a tree, you have to link that nodes parents to the children of that node.
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (l / link-01
            :ARG0 y
            :ARG1 (p / person
                  :ARG0-of (h / have-rel-role-91
                        :ARG1 (n / node)
                        :ARG2 (p2 / parent)))
            :ARG2 (p3 / person
                  :ARG0-of (h2 / have-rel-role-91
                        :ARG1 (n2 / node
                              :mod (t / that))
                        :ARG2 (c / child))))
      :condition (d / delete-01
            :ARG0 y
            :ARG1 n
            :ARG2 (t2 / tree)))"
2221,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.",0.5,3,1.75,"# ::snt Must delete the information that the node contains (to free up memory/ ""garbage collect"") and also delete the pointer (in that node's ""parent"") that points to the node you wish to delete.
(o / obligate-01
      :ARG2 (a / and
            :op1 (d / delete-01
                  :ARG1 (ii / information
                        :ARG1-of (c / contain-01
                              :ARG0 (n / node))
                        :purpose (f / free-up-02
                              :ARG1 (s / slash
                                    :op1 (m / memory)
                                    :op2 (c2 / collect-01
                                          :ARG1 (g / garbage))))))
            :op2 (d2 / delete-01
                  :ARG1 (p / pointer
                        :location (p2 / parent
                              :poss (n2 / node
                                    :mod (t / that)))
                        :ARG0-of (p3 / point-01
                              :ARG2 (n3 / node
                                    :ARG1-of (d3 / delete-01
                                          :ARG0 (y / you)
                                          :ARG1-of (w / wish-01
                                                :ARG0 y))))
                        :mod (a2 / also)))))"
2222,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.,5,5,5,"# ::snt you replace the node with the largest element of its left subtree or replace it with the smallest element of the right subtree.
(o / or
      :op1 (r / replace-01
            :ARG0 (y / you)
            :ARG1 (n / node)
            :ARG2 (e / element
                  :part-of (s / subtree
                        :ARG1-of (l / left-19)
                        :poss n)
                  :ARG1-of (h / have-degree-91
                        :ARG2 (l2 / large)
                        :ARG3 (m / most))))
      :op2 (r2 / replace-01
            :ARG0 y
            :ARG1 n
            :ARG2 (e2 / element
                  :part-of (s2 / subtree
                        :ARG1-of (r3 / right-04))
                  :ARG1-of (h2 / have-degree-91
                        :ARG2 (s3 / small)
                        :ARG3 (m2 / most)))))"
2223,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.",3.5,4.25,3.875,"# ::snt You traverse the tree till you find the node you are wanting to delete.  If the node has no children you delete it.  If the node has children, before you delete, you find the left-most of its children and attach it to the root then you can delete the node.
(m / multi-sentence
      :snt1 (t / traverse-01
            :ARG0 (y / you)
            :ARG1 (t2 / tree)
            :time (u / until
                  :op1 (f / find-01
                        :ARG0 y
                        :ARG1 (n / node
                              :ARG1-of (d / delete-01
                                    :ARG0 y
                                    :ARG1-of (w / want-01
                                          :ARG0 y))))))
      :snt2 (d2 / delete-01
            :ARG0 (y2 / you)
            :ARG1 (ii / it)
            :condition (h / have-03
                  :polarity -
                  :ARG0 (n2 / node)
                  :ARG1 (c / child)))
      :snt3 (a / and
            :op1 (f2 / find-01
                  :ARG0 y2
                  :ARG1 (c2 / child
                        :ARG1-of (ii2 / include-91
                              :ARG2 (c3 / child)
                              :ARG1-of (l / left-19))))
            :op2 (a2 / attach-01
                  :ARG0 y2
                  :ARG1 c2
                  :ARG2 (r / root))
            :time (b / before
                  :op1 d2
                  :ARG0 y2)))"
2224,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.,3.5,5,4.25,"# ::snt Link the to-be-deleted's left child to the to-be-deleted's parent's left child pointer.
(l / link-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (p / person
            :ARG0-of (h / have-rel-role-91
                  :ARG1 (p2 / person
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG1 (p3 / person
                                    :ARG0-of (h3 / have-rel-role-91
                                          :ARG2 (p4 / parent))
                                    :ARG1-of h3))
                        :ARG2 (c / child
                              :ARG1-of (l2 / leave-17)))
                  :ARG2 (c2 / child
                        :ARG1-of (l3 / leave-17))))
      :ARG2 p3)"
2225,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.,0,3.75,1.875,"# ::snt The way you delete a node from a binary search tree is first you have take the root and then see the nodes that are coming from the root. And delete the nodes and set the root to NULL.
(m / multi-sentence
      :snt1 (w / way
            :manner-of (d / delete-01
                  :ARG0 (y / you)
                  :ARG1 (n / node)
                  :ARG2 (t / tree
                        :mod (s / search-01
                              :mod (b / binary))))
            :domain (a / and
                  :op1 (t2 / take-01
                        :ARG0 y
                        :ARG1 (r / root))
                  :op2 (s2 / see-01
                        :ARG0 y
                        :ARG1 (n2 / node
                              :ARG1-of (c / come-01
                                    :ARG2 r))
                        :time (t3 / then))))
      :snt2 (a2 / and
            :op1 (d2 / delete-01
                  :ARG0 (y2 / you)
                  :ARG1 (n3 / node))
            :op2 (s3 / set-01
                  :ARG0 y2
                  :ARG1 (r2 / root)
                  :ARG2 (n4 / null))))"
2226,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",You remove the element from the tree and move the next highest element from the left into its place.,5,3.75,4.375,"# ::snt You remove the element from the tree and move the next highest element from the left into its place.
(a / and
      :op1 (r / remove-01
            :ARG0 (y / you)
            :ARG1 (e / element)
            :ARG2 (t / tree))
      :op2 (m / move-01
            :ARG0 y
            :ARG1 (e2 / element
                  :ARG1-of (h / have-degree-91
                        :ARG2 (h2 / high-02
                              :ARG1 e2)
                        :ARG3 (m2 / most)
                        :ARG5 (n / next)))
            :ARG2 (p / place-01
                  :ARG0 e2
                  :ARG1 e2)
            :source (l / left-19)))"
2227,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",delete node;,0,3,1.5,"# ::snt delete node;
(d / delete-01
      :ARG1 (n / node))"
2228,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it",5,5,5,"# ::snt the deletion of a node depends upon if it has children and if it is an AVL binary search tree. Assuming it is not an AVL tree, and the node being deleted has no children, you just set its pointer to null. If it has a left child or a right child exclusively, that child replaces the deleted node, if it has two children, the left most child of the right sub tree (or right most child of the left subtree)will replace it
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG0 (d2 / delete-01
                  :ARG1 (n / node))
            :ARG1 (a / and
                  :op1 (h / have-03
                        :ARG0 n
                        :ARG1 (c / child))
                  :op2 (h2 / have-03
                        :polarity -
                        :ARG0 (n2 / node
                              :ARG1-of (d3 / delete-01))
                        :ARG1 (c2 / child))))
      :snt2 (s / set-03
            :ARG0 (y / you)
            :ARG1 (p / pointer
                  :poss (ii / it))
            :ARG2 (n3 / null)
            :condition (a2 / and
                  :op1 (t / tree
                        :polarity -
                        :mod (p2 / product
                              :name (n4 / name
                                    :op1 ""AVL"")))
                  :op2 h2
                  :polarity -
                  :ARG0 n2
                  :ARG1-of d3))
      :ARG1 (c3 / child
            :ARG1-of (l / left-19))
      :op2 (h3 / have-03
            :ARG0 n2
            :ARG1 (c4 / child
                  :ARG1-of (r / right-08))
            :ARG1-of (e / exclusive-02))
      :condition (h4 / have-03
            :ARG0 n2
            :ARG1 (c5 / child
                  :quant 2
                  :ARG1-of (ii2 / include-91
                        :ARG2 (c6 / child
                              :ARG1-of (h5 / have-quant-91
                                    :ARG3 (m2 / most)
                                    :ARG5 (t2 / tree
                                          :ARG1-of r)))))))"
2229,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).",5,5,5,"# ::snt If the node is a leaf, just set it's parent's pointer to null and delete it, if it has a single child, set the parent's pointer to the child and delete; if it has two children, set the node to one of the middle children and remove that child from its previous position as a leaf (rightmost child of the left subtree or leftmost child of the right subtree).
(m / multi-sentence
      :snt1 (a / and
            :op1 (s / set-01
                  :mode imperative
                  :ARG0 (y / you)
                  :ARG1 (p / pointer
                        :poss (p2 / person
                              :ARG0-of (h / have-rel-role-91
                                    :ARG1 (n / node)
                                    :ARG2 (p3 / parent))))
                  :ARG2 (n2 / null)
                  :mod (j / just))
            :op2 (d / delete-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 p)
            :condition (h2 / have-03
                  :ARG0 n
                  :ARG1 (c / child
                        :ARG1-of (s2 / single-02))))
      :snt2 (a2 / and
            :op1 (s3 / set-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 n)
            :ARG2 (c2 / child
                  :quant 1
                  :ARG1-of (ii / include-91
                        :ARG2 (c3 / child
                              :mod (m2 / middle)))))
      :op2 (r / remove-01
            :mode imperative
            :ARG0 y2
            :ARG1 c2
            :ARG2 (p4 / position-01
                  :ARG1 n
                  :ARG2 (l / leaf)
                  :time (p5 / previous)
                  :ARG1-of (m3 / mean-01
                        :ARG2 (o / or
                              :op1 (c4 / child
                                    :ARG1-of (h3 / have-degree-91
                                          :ARG2 (r2 / right-08)
                                          :ARG3 (m4 / most)
                                          :ARG5 (s4 / subtree
                                                :ARG1-of (l2 / left-19))))
                              :op2 (c5 / child
                                    :ARG1-of (h4 / have-degree-91
                                          :ARG2 l2)
                                    :ARG3 (m5 / most)
                                    :ARG5 s4))))))"
2230,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. ",4,3.75,3.875,"# ::snt In a binary search tree, you must first establish a proper replacement for the node you are about to delete, usually a child from the soon to be deleted node.  Once that replacement node has been found, you simply reassign it to where the node that is going to be deleted is.  After the deleted node has been usurped, you remove the deleted node from memory so it may be used again. 
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (e / establish-01
                  :ARG0 y
                  :ARG1 (r / replace-01
                        :ARG1 (n / node
                              :ARG1-of (d / delete-01
                                    :ARG0 y
                                    :time (a / about-to)))
                        :mod (p / proper)
                        :ARG1-of (m2 / mean-01
                              :ARG2 (c / child
                                    :ARG1-of (ii / include-91
                                          :ARG2 (n2 / node
                                                :ARG1-of (d2 / delete-01
                                                      :time (s / soon))))
                                    :mod (u / usual))))
                  :ord (o2 / ordinal-entity
                        :value 1))
            :location (t / tree
                  :mod (s2 / search-01
                        :mod (b / binary))))
      :snt2 (r2 / reassign-01
            :ARG0 (y2 / you)
            :ARG1 (n3 / node
                  :ARG1-of (r3 / replace-01))
            :ARG2 (l / location
                  :location-of (n4 / node
                        :ARG1-of (d3 / delete-01)))
            :ARG1-of (s3 / simple-02))
      :snt3 (r4 / remove-01
            :ARG0 y2
            :ARG1 (n5 / node
                  :ARG1-of (d4 / delete-01))
            :ARG2 (m3 / memory)
            :time (a2 / after
                  :op1 (u2 / usurp-01
                        :ARG1 n5))
            :purpose (p2 / possible-01
                  :ARG1 (u3 / use-01
                        :ARG1 n5
                        :mod (a3 / again)))))"
2231,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.,3,3.75,3.375,"# ::snt It all depends on where the node is located. If its a child it can just be deleted but for a node inside the tree it must be replaced with another node that works in its place.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG0 (ii / it
                  :mod (a / all))
            :ARG1 (l / location
                  :location-of (n / node)))
      :snt2 (c / contrast-01
            :ARG1 (p / possible-01
                  :ARG1 (d2 / delete-01
                        :ARG1 (ii2 / it)
                        :mod (j / just))
                  :condition (c2 / child
                        :domain ii2))
            :ARG2 (o / obligate-01
                  :ARG1 (r / replace-01
                        :ARG1 ii2
                        :ARG2 (n2 / node
                              :mod (a2 / another)
                              :ARG0-of (w / work-09
                                    :ARG1-of r
                                    :ARG2 (n3 / node))))
                  :condition (n4 / node
                        :location (t / tree)))))"
2232,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.",5,5,5,"# ::snt if the node has no children, delete it right away, otherwise, put either the furthest right node on the left side or the furthest left node on the right side in that place and perform a the above on that node to guarantee that it's children get handled properly.
(c / contrast-01
      :ARG1 (d / delete-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / node)
            :time (r / right-away)
            :condition (h / have-03
                  :polarity -
                  :ARG0 n
                  :ARG1 (c2 / child)))
      :ARG2 (a / and
            :op1 (p / put-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (o / or
                        :op1 (n2 / node
                              :ARG1-of (r2 / right-08)
                              :ARG1-of (h2 / have-degree-91
                                    :ARG2 (f / furth)
                                    :ARG3 (m / most)))
                        :op2 (n3 / node
                              :ARG1-of (l / left-19)
                              :ARG1-of (h3 / have-degree-91
                                    :ARG2 (f2 / furth)
                                    :ARG3 (m2 / most))))
                  :ARG2 (p2 / place
                        :mod (t / that)))
            :op2 (p3 / perform-01
                  :ARG0 n3
                  :ARG1 (a2 / above)
                  :location n3
                  :purpose (g / guarantee-01
                        :ARG0 n3
                        :ARG1 (h4 / handle-01
                              :ARG1 (p4 / person
                                    :ARG0-of (h5 / have-rel-role-91
                                          :ARG1 n3
                                          :ARG2 (c3 / child)))
                              :ARG1-of (p5 / proper-02))))))"
2233,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp,0,3.75,1.875,"# ::snt Create a temp Node  Set temp's values to the Node after head  or NULL in the case of only head Node in the list.   Set head equal to temp. Delete temp
(m / multi-sentence
      :snt1 (c / create-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / node
                  :mod (t / temp)))
      :snt2 (o / or
            :op1 (s / set-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (v / value
                        :poss (t2 / temp))
                  :ARG2 (n2 / node)
                  :time (a / after
                        :op1 (h / head)))
            :op2 (s2 / set-01
                  :mode imperative
                  :ARG0 y
                  :ARG1 (e / equal-01
                        :ARG1 (h2 / head)
                        :ARG2 (t3 / temp)))
            :snt3 (d / delete-01
                  :mode imperative
                  :ARG0 (y2 / you)
                  :ARG1 (t4 / temp))))"
2234,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.",5,4.25,4.625,"# ::snt by searching down the tree until you find the node, and replacing the link to that node with the greatest child node on the left subtree or the least child node on the right subtree.
(a / and
      :op1 (s / search-01
            :ARG0 (y / you)
            :ARG1 (t / tree)
            :direction (d / down)
            :time (u / until
                  :op1 (f / find-01
                        :ARG0 y
                        :ARG1 (n / node))))
      :op2 (r / replace-01
            :ARG0 y
            :ARG1 (l / link-01
                  :ARG2 (n2 / node
                        :mod (t2 / that)))
            :ARG2 (o / or
                  :op1 (n3 / node
                        :ARG0-of (h / have-degree-91
                              :ARG1 (c / child)
                              :ARG2 (g / great)
                              :ARG3 (m / most))
                        :location (s2 / subtree
                              :ARG1-of (l2 / left-19)))
                  :op2 (n4 / node
                        :ARG0-of (h2 / have-degree-91
                              :ARG1 (c2 / child)
                              :ARG3 (l3 / least))
                        :location (s3 / subtree
                              :ARG1-of (r2 / right-04))))))"
2235,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.",0,3,1.5,"# ::snt Set the nodes to NULL, where that it doesn't point to anything, and the use the DELETE opertator to clear space from memory.
(a / and
      :op1 (s / set-01
            :mode imperative
            :ARG0 (y / you)
            :ARG1 (n / node)
            :ARG2 (p / point-01
                  :polarity -
                  :ARG0 n
                  :ARG2 (a2 / anything))
            :ARG3 (n2 / null))
      :op2 (u / use-01
            :mode imperative
            :ARG0 y
            :ARG1 (t / thing
                  :ARG0-of (o / operate-01)
                  :ARG1-of (d / delete-01))
            :ARG2 (c / clear-01
                  :ARG0 y
                  :ARG1 (s2 / space)
                  :ARG2 (m / memory))))"
2236,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.",1.5,3.75,2.625,"# ::snt You must first traverse the tree to find the appropriate value.  Then you must make sure that the node is a leaf node.  If it is, then you can delete the pointer to that specific node.
(m / multi-sentence
      :snt1 (o / obligate-01
            :ARG1 (y / you)
            :ARG2 (t / traverse-01
                  :ARG0 y
                  :ARG1 (t2 / tree)
                  :purpose (f / find-01
                        :ARG0 y
                        :ARG1 (v / value
                              :ARG1-of (a / appropriate-02)))
                  :ord (o2 / ordinal-entity
                        :value 1)))
      :snt2 (o3 / obligate-01
            :ARG1 (e / ensure-01
                  :ARG0 (y2 / you)
                  :ARG1 (n / node
                        :mod (l / leaf)
                        :domain (n2 / node))
                  :time (t3 / then)))
      :snt3 (p / possible-01
            :ARG1 (d / delete-01
                  :ARG0 y2
                  :ARG1 (p2 / pointer
                        :destination (n3 / node
                              :ARG1-of (s / specific-02)
                              :mod (t4 / that))))
            :condition (ii / it)))"
2237,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.",5,5,5,"# ::snt if the node is a leaf, you set it's parent's pointer to null. if the node is in the tree you must replace the node with one in the tree: either the largest in the left of the tree or the smallest in the right of the tree. this can be done recursively if needed.
(m / multi-sentence
      :snt1 (s / set-02
            :ARG0 (y / you)
            :ARG1 (p / pointer
                  :poss (p2 / person
                        :ARG0-of (h / have-rel-role-91
                              :ARG1 (n / node)
                              :ARG2 (p3 / parent))))
            :ARG2 (n2 / null)
            :condition (l / leaf
                  :domain n))
      :snt2 (o / obligate-01
            :ARG1 (y2 / you)
            :ARG2 (r / replace-01
                  :ARG0 y2
                  :ARG1 (n3 / node
                        :location (t / tree)
                        :ARG1-of (m2 / mean-01
                              :ARG2 (o2 / or
                                    :op1 (h2 / have-degree-91
                                          :ARG1 (t2 / tree)
                                          :ARG2 (l2 / large)
                                          :ARG3 (m3 / most))
                                    :ARG4 (t3 / tree
                                          :location (l3 / left)))
                              :op2 (h3 / have-degree-91
                                    :ARG1 (n4 / node)
                                    :ARG2 (s2 / small)
                                    :ARG3 (m4 / most)
                                    :ARG5 (t4 / tree
                                          :location (r2 / right)))))))
      :snt2 (p4 / possible-01
            :ARG1 (d / do-02
                  :ARG1 (t5 / this)
                  :manner (r3 / recursive)
                  :condition (n5 / need-01
                        :ARG1 r))))"
2238,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.",4,4.5,4.25,"# ::snt if the node is a leaf it can simply be deallocated/deleted from memory, and its parent's reference to it changed to NULL. If the node has a single child, the pointer to it should be made to point to its child before deleting the node. Should the node have two children, the easiest solution may be to copy the node's entire subtree to a new array or tree, delete the node and all descendants, then add the elements taken from the subtree back into the main tree.
(m / multi-sentence
      :snt1 (a / and
            :op1 (p / possible-01
                  :ARG1 (s / slash
                        :op1 (d / deallocate-01
                              :ARG1 (n / node)
                              :ARG2 (m2 / memory))
                        :op2 (d2 / delete-01
                              :ARG1 n)
                        :ARG1-of (s2 / simple-02)))
            :op2 (c / change-01
                  :ARG1 (r / reference-04
                        :ARG0 (p2 / person
                              :ARG0-of (h / have-rel-role-91
                                    :ARG1 n
                                    :ARG2 (p3 / parent)))
                        :ARG1 n
                        :ARG2 p3)
                  :ARG2 (n2 / null))
            :condition (h2 / have-03
                  :ARG0 (n3 / node)
                  :ARG1 (c2 / child
                        :ARG1-of (s3 / single-02))))
      :snt2 (r2 / recommend-01
            :ARG1 (p4 / pointer-01
                  :ARG1 n3
                  :ARG2 (p5 / person
                        :ARG0-of (h3 / have-rel-role-91
                              :ARG1 n3
                              :ARG2 (c3 / child))))
            :time (b / before
                  :op1 (d3 / delete-01
                        :ARG1 n3)))
      :snt3 (p6 / possible-01
            :ARG1 (s4 / solve-01
                  :ARG1 (a2 / and
                        :op1 (c4 / copy-01
                              :ARG1 (s5 / subtree
                                    :mod (e / entire)
                                    :poss (n4 / node))
                              :ARG2 (o / or
                                    :op1 (a3 / array
                                          :ARG1-of (n5 / new-01))
                                    :op2 (t / tree)))
                        :op2 d3
                        :ARG1 n4))
            :ARG1-of (h4 / have-degree-91)))"
2239,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",not answered,0,0,0,"# ::snt not answered
(a / answer-01
      :polarity -)"
2240,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",you cannot delete a node because that can cause a node to have more than 2 children,0,2.5,1.25,"# ::snt you cannot delete a node because that can cause a node to have more than 2 children
(c / cause-01
      :ARG0 (p / possible-01
            :polarity -
            :ARG1 (d / delete-01
                  :ARG0 (y / you)
                  :ARG1 (n / node)))
      :ARG1 (p2 / possible-01
            :ARG1 (c2 / cause-01
                  :ARG0 d
                  :ARG1 (h / have-03
                        :ARG0 (n2 / node)
                        :ARG1 (c3 / child
                              :quant (m / more-than
                                    :op1 2))))))"
2241,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.",3.5,3.75,3.625,"# ::snt You search the tree for the node using recursion. When you find the node, you determine whether it is a leaf or a internal node. If it is a leaf, you just delete it and set the parent pointer to that node to NULL. If it is a  node, you replace the node with either of the children nodes.
(m / multi-sentence
      :snt1 (s / search-01
            :ARG0 (y / you)
            :ARG1 (t / tree)
            :ARG2 (n / node)
            :manner (u / use-01
                  :ARG0 y
                  :ARG1 (r / recursion)))
      :snt2 (d / determine-01
            :ARG0 (y2 / you)
            :ARG1 (t2 / truth-value
                  :polarity-of (o / or
                        :op1 (l / leaf)
                        :op2 (n2 / node
                              :ARG1-of (ii / internal-02))))
            :time (f / find-01
                  :ARG0 y2
                  :ARG1 n2))
      :snt3 (a / and
            :op1 (d2 / delete-01
                  :ARG0 (y3 / you)
                  :ARG1 (ii2 / it)
                  :mod (j / just))
            :op2 (s2 / set-01
                  :ARG0 y3
                  :ARG1 (p / pointer
                        :mod (p2 / parent)
                        :ARG2 (n3 / node
                              :mod (t3 / that)))
                  :ARG2 (n4 / null)))
      :snt4 (r2 / replace-01
            :ARG0 (y4 / you)
            :ARG1 (n5 / node)
            :ARG2 (n6 / node
                  :mod (e / either)
                  :ARG1-of (ii3 / include-91
                        :ARG2 (n7 / node
                              :ARG0-of (h / have-rel-role-91
                                    :ARG2 (c / child)))))
            :condition n7))"
2242,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller",3,5,4,"# ::snt to delete the node, you would have to link the children nodes that are connected to the node to be deleted to the remaining nodes of the tree in such a way that nodes on the right of the parent node are larger than the parent and nodes on the left of the parent node are smaller
(o / obligate-01
      :ARG1 (y / you)
      :ARG2 (l / link-01
            :ARG0 y
            :ARG1 (n / node
                  :mod (c / child)
                  :ARG1-of (c2 / connect-01
                        :ARG2 (n2 / node
                              :ARG1-of (d / delete-01))))
            :ARG2 (n3 / node
                  :ARG1-of (r / remain-01)
                  :part-of (t / tree))
            :manner (w / way
                  :ARG0-of (c3 / cause-01
                        :ARG1 (a / and
                              :op1 (h / have-degree-91
                                    :ARG1 (n4 / node
                                          :ARG1-of (r2 / right-04
                                                :ARG2 (n5 / node
                                                      :ARG0-of (h2 / have-rel-role-91
                                                            :ARG2 (p / parent)))))
                                    :ARG2 (l2 / large)
                                    :ARG3 (m / more)
                                    :ARG4 n5)
                              :op2 (h3 / have-degree-91
                                    :ARG1 (n6 / node
                                          :location (l3 / left-19
                                                :ARG1 n5))
                                    :ARG2 (s / small)
                                    :ARG3 m)))))
      :purpose (d2 / delete-01
            :ARG0 y
            :ARG1 n6))"
2243,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).","if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.",3.5,3.75,3.625,"# ::snt if it has no children, you just delete it. if it only has one child, just replace the node with whichever child it has. if it has both children, replace it with one of its children, and send the other child down along the other side of the new node.
(m / multi-sentence
      :snt1 (d / delete-01
            :ARG0 (y / you)
            :ARG1 (ii / it)
            :mod (j / just)
            :condition (h / have-03
                  :polarity -
                  :ARG0 (ii2 / it)
                  :ARG1 (c / child)))
      :snt2 (a / and
            :op1 (r / replace-01
                  :ARG0 y
                  :ARG1 (n / node)
                  :ARG2 (c2 / child
                        :mod (w / whichever)
                        :ARG1-of (h2 / have-03
                              :ARG0 (ii3 / it)))
                  :mod (j2 / just))
            :op2 (r2 / replace-01
                  :ARG0 y
                  :ARG1 (ii4 / it)
                  :ARG2 (c3 / child
                        :quant 1
                        :ARG1-of (ii5 / include-91
                              :ARG2 (c4 / child
                                    :poss ii4))))
            :op3 (s / send-01
                  :ARG0 y
                  :ARG1 (c5 / child
                        :mod (o / other))
                  :ARG2 (d2 / down
                        :op1 (s2 / side
                              :mod (o2 / other)
                              :part-of (n2 / node
                                    :ARG1-of (n3 / new-01)))))))"
2244,12.9,How do you delete a node from a binary search tree?,"Find the node, then replace it with the leftmost node from its right subtree (or the rightmost node from its left subtree).",pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place,2,3.75,2.875,"# ::snt pointer to the child and delete it has 2 children set the node to the child and delete it. the node to th middle will then take its place
(m / multi-sentence
      :snt1 (a / and
            :op1 (a2 / and
                  :op1 (p / pointer
                        :destination (c / child))
                  :op2 (d / delete-01
                        :ARG1 c))
            :op2 (h / have-03
                  :ARG0 (p2 / person
                        :quant 2
                        :ARG0-of (h2 / have-rel-role-91
                              :ARG2 (c2 / child))
                        :ARG1-of h2)
                  :ARG1 (a3 / and
                        :op1 (s / set-03
                              :ARG0 p2
                              :ARG1 (n / node)
                              :ARG2 c2)
                        :op2 (d2 / delete-01
                              :ARG0 p2
                              :ARG1 n))))
      :snt2 (t / take-01
            :ARG0 (n2 / node
                  :location (m2 / middle))
            :ARG1 (p3 / place-01
                  :ARG1 n2
                  :ARG2 n2)
            :time (t2 / then)))"
2245,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,Log(n) where n is the number of nodes.,4.5,5,4.75,"# ::snt Log(n) where n is the number of nodes.
(b / be-located-at-91
      :ARG1 (s / string-entity
            :value ""log(n"")
      :ARG2 (n / number
            :quant-of (n2 / node)
            :domain s))"
2246,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n) steps,4.5,5,4.75,"# ::snt log(n) steps
(l / log-01
      :mode imperative
      :ARG0 (y / you)
      :ARG1 (s / step-01
            :quant (n / number)))"
2247,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,The number of levels and the height of the tree,5,5,5,"# ::snt The number of levels and the height of the tree
(a / and
      :op1 (n / number
            :quant-of (l / level))
      :op2 (h / height
            :poss (t / tree)))"
2248,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,It is the same as the height of the tree.,5,5,5,"# ::snt It is the same as the height of the tree.
(s / same-01
      :ARG1 (ii / it)
      :ARG2 (h / height
            :poss (t / tree)))"
2249,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"Given n elements, it would take n/2 steps to find the search criteria.",0,3,1.5,"# ::snt Given n elements, it would take n/2 steps to find the search criteria.
(t / take-10
      :ARG0 (f / find-01
            :ARG1 (c / criteria
                  :purpose (s / search-01)))
      :ARG1 (s2 / step-01
            :quant 2
            :quant (n / n)
            :ARG1-of (c2 / cause-01
                  :ARG0 (e / element
                        :quant n))))"
2250,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log n,4.5,5,4.75,"# ::snt log n
(l / log-01
      :mode imperative
      :ARG0 (y / you))"
2251,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.,0,3.75,1.875,"# ::snt Depends on the location of the node you are looking for. If it is the root it is one step.  else If it is smaller than the current you are on node you go to the left.  If it is larger than the current node you are on go to the right.
(m / multi-sentence
      :snt1 (d / depend-01
            :ARG1 (l / location
                  :location-of (n / node
                        :ARG1-of (l2 / look-01
                              :ARG0 (y / you)))))
      :snt2 (s / step-01
            :quant 1
            :condition (r / root
                  :domain (ii / it)))
      :snt3 (a / and
            :op1 (g / go-01
                  :ARG1 (y2 / you)
                  :ARG2 (l3 / left-19)
                  :condition (h / have-degree-91
                        :ARG1 (ii2 / it)
                        :ARG2 (s2 / small)
                        :ARG3 (m2 / more)
                        :ARG4 (n2 / node
                              :time (c / current))))
            :op2 (g2 / go-01
                  :ARG1 y2
                  :ARG4 (r2 / right-08)
                  :condition (h2 / have-degree-91
                        :ARG1 ii2
                        :ARG2 (l4 / large)
                        :ARG3 (m3 / more)
                        :ARG4 (n3 / node
                              :time (c2 / current))))))"
2252,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,2^n where n is the # of levels the binary tree has,0,3.75,1.875,"# ::snt 2^n where n is the # of levels the binary tree has
(e / equal-01
      :ARG2 2
      :ARG3 (n / number
            :quant-of (l / level
                  :ARG1-of (h / have-03
                        :ARG0 (t / tree
                              :mod (b / binary))))))"
2253,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,The number of steps to search a node is the function n-1.,2.5,4,3.25,"# ::snt The number of steps to search a node is the function n-1.
(f / function-01
      :ARG1 (n / number
            :quant-of (s / step-01
                  :purpose (s2 / search-01
                        :ARG1 (n2 / node))))
      :ARG2 (s3 / string-entity
            :value ""n-1""))"
2254,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"It would take n/2 elements, given n.",0,3,1.5,"# ::snt It would take n/2 elements, given n.
(t / take-10
      :ARG0 (ii / it)
      :ARG1 (e / element
            :quant 2
            :ARG1-of (g / give-01
                  :ARG2 (n / n))))"
2255,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n),4.5,5,4.75,"# ::snt log(n)
(l / log
      :mod (s / string-entity
            :value ""n""))"
2256,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,O(log n),4.5,5,4.75,"# ::snt O(log n)
(s / string-entity
      :value ""o(log n"")"
2257,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,O( Log (n) ),4.5,5,4.75,"# ::snt O( Log (n) )
(o / opine-01
      :ARG0 (ii / i)
      :ARG1 (l / log-01
            :mod (n / n)))"
2258,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.",5,5,5,"# ::snt If the binary search tree is constructed efficiently, best case scenario is O(log n) time.  Where n is the number of items in the tree.  If the binary search tree is constructed poorly, with for instance the root of the tree being 1, and progressing downwards and to the right its children are each more than the last: you have a one-way linear linked list.  That worse case scenario would be a full traversal at O(n) time. Where n is the number of items in the tree.
(m / multi-sentence
      :snt1 (h / have-condition-91
            :ARG1 (s / scenario
                  :mod (c / case
                        :ARG1-of (h2 / have-degree-91
                              :ARG2 (g / good-02
                                    :ARG1 (s2 / scenario)
                                    :ARG3 (m2 / most))))
                  :ARG2 (c2 / construct-01
                        :ARG1 (t / tree
                              :purpose (s3 / search-01
                                    :mod (b / binary)))
                        :manner (p / poor)
                        :example (a / and
                              :op1 (r / root
                                    :quant 1
                                    :part-of (t2 / tree))
                              :op2 (p2 / progress-01
                                    :ARG1 t2
                                    :direction (d / downwards))
                              :op3 (h3 / have-quant-91
                                    :ARG1 (p3 / person
                                          :ARG0-of (h4 / have-rel-role-91
                                                :ARG1 t2
                                                :ARG2 (c3 / child)))
                                    :ARG2 (m3 / more)
                                    :ARG3 (m4 / more)
                                    :ARG4 (p4 / person
                                          :ARG0-of (h5 / have-rel-role-91
                                                :ARG1 t2
                                                :ARG2 (c4 / child))))))
                  :snt2 (h6 / have-03
                        :ARG0 (y / you)
                        :ARG1 (l / list
                              :ARG1-of (l2 / link-01
                                    :mod (l3 / linear))
                              :mod (o / one-way))
                        :ARG1-of (b2 / bad-07
                              :ARG2-of (h7 / have-degree-91
                                    :ARG1 s2
                                    :ARG3 (m5 / more)))))))"
2259,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"N, n being the number of nodes.",2.5,5,3.75,"# ::snt N, n being the number of nodes.
(e / equal-01
      :ARG1 (n / number
            :quant-of (n2 / node))
      :ARG2 (n3 / number
            :quant-of n2))"
2260,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.",5,5,5,"# ::snt depending on the way that the tree is ordered, it could be anywhere between log(n) and N steps.
(p / possible-01
      :ARG1 (b / be-located-at-91
            :ARG1 (ii / it)
            :ARG2 (b2 / between
                  :op1 (l / log)
                  :op2 (s / step
                        :quant (n / number))))
      :ARG1-of (d / depend-01
            :ARG2 (w / way
                  :manner-of (o / order-02
                        :ARG1 (t / tree)))))"
2261,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n),4.5,5,4.75,"# ::snt log(n)
(l / log
      :mod (s / string-entity
            :value ""n""))"
2262,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.",5,5,5,"# ::snt worst case scenario = the number of levels of the tree, ie: the node at the farthest position from the root node.  best case = 1 step if its the root node.
(m / multi-sentence
      :snt1 (m2 / mean-01
            :ARG1 (s / scenario
                  :mod (c / case-04
                        :ARG1-of (h / have-degree-91
                              :ARG2 (b / bad-07
                                    :ARG1 c)
                              :ARG3 (m3 / most))))
            :ARG2 (n / number
                  :quant-of (l / level
                        :part-of (t / tree)
                        :ARG1-of (m4 / mean-01
                              :ARG2 (n2 / node
                                    :location (p / position
                                          :ARG1-of (h2 / have-degree-91
                                                :ARG2 (f / far)
                                                :ARG3 (m5 / most)
                                                :ARG5 (n3 / node
                                                      :location (r / root)))))))))
      :snt2 (m6 / mean-01
            :ARG1 (c2 / case
                  :ARG1-of (h3 / have-degree-91
                        :ARG2 (g / good-02
                              :ARG1 c2)
                        :ARG3 (m7 / most)))
            :ARG2 (s2 / step
                  :quant 1
                  :condition (n4 / node
                        :mod r))))"
2263,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,3 steps at most.  There are 3 cases.,0,3,1.5,"# ::snt 3 steps at most.  There are 3 cases.
(m / multi-sentence
      :snt1 (s / step-01
            :quant 3
            :mod (a / at-most))
      :snt2 (c / case-04
            :quant 3))"
2264,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log(n)    where n equals the total number of nodes in the tree.,4.5,5,4.75,"# ::snt log(n)    where n equals the total number of nodes in the tree.
(e / equal-01
      :ARG1 (s / string-entity
            :value ""n"")
      :ARG2 (n / number
            :quant-of (n2 / node
                  :location (t / tree))
            :ARG1-of (t2 / total-01)))"
2265,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,the same number of steps as the number of levels or generations in the tree,5,5,5,"# ::snt the same number of steps as the number of levels or generations in the tree
(s / same-01
      :ARG1 (n / number
            :quant-of (s2 / step-01))
      :ARG2 (n2 / number
            :quant-of (o / or
                  :op1 (l / level)
                  :op2 (g / generation)
                  :location (t / tree))))"
2266,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.,5,5,5,"# ::snt to find a node in a binary search tree takes at most the same number of steps as there are levels of the tree.
(t / take-10
      :ARG0 (f / find-01
            :ARG1 (n / node
                  :part-of (t2 / tree
                        :mod (s / search-01
                              :mod (b / binary)))))
      :ARG1 (n2 / number
            :quant-of (s2 / step-01)
            :ARG1-of (s3 / same-01
                  :ARG2 (l / level
                        :part-of t2))
            :mod (a / at-most)))"
2267,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree",0,4.5,2.25,"# ::snt three steps visit the root node, then go to right subtree, after visiting right subtree visit left subtree
(a / and
      :op1 (v / visit-01
            :ARG0 (s / step
                  :quant 3)
            :ARG1 (n / node
                  :mod (r / root)))
      :op2 (g / go-02
            :ARG0 s
            :ARG4 (s2 / subtree
                  :ARG1-of (r2 / right-08))
            :time (t / then))
      :op3 (v2 / visit-01
            :ARG0 s
            :ARG1 (s3 / subtree
                  :ARG1-of (l / left-19))
            :time (a2 / after)
            :op1-of a2))"
2268,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,log n,4.5,5,4.75,"# ::snt log n
(l / log-01
      :mode imperative
      :ARG0 (y / you))"
2269,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,( n(n-1) ) / 2,0,3,1.5,"# ::snt ( n(n-1) ) / 2
(s / string-entity
      :value ""n(n-1)""
      :ord (o / ordinal-entity
            :value 2))"
2270,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,2n-1,0,4.75,2.375,"# ::snt 2n-1
(n / number
      :value ""2n-1"")"
2271,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,"it takes at most h steps, where h is the height of the tree.",5,5,5,"# ::snt it takes at most h steps, where h is the height of the tree.
(t / take-10
      :ARG0 (ii / it)
      :ARG1 (s / step-01
            :quant (a / at-most
                  :op1 (h / h)
                  :ARG1-of (m / mean-01
                        :ARG2 (h2 / height
                              :poss (t2 / tree)
                              :domain (s2 / string-entity
                                    :value ""h""))))))"
2272,12.11,How many steps does it take to search a node in a binary search tree?,The height of the tree.,it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node,0,3,1.5,"# ::snt it depends on the install search tree then from there for whatever the case is the it repeats it back along the case of the primary node
(a / and
      :op1 (d / depend-01
            :ARG0 (ii / it)
            :ARG1 (t / tree
                  :ARG0-of (s / search-01
                        :ARG1 (ii2 / install-01))))
      :op2 (r / repeat-01
            :ARG0 ii
            :ARG1 (c / case-04
                  :ARG1 (n / node
                        :mod (p / primary)))
            :direction (b / back)
            :source t
            :purpose (w / whatever
                  :domain (c2 / case-04))))"
